fuzz_support.cc:_ZZN6detail15func_conversionIPFPvP11Fuzz_SystemjjEXadL_ZN3$_18__invokeES3_jjEEEcvPFT_T0_DpT1_EIS1_S1_JjjEEEvENKUlS1_DpT_E_clIJjjEEEDaS1_SG_:
   31|    177|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFPvP11Fuzz_SystemjjEXadL_ZN3$_18__invokeES3_jjEEE13static_casterIS1_EcvT_IS3_EEv:
   22|    177|        {
   23|    177|            return static_cast<To>(obj);
   24|    177|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFPvP11Fuzz_SystemS1_jEXadL_ZN3$_28__invokeES3_S1_jEEEcvPFT_T0_DpT1_EIS1_S1_JS1_jEEEvENKUlS1_DpT_E_clIJS1_jEEEDaS1_SG_:
   31|      8|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFPvP11Fuzz_SystemS1_jEXadL_ZN3$_28__invokeES3_S1_jEEE13static_casterIS1_EcvT_IS3_EEv:
   22|      8|        {
   23|      8|            return static_cast<To>(obj);
   24|      8|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFvP11Fuzz_SystemPvEXadL_ZN3$_38__invokeES2_S3_EEEcvPFT_T0_DpT1_EIvS3_JS3_EEEvENKUlS3_DpT_E_clIJS3_EEEDaS3_SG_:
   31|    190|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFvP11Fuzz_SystemPvEXadL_ZN3$_38__invokeES2_S3_EEE13static_casterIS3_EcvT_IS2_EEv:
   22|    190|        {
   23|    190|            return static_cast<To>(obj);
   24|    190|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketEXadL_ZN3$_48__invokeES2_S3_EEEcvPFT_T0_DpT1_EIiPvJS3_EEEvENKUlSF_DpT_E_clIJS3_EEEDaSF_SH_:
   31|     15|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketEXadL_ZN3$_48__invokeES2_S3_EEE13static_casterIPvEcvT_IS2_EEv:
   22|     15|        {
   23|     15|            return static_cast<To>(obj);
   24|     15|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketPK12Network_AddrEXadL_ZN3$_68__invokeES2_S3_S6_EEEcvPFT_T0_DpT1_EIiPvJS3_S6_EEEvENKUlSI_DpT_E_clIJS3_S6_EEEDaSI_SK_:
   31|     15|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketPK12Network_AddrEXadL_ZN3$_68__invokeES2_S3_S6_EEE13static_casterIPvEcvT_IS2_EEv:
   22|     15|        {
   23|     15|            return static_cast<To>(obj);
   24|     15|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPF6SocketP11Fuzz_SystemiiiEXadL_ZN4$_148__invokeES3_iiiEEEcvPFT_T0_DpT1_EIS1_PvJiiiEEEvENKUlSF_DpT_E_clIJiiiEEEDaSF_SH_:
   31|     15|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPF6SocketP11Fuzz_SystemiiiEXadL_ZN4$_148__invokeES3_iiiEEE13static_casterIPvEcvT_IS3_EEv:
   22|     15|        {
   23|     15|            return static_cast<To>(obj);
   24|     15|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketbEXadL_ZN4$_158__invokeES2_S3_bEEEcvPFT_T0_DpT1_EIiPvJS3_bEEEvENKUlSF_DpT_E_clIJS3_bEEEDaSF_SH_:
   31|     15|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketbEXadL_ZN4$_158__invokeES2_S3_bEEE13static_casterIPvEcvT_IS2_EEv:
   22|     15|        {
   23|     15|            return static_cast<To>(obj);
   24|     15|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketiiPvPmEXadL_ZN4$_168__invokeES2_S3_iiS4_S5_EEEcvPFT_T0_DpT1_EIiS4_JS3_iiS4_S5_EEEvENKUlS4_DpT_E_clIJS3_iiS4_S5_EEEDaS4_SI_:
   31|     15|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketiiPvPmEXadL_ZN4$_168__invokeES2_S3_iiS4_S5_EEE13static_casterIS4_EcvT_IS2_EEv:
   22|     15|        {
   23|     15|            return static_cast<To>(obj);
   24|     15|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketiiPKvmEXadL_ZN4$_178__invokeES2_S3_iiS5_mEEEcvPFT_T0_DpT1_EIiPvJS3_iiS5_mEEEvENKUlSH_DpT_E_clIJS3_iiS5_mEEEDaSH_SJ_:
   31|     60|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketiiPKvmEXadL_ZN4$_178__invokeES2_S3_iiS5_mEEE13static_casterIPvEcvT_IS2_EEv:
   22|     60|        {
   23|     60|            return static_cast<To>(obj);
   24|     60|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFvP11Fuzz_SystemPhmEXadL_ZN4$_188__invokeES2_S3_mEEEcvPFT_T0_DpT1_EIvPvJS3_mEEEvENKUlSF_DpT_E_clIJS3_mEEEDaSF_SH_:
   31|     33|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFvP11Fuzz_SystemPhmEXadL_ZN4$_188__invokeES2_S3_mEEE13static_casterIPvEcvT_IS2_EEv:
   22|     33|        {
   23|     33|            return static_cast<To>(obj);
   24|     33|        }

_ZN6SystemC2ENSt3__110unique_ptrI10Tox_SystemNS0_14default_deleteIS2_EEEENS1_I6MemoryNS3_IS6_EEEENS1_I7NetworkNS3_IS9_EEEENS1_I6RandomNS3_ISC_EEEE:
   38|     18|    : sys(std::move(in_sys))
   39|     18|    , mem(std::move(in_mem))
   40|     18|    , ns(std::move(in_ns))
   41|     18|    , rng(std::move(in_rng))
   42|     18|{
   43|     18|}
_ZN6SystemD2Ev:
   46|     18|System::~System() { }
_ZN11Fuzz_SystemC2ER9Fuzz_Data:
  232|     18|    : System{
  233|     18|        std::make_unique<Tox_System>(),
  234|     18|        std::make_unique<Memory>(Memory{&fuzz_memory_funcs, this}),
  235|     18|        std::make_unique<Network>(Network{&fuzz_network_funcs, this}),
  236|     18|        std::make_unique<Random>(Random{&fuzz_random_funcs, this}),
  237|     18|    }
  238|     18|    , data(input)
  239|     18|{
  240|     18|    sys->mono_time_callback = [](void *self) { return static_cast<Fuzz_System *>(self)->clock; };
  241|     18|    sys->mono_time_user_data = this;
  242|     18|    sys->mem = mem.get();
  243|     18|    sys->ns = ns.get();
  244|     18|    sys->rng = rng.get();
  245|     18|}
fuzz_support.cc:_ZL12report_allocPKcS0_mPv:
   79|    175|{
   80|    175|    if (Fuzz_Data::FUZZ_DEBUG) {
  ------------------
  |  Branch (80:9): [Folded - Ignored]
  ------------------
   81|      0|        printf("%s: %s(%zu): %s\n", name, func, size, ptr == nullptr ? "false" : "true");
  ------------------
  |  Branch (81:55): [True: 0, False: 0]
  ------------------
   82|      0|    }
   83|    175|    return ptr;
   84|    175|}
fuzz_support.cc:_ZNK3$_1clEP11Fuzz_Systemjj:
  103|    177|    ![](Fuzz_System *self, uint32_t nmemb, uint32_t size) {
  104|    177|        return alloc_common<decltype(std::calloc), std::calloc>(
  105|    177|            "calloc", nmemb * size, self->data, nmemb, size);
  106|    177|    },
fuzz_support.cc:_ZL12alloc_commonIDoFPvmmETnT_XadL_Z6callocEEJjjEES0_PKcmR9Fuzz_DataDpT1_:
   88|    177|{
   89|    177|    CONSUME1_OR_RETURN_VAL(
  ------------------
  |  |  122|    177|    if (INPUT.size() < sizeof(TYPE)) {                 \
  |  |  ------------------
  |  |  |  Branch (122:9): [True: 86, False: 91]
  |  |  ------------------
  |  |  123|     86|        return VAL;                                    \
  |  |  124|     86|    }                                                  \
  |  |  125|    177|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   90|     91|        const bool, want_alloc, data, report_alloc("tox1", func, size, Func(args...)));
   91|     91|    if (!want_alloc) {
  ------------------
  |  Branch (91:9): [True: 10, False: 81]
  ------------------
   92|     10|        return nullptr;
   93|     10|    }
   94|     81|    return report_alloc("tox1", func, size, Func(args...));
   95|     91|}
fuzz_support.cc:_ZNK3$_2clEP11Fuzz_SystemPvj:
  108|      8|    ![](Fuzz_System *self, void *ptr, uint32_t size) {
  109|      8|        return alloc_common<decltype(std::realloc), std::realloc>(
  110|      8|            "realloc", size, self->data, ptr, size);
  111|      8|    },
fuzz_support.cc:_ZL12alloc_commonIDoFPvS0_mETnT_XadL_Z7reallocEEJS0_jEES0_PKcmR9Fuzz_DataDpT1_:
   88|      8|{
   89|      8|    CONSUME1_OR_RETURN_VAL(
  ------------------
  |  |  122|      8|    if (INPUT.size() < sizeof(TYPE)) {                 \
  |  |  ------------------
  |  |  |  Branch (122:9): [True: 8, False: 0]
  |  |  ------------------
  |  |  123|      8|        return VAL;                                    \
  |  |  124|      8|    }                                                  \
  |  |  125|      8|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   90|      0|        const bool, want_alloc, data, report_alloc("tox1", func, size, Func(args...)));
   91|      0|    if (!want_alloc) {
  ------------------
  |  Branch (91:9): [True: 0, False: 0]
  ------------------
   92|      0|        return nullptr;
   93|      0|    }
   94|      0|    return report_alloc("tox1", func, size, Func(args...));
   95|      0|}
fuzz_support.cc:_ZNK3$_3clEP11Fuzz_SystemPv:
  113|    190|    ![](Fuzz_System *self, void *ptr) { std::free(ptr); },
fuzz_support.cc:_ZNK3$_4clEP11Fuzz_System6Socket:
  117|     15|    /* .close = */ ![](Fuzz_System *self, Socket sock) { return 0; },
fuzz_support.cc:_ZNK3$_6clEP11Fuzz_System6SocketPK12Network_Addr:
  119|     15|    /* .bind = */ ![](Fuzz_System *self, Socket sock, const Network_Addr *addr) { return 0; },
fuzz_support.cc:_ZNK4$_14clEP11Fuzz_Systemiii:
  162|     15|    /* .socket = */ ![](Fuzz_System *self, int domain, int type, int proto) { return Socket{42}; },
fuzz_support.cc:_ZNK4$_15clEP11Fuzz_System6Socketb:
  163|     15|    /* .socket_nonblock = */ ![](Fuzz_System *self, Socket sock, bool nonblock) { return 0; },
fuzz_support.cc:_ZNK4$_16clEP11Fuzz_System6SocketiiPvPm:
  165|     15|    ![](Fuzz_System *self, Socket sock, int level, int optname, void *optval, size_t *optlen) {
  166|     15|        std::memset(optval, 0, *optlen);
  167|     15|        return 0;
  168|     15|    },
fuzz_support.cc:_ZNK4$_17clEP11Fuzz_System6SocketiiPKvm:
  170|     60|    ![](Fuzz_System *self, Socket sock, int level, int optname, const void *optval, size_t optlen) {
  171|     60|        return 0;
  172|     60|    },
fuzz_support.cc:_ZNK4$_18clEP11Fuzz_SystemPhm:
  177|     33|    ![](Fuzz_System *self, uint8_t *bytes, size_t length) {
  178|       |        // Initialize the buffer with zeros in case there's no randomness left.
  179|     33|        std::fill_n(bytes, length, 0);
  180|       |
  181|       |        // For integers, we copy bytes directly, because we want to control the
  182|       |        // exact values.
  183|     33|        if (length == sizeof(uint8_t) || length == sizeof(uint16_t) || length == sizeof(uint32_t)
  ------------------
  |  Branch (183:13): [True: 0, False: 33]
  |  Branch (183:42): [True: 0, False: 33]
  |  Branch (183:72): [True: 0, False: 33]
  ------------------
  184|     33|            || length == sizeof(uint64_t)) {
  ------------------
  |  Branch (184:16): [True: 8, False: 25]
  ------------------
  185|      8|            CONSUME_OR_RETURN(const uint8_t *data, self->data, length);
  ------------------
  |  |  139|      8|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 8, False: 0]
  |  |  ------------------
  |  |  140|      8|        return;                              \
  |  |  141|      8|    }                                        \
  |  |  142|      8|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
  186|      0|            std::copy(data, data + length, bytes);
  187|      0|            if (Fuzz_Data::FUZZ_DEBUG) {
  ------------------
  |  Branch (187:17): [Folded - Ignored]
  ------------------
  188|      0|                if (length == 1) {
  ------------------
  |  Branch (188:21): [True: 0, False: 0]
  ------------------
  189|      0|                    std::printf("rng: %d (0x%02x)\n", bytes[0], bytes[0]);
  190|      0|                } else {
  191|      0|                    std::printf("rng: %02x..%02x[%zu]\n", bytes[0], bytes[length - 1], length);
  192|      0|                }
  193|      0|            }
  194|      0|            return;
  195|      8|        }
  196|       |
  197|       |        // For nonces and keys, we fill the buffer with the same 1-2 bytes
  198|       |        // repeated. We only need these to be different enough to not often be
  199|       |        // the same.
  200|     25|        assert(length == 24 || length == 32);
  201|       |        // We must cover the case of having only 1 byte left in the input. In
  202|       |        // that case, we will use the same byte for all the bytes in the output.
  203|     25|        const size_t chunk_size = std::max(self->data.size(), static_cast<std::size_t>(2));
  204|     25|        CONSUME_OR_RETURN(const uint8_t *chunk, self->data, chunk_size);
  ------------------
  |  |  139|     25|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 23, False: 2]
  |  |  ------------------
  |  |  140|     23|        return;                              \
  |  |  141|     23|    }                                        \
  |  |  142|     25|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
  205|      2|        if (chunk_size == 2) {
  ------------------
  |  Branch (205:13): [True: 1, False: 1]
  ------------------
  206|      1|            std::fill_n(bytes, length / 2, chunk[0]);
  207|      1|            std::fill_n(bytes + length / 2, length / 2, chunk[1]);
  208|      1|        } else {
  209|      1|            std::fill_n(bytes, length, chunk[0]);
  210|      1|        }
  211|      2|        if (Fuzz_Data::FUZZ_DEBUG) {
  ------------------
  |  Branch (211:13): [Folded - Ignored]
  ------------------
  212|      0|            if (length == 1) {
  ------------------
  |  Branch (212:17): [True: 0, False: 0]
  ------------------
  213|      0|                std::printf("rng: %d (0x%02x)\n", bytes[0], bytes[0]);
  214|      0|            } else {
  215|      0|                std::printf("rng: %02x..%02x[%zu]\n", bytes[0], bytes[length - 1], length);
  216|      0|            }
  217|      0|        }
  218|      2|    },

_ZNK9Fuzz_Data4sizeEv:
   69|    282|    std::size_t size() const { return size_; }
_ZN9Fuzz_Data7consumeEPKcm:
   75|     40|    {
   76|     40|        const uint8_t *val = data_;
   77|     40|        if (FUZZ_DEBUG) {
  ------------------
  |  Branch (77:13): [Folded - Ignored]
  ------------------
   78|      0|            if (pos() == TRACE_TRAP) {
  ------------------
  |  Branch (78:17): [True: 0, False: 0]
  ------------------
   79|      0|                __asm__("int $3");
   80|      0|            }
   81|      0|            if (count == 1) {
  ------------------
  |  Branch (81:17): [True: 0, False: 0]
  ------------------
   82|      0|                std::printf("consume@%zu(%s): %d (0x%02x)\n", pos(), func, val[0], val[0]);
   83|      0|            } else if (count != 0) {
  ------------------
  |  Branch (83:24): [True: 0, False: 0]
  ------------------
   84|      0|                std::printf("consume@%zu(%s): %02x..%02x[%zu]\n", pos(), func, val[0],
   85|      0|                    val[count - 1], count);
   86|      0|            }
   87|      0|        }
   88|     40|        data_ += count;
   89|     40|        size_ -= count;
   90|     40|        return val;
   91|     40|    }
net_crypto_fuzz_test.cc:_Z18fuzz_select_targetIJXadL_ZN12_GLOBAL__N_113TestNetCryptoER9Fuzz_DataEEEEvPKhm:
  183|     20|{
  184|     20|    Fuzz_Data input{data, size};
  185|       |
  186|     20|    CONSUME1_OR_RETURN(const uint8_t, selector, input);
  ------------------
  |  |  105|     20|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 0, False: 20]
  |  |  ------------------
  |  |  106|      0|        return;                               \
  |  |  107|      0|    }                                         \
  |  |  108|     20|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
  187|     20|    return Fuzz_Target_Selector<Args...>::select(selector, input);
  188|     20|}
_ZN9Fuzz_DataC2EPKhm:
   32|     20|        : data_(input_data)
   33|     20|        , base_(input_data)
   34|     20|        , size_(input_size)
   35|     20|    {
   36|     20|    }
_ZN9Fuzz_Data8consume1EPKc:
   68|    111|    Consumer consume1(const char *func) { return Consumer{func, *this}; }
_ZN9Fuzz_Data8ConsumercvT_IhEEv:
   60|     20|        {
   61|     20|            const uint8_t *bytes = fd.consume(func, sizeof(T));
   62|     20|            T val;
   63|     20|            std::memcpy(&val, bytes, sizeof(T));
   64|     20|            return val;
   65|     20|        }
net_crypto_fuzz_test.cc:_ZN20Fuzz_Target_SelectorIJXadL_ZN12_GLOBAL__N_113TestNetCryptoER9Fuzz_DataEEEE6selectEhS2_:
  164|     20|    {
  165|     20|        if (selector == sizeof...(Args)) {
  ------------------
  |  Branch (165:13): [True: 19, False: 1]
  ------------------
  166|     19|            return Arg(input);
  167|     19|        }
  168|      1|        return Fuzz_Target_Selector<Args...>::select(selector, input);
  169|     20|    }
_ZN20Fuzz_Target_SelectorIJEE6selectEhR9Fuzz_Data:
  175|      1|    {
  176|       |        // The selector selected no function, so we do nothing and rely on the
  177|       |        // fuzzer to come up with a better selector.
  178|      1|    }
_ZN9Fuzz_Data8ConsumercvbEv:
   46|     91|        {
   47|       |            // Special case because memcpy causes UB for bool (which can't be
   48|       |            // anything other than 0 or 1).
   49|     91|            const bool val = fd.data_[0];
   50|     91|            if (FUZZ_DEBUG) {
  ------------------
  |  Branch (50:17): [Folded - Ignored]
  ------------------
   51|      0|                std::printf("consume@%zu(%s): bool %s\n", fd.pos(), func, val ? "true" : "false");
  ------------------
  |  Branch (51:75): [True: 0, False: 0]
  ------------------
   52|      0|            }
   53|     91|            ++fd.data_;
   54|     91|            --fd.size_;
   55|     91|            return val;
   56|     91|        }

dht_get_net:
  165|     36|{
  166|     36|    return dht->net;
  167|     36|}
get_close_nodes:
  733|      8|{
  734|      8|    return get_somewhat_close_nodes(
  735|      8|               dht->cur_time, public_key, nodes_list,
  736|      8|               sa_family, dht->close_clientlist,
  737|      8|               dht->friends_list, dht->num_friends,
  738|      8|               is_lan, want_announce);
  739|      8|}
dht_addfriend:
 1571|     16|{
 1572|     16|    const uint32_t friend_num = index_of_friend_pk(dht->friends_list, dht->num_friends, public_key);
 1573|       |
 1574|     16|    if (friend_num != UINT32_MAX) { /* Is friend already in DHT? */
  ------------------
  |  Branch (1574:9): [True: 8, False: 8]
  ------------------
 1575|      8|        DHT_Friend *const dht_friend = &dht->friends_list[friend_num];
 1576|      8|        const uint32_t tmp_lock_token = dht_friend_lock(dht_friend, ip_callback, data, number);
 1577|       |
 1578|      8|        if (tmp_lock_token == 0) {
  ------------------
  |  Branch (1578:13): [True: 0, False: 8]
  ------------------
 1579|      0|            return -1;
 1580|      0|        }
 1581|       |
 1582|      8|        return 0;
 1583|      8|    }
 1584|       |
 1585|      8|    DHT_Friend *const temp = (DHT_Friend *)mem_vrealloc(dht->mem, dht->friends_list, dht->num_friends + 1, sizeof(DHT_Friend));
 1586|       |
 1587|      8|    if (temp == nullptr) {
  ------------------
  |  |   63|      8|#define nullptr NULL
  ------------------
  |  Branch (1587:9): [True: 0, False: 8]
  ------------------
 1588|      0|        return -1;
 1589|      0|    }
 1590|       |
 1591|      8|    dht->friends_list = temp;
 1592|      8|    DHT_Friend *const dht_friend = &dht->friends_list[dht->num_friends];
 1593|      8|    *dht_friend = empty_dht_friend;
 1594|      8|    memcpy(dht_friend->public_key, public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      8|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 1595|       |
 1596|      8|    dht_friend->nat.nat_ping_id = random_u64(dht->rng);
 1597|      8|    ++dht->num_friends;
 1598|       |
 1599|      8|    *lock_token = dht_friend_lock(dht_friend, ip_callback, data, number);
 1600|      8|    assert(*lock_token != 0); // Friend was newly allocated
 1601|       |
 1602|      8|    dht_friend->num_to_bootstrap = get_close_nodes(dht, dht_friend->public_key, dht_friend->to_bootstrap, net_family_unspec(),
 1603|      8|                                   true, false);
 1604|       |
 1605|      8|    return 0;
 1606|      8|}
cryptopacket_registerhandler:
 2412|     21|{
 2413|     21|    dht->cryptopackethandlers[byte].function = cb;
 2414|     21|    dht->cryptopackethandlers[byte].object = object;
 2415|     21|}
new_dht:
 2489|     13|{
 2490|     13|    if (net == nullptr) {
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
  |  Branch (2490:9): [True: 0, False: 13]
  ------------------
 2491|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2492|      0|    }
 2493|       |
 2494|     13|    DHT *const dht = (DHT *)mem_alloc(mem, sizeof(DHT));
 2495|       |
 2496|     13|    if (dht == nullptr) {
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
  |  Branch (2496:9): [True: 1, False: 12]
  ------------------
 2497|      1|        LOGGER_ERROR(log, "failed to allocate DHT struct (%lu bytes)", (unsigned long)sizeof(DHT));
  ------------------
  |  |   80|      1|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      1|    do {                                                                         \
  |  |  |  |   70|      1|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      2|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      1|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      1|        }                                                                        \
  |  |  |  |   73|      1|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2498|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
 2499|      1|    }
 2500|       |
 2501|     12|    dht->ns = ns;
 2502|     12|    dht->mono_time = mono_time;
 2503|     12|    dht->cur_time = mono_time_get(mono_time);
 2504|     12|    dht->log = log;
 2505|     12|    dht->net = net;
 2506|     12|    dht->rng = rng;
 2507|     12|    dht->mem = mem;
 2508|       |
 2509|     12|    dht->hole_punching_enabled = hole_punching_enabled;
 2510|     12|    dht->lan_discovery_enabled = lan_discovery_enabled;
 2511|       |
 2512|     12|    dht->ping = ping_new(mem, mono_time, rng, dht);
 2513|       |
 2514|     12|    if (dht->ping == nullptr) {
  ------------------
  |  |   63|     12|#define nullptr NULL
  ------------------
  |  Branch (2514:9): [True: 3, False: 9]
  ------------------
 2515|      3|        LOGGER_ERROR(log, "failed to initialise ping");
  ------------------
  |  |   80|      3|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      3|    do {                                                                         \
  |  |  |  |   70|      3|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      6|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      3|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      3|        }                                                                        \
  |  |  |  |   73|      3|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2516|      3|        kill_dht(dht);
 2517|      3|        return nullptr;
  ------------------
  |  |   63|      3|#define nullptr NULL
  ------------------
 2518|      3|    }
 2519|       |
 2520|      9|    networking_registerhandler(dht->net, NET_PACKET_NODES_REQUEST, &handle_nodes_request, dht);
 2521|      9|    networking_registerhandler(dht->net, NET_PACKET_NODES_RESPONSE, &handle_nodes_response, dht);
 2522|      9|    networking_registerhandler(dht->net, NET_PACKET_CRYPTO, &cryptopacket_handle, dht);
 2523|      9|    networking_registerhandler(dht->net, NET_PACKET_LAN_DISCOVERY, &handle_lan_discovery, dht);
 2524|      9|    cryptopacket_registerhandler(dht, CRYPTO_PACKET_NAT_PING, &handle_nat_ping, dht);
  ------------------
  |  |   68|      9|#define CRYPTO_PACKET_NAT_PING      254 // NAT ping crypto packet ID.
  ------------------
 2525|       |
 2526|      9|#ifdef CHECK_ANNOUNCE_NODE
 2527|      9|    networking_registerhandler(dht->net, NET_PACKET_DATA_SEARCH_RESPONSE, &handle_data_search_response, dht);
 2528|      9|#endif /* CHECK_ANNOUNCE_NODE */
 2529|       |
 2530|      9|    crypto_new_keypair(rng, dht->self_public_key, dht->self_secret_key);
 2531|       |
 2532|      9|    dht->shared_keys_recv = shared_key_cache_new(log, mono_time, mem, dht->self_secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   57|      9|#define KEYS_TIMEOUT 600
  ------------------
                  dht->shared_keys_recv = shared_key_cache_new(log, mono_time, mem, dht->self_secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   56|      9|#define MAX_KEYS_PER_SLOT 4
  ------------------
 2533|      9|    dht->shared_keys_sent = shared_key_cache_new(log, mono_time, mem, dht->self_secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   57|      9|#define KEYS_TIMEOUT 600
  ------------------
                  dht->shared_keys_sent = shared_key_cache_new(log, mono_time, mem, dht->self_secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   56|      9|#define MAX_KEYS_PER_SLOT 4
  ------------------
 2534|       |
 2535|      9|    if (dht->shared_keys_recv == nullptr || dht->shared_keys_sent == nullptr) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
                  if (dht->shared_keys_recv == nullptr || dht->shared_keys_sent == nullptr) {
  ------------------
  |  |   63|      8|#define nullptr NULL
  ------------------
  |  Branch (2535:9): [True: 1, False: 8]
  |  Branch (2535:45): [True: 0, False: 8]
  ------------------
 2536|      1|        LOGGER_ERROR(log, "failed to initialise shared key cache");
  ------------------
  |  |   80|      1|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      1|    do {                                                                         \
  |  |  |  |   70|      1|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      2|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      1|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      1|        }                                                                        \
  |  |  |  |   73|      1|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2537|      1|        kill_dht(dht);
 2538|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
 2539|      1|    }
 2540|       |
 2541|      8|    dht->dht_ping_array = ping_array_new(mem, DHT_PING_ARRAY_SIZE, PING_TIMEOUT);
  ------------------
  |  |   46|      8|#define DHT_PING_ARRAY_SIZE 512
  ------------------
                  dht->dht_ping_array = ping_array_new(mem, DHT_PING_ARRAY_SIZE, PING_TIMEOUT);
  ------------------
  |  |   43|      8|#define PING_TIMEOUT 5
  ------------------
 2542|       |
 2543|      8|    if (dht->dht_ping_array == nullptr) {
  ------------------
  |  |   63|      8|#define nullptr NULL
  ------------------
  |  Branch (2543:9): [True: 0, False: 8]
  ------------------
 2544|      0|        LOGGER_ERROR(log, "failed to initialise ping array");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2545|      0|        kill_dht(dht);
 2546|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2547|      0|    }
 2548|       |
 2549|     24|    for (uint32_t i = 0; i < DHT_FAKE_FRIEND_NUMBER; ++i) {
  ------------------
  |  |   61|     24|#define DHT_FAKE_FRIEND_NUMBER 2
  ------------------
  |  Branch (2549:26): [True: 16, False: 8]
  ------------------
 2550|     16|        uint8_t random_public_key_bytes[CRYPTO_PUBLIC_KEY_SIZE];
 2551|     16|        uint8_t random_secret_key_bytes[CRYPTO_SECRET_KEY_SIZE];
 2552|       |
 2553|     16|        crypto_new_keypair(rng, random_public_key_bytes, random_secret_key_bytes);
 2554|       |
 2555|     16|        uint32_t token; // We don't intend to delete these ever, but need to pass the token
 2556|     16|        if (dht_addfriend(dht, random_public_key_bytes, nullptr, nullptr, 0, &token) != 0) {
  ------------------
  |  |   63|     16|#define nullptr NULL
  ------------------
                      if (dht_addfriend(dht, random_public_key_bytes, nullptr, nullptr, 0, &token) != 0) {
  ------------------
  |  |   63|     16|#define nullptr NULL
  ------------------
  |  Branch (2556:13): [True: 0, False: 16]
  ------------------
 2557|      0|            LOGGER_ERROR(log, "failed to add initial random seed DHT friends");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2558|      0|            kill_dht(dht);
 2559|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2560|      0|        }
 2561|     16|    }
 2562|       |
 2563|      8|    if (dht->num_friends != DHT_FAKE_FRIEND_NUMBER) {
  ------------------
  |  |   61|      8|#define DHT_FAKE_FRIEND_NUMBER 2
  ------------------
  |  Branch (2563:9): [True: 8, False: 0]
  ------------------
 2564|      8|        LOGGER_ERROR(log, "the RNG provided seems to be broken: it generated the same keypair twice");
  ------------------
  |  |   80|      8|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      8|    do {                                                                         \
  |  |  |  |   70|      8|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     16|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      8|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      8|        }                                                                        \
  |  |  |  |   73|      8|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2565|      8|        kill_dht(dht);
 2566|      8|        return nullptr;
  ------------------
  |  |   63|      8|#define nullptr NULL
  ------------------
 2567|      8|    }
 2568|       |
 2569|      0|    return dht;
 2570|      8|}
kill_dht:
 2594|     12|{
 2595|     12|    if (dht == nullptr) {
  ------------------
  |  |   63|     12|#define nullptr NULL
  ------------------
  |  Branch (2595:9): [True: 0, False: 12]
  ------------------
 2596|      0|        return;
 2597|      0|    }
 2598|       |
 2599|     12|    networking_registerhandler(dht->net, NET_PACKET_NODES_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|     12|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht->net, NET_PACKET_NODES_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|     12|#define nullptr NULL
  ------------------
 2600|     12|    networking_registerhandler(dht->net, NET_PACKET_NODES_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|     12|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht->net, NET_PACKET_NODES_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|     12|#define nullptr NULL
  ------------------
 2601|     12|    networking_registerhandler(dht->net, NET_PACKET_CRYPTO, nullptr, nullptr);
  ------------------
  |  |   63|     12|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht->net, NET_PACKET_CRYPTO, nullptr, nullptr);
  ------------------
  |  |   63|     12|#define nullptr NULL
  ------------------
 2602|     12|    networking_registerhandler(dht->net, NET_PACKET_LAN_DISCOVERY, nullptr, nullptr);
  ------------------
  |  |   63|     12|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht->net, NET_PACKET_LAN_DISCOVERY, nullptr, nullptr);
  ------------------
  |  |   63|     12|#define nullptr NULL
  ------------------
 2603|     12|    cryptopacket_registerhandler(dht, CRYPTO_PACKET_NAT_PING, nullptr, nullptr);
  ------------------
  |  |   68|     12|#define CRYPTO_PACKET_NAT_PING      254 // NAT ping crypto packet ID.
  ------------------
                  cryptopacket_registerhandler(dht, CRYPTO_PACKET_NAT_PING, nullptr, nullptr);
  ------------------
  |  |   63|     12|#define nullptr NULL
  ------------------
                  cryptopacket_registerhandler(dht, CRYPTO_PACKET_NAT_PING, nullptr, nullptr);
  ------------------
  |  |   63|     12|#define nullptr NULL
  ------------------
 2604|       |
 2605|     12|    shared_key_cache_free(dht->shared_keys_recv);
 2606|     12|    shared_key_cache_free(dht->shared_keys_sent);
 2607|     12|    ping_array_kill(dht->dht_ping_array);
 2608|     12|    ping_kill(dht->mem, dht->ping);
 2609|     12|    mem_delete(dht->mem, dht->friends_list);
 2610|     12|    mem_delete(dht->mem, dht->loaded_nodes_list);
 2611|     12|    crypto_memzero(dht->self_secret_key, sizeof(dht->self_secret_key));
 2612|     12|    mem_delete(dht->mem, dht);
 2613|     12|}
DHT.c:get_somewhat_close_nodes:
  704|      8|{
  705|     40|    for (uint16_t i = 0; i < MAX_SENT_NODES; ++i) {
  ------------------
  |  |   40|     40|#define MAX_SENT_NODES 4
  ------------------
  |  Branch (705:26): [True: 32, False: 8]
  ------------------
  706|     32|        nodes_list[i] = empty_node_format;
  707|     32|    }
  708|       |
  709|      8|    uint32_t num_nodes = 0;
  710|      8|    get_close_nodes_inner(
  711|      8|        cur_time, public_key,
  712|      8|        nodes_list, &num_nodes,
  713|      8|        sa_family, close_clientlist, LCLIENT_LIST,
  ------------------
  |  |   35|      8|#define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  ------------------
  |  |  |  |   32|      8|#define LCLIENT_LENGTH 128
  |  |  ------------------
  |  |               #define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  ------------------
  |  |  |  |   31|      8|#define LCLIENT_NODES MAX_FRIEND_CLIENTS
  |  |  |  |  ------------------
  |  |  |  |  |  |   29|      8|#define MAX_FRIEND_CLIENTS 8
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  714|      8|        is_lan, want_announce);
  715|       |
  716|     16|    for (uint16_t i = 0; i < friends_list_size; ++i) {
  ------------------
  |  Branch (716:26): [True: 8, False: 8]
  ------------------
  717|      8|        const DHT_Friend *dht_friend = &friends_list[i];
  718|       |
  719|      8|        get_close_nodes_inner(
  720|      8|            cur_time, public_key,
  721|      8|            nodes_list, &num_nodes,
  722|      8|            sa_family, dht_friend->client_list, MAX_FRIEND_CLIENTS,
  ------------------
  |  |   29|      8|#define MAX_FRIEND_CLIENTS 8
  ------------------
  723|      8|            is_lan, want_announce);
  724|      8|    }
  725|       |
  726|      8|    return num_nodes;
  727|      8|}
DHT.c:get_close_nodes_inner:
  637|     16|{
  638|     16|    if (!net_family_is_ipv4(sa_family) && !net_family_is_ipv6(sa_family) && !net_family_is_unspec(sa_family)) {
  ------------------
  |  Branch (638:9): [True: 16, False: 0]
  |  Branch (638:43): [True: 16, False: 0]
  |  Branch (638:77): [True: 0, False: 16]
  ------------------
  639|      0|        return;
  640|      0|    }
  641|       |
  642|     16|    uint32_t num_nodes = *num_nodes_ptr;
  643|       |
  644|  8.27k|    for (uint32_t i = 0; i < client_list_length; ++i) {
  ------------------
  |  Branch (644:26): [True: 8.25k, False: 16]
  ------------------
  645|  8.25k|        const Client_data *const client = &client_list[i];
  646|       |
  647|       |        /* node already in list? */
  648|  8.25k|        if (index_of_node_pk(nodes_list, MAX_SENT_NODES, client->public_key) != UINT32_MAX) {
  ------------------
  |  |   40|  8.25k|#define MAX_SENT_NODES 4
  ------------------
  |  Branch (648:13): [True: 8.25k, False: 0]
  ------------------
  649|  8.25k|            continue;
  650|  8.25k|        }
  651|       |
  652|      0|        const IPPTsPng *ipptp;
  653|       |
  654|      0|        if (net_family_is_ipv4(sa_family)) {
  ------------------
  |  Branch (654:13): [True: 0, False: 0]
  ------------------
  655|      0|            ipptp = &client->assoc4;
  656|      0|        } else if (net_family_is_ipv6(sa_family)) {
  ------------------
  |  Branch (656:20): [True: 0, False: 0]
  ------------------
  657|      0|            ipptp = &client->assoc6;
  658|      0|        } else if (client->assoc4.timestamp >= client->assoc6.timestamp) {
  ------------------
  |  Branch (658:20): [True: 0, False: 0]
  ------------------
  659|      0|            ipptp = &client->assoc4;
  660|      0|        } else {
  661|      0|            ipptp = &client->assoc6;
  662|      0|        }
  663|       |
  664|       |        /* node not in a good condition? */
  665|      0|        if (assoc_timeout(cur_time, ipptp)) {
  ------------------
  |  Branch (665:13): [True: 0, False: 0]
  ------------------
  666|      0|            continue;
  667|      0|        }
  668|       |
  669|       |        /* don't send LAN ips to non LAN peers */
  670|      0|        if (ip_is_lan(&ipptp->ip_port.ip) && !is_lan) {
  ------------------
  |  Branch (670:13): [True: 0, False: 0]
  |  Branch (670:46): [True: 0, False: 0]
  ------------------
  671|      0|            continue;
  672|      0|        }
  673|       |
  674|      0|#ifdef CHECK_ANNOUNCE_NODE
  675|       |
  676|      0|        if (want_announce && !client->announce_node) {
  ------------------
  |  Branch (676:13): [True: 0, False: 0]
  |  Branch (676:30): [True: 0, False: 0]
  ------------------
  677|      0|            continue;
  678|      0|        }
  679|       |
  680|      0|#endif /* CHECK_ANNOUNCE_NODE */
  681|       |
  682|      0|        if (num_nodes < MAX_SENT_NODES) {
  ------------------
  |  |   40|      0|#define MAX_SENT_NODES 4
  ------------------
  |  Branch (682:13): [True: 0, False: 0]
  ------------------
  683|      0|            memcpy(nodes_list[num_nodes].public_key, client->public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      0|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  684|      0|            nodes_list[num_nodes].ip_port = ipptp->ip_port;
  685|      0|            ++num_nodes;
  686|      0|        } else {
  687|       |            // TODO(zugz): this could be made significantly more efficient by
  688|       |            // using a version of add_to_list which works with a sorted list.
  689|      0|            add_to_list(nodes_list, MAX_SENT_NODES, client->public_key, &ipptp->ip_port, public_key);
  ------------------
  |  |   40|      0|#define MAX_SENT_NODES 4
  ------------------
  690|      0|        }
  691|      0|    }
  692|       |
  693|     16|    *num_nodes_ptr = num_nodes;
  694|     16|}
DHT.c:index_of_node_pk:
  490|  8.25k|{
  491|  8.25k|    assert(size == 0 || array != nullptr);
  492|  8.25k|    for (uint32_t i = 0; i < size; ++i) {
  ------------------
  |  Branch (492:26): [True: 8.25k, False: 0]
  ------------------
  493|  8.25k|        if (pk_equal(array[i].public_key, pk)) {
  ------------------
  |  Branch (493:13): [True: 8.25k, False: 0]
  ------------------
  494|  8.25k|            return i;
  495|  8.25k|        }
  496|  8.25k|    }
  497|       |
  498|      0|    return UINT32_MAX;
  499|  8.25k|}
DHT.c:index_of_friend_pk:
  478|     16|{
  479|     16|    assert(size == 0 || array != nullptr);
  480|     16|    for (uint32_t i = 0; i < size; ++i) {
  ------------------
  |  Branch (480:26): [True: 8, False: 8]
  ------------------
  481|      8|        if (pk_equal(array[i].public_key, pk)) {
  ------------------
  |  Branch (481:13): [True: 8, False: 0]
  ------------------
  482|      8|            return i;
  483|      8|        }
  484|      8|    }
  485|       |
  486|      8|    return UINT32_MAX;
  487|     16|}
DHT.c:dht_friend_lock:
 1517|     16|{
 1518|       |    // find first free slot
 1519|     16|    uint8_t lock_num;
 1520|     16|    uint32_t lock_token = 0;
 1521|     24|    for (lock_num = 0; lock_num < DHT_FRIEND_MAX_LOCKS; ++lock_num) {
  ------------------
  |  |   53|     24|#define DHT_FRIEND_MAX_LOCKS 32
  ------------------
  |  Branch (1521:24): [True: 24, False: 0]
  ------------------
 1522|     24|        lock_token = UINT32_C(1) << lock_num;
 1523|     24|        if ((dht_friend->lock_flags & lock_token) == 0) {
  ------------------
  |  Branch (1523:13): [True: 16, False: 8]
  ------------------
 1524|     16|            break;
 1525|     16|        }
 1526|     24|    }
 1527|       |
 1528|       |    // One of the conditions would be enough, but static analyzers don't get that
 1529|     16|    if (lock_token == 0 || lock_num == DHT_FRIEND_MAX_LOCKS) {
  ------------------
  |  |   53|     16|#define DHT_FRIEND_MAX_LOCKS 32
  ------------------
  |  Branch (1529:9): [True: 0, False: 16]
  |  Branch (1529:28): [True: 0, False: 16]
  ------------------
 1530|      0|        return 0;
 1531|      0|    }
 1532|       |
 1533|       |    // Claim that slot
 1534|     16|    dht_friend->lock_flags |= lock_token;
 1535|       |
 1536|     16|    dht_friend->callbacks[lock_num].ip_callback = ip_callback;
 1537|     16|    dht_friend->callbacks[lock_num].data = data;
 1538|     16|    dht_friend->callbacks[lock_num].number = number;
 1539|       |
 1540|     16|    return lock_token;
 1541|     16|}

crypto_memzero:
  114|     29|{
  115|     29|#if defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  116|     29|    memzero((uint8_t *)data, length);
  117|       |#else
  118|       |    sodium_memzero(data, length);
  119|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  120|     29|}
crypto_memlock:
  123|     17|{
  124|     17|#if defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  125|     17|    return false;
  126|       |#else
  127|       |
  128|       |    return sodium_mlock(data, length) == 0;
  129|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  130|     17|}
crypto_memunlock:
  133|     17|{
  134|     17|#if defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  135|     17|    return false;
  136|       |#else
  137|       |
  138|       |    return sodium_munlock(data, length) == 0;
  139|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  140|     17|}
pk_equal:
  143|  8.26k|{
  144|  8.26k|#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
  145|       |    // Hope that this is better for the fuzzer
  146|  8.26k|    return memcmp(pk1, pk2, CRYPTO_PUBLIC_KEY_SIZE) == 0;
  ------------------
  |  |   43|  8.26k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  147|       |#else
  148|       |    return crypto_verify_32(pk1, pk2) == 0;
  149|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  150|  8.26k|}
random_u64:
  199|      8|{
  200|      8|    uint64_t randnum;
  201|      8|    random_bytes(rng, (uint8_t *)&randnum, sizeof(randnum));
  202|      8|    return randnum;
  203|      8|}
crypto_new_keypair:
  437|     25|{
  438|     25|    random_bytes(rng, secret_key, CRYPTO_SECRET_KEY_SIZE);
  ------------------
  |  |   48|     25|#define CRYPTO_SECRET_KEY_SIZE         32
  ------------------
  439|     25|    memzero(public_key, CRYPTO_PUBLIC_KEY_SIZE);  // Make MSAN happy
  ------------------
  |  |   43|     25|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  440|     25|    crypto_derive_public_key(public_key, secret_key);
  441|     25|    return 0;
  442|     25|}
crypto_derive_public_key:
  446|     25|{
  447|     25|    crypto_scalarmult_curve25519_base(public_key, secret_key);
  448|     25|}
random_bytes:
  529|     33|{
  530|     33|    rng->funcs->random_bytes(rng->obj, bytes, length);
  531|     33|}

logger_new:
   33|     18|{
   34|     18|    Logger *log = (Logger *)mem_alloc(mem, sizeof(Logger));
   35|       |
   36|     18|    if (log == nullptr) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
  |  Branch (36:9): [True: 1, False: 17]
  ------------------
   37|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
   38|      1|    }
   39|       |
   40|     17|    log->mem = mem;
   41|       |
   42|     17|    return log;
   43|     18|}
logger_kill:
   46|     17|{
   47|     17|    if (log == nullptr) {
  ------------------
  |  |   63|     17|#define nullptr NULL
  ------------------
  |  Branch (47:9): [True: 0, False: 17]
  ------------------
   48|      0|        return;
   49|      0|    }
   50|       |
   51|     17|    mem_delete(log->mem, log);
   52|     17|}
logger_write:
   64|     14|{
   65|     14|    if (log == nullptr) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (65:9): [True: 0, False: 14]
  ------------------
   66|      0|        return;
   67|      0|    }
   68|       |
   69|     14|    if (log->callback == nullptr) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (69:9): [True: 14, False: 0]
  ------------------
   70|     14|        return;
   71|     14|    }
   72|       |
   73|       |    // Only pass the file name, not the entire file path, for privacy reasons.
   74|       |    // The full path may contain PII of the person compiling toxcore (their
   75|       |    // username and directory layout).
   76|      0|    const char *filename = strrchr(file, '/');
   77|      0|    file = filename != nullptr ? filename + 1 : file;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (77:12): [True: 0, False: 0]
  ------------------
   78|       |#if defined(_WIN32) || defined(__CYGWIN__)
   79|       |    // On Windows, the path separator *may* be a backslash, so we look for that
   80|       |    // one too.
   81|       |    const char *windows_filename = strrchr(file, '\\');
   82|       |    file = windows_filename != nullptr ? windows_filename + 1 : file;
   83|       |#endif /* WIN32 */
   84|       |
   85|       |    // Format message
   86|      0|    char msg[1024];
   87|      0|    va_list args;
   88|      0|    va_start(args, format);
   89|      0|    vsnprintf(msg, sizeof(msg), format, args);
   90|      0|    va_end(args);
   91|       |
   92|      0|    log->callback(log->context, level, file, line, func, msg, log->userdata);
   93|      0|}

mem_alloc:
   59|    142|{
   60|    142|    void *const ptr = mem->funcs->calloc(mem->obj, 1, size);
   61|    142|    return ptr;
   62|    142|}
mem_valloc:
   65|     35|{
   66|     35|    const uint32_t bytes = nmemb * size;
   67|       |
   68|     35|    if (size != 0 && bytes / size != nmemb) {
  ------------------
  |  Branch (68:9): [True: 35, False: 0]
  |  Branch (68:22): [True: 0, False: 35]
  ------------------
   69|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   70|      0|    }
   71|       |
   72|     35|    void *const ptr = mem->funcs->calloc(mem->obj, nmemb, size);
   73|     35|    return ptr;
   74|     35|}
mem_vrealloc:
   77|      8|{
   78|      8|    const uint32_t bytes = nmemb * size;
   79|       |
   80|      8|    if (size != 0 && bytes / size != nmemb) {
  ------------------
  |  Branch (80:9): [True: 8, False: 0]
  |  Branch (80:22): [True: 0, False: 8]
  ------------------
   81|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   82|      0|    }
   83|       |
   84|      8|    void *const new_ptr = mem->funcs->realloc(mem->obj, ptr, bytes);
   85|      8|    return new_ptr;
   86|      8|}
mem_delete:
   89|    190|{
   90|    190|    mem->funcs->free(mem->obj, ptr);
   91|    190|}

mono_time_new:
  111|     15|{
  112|     15|    Mono_Time *mono_time = (Mono_Time *)mem_alloc(mem, sizeof(Mono_Time));
  113|       |
  114|     15|    if (mono_time == nullptr) {
  ------------------
  |  |   63|     15|#define nullptr NULL
  ------------------
  |  Branch (114:9): [True: 1, False: 14]
  ------------------
  115|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  116|      1|    }
  117|       |
  118|     14|#ifndef ESP_PLATFORM
  119|     14|    pthread_rwlock_t *rwlock = (pthread_rwlock_t *)mem_alloc(mem, sizeof(pthread_rwlock_t));
  120|       |
  121|     14|    if (rwlock == nullptr) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (121:9): [True: 1, False: 13]
  ------------------
  122|      1|        mem_delete(mem, mono_time);
  123|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  124|      1|    }
  125|       |
  126|     13|    if (pthread_rwlock_init(rwlock, nullptr) != 0) {
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
  |  Branch (126:9): [True: 0, False: 13]
  ------------------
  127|      0|        mem_delete(mem, rwlock);
  128|      0|        mem_delete(mem, mono_time);
  129|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  130|      0|    }
  131|       |
  132|     13|    mono_time->time_update_lock = rwlock;
  133|     13|#endif /* ESP_PLATFORM */
  134|       |
  135|     13|    mono_time_set_current_time_callback(mono_time, current_time_callback, user_data);
  136|       |
  137|     13|    mono_time->cur_time = 0;
  138|     13|#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
  139|       |    // Maximum reproducibility. Never return time = 0.
  140|     13|    mono_time->base_time = 1000000000;
  141|       |#else
  142|       |    // Never return time = 0 in case time() returns 0 (e.g. on microcontrollers
  143|       |    // without battery-powered RTC or ones where NTP didn't initialise it yet).
  144|       |    mono_time->base_time = max_u64(1, (uint64_t)time(nullptr)) * UINT64_C(1000) - current_time_monotonic(mono_time);
  145|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  146|       |
  147|     13|    mono_time_update(mono_time);
  148|       |
  149|     13|    return mono_time;
  150|     13|}
mono_time_free:
  153|     13|{
  154|     13|    if (mono_time == nullptr) {
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
  |  Branch (154:9): [True: 0, False: 13]
  ------------------
  155|      0|        return;
  156|      0|    }
  157|     13|#ifndef ESP_PLATFORM
  158|     13|    pthread_rwlock_destroy(mono_time->time_update_lock);
  159|     13|    mem_delete(mem, mono_time->time_update_lock);
  160|     13|#endif /* ESP_PLATFORM */
  161|     13|    mem_delete(mem, mono_time);
  162|     13|}
mono_time_update:
  165|     13|{
  166|     13|    const uint64_t cur_time =
  167|     13|        mono_time->base_time + mono_time->current_time_callback(mono_time->user_data);
  168|       |
  169|     13|#ifndef ESP_PLATFORM
  170|     13|    pthread_rwlock_wrlock(mono_time->time_update_lock);
  171|     13|#endif /* ESP_PLATFORM */
  172|     13|    mono_time->cur_time = cur_time;
  173|     13|#ifndef ESP_PLATFORM
  174|     13|    pthread_rwlock_unlock(mono_time->time_update_lock);
  175|     13|#endif /* ESP_PLATFORM */
  176|     13|}
mono_time_get_ms:
  179|     30|{
  180|       |#if !defined(ESP_PLATFORM) && !defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  181|       |    // Fuzzing is only single thread for now, no locking needed */
  182|       |    pthread_rwlock_rdlock(mono_time->time_update_lock);
  183|       |#endif /* !ESP_PLATFORM */
  184|     30|    const uint64_t cur_time = mono_time->cur_time;
  185|       |#if !defined(ESP_PLATFORM) && !defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  186|       |    pthread_rwlock_unlock(mono_time->time_update_lock);
  187|       |#endif /* !ESP_PLATFORM */
  188|     30|    return cur_time;
  189|     30|}
mono_time_get:
  192|     30|{
  193|     30|    return mono_time_get_ms(mono_time) / UINT64_C(1000);
  194|     30|}
mono_time_set_current_time_callback:
  203|     13|{
  204|     13|    if (current_time_callback == nullptr) {
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
  |  Branch (204:9): [True: 0, False: 13]
  ------------------
  205|      0|        mono_time->current_time_callback = current_time_monotonic_default;
  206|      0|        mono_time->user_data = mono_time;
  207|     13|    } else {
  208|     13|        mono_time->current_time_callback = current_time_callback;
  209|     13|        mono_time->user_data = user_data;
  210|     13|    }
  211|     13|}

LLVMFuzzerTestOneInput:
  101|     20|{
  102|     20|    fuzz_select_target<TestNetCrypto>(data, size);
  103|     20|    return 0;
  104|     20|}
net_crypto_fuzz_test.cc:_ZN12_GLOBAL__N_113TestNetCryptoER9Fuzz_Data:
   31|     19|{
   32|     19|    const auto prep = prepare(input);
   33|     19|    if (!prep.has_value()) {
  ------------------
  |  Branch (33:9): [True: 1, False: 18]
  ------------------
   34|      1|        return;
   35|      1|    }
   36|     18|    const auto [ipp, iterations] = prep.value();
   37|       |
   38|       |    // rest of the fuzz data is input for malloc and network
   39|     18|    Fuzz_System sys(input);
   40|       |
   41|     18|    const Ptr<Logger> logger(logger_new(sys.mem.get()), logger_kill);
   42|     18|    if (logger == nullptr) {
  ------------------
  |  Branch (42:9): [True: 1, False: 17]
  ------------------
   43|      1|        return;
   44|      1|    }
   45|       |
   46|     17|    const Ptr<Networking_Core> net(new_networking_ex(logger.get(), sys.mem.get(), sys.ns.get(),
   47|     17|                                       &ipp.ip, ipp.port, ipp.port + 100, nullptr),
   48|     17|        kill_networking);
   49|     17|    if (net == nullptr) {
  ------------------
  |  Branch (49:9): [True: 2, False: 15]
  ------------------
   50|      2|        return;
   51|      2|    }
   52|       |
   53|     15|    const std::unique_ptr<Mono_Time, std::function<void(Mono_Time *)>> mono_time(
   54|     15|        mono_time_new(
   55|     15|            sys.mem.get(), [](void *user_data) { return *static_cast<uint64_t *>(user_data); },
   56|     15|            &sys.clock),
   57|     15|        [mem = sys.mem.get()](Mono_Time *ptr) { mono_time_free(mem, ptr); });
   58|     15|    if (mono_time == nullptr) {
  ------------------
  |  Branch (58:9): [True: 2, False: 13]
  ------------------
   59|      2|        return;
   60|      2|    }
   61|       |
   62|     13|    const Ptr<DHT> dht(new_dht(logger.get(), sys.mem.get(), sys.rng.get(), sys.ns.get(),
   63|     13|                           mono_time.get(), net.get(), false, false),
   64|     13|        kill_dht);
   65|     13|    if (dht == nullptr) {
  ------------------
  |  Branch (65:9): [True: 13, False: 0]
  ------------------
   66|     13|        return;
   67|     13|    }
   68|       |
   69|      0|    Net_Profile *tcp_np = netprof_new(logger.get(), sys.mem.get());
   70|       |
   71|      0|    if (tcp_np == nullptr) {
  ------------------
  |  Branch (71:9): [True: 0, False: 0]
  ------------------
   72|      0|        return;
   73|      0|    }
   74|       |
   75|      0|    const TCP_Proxy_Info proxy_info = {0};
   76|       |
   77|      0|    const Ptr<Net_Crypto> net_crypto(
   78|      0|        new_net_crypto(logger.get(), sys.mem.get(), sys.rng.get(), sys.ns.get(), mono_time.get(),
   79|      0|            dht.get(), &proxy_info, tcp_np),
   80|      0|        kill_net_crypto);
   81|      0|    if (net_crypto == nullptr) {
  ------------------
  |  Branch (81:9): [True: 0, False: 0]
  ------------------
   82|      0|        netprof_kill(sys.mem.get(), tcp_np);
   83|      0|        return;
   84|      0|    }
   85|       |
   86|      0|    for (uint8_t i = 0; i < iterations; ++i) {
  ------------------
  |  Branch (86:25): [True: 0, False: 0]
  ------------------
   87|      0|        networking_poll(net.get(), nullptr);
   88|      0|        do_dht(dht.get());
   89|      0|        do_net_crypto(net_crypto.get(), nullptr);
   90|       |        // "Sleep"
   91|      0|        sys.clock += System::BOOTSTRAP_ITERATION_INTERVAL;
   92|      0|    }
   93|       |
   94|      0|    netprof_kill(sys.mem.get(), tcp_np);
   95|      0|}
net_crypto_fuzz_test.cc:_ZN12_GLOBAL__N_17prepareER9Fuzz_Data:
   19|     19|{
   20|     19|    IP_Port ipp;
   21|     19|    ip_init(&ipp.ip, true);
   22|     19|    ipp.port = 33445;
   23|       |
   24|     19|    CONSUME_OR_RETURN_VAL(const uint8_t *iterations_packed, input, 1, std::nullopt);
  ------------------
  |  |  145|     19|    if (INPUT.size() < SIZE) {                        \
  |  |  ------------------
  |  |  |  Branch (145:9): [True: 1, False: 18]
  |  |  ------------------
  |  |  146|      1|        return VAL;                                   \
  |  |  147|      1|    }                                                 \
  |  |  148|     19|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   25|     18|    uint8_t iterations = *iterations_packed;
   26|       |
   27|     18|    return {{ipp, iterations}};
   28|     19|}
net_crypto_fuzz_test.cc:_ZZN12_GLOBAL__N_113TestNetCryptoER9Fuzz_DataENK3$_1clEPv:
   55|     13|            sys.mem.get(), [](void *user_data) { return *static_cast<uint64_t *>(user_data); },
net_crypto_fuzz_test.cc:_ZZN12_GLOBAL__N_113TestNetCryptoER9Fuzz_DataENK3$_0clEP9Mono_Time:
   57|     13|        [mem = sys.mem.get()](Mono_Time *ptr) { mono_time_free(mem, ptr); });

netprof_new:
  139|     16|{
  140|     16|    Net_Profile *np = (Net_Profile *)mem_alloc(mem, sizeof(Net_Profile));
  141|       |
  142|     16|    if (np == nullptr) {
  ------------------
  |  |   63|     16|#define nullptr NULL
  ------------------
  |  Branch (142:9): [True: 1, False: 15]
  ------------------
  143|      1|        LOGGER_ERROR(log, "failed to allocate memory for net profiler");
  ------------------
  |  |   80|      1|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      1|    do {                                                                         \
  |  |  |  |   70|      1|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      2|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      1|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      1|        }                                                                        \
  |  |  |  |   73|      1|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  144|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  145|      1|    }
  146|       |
  147|     15|    return np;
  148|     16|}
netprof_kill:
  151|     15|{
  152|     15|    if (net_profile != nullptr) {
  ------------------
  |  |   63|     15|#define nullptr NULL
  ------------------
  |  Branch (152:9): [True: 15, False: 0]
  ------------------
  153|     15|        mem_delete(mem, net_profile);
  154|     15|    }
  155|     15|}

net_socket_from_native:
  368|     15|{
  369|     15|    const Socket res = {(force Socket_Value)sock};
  370|     15|    return res;
  371|     15|}
net_invalid_socket:
  374|     15|{
  375|     15|    return net_socket_from_native(INVALID_SOCKET);
  ------------------
  |  |  359|     15|#define INVALID_SOCKET (-1)
  ------------------
  376|     15|}
net_family_unspec:
  379|      8|{
  380|      8|    return family_unspec;
  381|      8|}
net_family_ipv6:
  389|     19|{
  390|     19|    return family_ipv6;
  391|     19|}
net_family_is_unspec:
  424|     31|{
  425|     31|    return family.value == family_unspec.value;
  426|     31|}
net_family_is_ipv4:
  429|     48|{
  430|     48|    return family.value == family_ipv4.value;
  431|     48|}
net_family_is_ipv6:
  434|     63|{
  435|     63|    return family.value == family_ipv6.value;
  436|     63|}
sock_valid:
  469|     15|{
  470|     15|    const Socket invalid_socket = net_invalid_socket();
  471|     15|    return sock.value != invalid_socket.value;
  472|     15|}
kill_sock:
  929|     15|{
  930|     15|    ns->funcs->close(ns->obj, sock);
  931|     15|}
set_socket_nonblock:
  934|     15|{
  935|     15|    return ns->funcs->socket_nonblock(ns->obj, sock, true) == 0;
  936|     15|}
set_socket_nosigpipe:
  939|     15|{
  940|       |#if defined(__APPLE__)
  941|       |    int set = 1;
  942|       |    return net_setsockopt(ns, sock, SOL_SOCKET, SO_NOSIGPIPE, &set, sizeof(int)) == 0;
  943|       |#else
  944|     15|    return true;
  945|     15|#endif /* __APPLE__ */
  946|     15|}
set_socket_dualstack:
  959|     15|{
  960|     15|    int ipv6only = 0;
  961|     15|    size_t optsize = sizeof(ipv6only);
  962|     15|    const int res = net_getsockopt(ns, sock, IPPROTO_IPV6, IPV6_V6ONLY, &ipv6only, &optsize);
  963|       |
  964|     15|    if ((res == 0) && (ipv6only == 0)) {
  ------------------
  |  Branch (964:9): [True: 15, False: 0]
  |  Branch (964:23): [True: 15, False: 0]
  ------------------
  965|     15|        return true;
  966|     15|    }
  967|       |
  968|      0|    ipv6only = 0;
  969|      0|    return net_setsockopt(ns, sock, IPPROTO_IPV6, IPV6_V6ONLY, &ipv6only, sizeof(ipv6only)) == 0;
  970|     15|}
networking_registerhandler:
 1160|    129|{
 1161|    129|    net->packethandlers[byte].function = cb;
 1162|    129|    net->packethandlers[byte].object = object;
 1163|    129|}
new_networking_ex:
 1209|     17|{
 1210|       |    /* If both from and to are 0, use default port range
 1211|       |     * If one is 0 and the other is non-0, use the non-0 value as only port
 1212|       |     * If from > to, swap
 1213|       |     */
 1214|     17|    if (port_from == 0 && port_to == 0) {
  ------------------
  |  Branch (1214:9): [True: 0, False: 17]
  |  Branch (1214:27): [True: 0, False: 0]
  ------------------
 1215|      0|        port_from = TOX_PORTRANGE_FROM;
  ------------------
  |  |  162|      0|#define TOX_PORTRANGE_FROM 33445
  ------------------
 1216|      0|        port_to = TOX_PORTRANGE_TO;
  ------------------
  |  |  163|      0|#define TOX_PORTRANGE_TO   33545
  ------------------
 1217|     17|    } else if (port_from == 0 && port_to != 0) {
  ------------------
  |  Branch (1217:16): [True: 0, False: 17]
  |  Branch (1217:34): [True: 0, False: 0]
  ------------------
 1218|      0|        port_from = port_to;
 1219|     17|    } else if (port_from != 0 && port_to == 0) {
  ------------------
  |  Branch (1219:16): [True: 17, False: 0]
  |  Branch (1219:34): [True: 0, False: 17]
  ------------------
 1220|      0|        port_to = port_from;
 1221|     17|    } else if (port_from > port_to) {
  ------------------
  |  Branch (1221:16): [True: 0, False: 17]
  ------------------
 1222|      0|        const uint16_t temp_port = port_from;
 1223|      0|        port_from = port_to;
 1224|      0|        port_to = temp_port;
 1225|      0|    }
 1226|       |
 1227|     17|    if (error != nullptr) {
  ------------------
  |  |   63|     17|#define nullptr NULL
  ------------------
  |  Branch (1227:9): [True: 0, False: 17]
  ------------------
 1228|      0|        *error = 2;
 1229|      0|    }
 1230|       |
 1231|       |    /* maybe check for invalid IPs like 224+.x.y.z? if there is any IP set ever */
 1232|     17|    if (!net_family_is_ipv4(ip->family) && !net_family_is_ipv6(ip->family)) {
  ------------------
  |  Branch (1232:9): [True: 17, False: 0]
  |  Branch (1232:44): [True: 0, False: 17]
  ------------------
 1233|      0|        LOGGER_ERROR(log, "invalid address family: %u", ip->family.value);
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1234|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1235|      0|    }
 1236|       |
 1237|     17|    Networking_Core *temp = (Networking_Core *)mem_alloc(mem, sizeof(Networking_Core));
 1238|       |
 1239|     17|    if (temp == nullptr) {
  ------------------
  |  |   63|     17|#define nullptr NULL
  ------------------
  |  Branch (1239:9): [True: 1, False: 16]
  ------------------
 1240|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
 1241|      1|    }
 1242|       |
 1243|     16|    Net_Profile *np = netprof_new(log, mem);
 1244|       |
 1245|     16|    if (np == nullptr) {
  ------------------
  |  |   63|     16|#define nullptr NULL
  ------------------
  |  Branch (1245:9): [True: 1, False: 15]
  ------------------
 1246|      1|        free(temp);
 1247|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
 1248|      1|    }
 1249|       |
 1250|     15|    temp->udp_net_profile = np;
 1251|     15|    temp->ns = ns;
 1252|     15|    temp->log = log;
 1253|     15|    temp->mem = mem;
 1254|     15|    temp->family = ip->family;
 1255|     15|    temp->port = 0;
 1256|       |
 1257|       |    /* Initialize our socket. */
 1258|       |    /* add log message what we're creating */
 1259|     15|    temp->sock = net_socket(ns, temp->family, TOX_SOCK_DGRAM, TOX_PROTO_UDP);
  ------------------
  |  |  174|     15|#define TOX_SOCK_DGRAM 2
  ------------------
                  temp->sock = net_socket(ns, temp->family, TOX_SOCK_DGRAM, TOX_PROTO_UDP);
  ------------------
  |  |  177|     15|#define TOX_PROTO_UDP 2
  ------------------
 1260|       |
 1261|       |    /* Check for socket error. */
 1262|     15|    if (!sock_valid(temp->sock)) {
  ------------------
  |  Branch (1262:9): [True: 0, False: 15]
  ------------------
 1263|      0|        const int neterror = net_error();
 1264|      0|        Net_Strerror error_str;
 1265|      0|        LOGGER_ERROR(log, "failed to get a socket?! %d, %s", neterror, net_strerror(neterror, &error_str));
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1266|      0|        netprof_kill(mem, temp->udp_net_profile);
 1267|      0|        mem_delete(mem, temp);
 1268|       |
 1269|      0|        if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1269:13): [True: 0, False: 0]
  ------------------
 1270|      0|            *error = 1;
 1271|      0|        }
 1272|       |
 1273|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1274|      0|    }
 1275|       |
 1276|       |    /* Functions to increase the size of the send and receive UDP buffers.
 1277|       |     */
 1278|     15|    int n = 1024 * 1024 * 2;
 1279|       |
 1280|     15|    if (net_setsockopt(ns, temp->sock, SOL_SOCKET, SO_RCVBUF, &n, sizeof(n)) != 0) {
  ------------------
  |  Branch (1280:9): [True: 0, False: 15]
  ------------------
 1281|      0|        LOGGER_WARNING(log, "failed to set socket option %d", SO_RCVBUF);
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1282|      0|    }
 1283|       |
 1284|     15|    if (net_setsockopt(ns, temp->sock, SOL_SOCKET, SO_SNDBUF, &n, sizeof(n)) != 0) {
  ------------------
  |  Branch (1284:9): [True: 0, False: 15]
  ------------------
 1285|      0|        LOGGER_WARNING(log, "failed to set socket option %d", SO_SNDBUF);
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1286|      0|    }
 1287|       |
 1288|       |    /* Enable broadcast on socket */
 1289|     15|    int broadcast = 1;
 1290|       |
 1291|     15|    if (net_setsockopt(ns, temp->sock, SOL_SOCKET, SO_BROADCAST, &broadcast, sizeof(broadcast)) != 0) {
  ------------------
  |  Branch (1291:9): [True: 0, False: 15]
  ------------------
 1292|      0|        LOGGER_ERROR(log, "failed to set socket option %d", SO_BROADCAST);
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1293|      0|    }
 1294|       |
 1295|       |    /* iOS UDP sockets are weird and apparently can SIGPIPE */
 1296|     15|    if (!set_socket_nosigpipe(ns, temp->sock)) {
  ------------------
  |  Branch (1296:9): [True: 0, False: 15]
  ------------------
 1297|      0|        kill_networking(temp);
 1298|       |
 1299|      0|        if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1299:13): [True: 0, False: 0]
  ------------------
 1300|      0|            *error = 1;
 1301|      0|        }
 1302|       |
 1303|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1304|      0|    }
 1305|       |
 1306|       |    /* Set socket nonblocking. */
 1307|     15|    if (!set_socket_nonblock(ns, temp->sock)) {
  ------------------
  |  Branch (1307:9): [True: 0, False: 15]
  ------------------
 1308|      0|        kill_networking(temp);
 1309|       |
 1310|      0|        if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1310:13): [True: 0, False: 0]
  ------------------
 1311|      0|            *error = 1;
 1312|      0|        }
 1313|       |
 1314|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1315|      0|    }
 1316|       |
 1317|       |    /* Bind our socket to port PORT and the given IP address (usually 0.0.0.0 or ::) */
 1318|     15|    uint16_t *portptr = nullptr;
  ------------------
  |  |   63|     15|#define nullptr NULL
  ------------------
 1319|     15|    Network_Addr addr = {{0}};
 1320|       |
 1321|     15|    if (net_family_is_ipv4(temp->family)) {
  ------------------
  |  Branch (1321:9): [True: 0, False: 15]
  ------------------
 1322|      0|        struct sockaddr_in *addr4 = (struct sockaddr_in *)&addr.addr;
 1323|       |
 1324|      0|        addr.size = sizeof(struct sockaddr_in);
 1325|      0|        addr4->sin_family = AF_INET;
 1326|      0|        addr4->sin_port = 0;
 1327|      0|        fill_addr4(&ip->ip.v4, &addr4->sin_addr);
 1328|       |
 1329|      0|        portptr = &addr4->sin_port;
 1330|     15|    } else if (net_family_is_ipv6(temp->family)) {
  ------------------
  |  Branch (1330:16): [True: 15, False: 0]
  ------------------
 1331|     15|        struct sockaddr_in6 *addr6 = (struct sockaddr_in6 *)&addr.addr;
 1332|       |
 1333|     15|        addr.size = sizeof(struct sockaddr_in6);
 1334|     15|        addr6->sin6_family = AF_INET6;
 1335|     15|        addr6->sin6_port = 0;
 1336|     15|        fill_addr6(&ip->ip.v6, &addr6->sin6_addr);
 1337|       |
 1338|     15|        addr6->sin6_flowinfo = 0;
 1339|     15|        addr6->sin6_scope_id = 0;
 1340|       |
 1341|     15|        portptr = &addr6->sin6_port;
 1342|     15|    } else {
 1343|      0|        mem_delete(mem, temp);
 1344|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1345|      0|    }
 1346|       |
 1347|     15|    if (net_family_is_ipv6(ip->family)) {
  ------------------
  |  Branch (1347:9): [True: 15, False: 0]
  ------------------
 1348|     15|        const bool is_dualstack = set_socket_dualstack(ns, temp->sock);
 1349|       |
 1350|     15|        if (is_dualstack) {
  ------------------
  |  Branch (1350:13): [True: 15, False: 0]
  ------------------
 1351|     15|            LOGGER_TRACE(log, "Dual-stack socket: enabled");
  ------------------
  |  |   76|     15|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     15|    do {                                                                         \
  |  |  |  |   70|     15|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     30|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|     15|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1352|     15|        } else {
 1353|      0|            LOGGER_ERROR(log, "Dual-stack socket failed to enable, won't be able to receive from/send to IPv4 addresses");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1354|      0|        }
 1355|       |
 1356|     15|#ifndef ESP_PLATFORM
 1357|       |        /* multicast local nodes */
 1358|     15|        struct ipv6_mreq mreq = {{{{0}}}};
 1359|     15|        mreq.ipv6mr_multiaddr.s6_addr[0] = 0xFF;
 1360|     15|        mreq.ipv6mr_multiaddr.s6_addr[1] = 0x02;
 1361|     15|        mreq.ipv6mr_multiaddr.s6_addr[15] = 0x01;
 1362|     15|        mreq.ipv6mr_interface = 0;
 1363|       |
 1364|     15|        const int res = net_setsockopt(ns, temp->sock, IPPROTO_IPV6, IPV6_ADD_MEMBERSHIP, &mreq, sizeof(mreq));
 1365|       |
 1366|     15|        const int neterror = net_error();
 1367|     15|        Net_Strerror error_str;
 1368|       |
 1369|     15|        if (res < 0) {
  ------------------
  |  Branch (1369:13): [True: 0, False: 15]
  ------------------
 1370|      0|            LOGGER_INFO(log, "Failed to activate local multicast membership in FF02::1. (%d, %s)", neterror, net_strerror(neterror, &error_str));
  ------------------
  |  |   78|      0|#define LOGGER_INFO(log, ...)    LOGGER_WRITE(log, LOGGER_LEVEL_INFO, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1371|     15|        } else {
 1372|     15|            LOGGER_TRACE(log, "Local multicast group joined successfully. (%d, %s)", neterror, net_strerror(neterror, &error_str));
  ------------------
  |  |   76|     15|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     15|    do {                                                                         \
  |  |  |  |   70|     15|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     30|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|     15|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1373|     15|        }
 1374|     15|#endif /* ESP_PLATFORM */
 1375|     15|    }
 1376|       |
 1377|       |    /* A hanging program or a different user might block the standard port.
 1378|       |     * As long as it isn't a parameter coming from the commandline,
 1379|       |     * try a few ports after it, to see if we can find a "free" one.
 1380|       |     *
 1381|       |     * If we go on without binding, the first sendto() automatically binds to
 1382|       |     * a free port chosen by the system (i.e. anything from 1024 to 65535).
 1383|       |     *
 1384|       |     * Returning NULL after bind fails has both advantages and disadvantages:
 1385|       |     * advantage:
 1386|       |     *   we can rely on getting the port in the range 33445..33450, which
 1387|       |     *   enables us to tell joe user to open their firewall to a small range
 1388|       |     *
 1389|       |     * disadvantage:
 1390|       |     *   some clients might not test return of tox_new(), blindly assuming that
 1391|       |     *   it worked ok (which it did previously without a successful bind)
 1392|       |     */
 1393|     15|    uint16_t port_to_try = port_from;
 1394|     15|    *portptr = net_htons(port_to_try);
 1395|       |
 1396|     15|    for (uint16_t tries = port_from; tries <= port_to; ++tries) {
  ------------------
  |  Branch (1396:38): [True: 15, False: 0]
  ------------------
 1397|     15|        const int res = net_bind(ns, temp->sock, &addr);
 1398|       |
 1399|     15|        if (res == 0) {
  ------------------
  |  Branch (1399:13): [True: 15, False: 0]
  ------------------
 1400|     15|            temp->port = *portptr;
 1401|       |
 1402|     15|            Ip_Ntoa ip_str;
 1403|     15|            LOGGER_DEBUG(log, "Bound successfully to %s:%u", net_ip_ntoa(ip, &ip_str),
  ------------------
  |  |   77|     15|#define LOGGER_DEBUG(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_DEBUG, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     15|    do {                                                                         \
  |  |  |  |   70|     15|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     30|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|     15|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1404|     15|                         net_ntohs(temp->port));
 1405|       |
 1406|       |            /* errno isn't reset on success, only set on failure, the failed
 1407|       |             * binds with parallel clients yield a -EPERM to the outside if
 1408|       |             * errno isn't cleared here */
 1409|     15|            if (tries > 0) {
  ------------------
  |  Branch (1409:17): [True: 15, False: 0]
  ------------------
 1410|     15|                errno = 0;
 1411|     15|            }
 1412|       |
 1413|     15|            if (error != nullptr) {
  ------------------
  |  |   63|     15|#define nullptr NULL
  ------------------
  |  Branch (1413:17): [True: 0, False: 15]
  ------------------
 1414|      0|                *error = 0;
 1415|      0|            }
 1416|       |
 1417|     15|            return temp;
 1418|     15|        }
 1419|       |
 1420|      0|        ++port_to_try;
 1421|       |
 1422|      0|        if (port_to_try > port_to) {
  ------------------
  |  Branch (1422:13): [True: 0, False: 0]
  ------------------
 1423|      0|            port_to_try = port_from;
 1424|      0|        }
 1425|       |
 1426|      0|        *portptr = net_htons(port_to_try);
 1427|      0|    }
 1428|       |
 1429|      0|    Ip_Ntoa ip_str;
 1430|      0|    const int neterror = net_error();
 1431|      0|    Net_Strerror error_str;
 1432|      0|    LOGGER_ERROR(log, "failed to bind socket: %d, %s IP: %s port_from: %u port_to: %u",
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1433|      0|                 neterror, net_strerror(neterror, &error_str), net_ip_ntoa(ip, &ip_str), port_from, port_to);
 1434|      0|    kill_networking(temp);
 1435|       |
 1436|      0|    if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1436:9): [True: 0, False: 0]
  ------------------
 1437|      0|        *error = 1;
 1438|      0|    }
 1439|       |
 1440|      0|    return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1441|     15|}
kill_networking:
 1461|     15|{
 1462|     15|    if (net == nullptr) {
  ------------------
  |  |   63|     15|#define nullptr NULL
  ------------------
  |  Branch (1462:9): [True: 0, False: 15]
  ------------------
 1463|      0|        return;
 1464|      0|    }
 1465|       |
 1466|     15|    if (!net_family_is_unspec(net->family)) {
  ------------------
  |  Branch (1466:9): [True: 15, False: 0]
  ------------------
 1467|       |        /* Socket is initialized, so we close it. */
 1468|     15|        kill_sock(net->ns, net->sock);
 1469|     15|    }
 1470|       |
 1471|     15|    netprof_kill(net->mem, net->udp_net_profile);
 1472|     15|    mem_delete(net->mem, net);
 1473|     15|}
ip_reset:
 1586|     19|{
 1587|     19|    if (ip == nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (1587:9): [True: 0, False: 19]
  ------------------
 1588|      0|        return;
 1589|      0|    }
 1590|       |
 1591|     19|    *ip = empty_ip;
 1592|     19|}
ip_init:
 1608|     19|{
 1609|     19|    if (ip == nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (1609:9): [True: 0, False: 19]
  ------------------
 1610|      0|        return;
 1611|      0|    }
 1612|       |
 1613|     19|    ip_reset(ip);
 1614|     19|    ip->family = ipv6enabled ? net_family_ipv6() : net_family_ipv4();
  ------------------
  |  Branch (1614:18): [True: 19, False: 0]
  ------------------
 1615|     19|}
net_socket:
 2209|     15|{
 2210|     15|    const int platform_domain = make_family(domain);
 2211|     15|    const int platform_type = make_socktype(type);
 2212|     15|    const int platform_prot = make_proto(protocol);
 2213|     15|    return ns->funcs->socket(ns->obj, platform_domain, platform_type, platform_prot);
 2214|     15|}
net_htons:
 2228|     15|{
 2229|     15|    return htons(hostshort);
 2230|     15|}
net_error:
 2313|     15|{
 2314|       |#ifdef OS_WIN32
 2315|       |    return WSAGetLastError();
 2316|       |#else
 2317|     15|    return errno;
 2318|     15|#endif /* OS_WIN32 */
 2319|     15|}
network.c:net_setsockopt:
  708|     60|{
  709|     60|    return ns->funcs->setsockopt(ns->obj, sock, level, optname, optval, optlen);
  710|     60|}
network.c:net_getsockopt:
  713|     15|{
  714|     15|    return ns->funcs->getsockopt(ns->obj, sock, level, optname, optval, optlen);
  715|     15|}
network.c:fill_addr6:
  321|     15|{
  322|     15|    memcpy(addr->s6_addr, ip->uint8, sizeof(ip->uint8));
  323|     15|}
network.c:net_bind:
  918|     15|{
  919|     15|    return ns->funcs->bind(ns->obj, sock, addr);
  920|     15|}
network.c:make_family:
  256|     15|{
  257|     15|    switch (tox_family.value) {
  258|      0|        case TOX_AF_INET:
  ------------------
  |  |  168|      0|#define TOX_AF_INET 2
  ------------------
  |  Branch (258:9): [True: 0, False: 15]
  ------------------
  259|      0|        case TCP_INET:
  ------------------
  |  |  181|      0|#define TCP_INET (TOX_AF_INET6 + 2)
  |  |  ------------------
  |  |  |  |  169|      0|#define TOX_AF_INET6 10
  |  |  ------------------
  ------------------
  |  Branch (259:9): [True: 0, False: 15]
  ------------------
  260|      0|            return AF_INET;
  261|       |
  262|     15|        case TOX_AF_INET6:
  ------------------
  |  |  169|     15|#define TOX_AF_INET6 10
  ------------------
  |  Branch (262:9): [True: 15, False: 0]
  ------------------
  263|     15|        case TCP_INET6:
  ------------------
  |  |  182|     15|#define TCP_INET6 (TOX_AF_INET6 + 3)
  |  |  ------------------
  |  |  |  |  169|     15|#define TOX_AF_INET6 10
  |  |  ------------------
  ------------------
  |  Branch (263:9): [True: 0, False: 15]
  ------------------
  264|     15|            return AF_INET6;
  265|       |
  266|      0|        case TOX_AF_UNSPEC:
  ------------------
  |  |  167|      0|#define TOX_AF_UNSPEC 0
  ------------------
  |  Branch (266:9): [True: 0, False: 15]
  ------------------
  267|      0|            return AF_UNSPEC;
  268|       |
  269|      0|        default:
  ------------------
  |  Branch (269:9): [True: 0, False: 15]
  ------------------
  270|      0|            return tox_family.value;
  271|     15|    }
  272|     15|}
network.c:make_socktype:
  242|     15|{
  243|     15|    switch (type) {
  244|      0|        case TOX_SOCK_STREAM:
  ------------------
  |  |  173|      0|#define TOX_SOCK_STREAM 1
  ------------------
  |  Branch (244:9): [True: 0, False: 15]
  ------------------
  245|      0|            return SOCK_STREAM;
  246|       |
  247|     15|        case TOX_SOCK_DGRAM:
  ------------------
  |  |  174|     15|#define TOX_SOCK_DGRAM 2
  ------------------
  |  Branch (247:9): [True: 15, False: 0]
  ------------------
  248|     15|            return SOCK_DGRAM;
  249|       |
  250|      0|        default:
  ------------------
  |  Branch (250:9): [True: 0, False: 15]
  ------------------
  251|      0|            return type;
  252|     15|    }
  253|     15|}
network.c:make_proto:
  228|     15|{
  229|     15|    switch (proto) {
  230|      0|        case TOX_PROTO_TCP:
  ------------------
  |  |  176|      0|#define TOX_PROTO_TCP 1
  ------------------
  |  Branch (230:9): [True: 0, False: 15]
  ------------------
  231|      0|            return IPPROTO_TCP;
  232|       |
  233|     15|        case TOX_PROTO_UDP:
  ------------------
  |  |  177|     15|#define TOX_PROTO_UDP 2
  ------------------
  |  Branch (233:9): [True: 15, False: 0]
  ------------------
  234|     15|            return IPPROTO_UDP;
  235|       |
  236|      0|        default:
  ------------------
  |  Branch (236:9): [True: 0, False: 15]
  ------------------
  237|      0|            return proto;
  238|     15|    }
  239|     15|}

ping_new:
  328|     12|{
  329|     12|    Ping *ping = (Ping *)mem_alloc(mem, sizeof(Ping));
  330|       |
  331|     12|    if (ping == nullptr) {
  ------------------
  |  |   63|     12|#define nullptr NULL
  ------------------
  |  Branch (331:9): [True: 1, False: 11]
  ------------------
  332|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  333|      1|    }
  334|       |
  335|     11|    ping->ping_array = ping_array_new(mem, PING_NUM_MAX, PING_TIMEOUT);
  ------------------
  |  |   23|     11|#define PING_NUM_MAX 512
  ------------------
                  ping->ping_array = ping_array_new(mem, PING_NUM_MAX, PING_TIMEOUT);
  ------------------
  |  |   43|     11|#define PING_TIMEOUT 5
  ------------------
  336|       |
  337|     11|    if (ping->ping_array == nullptr) {
  ------------------
  |  |   63|     11|#define nullptr NULL
  ------------------
  |  Branch (337:9): [True: 2, False: 9]
  ------------------
  338|      2|        mem_delete(mem, ping);
  339|      2|        return nullptr;
  ------------------
  |  |   63|      2|#define nullptr NULL
  ------------------
  340|      2|    }
  341|       |
  342|      9|    ping->mono_time = mono_time;
  343|      9|    ping->rng = rng;
  344|      9|    ping->mem = mem;
  345|      9|    ping->dht = dht;
  346|      9|    networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_REQUEST, &handle_ping_request, dht);
  347|      9|    networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_RESPONSE, &handle_ping_response, dht);
  348|       |
  349|      9|    return ping;
  350|     11|}
ping_kill:
  353|     12|{
  354|     12|    if (ping == nullptr) {
  ------------------
  |  |   63|     12|#define nullptr NULL
  ------------------
  |  Branch (354:9): [True: 3, False: 9]
  ------------------
  355|      3|        return;
  356|      3|    }
  357|       |
  358|      9|    networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|      9|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|      9|#define nullptr NULL
  ------------------
  359|      9|    networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|      9|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|      9|#define nullptr NULL
  ------------------
  360|      9|    ping_array_kill(ping->ping_array);
  361|       |
  362|      9|    mem_delete(mem, ping);
  363|      9|}

ping_array_new:
   37|     19|{
   38|     19|    if (size == 0 || timeout == 0) {
  ------------------
  |  Branch (38:9): [True: 0, False: 19]
  |  Branch (38:22): [True: 0, False: 19]
  ------------------
   39|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   40|      0|    }
   41|       |
   42|     19|    if ((size & (size - 1)) != 0) {
  ------------------
  |  Branch (42:9): [True: 0, False: 19]
  ------------------
   43|       |        // Not a power of 2.
   44|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   45|      0|    }
   46|       |
   47|     19|    Ping_Array *const empty_array = (Ping_Array *)mem_alloc(mem, sizeof(Ping_Array));
   48|       |
   49|     19|    if (empty_array == nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (49:9): [True: 1, False: 18]
  ------------------
   50|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
   51|      1|    }
   52|       |
   53|     18|    Ping_Array_Entry *entries = (Ping_Array_Entry *)mem_valloc(mem, size, sizeof(Ping_Array_Entry));
   54|       |
   55|     18|    if (entries == nullptr) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
  |  Branch (55:9): [True: 1, False: 17]
  ------------------
   56|      1|        mem_delete(mem, empty_array);
   57|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
   58|      1|    }
   59|       |
   60|     17|    empty_array->mem = mem;
   61|     17|    empty_array->entries = entries;
   62|     17|    empty_array->last_deleted = 0;
   63|     17|    empty_array->last_added = 0;
   64|     17|    empty_array->total_size = size;
   65|     17|    empty_array->timeout = timeout;
   66|     17|    return empty_array;
   67|     18|}
ping_array_kill:
   77|     21|{
   78|     21|    if (array == nullptr) {
  ------------------
  |  |   63|     21|#define nullptr NULL
  ------------------
  |  Branch (78:9): [True: 4, False: 17]
  ------------------
   79|      4|        return;
   80|      4|    }
   81|       |
   82|     17|    while (array->last_deleted != array->last_added) {
  ------------------
  |  Branch (82:12): [True: 0, False: 17]
  ------------------
   83|      0|        const uint32_t index = array->last_deleted % array->total_size;
   84|      0|        clear_entry(array, index);
   85|      0|        ++array->last_deleted;
   86|      0|    }
   87|       |
   88|     17|    mem_delete(array->mem, array->entries);
   89|     17|    mem_delete(array->mem, array);
   90|     17|}

shared_key_cache_new:
   50|     18|{
   51|     18|    if (mono_time == nullptr || self_secret_key == nullptr || timeout == 0 || keys_per_slot == 0) {
  ------------------
  |  |   63|     36|#define nullptr NULL
  ------------------
                  if (mono_time == nullptr || self_secret_key == nullptr || timeout == 0 || keys_per_slot == 0) {
  ------------------
  |  |   63|     36|#define nullptr NULL
  ------------------
  |  Branch (51:9): [True: 0, False: 18]
  |  Branch (51:33): [True: 0, False: 18]
  |  Branch (51:63): [True: 0, False: 18]
  |  Branch (51:79): [True: 0, False: 18]
  ------------------
   52|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   53|      0|    }
   54|       |
   55|       |    // Time must not be zero, since we use that as special value for empty slots
   56|     18|    if (mono_time_get(mono_time) == 0) {
  ------------------
  |  Branch (56:9): [True: 0, False: 18]
  ------------------
   57|       |        // Fail loudly in debug environments
   58|      0|        LOGGER_FATAL(log, "time must not be zero (mono_time not initialised?)");
  ------------------
  |  |   83|      0|    do {                                \
  |  |   84|      0|        LOGGER_ERROR(log, __VA_ARGS__); \
  |  |  ------------------
  |  |  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   85|      0|        logger_abort();                 \
  |  |   86|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (86:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
   59|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   60|      0|    }
   61|       |
   62|     18|    Shared_Key_Cache *res = (Shared_Key_Cache *)mem_alloc(mem, sizeof(Shared_Key_Cache));
   63|     18|    if (res == nullptr) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
  |  Branch (63:9): [True: 1, False: 17]
  ------------------
   64|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
   65|      1|    }
   66|       |
   67|     17|    res->self_secret_key = self_secret_key;
   68|     17|    res->mono_time = mono_time;
   69|     17|    res->mem = mem;
   70|     17|    res->log = log;
   71|     17|    res->keys_per_slot = keys_per_slot;
   72|       |
   73|       |    // We take one byte from the public key for each bucket and store keys_per_slot elements there
   74|     17|    const size_t cache_size = 256 * keys_per_slot;
   75|     17|    Shared_Key *keys = (Shared_Key *)mem_valloc(mem, cache_size, sizeof(Shared_Key));
   76|       |
   77|     17|    if (keys == nullptr) {
  ------------------
  |  |   63|     17|#define nullptr NULL
  ------------------
  |  Branch (77:9): [True: 0, False: 17]
  ------------------
   78|      0|        mem_delete(mem, res);
   79|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   80|      0|    }
   81|       |
   82|     17|    crypto_memlock(keys, cache_size * sizeof(Shared_Key));
   83|       |
   84|     17|    res->keys = keys;
   85|       |
   86|     17|    return res;
   87|     17|}
shared_key_cache_free:
   90|     24|{
   91|     24|    if (cache == nullptr) {
  ------------------
  |  |   63|     24|#define nullptr NULL
  ------------------
  |  Branch (91:9): [True: 7, False: 17]
  ------------------
   92|      7|        return;
   93|      7|    }
   94|       |
   95|     17|    const size_t cache_size = 256 * cache->keys_per_slot;
   96|       |    // Don't leave key material in memory
   97|     17|    crypto_memzero(cache->keys, cache_size * sizeof(Shared_Key));
   98|     17|    crypto_memunlock(cache->keys, cache_size * sizeof(Shared_Key));
   99|     17|    mem_delete(cache->mem, cache->keys);
  100|     17|    mem_delete(cache->mem, cache);
  101|     17|}

memzero:
   99|     54|{
  100|     54|    if (data == nullptr || data_size == 0) {
  ------------------
  |  |   63|    108|#define nullptr NULL
  ------------------
  |  Branch (100:9): [True: 0, False: 54]
  |  Branch (100:28): [True: 0, False: 54]
  ------------------
  101|      0|        return;
  102|      0|    }
  103|       |
  104|     54|    memset(data, 0, data_size);
  105|     54|}

