fuzz_support.cc:_ZZN6detail15func_conversionIPFPvP11Fuzz_SystemjEXadL_ZN3$_08__invokeES3_jEEEcvPFT_T0_DpT1_EIS1_S1_JjEEEvENKUlS1_DpT_E_clIJjEEEDaS1_SG_:
   31|    502|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFPvP11Fuzz_SystemjEXadL_ZN3$_08__invokeES3_jEEE13static_casterIS1_EcvT_IS3_EEv:
   22|    502|        {
   23|    502|            return static_cast<To>(obj);
   24|    502|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFPvP11Fuzz_SystemjjEXadL_ZN3$_18__invokeES3_jjEEEcvPFT_T0_DpT1_EIS1_S1_JjjEEEvENKUlS1_DpT_E_clIJjjEEEDaS1_SG_:
   31|  2.40k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFPvP11Fuzz_SystemjjEXadL_ZN3$_18__invokeES3_jjEEE13static_casterIS1_EcvT_IS3_EEv:
   22|  2.40k|        {
   23|  2.40k|            return static_cast<To>(obj);
   24|  2.40k|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFPvP11Fuzz_SystemS1_jEXadL_ZN3$_28__invokeES3_S1_jEEEcvPFT_T0_DpT1_EIS1_S1_JS1_jEEEvENKUlS1_DpT_E_clIJS1_jEEEDaS1_SG_:
   31|    798|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFPvP11Fuzz_SystemS1_jEXadL_ZN3$_28__invokeES3_S1_jEEE13static_casterIS1_EcvT_IS3_EEv:
   22|    798|        {
   23|    798|            return static_cast<To>(obj);
   24|    798|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFvP11Fuzz_SystemPvEXadL_ZN3$_38__invokeES2_S3_EEEcvPFT_T0_DpT1_EIvS3_JS3_EEEvENKUlS3_DpT_E_clIJS3_EEEDaS3_SG_:
   31|  3.23k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFvP11Fuzz_SystemPvEXadL_ZN3$_38__invokeES2_S3_EEE13static_casterIS3_EcvT_IS2_EEv:
   22|  3.23k|        {
   23|  3.23k|            return static_cast<To>(obj);
   24|  3.23k|        }

_ZN6SystemC2ENSt3__110unique_ptrI10Tox_SystemNS0_14default_deleteIS2_EEEENS1_I6MemoryNS3_IS6_EEEENS1_I7NetworkNS3_IS9_EEEENS1_I6RandomNS3_ISC_EEEE:
   38|    785|    : sys(std::move(in_sys))
   39|    785|    , mem(std::move(in_mem))
   40|    785|    , ns(std::move(in_ns))
   41|    785|    , rng(std::move(in_rng))
   42|    785|{
   43|    785|}
_ZN6SystemD2Ev:
   46|    785|System::~System() { }
_ZN11Fuzz_SystemC2ER9Fuzz_Data:
  232|    785|    : System{
  233|    785|        std::make_unique<Tox_System>(),
  234|    785|        std::make_unique<Memory>(Memory{&fuzz_memory_funcs, this}),
  235|    785|        std::make_unique<Network>(Network{&fuzz_network_funcs, this}),
  236|    785|        std::make_unique<Random>(Random{&fuzz_random_funcs, this}),
  237|    785|    }
  238|    785|    , data(input)
  239|    785|{
  240|    785|    sys->mono_time_callback = [](void *self) { return static_cast<Fuzz_System *>(self)->clock; };
  241|    785|    sys->mono_time_user_data = this;
  242|    785|    sys->mem = mem.get();
  243|    785|    sys->ns = ns.get();
  244|    785|    sys->rng = rng.get();
  245|    785|}
fuzz_support.cc:_ZNK3$_0clEP11Fuzz_Systemj:
   99|    502|    ![](Fuzz_System *self, uint32_t size) {
  100|    502|        return alloc_common<decltype(std::malloc), std::malloc>("malloc", size, self->data, size);
  101|    502|    },
fuzz_support.cc:_ZL12alloc_commonIDoFPvmETnT_XadL_Z6mallocEEJjEES0_PKcmR9Fuzz_DataDpT1_:
   88|    502|{
   89|    502|    CONSUME1_OR_RETURN_VAL(
  ------------------
  |  |  122|    502|    if (INPUT.size() < sizeof(TYPE)) {                 \
  |  |  ------------------
  |  |  |  Branch (122:9): [True: 483, False: 19]
  |  |  ------------------
  |  |  123|    483|        return VAL;                                    \
  |  |  124|    483|    }                                                  \
  |  |  125|    502|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   90|     19|        const bool, want_alloc, data, report_alloc("tox1", func, size, Func(args...)));
   91|     19|    if (!want_alloc) {
  ------------------
  |  Branch (91:9): [True: 1, False: 18]
  ------------------
   92|      1|        return nullptr;
   93|      1|    }
   94|     18|    return report_alloc("tox1", func, size, Func(args...));
   95|     19|}
fuzz_support.cc:_ZL12report_allocPKcS0_mPv:
   79|  3.66k|{
   80|  3.66k|    if (Fuzz_Data::FUZZ_DEBUG) {
  ------------------
  |  Branch (80:9): [Folded - Ignored]
  ------------------
   81|      0|        printf("%s: %s(%zu): %s\n", name, func, size, ptr == nullptr ? "false" : "true");
  ------------------
  |  Branch (81:55): [True: 0, False: 0]
  ------------------
   82|      0|    }
   83|  3.66k|    return ptr;
   84|  3.66k|}
fuzz_support.cc:_ZNK3$_1clEP11Fuzz_Systemjj:
  103|  2.40k|    ![](Fuzz_System *self, uint32_t nmemb, uint32_t size) {
  104|  2.40k|        return alloc_common<decltype(std::calloc), std::calloc>(
  105|  2.40k|            "calloc", nmemb * size, self->data, nmemb, size);
  106|  2.40k|    },
fuzz_support.cc:_ZL12alloc_commonIDoFPvmmETnT_XadL_Z6callocEEJjjEES0_PKcmR9Fuzz_DataDpT1_:
   88|  2.40k|{
   89|  2.40k|    CONSUME1_OR_RETURN_VAL(
  ------------------
  |  |  122|  2.40k|    if (INPUT.size() < sizeof(TYPE)) {                 \
  |  |  ------------------
  |  |  |  Branch (122:9): [True: 1.52k, False: 878]
  |  |  ------------------
  |  |  123|  1.52k|        return VAL;                                    \
  |  |  124|  1.52k|    }                                                  \
  |  |  125|  2.40k|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   90|    878|        const bool, want_alloc, data, report_alloc("tox1", func, size, Func(args...)));
   91|    878|    if (!want_alloc) {
  ------------------
  |  Branch (91:9): [True: 41, False: 837]
  ------------------
   92|     41|        return nullptr;
   93|     41|    }
   94|    837|    return report_alloc("tox1", func, size, Func(args...));
   95|    878|}
fuzz_support.cc:_ZNK3$_2clEP11Fuzz_SystemPvj:
  108|    798|    ![](Fuzz_System *self, void *ptr, uint32_t size) {
  109|    798|        return alloc_common<decltype(std::realloc), std::realloc>(
  110|    798|            "realloc", size, self->data, ptr, size);
  111|    798|    },
fuzz_support.cc:_ZL12alloc_commonIDoFPvS0_mETnT_XadL_Z7reallocEEJS0_jEES0_PKcmR9Fuzz_DataDpT1_:
   88|    798|{
   89|    798|    CONSUME1_OR_RETURN_VAL(
  ------------------
  |  |  122|    798|    if (INPUT.size() < sizeof(TYPE)) {                 \
  |  |  ------------------
  |  |  |  Branch (122:9): [True: 774, False: 24]
  |  |  ------------------
  |  |  123|    774|        return VAL;                                    \
  |  |  124|    774|    }                                                  \
  |  |  125|    798|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   90|     24|        const bool, want_alloc, data, report_alloc("tox1", func, size, Func(args...)));
   91|     24|    if (!want_alloc) {
  ------------------
  |  Branch (91:9): [True: 1, False: 23]
  ------------------
   92|      1|        return nullptr;
   93|      1|    }
   94|     23|    return report_alloc("tox1", func, size, Func(args...));
   95|     24|}
fuzz_support.cc:_ZNK3$_3clEP11Fuzz_SystemPv:
  113|  3.23k|    ![](Fuzz_System *self, void *ptr) { std::free(ptr); },

_ZNK9Fuzz_Data4sizeEv:
   69|  5.27k|    std::size_t size() const { return size_; }
_ZN9Fuzz_Data7consumeEPKcm:
   75|  1.57k|    {
   76|  1.57k|        const uint8_t *val = data_;
   77|  1.57k|        if (FUZZ_DEBUG) {
  ------------------
  |  Branch (77:13): [Folded - Ignored]
  ------------------
   78|      0|            if (pos() == TRACE_TRAP) {
  ------------------
  |  Branch (78:17): [True: 0, False: 0]
  ------------------
   79|      0|                __asm__("int $3");
   80|      0|            }
   81|      0|            if (count == 1) {
  ------------------
  |  Branch (81:17): [True: 0, False: 0]
  ------------------
   82|      0|                std::printf("consume@%zu(%s): %d (0x%02x)\n", pos(), func, val[0], val[0]);
   83|      0|            } else if (count != 0) {
  ------------------
  |  Branch (83:24): [True: 0, False: 0]
  ------------------
   84|      0|                std::printf("consume@%zu(%s): %02x..%02x[%zu]\n", pos(), func, val[0],
   85|      0|                    val[count - 1], count);
   86|      0|            }
   87|      0|        }
   88|  1.57k|        data_ += count;
   89|  1.57k|        size_ -= count;
   90|  1.57k|        return val;
   91|  1.57k|    }
_ZNK9Fuzz_Data5emptyEv:
   72|    786|    bool empty() const { return size_ == 0; }
_ZN9Fuzz_DataC2EPKhm:
   32|    788|        : data_(input_data)
   33|    788|        , base_(input_data)
   34|    788|        , size_(input_size)
   35|    788|    {
   36|    788|    }
_ZN9Fuzz_Data8ConsumercvbEv:
   46|    921|        {
   47|       |            // Special case because memcpy causes UB for bool (which can't be
   48|       |            // anything other than 0 or 1).
   49|    921|            const bool val = fd.data_[0];
   50|    921|            if (FUZZ_DEBUG) {
  ------------------
  |  Branch (50:17): [Folded - Ignored]
  ------------------
   51|      0|                std::printf("consume@%zu(%s): bool %s\n", fd.pos(), func, val ? "true" : "false");
  ------------------
  |  Branch (51:75): [True: 0, False: 0]
  ------------------
   52|      0|            }
   53|    921|            ++fd.data_;
   54|    921|            --fd.size_;
   55|    921|            return val;
   56|    921|        }
_ZN9Fuzz_Data8consume1EPKc:
   68|    921|    Consumer consume1(const char *func) { return Consumer{func, *this}; }

cmp_init:
  837|  1.14k|                                         cmp_writer *write) {
  838|  1.14k|  ctx->error = CMP_ERROR_NONE;
  839|  1.14k|  ctx->buf = buf;
  840|  1.14k|  ctx->read = read;
  841|  1.14k|  ctx->skip = skip;
  842|  1.14k|  ctx->write = write;
  843|  1.14k|}
cmp_write_pfix:
  859|  3.91k|bool cmp_write_pfix(cmp_ctx_t *ctx, uint8_t c) {
  860|  3.91k|  if (c <= 0x7F)
  ------------------
  |  Branch (860:7): [True: 3.91k, False: 0]
  ------------------
  861|  3.91k|    return write_fixed_value(ctx, c);
  862|       |
  863|      0|  ctx->error = CMP_ERROR_INPUT_VALUE_TOO_LARGE;
  864|      0|  return false;
  865|  3.91k|}
cmp_write_u8:
  938|     64|bool cmp_write_u8(cmp_ctx_t *ctx, uint8_t c) {
  939|     64|  if (!write_type_marker(ctx, U8_MARKER))
  ------------------
  |  Branch (939:7): [True: 0, False: 64]
  ------------------
  940|      0|    return false;
  941|       |
  942|     64|  return ctx->write(ctx, &c, sizeof(uint8_t)) == sizeof(uint8_t);
  943|     64|}
cmp_write_u16:
  945|     92|bool cmp_write_u16(cmp_ctx_t *ctx, uint16_t s) {
  946|     92|  if (!write_type_marker(ctx, U16_MARKER))
  ------------------
  |  Branch (946:7): [True: 0, False: 92]
  ------------------
  947|      0|    return false;
  948|       |
  949|     92|  s = be16(s);
  950|       |
  951|     92|  return ctx->write(ctx, &s, sizeof(uint16_t)) == sizeof(uint16_t);
  952|     92|}
cmp_write_u32:
  954|     48|bool cmp_write_u32(cmp_ctx_t *ctx, uint32_t i) {
  955|     48|  if (!write_type_marker(ctx, U32_MARKER))
  ------------------
  |  Branch (955:7): [True: 0, False: 48]
  ------------------
  956|      0|    return false;
  957|       |
  958|     48|  i = be32(i);
  959|       |
  960|     48|  return ctx->write(ctx, &i, sizeof(uint32_t)) == sizeof(uint32_t);
  961|     48|}
cmp_write_u64:
  963|     14|bool cmp_write_u64(cmp_ctx_t *ctx, uint64_t l) {
  964|     14|  if (!write_type_marker(ctx, U64_MARKER))
  ------------------
  |  Branch (964:7): [True: 0, False: 14]
  ------------------
  965|      0|    return false;
  966|       |
  967|     14|  l = be64(l);
  968|       |
  969|     14|  return ctx->write(ctx, &l, sizeof(uint64_t)) == sizeof(uint64_t);
  970|     14|}
cmp_write_uinteger:
  972|  4.13k|bool cmp_write_uinteger(cmp_ctx_t *ctx, uint64_t u) {
  973|  4.13k|  if (u <= 0x7F)
  ------------------
  |  Branch (973:7): [True: 3.91k, False: 218]
  ------------------
  974|  3.91k|    return cmp_write_pfix(ctx, (uint8_t)u);
  975|    218|  if (u <= 0xFF)
  ------------------
  |  Branch (975:7): [True: 64, False: 154]
  ------------------
  976|     64|    return cmp_write_u8(ctx, (uint8_t)u);
  977|    154|  if (u <= 0xFFFF)
  ------------------
  |  Branch (977:7): [True: 92, False: 62]
  ------------------
  978|     92|    return cmp_write_u16(ctx, (uint16_t)u);
  979|     62|  if (u <= 0xFFFFFFFF)
  ------------------
  |  Branch (979:7): [True: 48, False: 14]
  ------------------
  980|     48|    return cmp_write_u32(ctx, (uint32_t)u);
  981|       |
  982|     14|  return cmp_write_u64(ctx, u);
  983|     62|}
cmp_write_true:
 1045|     14|bool cmp_write_true(cmp_ctx_t *ctx) {
 1046|     14|  return write_type_marker(ctx, TRUE_MARKER);
 1047|     14|}
cmp_write_false:
 1049|     16|bool cmp_write_false(cmp_ctx_t *ctx) {
 1050|     16|  return write_type_marker(ctx, FALSE_MARKER);
 1051|     16|}
cmp_write_bool:
 1053|     30|bool cmp_write_bool(cmp_ctx_t *ctx, bool b) {
 1054|     30|  if (b)
  ------------------
  |  Branch (1054:7): [True: 14, False: 16]
  ------------------
 1055|     14|    return cmp_write_true(ctx);
 1056|       |
 1057|     16|  return cmp_write_false(ctx);
 1058|     30|}
cmp_write_bin8_marker:
 1205|    622|bool cmp_write_bin8_marker(cmp_ctx_t *ctx, uint8_t size) {
 1206|    622|  if (!write_type_marker(ctx, BIN8_MARKER))
  ------------------
  |  Branch (1206:7): [True: 0, False: 622]
  ------------------
 1207|      0|    return false;
 1208|       |
 1209|    622|  if (ctx->write(ctx, &size, sizeof(uint8_t)) == sizeof(uint8_t))
  ------------------
  |  Branch (1209:7): [True: 622, False: 0]
  ------------------
 1210|    622|    return true;
 1211|       |
 1212|      0|  ctx->error = CMP_ERROR_LENGTH_WRITING;
 1213|      0|  return false;
 1214|    622|}
cmp_write_bin8:
 1216|    622|bool cmp_write_bin8(cmp_ctx_t *ctx, const void *data, uint8_t size) {
 1217|    622|  if (!cmp_write_bin8_marker(ctx, size))
  ------------------
  |  Branch (1217:7): [True: 0, False: 622]
  ------------------
 1218|      0|    return false;
 1219|       |
 1220|    622|  if (size == 0)
  ------------------
  |  Branch (1220:7): [True: 530, False: 92]
  ------------------
 1221|    530|    return true;
 1222|       |
 1223|     92|  if (ctx->write(ctx, data, size) == size)
  ------------------
  |  Branch (1223:7): [True: 92, False: 0]
  ------------------
 1224|     92|    return true;
 1225|       |
 1226|      0|  ctx->error = CMP_ERROR_DATA_WRITING;
 1227|      0|  return false;
 1228|     92|}
cmp_write_bin16_marker:
 1230|      2|bool cmp_write_bin16_marker(cmp_ctx_t *ctx, uint16_t size) {
 1231|      2|  if (!write_type_marker(ctx, BIN16_MARKER))
  ------------------
  |  Branch (1231:7): [True: 0, False: 2]
  ------------------
 1232|      0|    return false;
 1233|       |
 1234|      2|  size = be16(size);
 1235|       |
 1236|      2|  if (ctx->write(ctx, &size, sizeof(uint16_t)) == sizeof(uint16_t))
  ------------------
  |  Branch (1236:7): [True: 2, False: 0]
  ------------------
 1237|      2|    return true;
 1238|       |
 1239|      0|  ctx->error = CMP_ERROR_LENGTH_WRITING;
 1240|      0|  return false;
 1241|      2|}
cmp_write_bin16:
 1243|      2|bool cmp_write_bin16(cmp_ctx_t *ctx, const void *data, uint16_t size) {
 1244|      2|  if (!cmp_write_bin16_marker(ctx, size))
  ------------------
  |  Branch (1244:7): [True: 0, False: 2]
  ------------------
 1245|      0|    return false;
 1246|       |
 1247|      2|  if (size == 0)
  ------------------
  |  Branch (1247:7): [True: 0, False: 2]
  ------------------
 1248|      0|    return true;
 1249|       |
 1250|      2|  if (ctx->write(ctx, data, size) == size)
  ------------------
  |  Branch (1250:7): [True: 2, False: 0]
  ------------------
 1251|      2|    return true;
 1252|       |
 1253|      0|  ctx->error = CMP_ERROR_DATA_WRITING;
 1254|      0|  return false;
 1255|      2|}
cmp_write_bin:
 1293|    624|bool cmp_write_bin(cmp_ctx_t *ctx, const void *data, uint32_t size) {
 1294|    624|  if (size <= 0xFF)
  ------------------
  |  Branch (1294:7): [True: 622, False: 2]
  ------------------
 1295|    622|    return cmp_write_bin8(ctx, data, (uint8_t)size);
 1296|      2|  if (size <= 0xFFFF)
  ------------------
  |  Branch (1296:7): [True: 2, False: 0]
  ------------------
 1297|      2|    return cmp_write_bin16(ctx, data, (uint16_t)size);
 1298|       |
 1299|      0|  return cmp_write_bin32(ctx, data, size);
 1300|      2|}
cmp_write_fixarray:
 1302|  2.80k|bool cmp_write_fixarray(cmp_ctx_t *ctx, uint8_t size) {
 1303|  2.80k|  if (size <= FIXARRAY_SIZE)
  ------------------
  |  Branch (1303:7): [True: 2.80k, False: 0]
  ------------------
 1304|  2.80k|    return write_fixed_value(ctx, FIXARRAY_MARKER | size);
 1305|       |
 1306|      0|  ctx->error = CMP_ERROR_INPUT_VALUE_TOO_LARGE;
 1307|      0|  return false;
 1308|  2.80k|}
cmp_write_array:
 1336|  2.80k|bool cmp_write_array(cmp_ctx_t *ctx, uint32_t size) {
 1337|  2.80k|  if (size <= FIXARRAY_SIZE)
  ------------------
  |  Branch (1337:7): [True: 2.80k, False: 0]
  ------------------
 1338|  2.80k|    return cmp_write_fixarray(ctx, (uint8_t)size);
 1339|      0|  if (size <= 0xFFFF)
  ------------------
  |  Branch (1339:7): [True: 0, False: 0]
  ------------------
 1340|      0|    return cmp_write_array16(ctx, (uint16_t)size);
 1341|       |
 1342|      0|  return cmp_write_array32(ctx, size);
 1343|      0|}
cmp_read_ushort:
 2172|    202|bool cmp_read_ushort(cmp_ctx_t *ctx, uint16_t *s) {
 2173|    202|  cmp_object_t obj;
 2174|       |
 2175|    202|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2175:7): [True: 40, False: 162]
  ------------------
 2176|     40|    return false;
 2177|       |
 2178|    162|  switch (obj.type) {
 2179|     58|    case CMP_TYPE_POSITIVE_FIXNUM:
  ------------------
  |  Branch (2179:5): [True: 58, False: 104]
  ------------------
 2180|     84|    case CMP_TYPE_UINT8: {
  ------------------
  |  Branch (2180:5): [True: 26, False: 136]
  ------------------
 2181|     84|      *s = obj.as.u8;
 2182|     84|      return true;
 2183|     58|    }
 2184|     29|    case CMP_TYPE_UINT16: {
  ------------------
  |  Branch (2184:5): [True: 29, False: 133]
  ------------------
 2185|     29|      *s = obj.as.u16;
 2186|     29|      return true;
 2187|     58|    }
 2188|      3|    case CMP_TYPE_NEGATIVE_FIXNUM:
  ------------------
  |  Branch (2188:5): [True: 3, False: 159]
  ------------------
 2189|     14|    case CMP_TYPE_SINT8: {
  ------------------
  |  Branch (2189:5): [True: 11, False: 151]
  ------------------
 2190|     14|      if (obj.as.s8 >= 0) {
  ------------------
  |  Branch (2190:11): [True: 11, False: 3]
  ------------------
 2191|     11|        *s = (uint8_t)obj.as.s8;
 2192|     11|        return true;
 2193|     11|      }
 2194|      3|      break;
 2195|     14|    }
 2196|     24|    case CMP_TYPE_SINT16: {
  ------------------
  |  Branch (2196:5): [True: 24, False: 138]
  ------------------
 2197|     24|      if (obj.as.s16 >= 0) {
  ------------------
  |  Branch (2197:11): [True: 23, False: 1]
  ------------------
 2198|     23|        *s = (uint16_t)obj.as.s16;
 2199|     23|        return true;
 2200|     23|      }
 2201|      1|      break;
 2202|     24|    }
 2203|     11|    default:
  ------------------
  |  Branch (2203:5): [True: 11, False: 151]
  ------------------
 2204|     11|      break;
 2205|    162|  }
 2206|       |
 2207|     15|  ctx->error = CMP_ERROR_INVALID_TYPE;
 2208|     15|  return false;
 2209|    162|}
cmp_read_uint:
 2211|  4.35k|bool cmp_read_uint(cmp_ctx_t *ctx, uint32_t *i) {
 2212|  4.35k|  cmp_object_t obj;
 2213|       |
 2214|  4.35k|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2214:7): [True: 94, False: 4.26k]
  ------------------
 2215|     94|    return false;
 2216|       |
 2217|  4.26k|  switch (obj.type) {
 2218|  4.01k|    case CMP_TYPE_POSITIVE_FIXNUM:
  ------------------
  |  Branch (2218:5): [True: 4.01k, False: 253]
  ------------------
 2219|  4.06k|    case CMP_TYPE_UINT8: {
  ------------------
  |  Branch (2219:5): [True: 59, False: 4.20k]
  ------------------
 2220|  4.06k|      *i = obj.as.u8;
 2221|  4.06k|      return true;
 2222|  4.01k|    }
 2223|     54|    case CMP_TYPE_UINT16: {
  ------------------
  |  Branch (2223:5): [True: 54, False: 4.20k]
  ------------------
 2224|     54|      *i = obj.as.u16;
 2225|     54|      return true;
 2226|  4.01k|    }
 2227|     50|    case CMP_TYPE_UINT32: {
  ------------------
  |  Branch (2227:5): [True: 50, False: 4.21k]
  ------------------
 2228|     50|      *i = obj.as.u32;
 2229|     50|      return true;
 2230|  4.01k|    }
 2231|      3|    case CMP_TYPE_NEGATIVE_FIXNUM:
  ------------------
  |  Branch (2231:5): [True: 3, False: 4.26k]
  ------------------
 2232|     37|    case CMP_TYPE_SINT8: {
  ------------------
  |  Branch (2232:5): [True: 34, False: 4.22k]
  ------------------
 2233|     37|      if (obj.as.s8 >= 0) {
  ------------------
  |  Branch (2233:11): [True: 34, False: 3]
  ------------------
 2234|     34|        *i = (uint8_t)obj.as.s8;
 2235|     34|        return true;
 2236|     34|      }
 2237|      3|      break;
 2238|     37|    }
 2239|     21|    case CMP_TYPE_SINT16: {
  ------------------
  |  Branch (2239:5): [True: 21, False: 4.24k]
  ------------------
 2240|     21|      if (obj.as.s16 >= 0) {
  ------------------
  |  Branch (2240:11): [True: 20, False: 1]
  ------------------
 2241|     20|        *i = (uint16_t)obj.as.s16;
 2242|     20|        return true;
 2243|     20|      }
 2244|      1|      break;
 2245|     21|    }
 2246|     17|    case CMP_TYPE_SINT32: {
  ------------------
  |  Branch (2246:5): [True: 17, False: 4.24k]
  ------------------
 2247|     17|      if (obj.as.s32 >= 0) {
  ------------------
  |  Branch (2247:11): [True: 16, False: 1]
  ------------------
 2248|     16|        *i = (uint32_t)obj.as.s32;
 2249|     16|        return true;
 2250|     16|      }
 2251|      1|      break;
 2252|     17|    }
 2253|     15|    default:
  ------------------
  |  Branch (2253:5): [True: 15, False: 4.24k]
  ------------------
 2254|     15|      break;
 2255|  4.26k|  }
 2256|       |
 2257|     20|  ctx->error = CMP_ERROR_INVALID_TYPE;
 2258|     20|  return false;
 2259|  4.26k|}
cmp_read_ulong:
 2261|    278|bool cmp_read_ulong(cmp_ctx_t *ctx, uint64_t *u) {
 2262|    278|  cmp_object_t obj;
 2263|       |
 2264|    278|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2264:7): [True: 28, False: 250]
  ------------------
 2265|     28|    return false;
 2266|       |
 2267|    250|  switch (obj.type) {
 2268|    113|    case CMP_TYPE_POSITIVE_FIXNUM:
  ------------------
  |  Branch (2268:5): [True: 113, False: 137]
  ------------------
 2269|    134|    case CMP_TYPE_UINT8: {
  ------------------
  |  Branch (2269:5): [True: 21, False: 229]
  ------------------
 2270|    134|      *u = obj.as.u8;
 2271|    134|      return true;
 2272|    113|    }
 2273|     22|    case CMP_TYPE_UINT16: {
  ------------------
  |  Branch (2273:5): [True: 22, False: 228]
  ------------------
 2274|     22|      *u = obj.as.u16;
 2275|     22|      return true;
 2276|    113|    }
 2277|     11|    case CMP_TYPE_UINT32: {
  ------------------
  |  Branch (2277:5): [True: 11, False: 239]
  ------------------
 2278|     11|      *u = obj.as.u32;
 2279|     11|      return true;
 2280|    113|    }
 2281|     21|    case CMP_TYPE_UINT64: {
  ------------------
  |  Branch (2281:5): [True: 21, False: 229]
  ------------------
 2282|     21|      *u = obj.as.u64;
 2283|     21|      return true;
 2284|    113|    }
 2285|      1|    case CMP_TYPE_NEGATIVE_FIXNUM:
  ------------------
  |  Branch (2285:5): [True: 1, False: 249]
  ------------------
 2286|     12|    case CMP_TYPE_SINT8: {
  ------------------
  |  Branch (2286:5): [True: 11, False: 239]
  ------------------
 2287|     12|      if (obj.as.s8 >= 0) {
  ------------------
  |  Branch (2287:11): [True: 11, False: 1]
  ------------------
 2288|     11|        *u = (uint8_t)obj.as.s8;
 2289|     11|        return true;
 2290|     11|      }
 2291|      1|      break;
 2292|     12|    }
 2293|     16|    case CMP_TYPE_SINT16: {
  ------------------
  |  Branch (2293:5): [True: 16, False: 234]
  ------------------
 2294|     16|      if (obj.as.s16 >= 0) {
  ------------------
  |  Branch (2294:11): [True: 15, False: 1]
  ------------------
 2295|     15|        *u = (uint16_t)obj.as.s16;
 2296|     15|        return true;
 2297|     15|      }
 2298|      1|      break;
 2299|     16|    }
 2300|     12|    case CMP_TYPE_SINT32: {
  ------------------
  |  Branch (2300:5): [True: 12, False: 238]
  ------------------
 2301|     12|      if (obj.as.s32 >= 0) {
  ------------------
  |  Branch (2301:11): [True: 11, False: 1]
  ------------------
 2302|     11|        *u = (uint32_t)obj.as.s32;
 2303|     11|        return true;
 2304|     11|      }
 2305|      1|      break;
 2306|     12|    }
 2307|     14|    case CMP_TYPE_SINT64: {
  ------------------
  |  Branch (2307:5): [True: 14, False: 236]
  ------------------
 2308|     14|      if (obj.as.s64 >= 0) {
  ------------------
  |  Branch (2308:11): [True: 11, False: 3]
  ------------------
 2309|     11|        *u = (uint64_t)obj.as.s64;
 2310|     11|        return true;
 2311|     11|      }
 2312|      3|      break;
 2313|     14|    }
 2314|      8|    default:
  ------------------
  |  Branch (2314:5): [True: 8, False: 242]
  ------------------
 2315|      8|      break;
 2316|    250|  }
 2317|       |
 2318|     14|  ctx->error = CMP_ERROR_INVALID_TYPE;
 2319|     14|  return false;
 2320|    250|}
cmp_read_bool:
 2395|     65|bool cmp_read_bool(cmp_ctx_t *ctx, bool *b) {
 2396|     65|  cmp_object_t obj;
 2397|       |
 2398|     65|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2398:7): [True: 30, False: 35]
  ------------------
 2399|     30|    return false;
 2400|       |
 2401|     35|  if (obj.type != CMP_TYPE_BOOLEAN) {
  ------------------
  |  Branch (2401:7): [True: 6, False: 29]
  ------------------
 2402|      6|    ctx->error = CMP_ERROR_INVALID_TYPE;
 2403|      6|    return false;
 2404|      6|  }
 2405|       |
 2406|     29|  if (obj.as.boolean) {
  ------------------
  |  Branch (2406:7): [True: 15, False: 14]
  ------------------
 2407|     15|    *b = true;
 2408|     15|  } else {
 2409|     14|    *b = false;
 2410|     14|  }
 2411|       |
 2412|     29|  return true;
 2413|     35|}
cmp_read_bin_size:
 2479|    621|bool cmp_read_bin_size(cmp_ctx_t *ctx, uint32_t *size) {
 2480|    621|  cmp_object_t obj;
 2481|       |
 2482|    621|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2482:7): [True: 66, False: 555]
  ------------------
 2483|     66|    return false;
 2484|       |
 2485|    555|  switch (obj.type) {
 2486|    114|    case CMP_TYPE_BIN8:
  ------------------
  |  Branch (2486:5): [True: 114, False: 441]
  ------------------
 2487|    439|    case CMP_TYPE_BIN16:
  ------------------
  |  Branch (2487:5): [True: 325, False: 230]
  ------------------
 2488|    535|    case CMP_TYPE_BIN32: {
  ------------------
  |  Branch (2488:5): [True: 96, False: 459]
  ------------------
 2489|    535|      *size = obj.as.bin_size;
 2490|    535|      return true;
 2491|    439|    }
 2492|     20|    default: {
  ------------------
  |  Branch (2492:5): [True: 20, False: 535]
  ------------------
 2493|     20|      ctx->error = CMP_ERROR_INVALID_TYPE;
 2494|     20|      return false;
 2495|    439|    }
 2496|    555|  }
 2497|    555|}
cmp_read_array:
 2519|  3.78k|bool cmp_read_array(cmp_ctx_t *ctx, uint32_t *size) {
 2520|  3.78k|  cmp_object_t obj;
 2521|       |
 2522|  3.78k|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2522:7): [True: 137, False: 3.64k]
  ------------------
 2523|    137|    return false;
 2524|       |
 2525|  3.64k|  switch (obj.type) {
 2526|  3.58k|    case CMP_TYPE_FIXARRAY:
  ------------------
  |  Branch (2526:5): [True: 3.58k, False: 64]
  ------------------
 2527|  3.58k|    case CMP_TYPE_ARRAY16:
  ------------------
  |  Branch (2527:5): [True: 3, False: 3.64k]
  ------------------
 2528|  3.58k|    case CMP_TYPE_ARRAY32: {
  ------------------
  |  Branch (2528:5): [True: 4, False: 3.64k]
  ------------------
 2529|  3.58k|      *size = obj.as.array_size;
 2530|  3.58k|      return true;
 2531|  3.58k|    }
 2532|     57|    default: {
  ------------------
  |  Branch (2532:5): [True: 57, False: 3.58k]
  ------------------
 2533|     57|      ctx->error = CMP_ERROR_INVALID_TYPE;
 2534|     57|      return false;
 2535|  3.58k|    }
 2536|  3.64k|  }
 2537|  3.64k|}
cmp_read_object:
 2810|  9.30k|bool cmp_read_object(cmp_ctx_t *ctx, cmp_object_t *obj) {
 2811|  9.30k|  uint8_t type_marker = 0;
 2812|       |
 2813|  9.30k|  if (!read_type_marker(ctx, &type_marker))
  ------------------
  |  Branch (2813:7): [True: 226, False: 9.07k]
  ------------------
 2814|    226|    return false;
 2815|       |
 2816|  9.07k|  if (!type_marker_to_cmp_type(type_marker, &obj->type)) {
  ------------------
  |  Branch (2816:7): [True: 6, False: 9.07k]
  ------------------
 2817|      6|    ctx->error = CMP_ERROR_INVALID_TYPE;
 2818|      6|    return false;
 2819|      6|  }
 2820|       |
 2821|  9.07k|  return read_obj_data(ctx, type_marker, obj);
 2822|  9.07k|}
cmp.c:write_fixed_value:
  245|  6.71k|static bool write_fixed_value(cmp_ctx_t *ctx, uint8_t value) {
  246|  6.71k|  if (write_byte(ctx, value))
  ------------------
  |  Branch (246:7): [True: 6.71k, False: 0]
  ------------------
  247|  6.71k|    return true;
  248|       |
  249|      0|  ctx->error = CMP_ERROR_FIXED_VALUE_WRITING;
  250|      0|  return false;
  251|  6.71k|}
cmp.c:write_byte:
  207|  7.59k|static bool write_byte(cmp_ctx_t *ctx, uint8_t x) {
  208|  7.59k|  return ctx->write(ctx, &x, sizeof(uint8_t)) == sizeof(uint8_t);
  209|  7.59k|}
cmp.c:write_type_marker:
  237|    872|static bool write_type_marker(cmp_ctx_t *ctx, uint8_t marker) {
  238|    872|  if (write_byte(ctx, marker))
  ------------------
  |  Branch (238:7): [True: 872, False: 0]
  ------------------
  239|    872|    return true;
  240|       |
  241|      0|  ctx->error = CMP_ERROR_TYPE_MARKER_WRITING;
  242|      0|  return false;
  243|    872|}
cmp.c:sbe16:
  127|     62|static int16_t sbe16(int16_t x) {
  128|     62|  return (int16_t)be16((uint16_t)x);
  129|     62|}
cmp.c:sbe32:
  138|     32|static int32_t sbe32(int32_t x) {
  139|     32|  return (int32_t)be32((uint32_t)x);
  140|     32|}
cmp.c:sbe64:
  149|     16|static int64_t sbe64(int64_t x) {
  150|     16|  return (int64_t)be64((uint64_t)x);
  151|     16|}
cmp.c:be16:
  119|  1.31k|static uint16_t be16(uint16_t x) {
  120|  1.31k|  if (!is_bigendian())
  ------------------
  |  Branch (120:7): [True: 1.31k, False: 0]
  ------------------
  121|  1.31k|    return ((x >> 8) & 0x00ff)
  122|  1.31k|         | ((x << 8) & 0xff00);
  123|       |
  124|      0|  return x;
  125|  1.31k|}
cmp.c:is_bigendian:
  109|  1.72k|static bool is_bigendian(void) {
  110|       |#ifdef WORDS_BIGENDIAN
  111|       |  return WORDS_BIGENDIAN;
  112|       |#else
  113|  1.72k|  const int32_t i_ = 1;
  114|  1.72k|  const char *i_bytes = (const char *)&i_;
  115|  1.72k|  return *i_bytes == 0;
  116|  1.72k|#endif /* WORDS_BIGENDIAN */
  117|  1.72k|}
cmp.c:be32:
  131|    359|static uint32_t be32(uint32_t x) {
  132|    359|  if (!is_bigendian())
  ------------------
  |  Branch (132:7): [True: 359, False: 0]
  ------------------
  133|    359|    return ((uint32_t)be16((uint16_t)(x & 0xffff)) << 16) | (uint32_t)be16((uint16_t)(x >> 16));
  134|       |
  135|      0|  return x;
  136|    359|}
cmp.c:be64:
  142|     55|static uint64_t be64(uint64_t x) {
  143|     55|  if (!is_bigendian())
  ------------------
  |  Branch (143:7): [True: 55, False: 0]
  ------------------
  144|     55|    return ((uint64_t)be32((uint32_t)(x & 0xffffffff)) << 32) | (uint64_t)be32((uint32_t)(x >> 32));
  145|       |
  146|      0|  return x;
  147|     55|}
cmp.c:read_type_marker:
  228|  9.30k|static bool read_type_marker(cmp_ctx_t *ctx, uint8_t *marker) {
  229|  9.30k|  if (read_byte(ctx, marker)) {
  ------------------
  |  Branch (229:7): [True: 9.07k, False: 226]
  ------------------
  230|  9.07k|    return true;
  231|  9.07k|  }
  232|       |
  233|    226|  ctx->error = CMP_ERROR_TYPE_MARKER_READING;
  234|    226|  return false;
  235|  9.30k|}
cmp.c:read_byte:
  203|  9.30k|static bool read_byte(cmp_ctx_t *ctx, uint8_t *x) {
  204|  9.30k|  return ctx->read(ctx, x, sizeof(uint8_t));
  205|  9.30k|}
cmp.c:type_marker_to_cmp_type:
  253|  9.07k|static bool type_marker_to_cmp_type(uint8_t type_marker, uint8_t *cmp_type) {
  254|  9.07k|  if (type_marker <= 0x7F) {
  ------------------
  |  Branch (254:7): [True: 4.20k, False: 4.87k]
  ------------------
  255|  4.20k|    *cmp_type = CMP_TYPE_POSITIVE_FIXNUM;
  256|  4.20k|    return true;
  257|  4.20k|  }
  258|       |
  259|  4.87k|  if (type_marker <= 0x8F) {
  ------------------
  |  Branch (259:7): [True: 9, False: 4.87k]
  ------------------
  260|      9|    *cmp_type = CMP_TYPE_FIXMAP;
  261|      9|    return true;
  262|      9|  }
  263|       |
  264|  4.87k|  if (type_marker <= 0x9F) {
  ------------------
  |  Branch (264:7): [True: 3.59k, False: 1.27k]
  ------------------
  265|  3.59k|    *cmp_type = CMP_TYPE_FIXARRAY;
  266|  3.59k|    return true;
  267|  3.59k|  }
  268|       |
  269|  1.27k|  if (type_marker <= 0xBF) {
  ------------------
  |  Branch (269:7): [True: 6, False: 1.27k]
  ------------------
  270|      6|    *cmp_type = CMP_TYPE_FIXSTR;
  271|      6|    return true;
  272|      6|  }
  273|       |
  274|  1.27k|  if (type_marker >= 0xE0) {
  ------------------
  |  Branch (274:7): [True: 13, False: 1.25k]
  ------------------
  275|     13|    *cmp_type = CMP_TYPE_NEGATIVE_FIXNUM;
  276|     13|    return true;
  277|     13|  }
  278|       |
  279|  1.25k|  switch (type_marker) {
  280|      6|    case NIL_MARKER: {
  ------------------
  |  Branch (280:5): [True: 6, False: 1.25k]
  ------------------
  281|      6|      *cmp_type = CMP_TYPE_NIL;
  282|      6|      return true;
  283|      0|    }
  284|     22|    case FALSE_MARKER: {
  ------------------
  |  Branch (284:5): [True: 22, False: 1.23k]
  ------------------
  285|     22|      *cmp_type = CMP_TYPE_BOOLEAN;
  286|     22|      return true;
  287|      0|    }
  288|     22|    case TRUE_MARKER: {
  ------------------
  |  Branch (288:5): [True: 22, False: 1.23k]
  ------------------
  289|     22|      *cmp_type = CMP_TYPE_BOOLEAN;
  290|     22|      return true;
  291|      0|    }
  292|    122|    case BIN8_MARKER: {
  ------------------
  |  Branch (292:5): [True: 122, False: 1.13k]
  ------------------
  293|    122|      *cmp_type = CMP_TYPE_BIN8;
  294|    122|      return true;
  295|      0|    }
  296|    336|    case BIN16_MARKER: {
  ------------------
  |  Branch (296:5): [True: 336, False: 921]
  ------------------
  297|    336|      *cmp_type = CMP_TYPE_BIN16;
  298|    336|      return true;
  299|      0|    }
  300|    107|    case BIN32_MARKER: {
  ------------------
  |  Branch (300:5): [True: 107, False: 1.15k]
  ------------------
  301|    107|      *cmp_type = CMP_TYPE_BIN32;
  302|    107|      return true;
  303|      0|    }
  304|      8|    case EXT8_MARKER: {
  ------------------
  |  Branch (304:5): [True: 8, False: 1.24k]
  ------------------
  305|      8|      *cmp_type = CMP_TYPE_EXT8;
  306|      8|      return true;
  307|      0|    }
  308|      8|    case EXT16_MARKER: {
  ------------------
  |  Branch (308:5): [True: 8, False: 1.24k]
  ------------------
  309|      8|      *cmp_type = CMP_TYPE_EXT16;
  310|      8|      return true;
  311|      0|    }
  312|      8|    case EXT32_MARKER: {
  ------------------
  |  Branch (312:5): [True: 8, False: 1.24k]
  ------------------
  313|      8|      *cmp_type = CMP_TYPE_EXT32;
  314|      8|      return true;
  315|      0|    }
  316|      6|    case FLOAT_MARKER: {
  ------------------
  |  Branch (316:5): [True: 6, False: 1.25k]
  ------------------
  317|      6|      *cmp_type = CMP_TYPE_FLOAT;
  318|      6|      return true;
  319|      0|    }
  320|      6|    case DOUBLE_MARKER: {
  ------------------
  |  Branch (320:5): [True: 6, False: 1.25k]
  ------------------
  321|      6|      *cmp_type = CMP_TYPE_DOUBLE;
  322|      6|      return true;
  323|      0|    }
  324|    112|    case U8_MARKER: {
  ------------------
  |  Branch (324:5): [True: 112, False: 1.14k]
  ------------------
  325|    112|      *cmp_type = CMP_TYPE_UINT8;
  326|    112|      return true;
  327|      0|    }
  328|    112|    case U16_MARKER: {
  ------------------
  |  Branch (328:5): [True: 112, False: 1.14k]
  ------------------
  329|    112|      *cmp_type = CMP_TYPE_UINT16;
  330|    112|      return true;
  331|      0|    }
  332|     67|    case U32_MARKER: {
  ------------------
  |  Branch (332:5): [True: 67, False: 1.19k]
  ------------------
  333|     67|      *cmp_type = CMP_TYPE_UINT32;
  334|     67|      return true;
  335|      0|    }
  336|     31|    case U64_MARKER: {
  ------------------
  |  Branch (336:5): [True: 31, False: 1.22k]
  ------------------
  337|     31|      *cmp_type = CMP_TYPE_UINT64;
  338|     31|      return true;
  339|      0|    }
  340|     63|    case S8_MARKER: {
  ------------------
  |  Branch (340:5): [True: 63, False: 1.19k]
  ------------------
  341|     63|      *cmp_type = CMP_TYPE_SINT8;
  342|     63|      return true;
  343|      0|    }
  344|     66|    case S16_MARKER: {
  ------------------
  |  Branch (344:5): [True: 66, False: 1.19k]
  ------------------
  345|     66|      *cmp_type = CMP_TYPE_SINT16;
  346|     66|      return true;
  347|      0|    }
  348|     36|    case S32_MARKER: {
  ------------------
  |  Branch (348:5): [True: 36, False: 1.22k]
  ------------------
  349|     36|      *cmp_type = CMP_TYPE_SINT32;
  350|     36|      return true;
  351|      0|    }
  352|     21|    case S64_MARKER: {
  ------------------
  |  Branch (352:5): [True: 21, False: 1.23k]
  ------------------
  353|     21|      *cmp_type = CMP_TYPE_SINT64;
  354|     21|      return true;
  355|      0|    }
  356|      7|    case FIXEXT1_MARKER: {
  ------------------
  |  Branch (356:5): [True: 7, False: 1.25k]
  ------------------
  357|      7|      *cmp_type = CMP_TYPE_FIXEXT1;
  358|      7|      return true;
  359|      0|    }
  360|      7|    case FIXEXT2_MARKER: {
  ------------------
  |  Branch (360:5): [True: 7, False: 1.25k]
  ------------------
  361|      7|      *cmp_type = CMP_TYPE_FIXEXT2;
  362|      7|      return true;
  363|      0|    }
  364|      7|    case FIXEXT4_MARKER: {
  ------------------
  |  Branch (364:5): [True: 7, False: 1.25k]
  ------------------
  365|      7|      *cmp_type = CMP_TYPE_FIXEXT4;
  366|      7|      return true;
  367|      0|    }
  368|      7|    case FIXEXT8_MARKER: {
  ------------------
  |  Branch (368:5): [True: 7, False: 1.25k]
  ------------------
  369|      7|      *cmp_type = CMP_TYPE_FIXEXT8;
  370|      7|      return true;
  371|      0|    }
  372|      7|    case FIXEXT16_MARKER: {
  ------------------
  |  Branch (372:5): [True: 7, False: 1.25k]
  ------------------
  373|      7|      *cmp_type = CMP_TYPE_FIXEXT16;
  374|      7|      return true;
  375|      0|    }
  376|      8|    case STR8_MARKER: {
  ------------------
  |  Branch (376:5): [True: 8, False: 1.24k]
  ------------------
  377|      8|      *cmp_type = CMP_TYPE_STR8;
  378|      8|      return true;
  379|      0|    }
  380|      7|    case STR16_MARKER: {
  ------------------
  |  Branch (380:5): [True: 7, False: 1.25k]
  ------------------
  381|      7|      *cmp_type = CMP_TYPE_STR16;
  382|      7|      return true;
  383|      0|    }
  384|      7|    case STR32_MARKER: {
  ------------------
  |  Branch (384:5): [True: 7, False: 1.25k]
  ------------------
  385|      7|      *cmp_type = CMP_TYPE_STR32;
  386|      7|      return true;
  387|      0|    }
  388|      9|    case ARRAY16_MARKER: {
  ------------------
  |  Branch (388:5): [True: 9, False: 1.24k]
  ------------------
  389|      9|      *cmp_type = CMP_TYPE_ARRAY16;
  390|      9|      return true;
  391|      0|    }
  392|     11|    case ARRAY32_MARKER: {
  ------------------
  |  Branch (392:5): [True: 11, False: 1.24k]
  ------------------
  393|     11|      *cmp_type = CMP_TYPE_ARRAY32;
  394|     11|      return true;
  395|      0|    }
  396|      8|    case MAP16_MARKER: {
  ------------------
  |  Branch (396:5): [True: 8, False: 1.24k]
  ------------------
  397|      8|      *cmp_type = CMP_TYPE_MAP16;
  398|      8|      return true;
  399|      0|    }
  400|      7|    case MAP32_MARKER: {
  ------------------
  |  Branch (400:5): [True: 7, False: 1.25k]
  ------------------
  401|      7|      *cmp_type = CMP_TYPE_MAP32;
  402|      7|      return true;
  403|      0|    }
  404|      6|    default: {
  ------------------
  |  Branch (404:5): [True: 6, False: 1.25k]
  ------------------
  405|      6|      return false;
  406|      0|    }
  407|  1.25k|  }
  408|  1.25k|}
cmp.c:read_obj_data:
  618|  9.07k|                                          cmp_object_t *obj) {
  619|  9.07k|  switch (obj->type) {
  620|  4.20k|    case CMP_TYPE_POSITIVE_FIXNUM: {
  ------------------
  |  Branch (620:5): [True: 4.20k, False: 4.87k]
  ------------------
  621|  4.20k|      obj->as.u8 = type_marker;
  622|  4.20k|      return true;
  623|      0|    }
  624|     13|    case CMP_TYPE_NEGATIVE_FIXNUM: {
  ------------------
  |  Branch (624:5): [True: 13, False: 9.06k]
  ------------------
  625|     13|      obj->as.s8 = (int8_t)type_marker;
  626|     13|      return true;
  627|      0|    }
  628|      6|    case CMP_TYPE_NIL: {
  ------------------
  |  Branch (628:5): [True: 6, False: 9.06k]
  ------------------
  629|      6|      obj->as.u8 = 0;
  630|      6|      return true;
  631|      0|    }
  632|     44|    case CMP_TYPE_BOOLEAN: {
  ------------------
  |  Branch (632:5): [True: 44, False: 9.02k]
  ------------------
  633|     44|      switch (type_marker) {
  634|     22|        case TRUE_MARKER: {
  ------------------
  |  Branch (634:9): [True: 22, False: 22]
  ------------------
  635|     22|          obj->as.boolean = true;
  636|     22|          return true;
  637|      0|        }
  638|     22|        case FALSE_MARKER: {
  ------------------
  |  Branch (638:9): [True: 22, False: 22]
  ------------------
  639|     22|          obj->as.boolean = false;
  640|     22|          return true;
  641|      0|        }
  642|      0|        default:
  ------------------
  |  Branch (642:9): [True: 0, False: 44]
  ------------------
  643|      0|          break;
  644|     44|      }
  645|      0|      ctx->error = CMP_ERROR_INTERNAL;
  646|      0|      return false;
  647|     44|    }
  648|    112|    case CMP_TYPE_UINT8: {
  ------------------
  |  Branch (648:5): [True: 112, False: 8.96k]
  ------------------
  649|    112|      if (!ctx->read(ctx, &obj->as.u8, sizeof(uint8_t))) {
  ------------------
  |  Branch (649:11): [True: 4, False: 108]
  ------------------
  650|      4|        ctx->error = CMP_ERROR_DATA_READING;
  651|      4|        return false;
  652|      4|      }
  653|    108|      return true;
  654|    112|    }
  655|    112|    case CMP_TYPE_UINT16: {
  ------------------
  |  Branch (655:5): [True: 112, False: 8.96k]
  ------------------
  656|    112|      if (!ctx->read(ctx, &obj->as.u16, sizeof(uint16_t))) {
  ------------------
  |  Branch (656:11): [True: 5, False: 107]
  ------------------
  657|      5|        ctx->error = CMP_ERROR_DATA_READING;
  658|      5|        return false;
  659|      5|      }
  660|    107|      obj->as.u16 = be16(obj->as.u16);
  661|    107|      return true;
  662|    112|    }
  663|     67|    case CMP_TYPE_UINT32: {
  ------------------
  |  Branch (663:5): [True: 67, False: 9.00k]
  ------------------
  664|     67|      if (!ctx->read(ctx, &obj->as.u32, sizeof(uint32_t))) {
  ------------------
  |  Branch (664:11): [True: 4, False: 63]
  ------------------
  665|      4|        ctx->error = CMP_ERROR_DATA_READING;
  666|      4|        return false;
  667|      4|      }
  668|     63|      obj->as.u32 = be32(obj->as.u32);
  669|     63|      return true;
  670|     67|    }
  671|     31|    case CMP_TYPE_UINT64: {
  ------------------
  |  Branch (671:5): [True: 31, False: 9.04k]
  ------------------
  672|     31|      if (!ctx->read(ctx, &obj->as.u64, sizeof(uint64_t))) {
  ------------------
  |  Branch (672:11): [True: 6, False: 25]
  ------------------
  673|      6|        ctx->error = CMP_ERROR_DATA_READING;
  674|      6|        return false;
  675|      6|      }
  676|     25|      obj->as.u64 = be64(obj->as.u64);
  677|     25|      return true;
  678|     31|    }
  679|     63|    case CMP_TYPE_SINT8: {
  ------------------
  |  Branch (679:5): [True: 63, False: 9.01k]
  ------------------
  680|     63|      if (!ctx->read(ctx, &obj->as.s8, sizeof(int8_t))) {
  ------------------
  |  Branch (680:11): [True: 6, False: 57]
  ------------------
  681|      6|        ctx->error = CMP_ERROR_DATA_READING;
  682|      6|        return false;
  683|      6|      }
  684|     57|      return true;
  685|     63|    }
  686|     66|    case CMP_TYPE_SINT16: {
  ------------------
  |  Branch (686:5): [True: 66, False: 9.00k]
  ------------------
  687|     66|      if (!ctx->read(ctx, &obj->as.s16, sizeof(int16_t))) {
  ------------------
  |  Branch (687:11): [True: 4, False: 62]
  ------------------
  688|      4|        ctx->error = CMP_ERROR_DATA_READING;
  689|      4|        return false;
  690|      4|      }
  691|     62|      obj->as.s16 = sbe16(obj->as.s16);
  692|     62|      return true;
  693|     66|    }
  694|     36|    case CMP_TYPE_SINT32: {
  ------------------
  |  Branch (694:5): [True: 36, False: 9.03k]
  ------------------
  695|     36|      if (!ctx->read(ctx, &obj->as.s32, sizeof(int32_t))) {
  ------------------
  |  Branch (695:11): [True: 4, False: 32]
  ------------------
  696|      4|        ctx->error = CMP_ERROR_DATA_READING;
  697|      4|        return false;
  698|      4|      }
  699|     32|      obj->as.s32 = sbe32(obj->as.s32);
  700|     32|      return true;
  701|     36|    }
  702|     21|    case CMP_TYPE_SINT64: {
  ------------------
  |  Branch (702:5): [True: 21, False: 9.05k]
  ------------------
  703|     21|      if (!ctx->read(ctx, &obj->as.s64, sizeof(int64_t))) {
  ------------------
  |  Branch (703:11): [True: 5, False: 16]
  ------------------
  704|      5|        ctx->error = CMP_ERROR_DATA_READING;
  705|      5|        return false;
  706|      5|      }
  707|     16|      obj->as.s64 = sbe64(obj->as.s64);
  708|     16|      return true;
  709|     21|    }
  710|      6|    case CMP_TYPE_FLOAT: {
  ------------------
  |  Branch (710:5): [True: 6, False: 9.06k]
  ------------------
  711|       |#ifndef CMP_NO_FLOAT
  712|       |      char bytes[4];
  713|       |
  714|       |      if (!ctx->read(ctx, bytes, 4)) {
  715|       |        ctx->error = CMP_ERROR_DATA_READING;
  716|       |        return false;
  717|       |      }
  718|       |      obj->as.flt = decode_befloat(bytes);
  719|       |      return true;
  720|       |#else /* CMP_NO_FLOAT */
  721|      6|      ctx->error = CMP_ERROR_DISABLED_FLOATING_POINT;
  722|      6|      return false;
  723|     21|#endif /* CMP_NO_FLOAT */
  724|     21|    }
  725|      6|    case CMP_TYPE_DOUBLE: {
  ------------------
  |  Branch (725:5): [True: 6, False: 9.06k]
  ------------------
  726|       |#ifndef CMP_NO_FLOAT
  727|       |      char bytes[8];
  728|       |
  729|       |      if (!ctx->read(ctx, bytes, 8)) {
  730|       |        ctx->error = CMP_ERROR_DATA_READING;
  731|       |        return false;
  732|       |      }
  733|       |      obj->as.dbl = decode_bedouble(bytes);
  734|       |      return true;
  735|       |#else /* CMP_NO_FLOAT */
  736|      6|      ctx->error = CMP_ERROR_DISABLED_FLOATING_POINT;
  737|      6|      return false;
  738|     21|#endif /* CMP_NO_FLOAT */
  739|     21|    }
  740|    122|    case CMP_TYPE_BIN8:
  ------------------
  |  Branch (740:5): [True: 122, False: 8.95k]
  ------------------
  741|    458|    case CMP_TYPE_BIN16:
  ------------------
  |  Branch (741:5): [True: 336, False: 8.73k]
  ------------------
  742|    565|    case CMP_TYPE_BIN32:
  ------------------
  |  Branch (742:5): [True: 107, False: 8.96k]
  ------------------
  743|    565|      return read_type_size(ctx, type_marker, obj->type, &obj->as.bin_size);
  744|      6|    case CMP_TYPE_FIXSTR:
  ------------------
  |  Branch (744:5): [True: 6, False: 9.06k]
  ------------------
  745|     14|    case CMP_TYPE_STR8:
  ------------------
  |  Branch (745:5): [True: 8, False: 9.06k]
  ------------------
  746|     21|    case CMP_TYPE_STR16:
  ------------------
  |  Branch (746:5): [True: 7, False: 9.06k]
  ------------------
  747|     28|    case CMP_TYPE_STR32:
  ------------------
  |  Branch (747:5): [True: 7, False: 9.06k]
  ------------------
  748|     28|      return read_type_size(ctx, type_marker, obj->type, &obj->as.str_size);
  749|  3.59k|    case CMP_TYPE_FIXARRAY:
  ------------------
  |  Branch (749:5): [True: 3.59k, False: 5.47k]
  ------------------
  750|  3.60k|    case CMP_TYPE_ARRAY16:
  ------------------
  |  Branch (750:5): [True: 9, False: 9.06k]
  ------------------
  751|  3.61k|    case CMP_TYPE_ARRAY32:
  ------------------
  |  Branch (751:5): [True: 11, False: 9.06k]
  ------------------
  752|  3.61k|      return read_type_size(ctx, type_marker, obj->type, &obj->as.array_size);
  753|      9|    case CMP_TYPE_FIXMAP:
  ------------------
  |  Branch (753:5): [True: 9, False: 9.06k]
  ------------------
  754|     17|    case CMP_TYPE_MAP16:
  ------------------
  |  Branch (754:5): [True: 8, False: 9.06k]
  ------------------
  755|     24|    case CMP_TYPE_MAP32:
  ------------------
  |  Branch (755:5): [True: 7, False: 9.06k]
  ------------------
  756|     24|      return read_type_size(ctx, type_marker, obj->type, &obj->as.map_size);
  757|      7|    case CMP_TYPE_FIXEXT1: {
  ------------------
  |  Branch (757:5): [True: 7, False: 9.06k]
  ------------------
  758|      7|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (758:11): [True: 4, False: 3]
  ------------------
  759|      4|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  760|      4|        return false;
  761|      4|      }
  762|      3|      obj->as.ext.size = 1;
  763|      3|      return true;
  764|      7|    }
  765|      7|    case CMP_TYPE_FIXEXT2: {
  ------------------
  |  Branch (765:5): [True: 7, False: 9.06k]
  ------------------
  766|      7|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (766:11): [True: 6, False: 1]
  ------------------
  767|      6|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  768|      6|        return false;
  769|      6|      }
  770|      1|      obj->as.ext.size = 2;
  771|      1|      return true;
  772|      7|    }
  773|      7|    case CMP_TYPE_FIXEXT4: {
  ------------------
  |  Branch (773:5): [True: 7, False: 9.06k]
  ------------------
  774|      7|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (774:11): [True: 5, False: 2]
  ------------------
  775|      5|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  776|      5|        return false;
  777|      5|      }
  778|      2|      obj->as.ext.size = 4;
  779|      2|      return true;
  780|      7|    }
  781|      7|    case CMP_TYPE_FIXEXT8: {
  ------------------
  |  Branch (781:5): [True: 7, False: 9.06k]
  ------------------
  782|      7|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (782:11): [True: 5, False: 2]
  ------------------
  783|      5|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  784|      5|        return false;
  785|      5|      }
  786|      2|      obj->as.ext.size = 8;
  787|      2|      return true;
  788|      7|    }
  789|      7|    case CMP_TYPE_FIXEXT16: {
  ------------------
  |  Branch (789:5): [True: 7, False: 9.06k]
  ------------------
  790|      7|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (790:11): [True: 6, False: 1]
  ------------------
  791|      6|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  792|      6|        return false;
  793|      6|      }
  794|      1|      obj->as.ext.size = 16;
  795|      1|      return true;
  796|      7|    }
  797|      8|    case CMP_TYPE_EXT8: {
  ------------------
  |  Branch (797:5): [True: 8, False: 9.06k]
  ------------------
  798|      8|      if (!read_type_size(ctx, type_marker, obj->type, &obj->as.ext.size)) {
  ------------------
  |  Branch (798:11): [True: 6, False: 2]
  ------------------
  799|      6|        return false;
  800|      6|      }
  801|      2|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (801:11): [True: 1, False: 1]
  ------------------
  802|      1|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  803|      1|        return false;
  804|      1|      }
  805|      1|      return true;
  806|      2|    }
  807|      8|    case CMP_TYPE_EXT16: {
  ------------------
  |  Branch (807:5): [True: 8, False: 9.06k]
  ------------------
  808|      8|      if (!read_type_size(ctx, type_marker, obj->type, &obj->as.ext.size)) {
  ------------------
  |  Branch (808:11): [True: 6, False: 2]
  ------------------
  809|      6|        return false;
  810|      6|      }
  811|      2|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (811:11): [True: 1, False: 1]
  ------------------
  812|      1|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  813|      1|        return false;
  814|      1|      }
  815|      1|      return true;
  816|      2|    }
  817|      8|    case CMP_TYPE_EXT32: {
  ------------------
  |  Branch (817:5): [True: 8, False: 9.06k]
  ------------------
  818|      8|      if (!read_type_size(ctx, type_marker, obj->type, &obj->as.ext.size)) {
  ------------------
  |  Branch (818:11): [True: 6, False: 2]
  ------------------
  819|      6|        return false;
  820|      6|      }
  821|      2|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (821:11): [True: 1, False: 1]
  ------------------
  822|      1|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  823|      1|        return false;
  824|      1|      }
  825|      1|      return true;
  826|      2|    }
  827|      0|    default:
  ------------------
  |  Branch (827:5): [True: 0, False: 9.07k]
  ------------------
  828|      0|      break;
  829|  9.07k|  }
  830|       |
  831|      0|  ctx->error = CMP_ERROR_INVALID_TYPE;
  832|      0|  return false;
  833|  9.07k|}
cmp.c:read_type_size:
  412|  4.25k|                                           uint32_t *size) {
  413|  4.25k|  uint8_t u8temp = 0;
  414|  4.25k|  uint16_t u16temp = 0;
  415|  4.25k|  uint32_t u32temp = 0;
  416|       |
  417|  4.25k|  switch (cmp_type) {
  418|      0|    case CMP_TYPE_POSITIVE_FIXNUM: {
  ------------------
  |  Branch (418:5): [True: 0, False: 4.25k]
  ------------------
  419|      0|      *size = 0;
  420|      0|      return true;
  421|      0|    }
  422|      9|    case CMP_TYPE_FIXMAP: {
  ------------------
  |  Branch (422:5): [True: 9, False: 4.24k]
  ------------------
  423|      9|      *size = type_marker & FIXMAP_SIZE;
  424|      9|      return true;
  425|      0|    }
  426|  3.59k|    case CMP_TYPE_FIXARRAY: {
  ------------------
  |  Branch (426:5): [True: 3.59k, False: 661]
  ------------------
  427|  3.59k|      *size = type_marker & FIXARRAY_SIZE;
  428|  3.59k|      return true;
  429|      0|    }
  430|      6|    case CMP_TYPE_FIXSTR: {
  ------------------
  |  Branch (430:5): [True: 6, False: 4.24k]
  ------------------
  431|      6|      *size = type_marker & FIXSTR_SIZE;
  432|      6|      return true;
  433|      0|    }
  434|      0|    case CMP_TYPE_NIL: {
  ------------------
  |  Branch (434:5): [True: 0, False: 4.25k]
  ------------------
  435|      0|      *size = 0;
  436|      0|      return true;
  437|      0|    }
  438|      0|    case CMP_TYPE_BOOLEAN: {
  ------------------
  |  Branch (438:5): [True: 0, False: 4.25k]
  ------------------
  439|      0|      *size = 0;
  440|      0|      return true;
  441|      0|    }
  442|    122|    case CMP_TYPE_BIN8: {
  ------------------
  |  Branch (442:5): [True: 122, False: 4.13k]
  ------------------
  443|    122|      if (!ctx->read(ctx, &u8temp, sizeof(uint8_t))) {
  ------------------
  |  Branch (443:11): [True: 5, False: 117]
  ------------------
  444|      5|        ctx->error = CMP_ERROR_LENGTH_READING;
  445|      5|        return false;
  446|      5|      }
  447|    117|      *size = u8temp;
  448|    117|      return true;
  449|    122|    }
  450|    336|    case CMP_TYPE_BIN16: {
  ------------------
  |  Branch (450:5): [True: 336, False: 3.91k]
  ------------------
  451|    336|      if (!ctx->read(ctx, &u16temp, sizeof(uint16_t))) {
  ------------------
  |  Branch (451:11): [True: 9, False: 327]
  ------------------
  452|      9|        ctx->error = CMP_ERROR_LENGTH_READING;
  453|      9|        return false;
  454|      9|      }
  455|    327|      *size = be16(u16temp);
  456|    327|      return true;
  457|    336|    }
  458|    107|    case CMP_TYPE_BIN32: {
  ------------------
  |  Branch (458:5): [True: 107, False: 4.14k]
  ------------------
  459|    107|      if (!ctx->read(ctx, &u32temp, sizeof(uint32_t))) {
  ------------------
  |  Branch (459:11): [True: 9, False: 98]
  ------------------
  460|      9|        ctx->error = CMP_ERROR_LENGTH_READING;
  461|      9|        return false;
  462|      9|      }
  463|     98|      *size = be32(u32temp);
  464|     98|      return true;
  465|    107|    }
  466|      8|    case CMP_TYPE_EXT8: {
  ------------------
  |  Branch (466:5): [True: 8, False: 4.24k]
  ------------------
  467|      8|      if (!ctx->read(ctx, &u8temp, sizeof(uint8_t))) {
  ------------------
  |  Branch (467:11): [True: 6, False: 2]
  ------------------
  468|      6|        ctx->error = CMP_ERROR_LENGTH_READING;
  469|      6|        return false;
  470|      6|      }
  471|      2|      *size = u8temp;
  472|      2|      return true;
  473|      8|    }
  474|      8|    case CMP_TYPE_EXT16: {
  ------------------
  |  Branch (474:5): [True: 8, False: 4.24k]
  ------------------
  475|      8|      if (!ctx->read(ctx, &u16temp, sizeof(uint16_t))) {
  ------------------
  |  Branch (475:11): [True: 6, False: 2]
  ------------------
  476|      6|        ctx->error = CMP_ERROR_LENGTH_READING;
  477|      6|        return false;
  478|      6|      }
  479|      2|      *size = be16(u16temp);
  480|      2|      return true;
  481|      8|    }
  482|      8|    case CMP_TYPE_EXT32: {
  ------------------
  |  Branch (482:5): [True: 8, False: 4.24k]
  ------------------
  483|      8|      if (!ctx->read(ctx, &u32temp, sizeof(uint32_t))) {
  ------------------
  |  Branch (483:11): [True: 6, False: 2]
  ------------------
  484|      6|        ctx->error = CMP_ERROR_LENGTH_READING;
  485|      6|        return false;
  486|      6|      }
  487|      2|      *size = be32(u32temp);
  488|      2|      return true;
  489|      8|    }
  490|      0|    case CMP_TYPE_FLOAT: {
  ------------------
  |  Branch (490:5): [True: 0, False: 4.25k]
  ------------------
  491|      0|      *size = 4;
  492|      0|      return true;
  493|      8|    }
  494|      0|    case CMP_TYPE_DOUBLE: {
  ------------------
  |  Branch (494:5): [True: 0, False: 4.25k]
  ------------------
  495|      0|      *size = 8;
  496|      0|      return true;
  497|      8|    }
  498|      0|    case CMP_TYPE_UINT8: {
  ------------------
  |  Branch (498:5): [True: 0, False: 4.25k]
  ------------------
  499|      0|      *size = 1;
  500|      0|      return true;
  501|      8|    }
  502|      0|    case CMP_TYPE_UINT16: {
  ------------------
  |  Branch (502:5): [True: 0, False: 4.25k]
  ------------------
  503|      0|      *size = 2;
  504|      0|      return true;
  505|      8|    }
  506|      0|    case CMP_TYPE_UINT32: {
  ------------------
  |  Branch (506:5): [True: 0, False: 4.25k]
  ------------------
  507|      0|      *size = 4;
  508|      0|      return true;
  509|      8|    }
  510|      0|    case CMP_TYPE_UINT64: {
  ------------------
  |  Branch (510:5): [True: 0, False: 4.25k]
  ------------------
  511|      0|      *size = 8;
  512|      0|      return true;
  513|      8|    }
  514|      0|    case CMP_TYPE_SINT8: {
  ------------------
  |  Branch (514:5): [True: 0, False: 4.25k]
  ------------------
  515|      0|      *size = 1;
  516|      0|      return true;
  517|      8|    }
  518|      0|    case CMP_TYPE_SINT16: {
  ------------------
  |  Branch (518:5): [True: 0, False: 4.25k]
  ------------------
  519|      0|      *size = 2;
  520|      0|      return true;
  521|      8|    }
  522|      0|    case CMP_TYPE_SINT32: {
  ------------------
  |  Branch (522:5): [True: 0, False: 4.25k]
  ------------------
  523|      0|      *size = 4;
  524|      0|      return true;
  525|      8|    }
  526|      0|    case CMP_TYPE_SINT64: {
  ------------------
  |  Branch (526:5): [True: 0, False: 4.25k]
  ------------------
  527|      0|      *size = 8;
  528|      0|      return true;
  529|      8|    }
  530|      0|    case CMP_TYPE_FIXEXT1: {
  ------------------
  |  Branch (530:5): [True: 0, False: 4.25k]
  ------------------
  531|      0|      *size = 1;
  532|      0|      return true;
  533|      8|    }
  534|      0|    case CMP_TYPE_FIXEXT2: {
  ------------------
  |  Branch (534:5): [True: 0, False: 4.25k]
  ------------------
  535|      0|      *size = 2;
  536|      0|      return true;
  537|      8|    }
  538|      0|    case CMP_TYPE_FIXEXT4: {
  ------------------
  |  Branch (538:5): [True: 0, False: 4.25k]
  ------------------
  539|      0|      *size = 4;
  540|      0|      return true;
  541|      8|    }
  542|      0|    case CMP_TYPE_FIXEXT8: {
  ------------------
  |  Branch (542:5): [True: 0, False: 4.25k]
  ------------------
  543|      0|      *size = 8;
  544|      0|      return true;
  545|      8|    }
  546|      0|    case CMP_TYPE_FIXEXT16: {
  ------------------
  |  Branch (546:5): [True: 0, False: 4.25k]
  ------------------
  547|      0|      *size = 16;
  548|      0|      return true;
  549|      8|    }
  550|      8|    case CMP_TYPE_STR8: {
  ------------------
  |  Branch (550:5): [True: 8, False: 4.24k]
  ------------------
  551|      8|      if (!ctx->read(ctx, &u8temp, sizeof(uint8_t))) {
  ------------------
  |  Branch (551:11): [True: 5, False: 3]
  ------------------
  552|      5|        ctx->error = CMP_ERROR_DATA_READING;
  553|      5|        return false;
  554|      5|      }
  555|      3|      *size = u8temp;
  556|      3|      return true;
  557|      8|    }
  558|      7|    case CMP_TYPE_STR16: {
  ------------------
  |  Branch (558:5): [True: 7, False: 4.24k]
  ------------------
  559|      7|      if (!ctx->read(ctx, &u16temp, sizeof(uint16_t))) {
  ------------------
  |  Branch (559:11): [True: 6, False: 1]
  ------------------
  560|      6|        ctx->error = CMP_ERROR_DATA_READING;
  561|      6|        return false;
  562|      6|      }
  563|      1|      *size = be16(u16temp);
  564|      1|      return true;
  565|      7|    }
  566|      7|    case CMP_TYPE_STR32: {
  ------------------
  |  Branch (566:5): [True: 7, False: 4.24k]
  ------------------
  567|      7|      if (!ctx->read(ctx, &u32temp, sizeof(uint32_t))) {
  ------------------
  |  Branch (567:11): [True: 6, False: 1]
  ------------------
  568|      6|        ctx->error = CMP_ERROR_DATA_READING;
  569|      6|        return false;
  570|      6|      }
  571|      1|      *size = be32(u32temp);
  572|      1|      return true;
  573|      7|    }
  574|      9|    case CMP_TYPE_ARRAY16: {
  ------------------
  |  Branch (574:5): [True: 9, False: 4.24k]
  ------------------
  575|      9|      if (!ctx->read(ctx, &u16temp, sizeof(uint16_t))) {
  ------------------
  |  Branch (575:11): [True: 6, False: 3]
  ------------------
  576|      6|        ctx->error = CMP_ERROR_DATA_READING;
  577|      6|        return false;
  578|      6|      }
  579|      3|      *size = be16(u16temp);
  580|      3|      return true;
  581|      9|    }
  582|     11|    case CMP_TYPE_ARRAY32: {
  ------------------
  |  Branch (582:5): [True: 11, False: 4.24k]
  ------------------
  583|     11|      if (!ctx->read(ctx, &u32temp, sizeof(uint32_t))) {
  ------------------
  |  Branch (583:11): [True: 7, False: 4]
  ------------------
  584|      7|        ctx->error = CMP_ERROR_DATA_READING;
  585|      7|        return false;
  586|      7|      }
  587|      4|      *size = be32(u32temp);
  588|      4|      return true;
  589|     11|    }
  590|      8|    case CMP_TYPE_MAP16: {
  ------------------
  |  Branch (590:5): [True: 8, False: 4.24k]
  ------------------
  591|      8|      if (!ctx->read(ctx, &u16temp, sizeof(uint16_t))) {
  ------------------
  |  Branch (591:11): [True: 7, False: 1]
  ------------------
  592|      7|        ctx->error = CMP_ERROR_DATA_READING;
  593|      7|        return false;
  594|      7|      }
  595|      1|      *size = be16(u16temp);
  596|      1|      return true;
  597|      8|    }
  598|      7|    case CMP_TYPE_MAP32: {
  ------------------
  |  Branch (598:5): [True: 7, False: 4.24k]
  ------------------
  599|      7|      if (!ctx->read(ctx, &u32temp, sizeof(uint32_t))) {
  ------------------
  |  Branch (599:11): [True: 6, False: 1]
  ------------------
  600|      6|        ctx->error = CMP_ERROR_DATA_READING;
  601|      6|        return false;
  602|      6|      }
  603|      1|      *size = be32(u32temp);
  604|      1|      return true;
  605|      7|    }
  606|      0|    case CMP_TYPE_NEGATIVE_FIXNUM: {
  ------------------
  |  Branch (606:5): [True: 0, False: 4.25k]
  ------------------
  607|      0|      *size = 0;
  608|      0|      return true;
  609|      7|    }
  610|      0|    default: {
  ------------------
  |  Branch (610:5): [True: 0, False: 4.25k]
  ------------------
  611|      0|      ctx->error = CMP_ERROR_INVALID_TYPE;
  612|      0|      return false;
  613|      7|    }
  614|  4.25k|  }
  615|  4.25k|}

bin_pack_obj_size:
   68|    182|{
   69|    182|    Bin_Pack bp;
   70|    182|    bin_pack_init(&bp, nullptr, 0);
  ------------------
  |  |   63|    182|#define nullptr NULL
  ------------------
   71|    182|    if (!callback(obj, logger, &bp)) {
  ------------------
  |  Branch (71:9): [True: 0, False: 182]
  ------------------
   72|      0|        return UINT32_MAX;
   73|      0|    }
   74|    182|    return bp.bytes_pos;
   75|    182|}
bin_pack_obj:
   78|    182|{
   79|    182|    Bin_Pack bp;
   80|    182|    bin_pack_init(&bp, buf, buf_size);
   81|    182|    return callback(obj, logger, &bp);
   82|    182|}
bin_pack_obj_array:
  115|    364|{
  116|    364|    if (arr == nullptr) {
  ------------------
  |  |   63|    364|#define nullptr NULL
  ------------------
  |  Branch (116:9): [True: 2, False: 362]
  ------------------
  117|      2|        assert(arr_size == 0);
  118|      2|        return bin_pack_array(bp, 0);
  119|      2|    }
  120|       |
  121|    362|    if (!bin_pack_array(bp, arr_size)) {
  ------------------
  |  Branch (121:9): [True: 0, False: 362]
  ------------------
  122|      0|        return false;
  123|      0|    }
  124|       |
  125|  1.80k|    for (uint32_t i = 0; i < arr_size; ++i) {
  ------------------
  |  Branch (125:26): [True: 1.44k, False: 362]
  ------------------
  126|  1.44k|        if (!callback(arr, i, logger, bp)) {
  ------------------
  |  Branch (126:13): [True: 0, False: 1.44k]
  ------------------
  127|      0|            return false;
  128|      0|        }
  129|  1.44k|    }
  130|       |
  131|    362|    return true;
  132|    362|}
bin_pack_array:
  135|  2.80k|{
  136|  2.80k|    return cmp_write_array(&bp->ctx, size);
  137|  2.80k|}
bin_pack_bool:
  140|     30|{
  141|     30|    return cmp_write_bool(&bp->ctx, val);
  142|     30|}
bin_pack_u16:
  150|     94|{
  151|     94|    return cmp_write_uinteger(&bp->ctx, val);
  152|     94|}
bin_pack_u32:
  155|  3.90k|{
  156|  3.90k|    return cmp_write_uinteger(&bp->ctx, val);
  157|  3.90k|}
bin_pack_u64:
  160|    136|{
  161|    136|    return cmp_write_uinteger(&bp->ctx, val);
  162|    136|}
bin_pack_bin:
  165|    624|{
  166|    624|    return cmp_write_bin(&bp->ctx, data, length);
  167|    624|}
bin_pack.c:bin_pack_init:
   60|    364|{
   61|    364|    bp->bytes = buf;
   62|    364|    bp->bytes_size = buf_size;
   63|    364|    bp->bytes_pos = 0;
   64|    364|    cmp_init(&bp->ctx, bp, null_reader, null_skipper, buf_writer);
   65|    364|}
bin_pack.c:buf_writer:
   38|  8.52k|{
   39|  8.52k|    const uint8_t *bytes = (const uint8_t *)data;
   40|  8.52k|    Bin_Pack *bp = (Bin_Pack *)ctx->buf;
   41|  8.52k|    assert(bp != nullptr);
   42|  8.52k|    const uint32_t new_pos = bp->bytes_pos + count;
   43|  8.52k|    if (new_pos < bp->bytes_pos) {
  ------------------
  |  Branch (43:9): [True: 0, False: 8.52k]
  ------------------
   44|       |        // 32 bit overflow.
   45|      0|        return 0;
   46|      0|    }
   47|  8.52k|    if (bp->bytes != nullptr) {
  ------------------
  |  |   63|  8.52k|#define nullptr NULL
  ------------------
  |  Branch (47:9): [True: 4.26k, False: 4.26k]
  ------------------
   48|  4.26k|        if (new_pos > bp->bytes_size) {
  ------------------
  |  Branch (48:13): [True: 0, False: 4.26k]
  ------------------
   49|       |            // Buffer too small.
   50|      0|            return 0;
   51|      0|        }
   52|  4.26k|        memcpy(&bp->bytes[bp->bytes_pos], bytes, count);
   53|  4.26k|    }
   54|  8.52k|    bp->bytes_pos += count;
   55|  8.52k|    return count;
   56|  8.52k|}

bin_unpack_obj:
   68|    784|{
   69|    784|    Bin_Unpack bu;
   70|    784|    bin_unpack_init(&bu, mem, buf, buf_size);
   71|    784|    return callback(obj, &bu);
   72|    784|}
bin_unpack_array:
   75|    784|{
   76|    784|    return cmp_read_array(&bu->ctx, size) && *size <= bu->bytes_size;
  ------------------
  |  Branch (76:12): [True: 721, False: 63]
  |  Branch (76:46): [True: 719, False: 2]
  ------------------
   77|    784|}
bin_unpack_array_fixed:
   80|  2.99k|{
   81|  2.99k|    uint32_t size = 0;
   82|  2.99k|    const bool success = cmp_read_array(&bu->ctx, &size) && size == required_size;
  ------------------
  |  Branch (82:26): [True: 2.86k, False: 131]
  |  Branch (82:61): [True: 2.86k, False: 4]
  ------------------
   83|  2.99k|    if (actual_size != nullptr) {
  ------------------
  |  |   63|  2.99k|#define nullptr NULL
  ------------------
  |  Branch (83:9): [True: 0, False: 2.99k]
  ------------------
   84|      0|        *actual_size = size;
   85|      0|    }
   86|  2.99k|    return success;
   87|  2.99k|}
bin_unpack_bool:
   90|     65|{
   91|     65|    return cmp_read_bool(&bu->ctx, val);
   92|     65|}
bin_unpack_u16:
  100|    202|{
  101|    202|    return cmp_read_ushort(&bu->ctx, val);
  102|    202|}
bin_unpack_u32:
  105|  4.35k|{
  106|  4.35k|    return cmp_read_uint(&bu->ctx, val);
  107|  4.35k|}
bin_unpack_u64:
  110|    278|{
  111|    278|    return cmp_read_ulong(&bu->ctx, val);
  112|    278|}
bin_unpack_bin:
  120|    580|{
  121|    580|    uint32_t bin_size;
  122|    580|    if (!bin_unpack_bin_size(bu, &bin_size) || bin_size > bu->bytes_size) {
  ------------------
  |  Branch (122:9): [True: 75, False: 505]
  |  Branch (122:48): [True: 3, False: 502]
  ------------------
  123|       |        // There aren't as many bytes as this bin claims to want to allocate.
  124|     78|        return false;
  125|     78|    }
  126|    502|    uint8_t *const data = (uint8_t *)mem_balloc(bu->mem, bin_size);
  127|       |
  128|    502|    if (data == nullptr) {
  ------------------
  |  |   63|    502|#define nullptr NULL
  ------------------
  |  Branch (128:9): [True: 1, False: 501]
  ------------------
  129|      1|        return false;
  130|      1|    }
  131|       |
  132|    501|    if (!bin_unpack_bin_b(bu, data, bin_size)) {
  ------------------
  |  Branch (132:9): [True: 0, False: 501]
  ------------------
  133|      0|        mem_delete(bu->mem, data);
  134|      0|        return false;
  135|      0|    }
  136|       |
  137|    501|    *data_ptr = data;
  138|    501|    *data_length_ptr = bin_size;
  139|    501|    return true;
  140|    501|}
bin_unpack_bin_fixed:
  155|     41|{
  156|     41|    uint32_t bin_size;
  157|     41|    if (!bin_unpack_bin_size(bu, &bin_size) || bin_size != data_length) {
  ------------------
  |  Branch (157:9): [True: 11, False: 30]
  |  Branch (157:48): [True: 1, False: 29]
  ------------------
  158|     12|        return false;
  159|     12|    }
  160|       |
  161|     29|    return bin_unpack_bin_b(bu, data, bin_size);
  162|     41|}
bin_unpack_bin_size:
  165|    621|{
  166|    621|    return cmp_read_bin_size(&bu->ctx, size);
  167|    621|}
bin_unpack_bin_b:
  211|    530|{
  212|    530|    return bu->ctx.read(&bu->ctx, data, length);
  213|    530|}
bin_unpack.c:bin_unpack_init:
   60|    784|{
   61|    784|    bu->mem = mem;
   62|    784|    bu->bytes = buf;
   63|    784|    bu->bytes_size = buf_size;
   64|    784|    cmp_init(&bu->ctx, bu, buf_reader, buf_skipper, null_writer);
   65|    784|}
bin_unpack.c:buf_reader:
   25|  11.0k|{
   26|  11.0k|    uint8_t *bytes = (uint8_t *)data;
   27|  11.0k|    Bin_Unpack *reader = (Bin_Unpack *)ctx->buf;
   28|  11.0k|    assert(reader != nullptr && reader->bytes != nullptr);
   29|  11.0k|    if (limit > reader->bytes_size) {
  ------------------
  |  Branch (29:9): [True: 379, False: 10.6k]
  ------------------
   30|    379|        return false;
   31|    379|    }
   32|  10.6k|    memcpy(bytes, reader->bytes, limit);
   33|  10.6k|    reader->bytes += limit;
   34|  10.6k|    reader->bytes_size -= limit;
   35|  10.6k|    return true;
   36|  11.0k|}

tox_event_conference_connected_pack:
   56|     36|{
   57|     36|    return bin_pack_u32(bp, event->conference_number);
   58|     36|}
tox_event_conference_connected_new:
   80|     20|{
   81|     20|    Tox_Event_Conference_Connected *const conference_connected =
   82|     20|        (Tox_Event_Conference_Connected *)mem_alloc(mem, sizeof(Tox_Event_Conference_Connected));
   83|       |
   84|     20|    if (conference_connected == nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (84:9): [True: 1, False: 19]
  ------------------
   85|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
   86|      1|    }
   87|       |
   88|     19|    tox_event_conference_connected_construct(conference_connected);
   89|     19|    return conference_connected;
   90|     20|}
tox_event_conference_connected_free:
   93|     20|{
   94|     20|    if (conference_connected != nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (94:9): [True: 19, False: 1]
  ------------------
   95|     19|        tox_event_conference_connected_destruct(conference_connected, mem);
   96|     19|    }
   97|     20|    mem_delete(mem, conference_connected);
   98|     20|}
tox_event_conference_connected_unpack:
  122|     20|{
  123|     20|    assert(event != nullptr);
  124|     20|    assert(*event == nullptr);
  125|     20|    *event = tox_event_conference_connected_new(mem);
  126|       |
  127|     20|    if (*event == nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (127:9): [True: 1, False: 19]
  ------------------
  128|      1|        return false;
  129|      1|    }
  130|       |
  131|     19|    return tox_event_conference_connected_unpack_into(*event, bu);
  132|     20|}
conference_connected.c:tox_event_conference_connected_construct:
   43|     19|{
   44|     19|    *conference_connected = (Tox_Event_Conference_Connected) {
   45|     19|        0
   46|     19|    };
   47|     19|}
conference_connected.c:tox_event_conference_connected_destruct:
   50|     19|{
   51|     19|    return;
   52|     19|}
conference_connected.c:tox_event_conference_connected_unpack_into:
   63|     19|{
   64|     19|    assert(event != nullptr);
   65|     19|    return bin_unpack_u32(bu, &event->conference_number);
   66|     19|}

tox_event_conference_invite_pack:
  115|     32|{
  116|     32|    return bin_pack_array(bp, 3)
  ------------------
  |  Branch (116:12): [True: 32, False: 0]
  ------------------
  117|     32|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (117:15): [True: 32, False: 0]
  ------------------
  118|     32|           && tox_conference_type_pack(event->type, bp)
  ------------------
  |  Branch (118:15): [True: 32, False: 0]
  ------------------
  119|     32|           && bin_pack_bin(bp, event->cookie, event->cookie_length);
  ------------------
  |  Branch (119:15): [True: 32, False: 0]
  ------------------
  120|     32|}
tox_event_conference_invite_new:
  148|     31|{
  149|     31|    Tox_Event_Conference_Invite *const conference_invite =
  150|     31|        (Tox_Event_Conference_Invite *)mem_alloc(mem, sizeof(Tox_Event_Conference_Invite));
  151|       |
  152|     31|    if (conference_invite == nullptr) {
  ------------------
  |  |   63|     31|#define nullptr NULL
  ------------------
  |  Branch (152:9): [True: 1, False: 30]
  ------------------
  153|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  154|      1|    }
  155|       |
  156|     30|    tox_event_conference_invite_construct(conference_invite);
  157|     30|    return conference_invite;
  158|     31|}
tox_event_conference_invite_free:
  161|     31|{
  162|     31|    if (conference_invite != nullptr) {
  ------------------
  |  |   63|     31|#define nullptr NULL
  ------------------
  |  Branch (162:9): [True: 30, False: 1]
  ------------------
  163|     30|        tox_event_conference_invite_destruct(conference_invite, mem);
  164|     30|    }
  165|     31|    mem_delete(mem, conference_invite);
  166|     31|}
tox_event_conference_invite_unpack:
  190|     31|{
  191|     31|    assert(event != nullptr);
  192|     31|    assert(*event == nullptr);
  193|     31|    *event = tox_event_conference_invite_new(mem);
  194|       |
  195|     31|    if (*event == nullptr) {
  ------------------
  |  |   63|     31|#define nullptr NULL
  ------------------
  |  Branch (195:9): [True: 1, False: 30]
  ------------------
  196|      1|        return false;
  197|      1|    }
  198|       |
  199|     30|    return tox_event_conference_invite_unpack_into(*event, bu);
  200|     31|}
conference_invite.c:tox_event_conference_invite_construct:
  102|     30|{
  103|     30|    *conference_invite = (Tox_Event_Conference_Invite) {
  104|     30|        0
  105|     30|    };
  106|     30|}
conference_invite.c:tox_event_conference_invite_destruct:
  109|     30|{
  110|     30|    free(conference_invite->cookie);
  111|     30|}
conference_invite.c:tox_event_conference_invite_unpack_into:
  125|     30|{
  126|     30|    assert(event != nullptr);
  127|     30|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|     30|#define nullptr NULL
  ------------------
  |  Branch (127:9): [True: 1, False: 29]
  ------------------
  128|      1|        return false;
  129|      1|    }
  130|       |
  131|     29|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (131:12): [True: 28, False: 1]
  ------------------
  132|     29|           && tox_conference_type_unpack(&event->type, bu)
  ------------------
  |  Branch (132:15): [True: 26, False: 2]
  ------------------
  133|     29|           && bin_unpack_bin(bu, &event->cookie, &event->cookie_length);
  ------------------
  |  Branch (133:15): [True: 22, False: 4]
  ------------------
  134|     30|}

tox_event_conference_message_pack:
  129|     20|{
  130|     20|    return bin_pack_array(bp, 4)
  ------------------
  |  Branch (130:12): [True: 20, False: 0]
  ------------------
  131|     20|           && bin_pack_u32(bp, event->conference_number)
  ------------------
  |  Branch (131:15): [True: 20, False: 0]
  ------------------
  132|     20|           && bin_pack_u32(bp, event->peer_number)
  ------------------
  |  Branch (132:15): [True: 20, False: 0]
  ------------------
  133|     20|           && tox_message_type_pack(event->type, bp)
  ------------------
  |  Branch (133:15): [True: 20, False: 0]
  ------------------
  134|     20|           && bin_pack_bin(bp, event->message, event->message_length);
  ------------------
  |  Branch (134:15): [True: 20, False: 0]
  ------------------
  135|     20|}
tox_event_conference_message_new:
  164|     22|{
  165|     22|    Tox_Event_Conference_Message *const conference_message =
  166|     22|        (Tox_Event_Conference_Message *)mem_alloc(mem, sizeof(Tox_Event_Conference_Message));
  167|       |
  168|     22|    if (conference_message == nullptr) {
  ------------------
  |  |   63|     22|#define nullptr NULL
  ------------------
  |  Branch (168:9): [True: 1, False: 21]
  ------------------
  169|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  170|      1|    }
  171|       |
  172|     21|    tox_event_conference_message_construct(conference_message);
  173|     21|    return conference_message;
  174|     22|}
tox_event_conference_message_free:
  177|     22|{
  178|     22|    if (conference_message != nullptr) {
  ------------------
  |  |   63|     22|#define nullptr NULL
  ------------------
  |  Branch (178:9): [True: 21, False: 1]
  ------------------
  179|     21|        tox_event_conference_message_destruct(conference_message, mem);
  180|     21|    }
  181|     22|    mem_delete(mem, conference_message);
  182|     22|}
tox_event_conference_message_unpack:
  206|     22|{
  207|     22|    assert(event != nullptr);
  208|     22|    assert(*event == nullptr);
  209|     22|    *event = tox_event_conference_message_new(mem);
  210|       |
  211|     22|    if (*event == nullptr) {
  ------------------
  |  |   63|     22|#define nullptr NULL
  ------------------
  |  Branch (211:9): [True: 1, False: 21]
  ------------------
  212|      1|        return false;
  213|      1|    }
  214|       |
  215|     21|    return tox_event_conference_message_unpack_into(*event, bu);
  216|     22|}
conference_message.c:tox_event_conference_message_construct:
  116|     21|{
  117|     21|    *conference_message = (Tox_Event_Conference_Message) {
  118|     21|        0
  119|     21|    };
  120|     21|}
conference_message.c:tox_event_conference_message_destruct:
  123|     21|{
  124|     21|    free(conference_message->message);
  125|     21|}
conference_message.c:tox_event_conference_message_unpack_into:
  140|     21|{
  141|     21|    assert(event != nullptr);
  142|     21|    if (!bin_unpack_array_fixed(bu, 4, nullptr)) {
  ------------------
  |  |   63|     21|#define nullptr NULL
  ------------------
  |  Branch (142:9): [True: 1, False: 20]
  ------------------
  143|      1|        return false;
  144|      1|    }
  145|       |
  146|     20|    return bin_unpack_u32(bu, &event->conference_number)
  ------------------
  |  Branch (146:12): [True: 19, False: 1]
  ------------------
  147|     20|           && bin_unpack_u32(bu, &event->peer_number)
  ------------------
  |  Branch (147:15): [True: 18, False: 1]
  ------------------
  148|     20|           && tox_message_type_unpack(&event->type, bu)
  ------------------
  |  Branch (148:15): [True: 14, False: 4]
  ------------------
  149|     20|           && bin_unpack_bin(bu, &event->message, &event->message_length);
  ------------------
  |  Branch (149:15): [True: 12, False: 2]
  ------------------
  150|     21|}

tox_event_conference_peer_list_changed_pack:
   56|    168|{
   57|    168|    return bin_pack_u32(bp, event->conference_number);
   58|    168|}
tox_event_conference_peer_list_changed_new:
   80|    118|{
   81|    118|    Tox_Event_Conference_Peer_List_Changed *const conference_peer_list_changed =
   82|    118|        (Tox_Event_Conference_Peer_List_Changed *)mem_alloc(mem, sizeof(Tox_Event_Conference_Peer_List_Changed));
   83|       |
   84|    118|    if (conference_peer_list_changed == nullptr) {
  ------------------
  |  |   63|    118|#define nullptr NULL
  ------------------
  |  Branch (84:9): [True: 1, False: 117]
  ------------------
   85|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
   86|      1|    }
   87|       |
   88|    117|    tox_event_conference_peer_list_changed_construct(conference_peer_list_changed);
   89|    117|    return conference_peer_list_changed;
   90|    118|}
tox_event_conference_peer_list_changed_free:
   93|    118|{
   94|    118|    if (conference_peer_list_changed != nullptr) {
  ------------------
  |  |   63|    118|#define nullptr NULL
  ------------------
  |  Branch (94:9): [True: 117, False: 1]
  ------------------
   95|    117|        tox_event_conference_peer_list_changed_destruct(conference_peer_list_changed, mem);
   96|    117|    }
   97|    118|    mem_delete(mem, conference_peer_list_changed);
   98|    118|}
tox_event_conference_peer_list_changed_unpack:
  122|    118|{
  123|    118|    assert(event != nullptr);
  124|    118|    assert(*event == nullptr);
  125|    118|    *event = tox_event_conference_peer_list_changed_new(mem);
  126|       |
  127|    118|    if (*event == nullptr) {
  ------------------
  |  |   63|    118|#define nullptr NULL
  ------------------
  |  Branch (127:9): [True: 1, False: 117]
  ------------------
  128|      1|        return false;
  129|      1|    }
  130|       |
  131|    117|    return tox_event_conference_peer_list_changed_unpack_into(*event, bu);
  132|    118|}
conference_peer_list_changed.c:tox_event_conference_peer_list_changed_construct:
   43|    117|{
   44|    117|    *conference_peer_list_changed = (Tox_Event_Conference_Peer_List_Changed) {
   45|    117|        0
   46|    117|    };
   47|    117|}
conference_peer_list_changed.c:tox_event_conference_peer_list_changed_destruct:
   50|    117|{
   51|    117|    return;
   52|    117|}
conference_peer_list_changed.c:tox_event_conference_peer_list_changed_unpack_into:
   63|    117|{
   64|    117|    assert(event != nullptr);
   65|    117|    return bin_unpack_u32(bu, &event->conference_number);
   66|    117|}

tox_event_conference_peer_name_pack:
  113|     20|{
  114|     20|    return bin_pack_array(bp, 3)
  ------------------
  |  Branch (114:12): [True: 20, False: 0]
  ------------------
  115|     20|           && bin_pack_u32(bp, event->conference_number)
  ------------------
  |  Branch (115:15): [True: 20, False: 0]
  ------------------
  116|     20|           && bin_pack_u32(bp, event->peer_number)
  ------------------
  |  Branch (116:15): [True: 20, False: 0]
  ------------------
  117|     20|           && bin_pack_bin(bp, event->name, event->name_length);
  ------------------
  |  Branch (117:15): [True: 20, False: 0]
  ------------------
  118|     20|}
tox_event_conference_peer_name_new:
  146|     19|{
  147|     19|    Tox_Event_Conference_Peer_Name *const conference_peer_name =
  148|     19|        (Tox_Event_Conference_Peer_Name *)mem_alloc(mem, sizeof(Tox_Event_Conference_Peer_Name));
  149|       |
  150|     19|    if (conference_peer_name == nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (150:9): [True: 1, False: 18]
  ------------------
  151|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  152|      1|    }
  153|       |
  154|     18|    tox_event_conference_peer_name_construct(conference_peer_name);
  155|     18|    return conference_peer_name;
  156|     19|}
tox_event_conference_peer_name_free:
  159|     19|{
  160|     19|    if (conference_peer_name != nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (160:9): [True: 18, False: 1]
  ------------------
  161|     18|        tox_event_conference_peer_name_destruct(conference_peer_name, mem);
  162|     18|    }
  163|     19|    mem_delete(mem, conference_peer_name);
  164|     19|}
tox_event_conference_peer_name_unpack:
  188|     19|{
  189|     19|    assert(event != nullptr);
  190|     19|    assert(*event == nullptr);
  191|     19|    *event = tox_event_conference_peer_name_new(mem);
  192|       |
  193|     19|    if (*event == nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (193:9): [True: 1, False: 18]
  ------------------
  194|      1|        return false;
  195|      1|    }
  196|       |
  197|     18|    return tox_event_conference_peer_name_unpack_into(*event, bu);
  198|     19|}
conference_peer_name.c:tox_event_conference_peer_name_construct:
  100|     18|{
  101|     18|    *conference_peer_name = (Tox_Event_Conference_Peer_Name) {
  102|     18|        0
  103|     18|    };
  104|     18|}
conference_peer_name.c:tox_event_conference_peer_name_destruct:
  107|     18|{
  108|     18|    free(conference_peer_name->name);
  109|     18|}
conference_peer_name.c:tox_event_conference_peer_name_unpack_into:
  123|     18|{
  124|     18|    assert(event != nullptr);
  125|     18|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
  |  Branch (125:9): [True: 1, False: 17]
  ------------------
  126|      1|        return false;
  127|      1|    }
  128|       |
  129|     17|    return bin_unpack_u32(bu, &event->conference_number)
  ------------------
  |  Branch (129:12): [True: 16, False: 1]
  ------------------
  130|     17|           && bin_unpack_u32(bu, &event->peer_number)
  ------------------
  |  Branch (130:15): [True: 15, False: 1]
  ------------------
  131|     17|           && bin_unpack_bin(bu, &event->name, &event->name_length);
  ------------------
  |  Branch (131:15): [True: 13, False: 2]
  ------------------
  132|     18|}

tox_event_conference_title_pack:
  113|     80|{
  114|     80|    return bin_pack_array(bp, 3)
  ------------------
  |  Branch (114:12): [True: 80, False: 0]
  ------------------
  115|     80|           && bin_pack_u32(bp, event->conference_number)
  ------------------
  |  Branch (115:15): [True: 80, False: 0]
  ------------------
  116|     80|           && bin_pack_u32(bp, event->peer_number)
  ------------------
  |  Branch (116:15): [True: 80, False: 0]
  ------------------
  117|     80|           && bin_pack_bin(bp, event->title, event->title_length);
  ------------------
  |  Branch (117:15): [True: 80, False: 0]
  ------------------
  118|     80|}
tox_event_conference_title_new:
  146|     73|{
  147|     73|    Tox_Event_Conference_Title *const conference_title =
  148|     73|        (Tox_Event_Conference_Title *)mem_alloc(mem, sizeof(Tox_Event_Conference_Title));
  149|       |
  150|     73|    if (conference_title == nullptr) {
  ------------------
  |  |   63|     73|#define nullptr NULL
  ------------------
  |  Branch (150:9): [True: 1, False: 72]
  ------------------
  151|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  152|      1|    }
  153|       |
  154|     72|    tox_event_conference_title_construct(conference_title);
  155|     72|    return conference_title;
  156|     73|}
tox_event_conference_title_free:
  159|     73|{
  160|     73|    if (conference_title != nullptr) {
  ------------------
  |  |   63|     73|#define nullptr NULL
  ------------------
  |  Branch (160:9): [True: 72, False: 1]
  ------------------
  161|     72|        tox_event_conference_title_destruct(conference_title, mem);
  162|     72|    }
  163|     73|    mem_delete(mem, conference_title);
  164|     73|}
tox_event_conference_title_unpack:
  188|     73|{
  189|     73|    assert(event != nullptr);
  190|     73|    assert(*event == nullptr);
  191|     73|    *event = tox_event_conference_title_new(mem);
  192|       |
  193|     73|    if (*event == nullptr) {
  ------------------
  |  |   63|     73|#define nullptr NULL
  ------------------
  |  Branch (193:9): [True: 1, False: 72]
  ------------------
  194|      1|        return false;
  195|      1|    }
  196|       |
  197|     72|    return tox_event_conference_title_unpack_into(*event, bu);
  198|     73|}
conference_title.c:tox_event_conference_title_construct:
  100|     72|{
  101|     72|    *conference_title = (Tox_Event_Conference_Title) {
  102|     72|        0
  103|     72|    };
  104|     72|}
conference_title.c:tox_event_conference_title_destruct:
  107|     72|{
  108|     72|    free(conference_title->title);
  109|     72|}
conference_title.c:tox_event_conference_title_unpack_into:
  123|     72|{
  124|     72|    assert(event != nullptr);
  125|     72|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|     72|#define nullptr NULL
  ------------------
  |  Branch (125:9): [True: 1, False: 71]
  ------------------
  126|      1|        return false;
  127|      1|    }
  128|       |
  129|     71|    return bin_unpack_u32(bu, &event->conference_number)
  ------------------
  |  Branch (129:12): [True: 70, False: 1]
  ------------------
  130|     71|           && bin_unpack_u32(bu, &event->peer_number)
  ------------------
  |  Branch (130:15): [True: 69, False: 1]
  ------------------
  131|     71|           && bin_unpack_bin(bu, &event->title, &event->title_length);
  ------------------
  |  Branch (131:15): [True: 60, False: 9]
  ------------------
  132|     72|}

tox_event_dht_nodes_response_new:
  129|      9|{
  130|      9|    Tox_Event_Dht_Nodes_Response *const dht_nodes_response =
  131|      9|        (Tox_Event_Dht_Nodes_Response *)mem_alloc(mem, sizeof(Tox_Event_Dht_Nodes_Response));
  132|       |
  133|      9|    if (dht_nodes_response == nullptr) {
  ------------------
  |  |   63|      9|#define nullptr NULL
  ------------------
  |  Branch (133:9): [True: 1, False: 8]
  ------------------
  134|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  135|      1|    }
  136|       |
  137|      8|    tox_event_dht_nodes_response_construct(dht_nodes_response);
  138|      8|    return dht_nodes_response;
  139|      9|}
tox_event_dht_nodes_response_free:
  142|      9|{
  143|      9|    if (dht_nodes_response != nullptr) {
  ------------------
  |  |   63|      9|#define nullptr NULL
  ------------------
  |  Branch (143:9): [True: 8, False: 1]
  ------------------
  144|      8|        tox_event_dht_nodes_response_destruct(dht_nodes_response, mem);
  145|      8|    }
  146|      9|    mem_delete(mem, dht_nodes_response);
  147|      9|}
tox_event_dht_nodes_response_unpack:
  171|      9|{
  172|      9|    *event = tox_event_dht_nodes_response_new(mem);
  173|       |
  174|      9|    if (*event == nullptr) {
  ------------------
  |  |   63|      9|#define nullptr NULL
  ------------------
  |  Branch (174:9): [True: 1, False: 8]
  ------------------
  175|      1|        return false;
  176|      1|    }
  177|       |
  178|      8|    return tox_event_dht_nodes_response_unpack_into(*event, bu);
  179|      9|}
dht_nodes_response.c:tox_event_dht_nodes_response_construct:
   87|      8|{
   88|      8|    *dht_nodes_response = (Tox_Event_Dht_Nodes_Response) {
   89|      8|        {
   90|      8|            0
   91|      8|        }
   92|      8|    };
   93|      8|}
dht_nodes_response.c:tox_event_dht_nodes_response_destruct:
   96|      8|{
   97|      8|    mem_delete(mem, dht_nodes_response->ip);
   98|      8|}
dht_nodes_response.c:tox_event_dht_nodes_response_unpack_into:
  112|      8|{
  113|      8|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|      8|#define nullptr NULL
  ------------------
  |  Branch (113:9): [True: 2, False: 6]
  ------------------
  114|      2|        return false;
  115|      2|    }
  116|       |
  117|      6|    return bin_unpack_bin_fixed(bu, event->public_key, TOX_PUBLIC_KEY_SIZE)
  ------------------
  |  |  212|      6|#define TOX_PUBLIC_KEY_SIZE            32
  ------------------
  |  Branch (117:12): [True: 0, False: 6]
  ------------------
  118|      6|           && bin_unpack_bin(bu, &event->ip, &event->ip_length)
  ------------------
  |  Branch (118:15): [True: 0, False: 0]
  ------------------
  119|      6|           && bin_unpack_u16(bu, &event->port);
  ------------------
  |  Branch (119:15): [True: 0, False: 0]
  ------------------
  120|      8|}

tox_events_free:
   44|  1.38k|{
   45|  1.38k|    if (events == nullptr) {
  ------------------
  |  |   63|  1.38k|#define nullptr NULL
  ------------------
  |  Branch (45:9): [True: 603, False: 784]
  ------------------
   46|    603|        return;
   47|    603|    }
   48|       |
   49|  1.97k|    for (uint32_t i = 0; i < events->events_size; ++i) {
  ------------------
  |  Branch (49:26): [True: 1.19k, False: 784]
  ------------------
   50|  1.19k|        tox_event_destruct(&events->events[i], events->mem);
   51|  1.19k|    }
   52|       |
   53|    784|    mem_delete(events->mem, events->events);
   54|    784|    mem_delete(events->mem, events);
   55|    784|}
tox_events_add:
   58|  1.19k|{
   59|  1.19k|    if (events->events_size == UINT32_MAX) {
  ------------------
  |  Branch (59:9): [True: 0, False: 1.19k]
  ------------------
   60|      0|        return false;
   61|      0|    }
   62|       |
   63|  1.19k|    if (events->events_size == events->events_capacity) {
  ------------------
  |  Branch (63:9): [True: 798, False: 394]
  ------------------
   64|    798|        const uint32_t new_events_capacity = events->events_capacity * 2 + 1;
   65|    798|        Tox_Event *new_events = (Tox_Event *)mem_vrealloc(
   66|    798|                                    events->mem, events->events, new_events_capacity, sizeof(Tox_Event));
   67|       |
   68|    798|        if (new_events == nullptr) {
  ------------------
  |  |   63|    798|#define nullptr NULL
  ------------------
  |  Branch (68:13): [True: 1, False: 797]
  ------------------
   69|      1|            return false;
   70|      1|        }
   71|       |
   72|    797|        events->events = new_events;
   73|    797|        events->events_capacity = new_events_capacity;
   74|    797|    }
   75|       |
   76|  1.19k|    events->events[events->events_size] = *event;
   77|  1.19k|    ++events->events_size;
   78|       |
   79|  1.19k|    return true;
   80|  1.19k|}

tox_event_file_chunk_request_pack:
   98|     94|{
   99|     94|    return bin_pack_array(bp, 4)
  ------------------
  |  Branch (99:12): [True: 94, False: 0]
  ------------------
  100|     94|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (100:15): [True: 94, False: 0]
  ------------------
  101|     94|           && bin_pack_u32(bp, event->file_number)
  ------------------
  |  Branch (101:15): [True: 94, False: 0]
  ------------------
  102|     94|           && bin_pack_u64(bp, event->position)
  ------------------
  |  Branch (102:15): [True: 94, False: 0]
  ------------------
  103|     94|           && bin_pack_u16(bp, event->length);
  ------------------
  |  Branch (103:15): [True: 94, False: 0]
  ------------------
  104|     94|}
tox_event_file_chunk_request_new:
  133|    242|{
  134|    242|    Tox_Event_File_Chunk_Request *const file_chunk_request =
  135|    242|        (Tox_Event_File_Chunk_Request *)mem_alloc(mem, sizeof(Tox_Event_File_Chunk_Request));
  136|       |
  137|    242|    if (file_chunk_request == nullptr) {
  ------------------
  |  |   63|    242|#define nullptr NULL
  ------------------
  |  Branch (137:9): [True: 1, False: 241]
  ------------------
  138|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  139|      1|    }
  140|       |
  141|    241|    tox_event_file_chunk_request_construct(file_chunk_request);
  142|    241|    return file_chunk_request;
  143|    242|}
tox_event_file_chunk_request_free:
  146|    242|{
  147|    242|    if (file_chunk_request != nullptr) {
  ------------------
  |  |   63|    242|#define nullptr NULL
  ------------------
  |  Branch (147:9): [True: 241, False: 1]
  ------------------
  148|    241|        tox_event_file_chunk_request_destruct(file_chunk_request, mem);
  149|    241|    }
  150|    242|    mem_delete(mem, file_chunk_request);
  151|    242|}
tox_event_file_chunk_request_unpack:
  175|    242|{
  176|    242|    assert(event != nullptr);
  177|    242|    assert(*event == nullptr);
  178|    242|    *event = tox_event_file_chunk_request_new(mem);
  179|       |
  180|    242|    if (*event == nullptr) {
  ------------------
  |  |   63|    242|#define nullptr NULL
  ------------------
  |  Branch (180:9): [True: 1, False: 241]
  ------------------
  181|      1|        return false;
  182|      1|    }
  183|       |
  184|    241|    return tox_event_file_chunk_request_unpack_into(*event, bu);
  185|    242|}
file_chunk_request.c:tox_event_file_chunk_request_construct:
   85|    241|{
   86|    241|    *file_chunk_request = (Tox_Event_File_Chunk_Request) {
   87|    241|        0
   88|    241|    };
   89|    241|}
file_chunk_request.c:tox_event_file_chunk_request_destruct:
   92|    241|{
   93|    241|    return;
   94|    241|}
file_chunk_request.c:tox_event_file_chunk_request_unpack_into:
  109|    241|{
  110|    241|    assert(event != nullptr);
  111|    241|    if (!bin_unpack_array_fixed(bu, 4, nullptr)) {
  ------------------
  |  |   63|    241|#define nullptr NULL
  ------------------
  |  Branch (111:9): [True: 2, False: 239]
  ------------------
  112|      2|        return false;
  113|      2|    }
  114|       |
  115|    239|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (115:12): [True: 238, False: 1]
  ------------------
  116|    239|           && bin_unpack_u32(bu, &event->file_number)
  ------------------
  |  Branch (116:15): [True: 237, False: 1]
  ------------------
  117|    239|           && bin_unpack_u64(bu, &event->position)
  ------------------
  |  Branch (117:15): [True: 202, False: 35]
  ------------------
  118|    239|           && bin_unpack_u16(bu, &event->length);
  ------------------
  |  Branch (118:15): [True: 147, False: 55]
  ------------------
  119|    241|}

tox_event_file_recv_pack:
  141|     22|{
  142|     22|    return bin_pack_array(bp, 5)
  ------------------
  |  Branch (142:12): [True: 22, False: 0]
  ------------------
  143|     22|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (143:15): [True: 22, False: 0]
  ------------------
  144|     22|           && bin_pack_u32(bp, event->file_number)
  ------------------
  |  Branch (144:15): [True: 22, False: 0]
  ------------------
  145|     22|           && bin_pack_u32(bp, event->kind)
  ------------------
  |  Branch (145:15): [True: 22, False: 0]
  ------------------
  146|     22|           && bin_pack_u64(bp, event->file_size)
  ------------------
  |  Branch (146:15): [True: 22, False: 0]
  ------------------
  147|     22|           && bin_pack_bin(bp, event->filename, event->filename_length);
  ------------------
  |  Branch (147:15): [True: 22, False: 0]
  ------------------
  148|     22|}
tox_event_file_recv_new:
  178|     25|{
  179|     25|    Tox_Event_File_Recv *const file_recv =
  180|     25|        (Tox_Event_File_Recv *)mem_alloc(mem, sizeof(Tox_Event_File_Recv));
  181|       |
  182|     25|    if (file_recv == nullptr) {
  ------------------
  |  |   63|     25|#define nullptr NULL
  ------------------
  |  Branch (182:9): [True: 1, False: 24]
  ------------------
  183|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  184|      1|    }
  185|       |
  186|     24|    tox_event_file_recv_construct(file_recv);
  187|     24|    return file_recv;
  188|     25|}
tox_event_file_recv_free:
  191|     25|{
  192|     25|    if (file_recv != nullptr) {
  ------------------
  |  |   63|     25|#define nullptr NULL
  ------------------
  |  Branch (192:9): [True: 24, False: 1]
  ------------------
  193|     24|        tox_event_file_recv_destruct(file_recv, mem);
  194|     24|    }
  195|     25|    mem_delete(mem, file_recv);
  196|     25|}
tox_event_file_recv_unpack:
  220|     25|{
  221|     25|    assert(event != nullptr);
  222|     25|    assert(*event == nullptr);
  223|     25|    *event = tox_event_file_recv_new(mem);
  224|       |
  225|     25|    if (*event == nullptr) {
  ------------------
  |  |   63|     25|#define nullptr NULL
  ------------------
  |  Branch (225:9): [True: 1, False: 24]
  ------------------
  226|      1|        return false;
  227|      1|    }
  228|       |
  229|     24|    return tox_event_file_recv_unpack_into(*event, bu);
  230|     25|}
file_recv.c:tox_event_file_recv_construct:
  128|     24|{
  129|     24|    *file_recv = (Tox_Event_File_Recv) {
  130|     24|        0
  131|     24|    };
  132|     24|}
file_recv.c:tox_event_file_recv_destruct:
  135|     24|{
  136|     24|    free(file_recv->filename);
  137|     24|}
file_recv.c:tox_event_file_recv_unpack_into:
  153|     24|{
  154|     24|    assert(event != nullptr);
  155|     24|    if (!bin_unpack_array_fixed(bu, 5, nullptr)) {
  ------------------
  |  |   63|     24|#define nullptr NULL
  ------------------
  |  Branch (155:9): [True: 2, False: 22]
  ------------------
  156|      2|        return false;
  157|      2|    }
  158|       |
  159|     22|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (159:12): [True: 21, False: 1]
  ------------------
  160|     22|           && bin_unpack_u32(bu, &event->file_number)
  ------------------
  |  Branch (160:15): [True: 20, False: 1]
  ------------------
  161|     22|           && bin_unpack_u32(bu, &event->kind)
  ------------------
  |  Branch (161:15): [True: 19, False: 1]
  ------------------
  162|     22|           && bin_unpack_u64(bu, &event->file_size)
  ------------------
  |  Branch (162:15): [True: 18, False: 1]
  ------------------
  163|     22|           && bin_unpack_bin(bu, &event->filename, &event->filename_length);
  ------------------
  |  Branch (163:15): [True: 16, False: 2]
  ------------------
  164|     24|}

tox_event_file_recv_chunk_pack:
  127|     20|{
  128|     20|    return bin_pack_array(bp, 4)
  ------------------
  |  Branch (128:12): [True: 20, False: 0]
  ------------------
  129|     20|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (129:15): [True: 20, False: 0]
  ------------------
  130|     20|           && bin_pack_u32(bp, event->file_number)
  ------------------
  |  Branch (130:15): [True: 20, False: 0]
  ------------------
  131|     20|           && bin_pack_u64(bp, event->position)
  ------------------
  |  Branch (131:15): [True: 20, False: 0]
  ------------------
  132|     20|           && bin_pack_bin(bp, event->data, event->data_length);
  ------------------
  |  Branch (132:15): [True: 20, False: 0]
  ------------------
  133|     20|}
tox_event_file_recv_chunk_new:
  162|     28|{
  163|     28|    Tox_Event_File_Recv_Chunk *const file_recv_chunk =
  164|     28|        (Tox_Event_File_Recv_Chunk *)mem_alloc(mem, sizeof(Tox_Event_File_Recv_Chunk));
  165|       |
  166|     28|    if (file_recv_chunk == nullptr) {
  ------------------
  |  |   63|     28|#define nullptr NULL
  ------------------
  |  Branch (166:9): [True: 1, False: 27]
  ------------------
  167|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  168|      1|    }
  169|       |
  170|     27|    tox_event_file_recv_chunk_construct(file_recv_chunk);
  171|     27|    return file_recv_chunk;
  172|     28|}
tox_event_file_recv_chunk_free:
  175|     28|{
  176|     28|    if (file_recv_chunk != nullptr) {
  ------------------
  |  |   63|     28|#define nullptr NULL
  ------------------
  |  Branch (176:9): [True: 27, False: 1]
  ------------------
  177|     27|        tox_event_file_recv_chunk_destruct(file_recv_chunk, mem);
  178|     27|    }
  179|     28|    mem_delete(mem, file_recv_chunk);
  180|     28|}
tox_event_file_recv_chunk_unpack:
  204|     28|{
  205|     28|    assert(event != nullptr);
  206|     28|    assert(*event == nullptr);
  207|     28|    *event = tox_event_file_recv_chunk_new(mem);
  208|       |
  209|     28|    if (*event == nullptr) {
  ------------------
  |  |   63|     28|#define nullptr NULL
  ------------------
  |  Branch (209:9): [True: 1, False: 27]
  ------------------
  210|      1|        return false;
  211|      1|    }
  212|       |
  213|     27|    return tox_event_file_recv_chunk_unpack_into(*event, bu);
  214|     28|}
file_recv_chunk.c:tox_event_file_recv_chunk_construct:
  114|     27|{
  115|     27|    *file_recv_chunk = (Tox_Event_File_Recv_Chunk) {
  116|     27|        0
  117|     27|    };
  118|     27|}
file_recv_chunk.c:tox_event_file_recv_chunk_destruct:
  121|     27|{
  122|     27|    free(file_recv_chunk->data);
  123|     27|}
file_recv_chunk.c:tox_event_file_recv_chunk_unpack_into:
  138|     27|{
  139|     27|    assert(event != nullptr);
  140|     27|    if (!bin_unpack_array_fixed(bu, 4, nullptr)) {
  ------------------
  |  |   63|     27|#define nullptr NULL
  ------------------
  |  Branch (140:9): [True: 3, False: 24]
  ------------------
  141|      3|        return false;
  142|      3|    }
  143|       |
  144|     24|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (144:12): [True: 23, False: 1]
  ------------------
  145|     24|           && bin_unpack_u32(bu, &event->file_number)
  ------------------
  |  Branch (145:15): [True: 22, False: 1]
  ------------------
  146|     24|           && bin_unpack_u64(bu, &event->position)
  ------------------
  |  Branch (146:15): [True: 16, False: 6]
  ------------------
  147|     24|           && bin_unpack_bin(bu, &event->data, &event->data_length);
  ------------------
  |  Branch (147:15): [True: 14, False: 2]
  ------------------
  148|     27|}

tox_event_file_recv_control_pack:
   86|     24|{
   87|     24|    return bin_pack_array(bp, 3)
  ------------------
  |  Branch (87:12): [True: 24, False: 0]
  ------------------
   88|     24|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (88:15): [True: 24, False: 0]
  ------------------
   89|     24|           && bin_pack_u32(bp, event->file_number)
  ------------------
  |  Branch (89:15): [True: 24, False: 0]
  ------------------
   90|     24|           && tox_file_control_pack(event->control, bp);
  ------------------
  |  Branch (90:15): [True: 24, False: 0]
  ------------------
   91|     24|}
tox_event_file_recv_control_new:
  119|     43|{
  120|     43|    Tox_Event_File_Recv_Control *const file_recv_control =
  121|     43|        (Tox_Event_File_Recv_Control *)mem_alloc(mem, sizeof(Tox_Event_File_Recv_Control));
  122|       |
  123|     43|    if (file_recv_control == nullptr) {
  ------------------
  |  |   63|     43|#define nullptr NULL
  ------------------
  |  Branch (123:9): [True: 1, False: 42]
  ------------------
  124|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  125|      1|    }
  126|       |
  127|     42|    tox_event_file_recv_control_construct(file_recv_control);
  128|     42|    return file_recv_control;
  129|     43|}
tox_event_file_recv_control_free:
  132|     43|{
  133|     43|    if (file_recv_control != nullptr) {
  ------------------
  |  |   63|     43|#define nullptr NULL
  ------------------
  |  Branch (133:9): [True: 42, False: 1]
  ------------------
  134|     42|        tox_event_file_recv_control_destruct(file_recv_control, mem);
  135|     42|    }
  136|     43|    mem_delete(mem, file_recv_control);
  137|     43|}
tox_event_file_recv_control_unpack:
  161|     43|{
  162|     43|    assert(event != nullptr);
  163|     43|    assert(*event == nullptr);
  164|     43|    *event = tox_event_file_recv_control_new(mem);
  165|       |
  166|     43|    if (*event == nullptr) {
  ------------------
  |  |   63|     43|#define nullptr NULL
  ------------------
  |  Branch (166:9): [True: 1, False: 42]
  ------------------
  167|      1|        return false;
  168|      1|    }
  169|       |
  170|     42|    return tox_event_file_recv_control_unpack_into(*event, bu);
  171|     43|}
file_recv_control.c:tox_event_file_recv_control_construct:
   73|     42|{
   74|     42|    *file_recv_control = (Tox_Event_File_Recv_Control) {
   75|     42|        0
   76|     42|    };
   77|     42|}
file_recv_control.c:tox_event_file_recv_control_destruct:
   80|     42|{
   81|     42|    return;
   82|     42|}
file_recv_control.c:tox_event_file_recv_control_unpack_into:
   96|     42|{
   97|     42|    assert(event != nullptr);
   98|     42|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|     42|#define nullptr NULL
  ------------------
  |  Branch (98:9): [True: 2, False: 40]
  ------------------
   99|      2|        return false;
  100|      2|    }
  101|       |
  102|     40|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (102:12): [True: 38, False: 2]
  ------------------
  103|     40|           && bin_unpack_u32(bu, &event->file_number)
  ------------------
  |  Branch (103:15): [True: 37, False: 1]
  ------------------
  104|     40|           && tox_file_control_unpack(&event->control, bu);
  ------------------
  |  Branch (104:15): [True: 35, False: 2]
  ------------------
  105|     42|}

tox_event_friend_connection_status_pack:
   72|     48|{
   73|     48|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (73:12): [True: 48, False: 0]
  ------------------
   74|     48|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (74:15): [True: 48, False: 0]
  ------------------
   75|     48|           && tox_connection_pack(event->connection_status, bp);
  ------------------
  |  Branch (75:15): [True: 48, False: 0]
  ------------------
   76|     48|}
tox_event_friend_connection_status_new:
  103|     49|{
  104|     49|    Tox_Event_Friend_Connection_Status *const friend_connection_status =
  105|     49|        (Tox_Event_Friend_Connection_Status *)mem_alloc(mem, sizeof(Tox_Event_Friend_Connection_Status));
  106|       |
  107|     49|    if (friend_connection_status == nullptr) {
  ------------------
  |  |   63|     49|#define nullptr NULL
  ------------------
  |  Branch (107:9): [True: 1, False: 48]
  ------------------
  108|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  109|      1|    }
  110|       |
  111|     48|    tox_event_friend_connection_status_construct(friend_connection_status);
  112|     48|    return friend_connection_status;
  113|     49|}
tox_event_friend_connection_status_free:
  116|     49|{
  117|     49|    if (friend_connection_status != nullptr) {
  ------------------
  |  |   63|     49|#define nullptr NULL
  ------------------
  |  Branch (117:9): [True: 48, False: 1]
  ------------------
  118|     48|        tox_event_friend_connection_status_destruct(friend_connection_status, mem);
  119|     48|    }
  120|     49|    mem_delete(mem, friend_connection_status);
  121|     49|}
tox_event_friend_connection_status_unpack:
  145|     49|{
  146|     49|    assert(event != nullptr);
  147|     49|    assert(*event == nullptr);
  148|     49|    *event = tox_event_friend_connection_status_new(mem);
  149|       |
  150|     49|    if (*event == nullptr) {
  ------------------
  |  |   63|     49|#define nullptr NULL
  ------------------
  |  Branch (150:9): [True: 1, False: 48]
  ------------------
  151|      1|        return false;
  152|      1|    }
  153|       |
  154|     48|    return tox_event_friend_connection_status_unpack_into(*event, bu);
  155|     49|}
friend_connection_status.c:tox_event_friend_connection_status_construct:
   59|     48|{
   60|     48|    *friend_connection_status = (Tox_Event_Friend_Connection_Status) {
   61|     48|        0
   62|     48|    };
   63|     48|}
friend_connection_status.c:tox_event_friend_connection_status_destruct:
   66|     48|{
   67|     48|    return;
   68|     48|}
friend_connection_status.c:tox_event_friend_connection_status_unpack_into:
   81|     48|{
   82|     48|    assert(event != nullptr);
   83|     48|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     48|#define nullptr NULL
  ------------------
  |  Branch (83:9): [True: 2, False: 46]
  ------------------
   84|      2|        return false;
   85|      2|    }
   86|       |
   87|     46|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (87:12): [True: 45, False: 1]
  ------------------
   88|     46|           && tox_connection_unpack(&event->connection_status, bu);
  ------------------
  |  Branch (88:15): [True: 44, False: 1]
  ------------------
   89|     48|}

tox_event_friend_lossless_packet_pack:
   99|     20|{
  100|     20|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (100:12): [True: 20, False: 0]
  ------------------
  101|     20|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (101:15): [True: 20, False: 0]
  ------------------
  102|     20|           && bin_pack_bin(bp, event->data, event->data_length);
  ------------------
  |  Branch (102:15): [True: 20, False: 0]
  ------------------
  103|     20|}
tox_event_friend_lossless_packet_new:
  130|     22|{
  131|     22|    Tox_Event_Friend_Lossless_Packet *const friend_lossless_packet =
  132|     22|        (Tox_Event_Friend_Lossless_Packet *)mem_alloc(mem, sizeof(Tox_Event_Friend_Lossless_Packet));
  133|       |
  134|     22|    if (friend_lossless_packet == nullptr) {
  ------------------
  |  |   63|     22|#define nullptr NULL
  ------------------
  |  Branch (134:9): [True: 1, False: 21]
  ------------------
  135|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  136|      1|    }
  137|       |
  138|     21|    tox_event_friend_lossless_packet_construct(friend_lossless_packet);
  139|     21|    return friend_lossless_packet;
  140|     22|}
tox_event_friend_lossless_packet_free:
  143|     22|{
  144|     22|    if (friend_lossless_packet != nullptr) {
  ------------------
  |  |   63|     22|#define nullptr NULL
  ------------------
  |  Branch (144:9): [True: 21, False: 1]
  ------------------
  145|     21|        tox_event_friend_lossless_packet_destruct(friend_lossless_packet, mem);
  146|     21|    }
  147|     22|    mem_delete(mem, friend_lossless_packet);
  148|     22|}
tox_event_friend_lossless_packet_unpack:
  172|     22|{
  173|     22|    assert(event != nullptr);
  174|     22|    assert(*event == nullptr);
  175|     22|    *event = tox_event_friend_lossless_packet_new(mem);
  176|       |
  177|     22|    if (*event == nullptr) {
  ------------------
  |  |   63|     22|#define nullptr NULL
  ------------------
  |  Branch (177:9): [True: 1, False: 21]
  ------------------
  178|      1|        return false;
  179|      1|    }
  180|       |
  181|     21|    return tox_event_friend_lossless_packet_unpack_into(*event, bu);
  182|     22|}
friend_lossless_packet.c:tox_event_friend_lossless_packet_construct:
   86|     21|{
   87|     21|    *friend_lossless_packet = (Tox_Event_Friend_Lossless_Packet) {
   88|     21|        0
   89|     21|    };
   90|     21|}
friend_lossless_packet.c:tox_event_friend_lossless_packet_destruct:
   93|     21|{
   94|     21|    free(friend_lossless_packet->data);
   95|     21|}
friend_lossless_packet.c:tox_event_friend_lossless_packet_unpack_into:
  108|     21|{
  109|     21|    assert(event != nullptr);
  110|     21|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     21|#define nullptr NULL
  ------------------
  |  Branch (110:9): [True: 1, False: 20]
  ------------------
  111|      1|        return false;
  112|      1|    }
  113|       |
  114|     20|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (114:12): [True: 19, False: 1]
  ------------------
  115|     20|           && bin_unpack_bin(bu, &event->data, &event->data_length);
  ------------------
  |  Branch (115:15): [True: 15, False: 4]
  ------------------
  116|     21|}

tox_event_friend_lossy_packet_pack:
   99|     28|{
  100|     28|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (100:12): [True: 28, False: 0]
  ------------------
  101|     28|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (101:15): [True: 28, False: 0]
  ------------------
  102|     28|           && bin_pack_bin(bp, event->data, event->data_length);
  ------------------
  |  Branch (102:15): [True: 28, False: 0]
  ------------------
  103|     28|}
tox_event_friend_lossy_packet_new:
  130|     34|{
  131|     34|    Tox_Event_Friend_Lossy_Packet *const friend_lossy_packet =
  132|     34|        (Tox_Event_Friend_Lossy_Packet *)mem_alloc(mem, sizeof(Tox_Event_Friend_Lossy_Packet));
  133|       |
  134|     34|    if (friend_lossy_packet == nullptr) {
  ------------------
  |  |   63|     34|#define nullptr NULL
  ------------------
  |  Branch (134:9): [True: 1, False: 33]
  ------------------
  135|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  136|      1|    }
  137|       |
  138|     33|    tox_event_friend_lossy_packet_construct(friend_lossy_packet);
  139|     33|    return friend_lossy_packet;
  140|     34|}
tox_event_friend_lossy_packet_free:
  143|     34|{
  144|     34|    if (friend_lossy_packet != nullptr) {
  ------------------
  |  |   63|     34|#define nullptr NULL
  ------------------
  |  Branch (144:9): [True: 33, False: 1]
  ------------------
  145|     33|        tox_event_friend_lossy_packet_destruct(friend_lossy_packet, mem);
  146|     33|    }
  147|     34|    mem_delete(mem, friend_lossy_packet);
  148|     34|}
tox_event_friend_lossy_packet_unpack:
  172|     34|{
  173|     34|    assert(event != nullptr);
  174|     34|    assert(*event == nullptr);
  175|     34|    *event = tox_event_friend_lossy_packet_new(mem);
  176|       |
  177|     34|    if (*event == nullptr) {
  ------------------
  |  |   63|     34|#define nullptr NULL
  ------------------
  |  Branch (177:9): [True: 1, False: 33]
  ------------------
  178|      1|        return false;
  179|      1|    }
  180|       |
  181|     33|    return tox_event_friend_lossy_packet_unpack_into(*event, bu);
  182|     34|}
friend_lossy_packet.c:tox_event_friend_lossy_packet_construct:
   86|     33|{
   87|     33|    *friend_lossy_packet = (Tox_Event_Friend_Lossy_Packet) {
   88|     33|        0
   89|     33|    };
   90|     33|}
friend_lossy_packet.c:tox_event_friend_lossy_packet_destruct:
   93|     33|{
   94|     33|    free(friend_lossy_packet->data);
   95|     33|}
friend_lossy_packet.c:tox_event_friend_lossy_packet_unpack_into:
  108|     33|{
  109|     33|    assert(event != nullptr);
  110|     33|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     33|#define nullptr NULL
  ------------------
  |  Branch (110:9): [True: 1, False: 32]
  ------------------
  111|      1|        return false;
  112|      1|    }
  113|       |
  114|     32|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (114:12): [True: 31, False: 1]
  ------------------
  115|     32|           && bin_unpack_bin(bu, &event->data, &event->data_length);
  ------------------
  |  Branch (115:15): [True: 24, False: 7]
  ------------------
  116|     33|}

tox_event_friend_message_pack:
  115|     20|{
  116|     20|    return bin_pack_array(bp, 3)
  ------------------
  |  Branch (116:12): [True: 20, False: 0]
  ------------------
  117|     20|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (117:15): [True: 20, False: 0]
  ------------------
  118|     20|           && tox_message_type_pack(event->type, bp)
  ------------------
  |  Branch (118:15): [True: 20, False: 0]
  ------------------
  119|     20|           && bin_pack_bin(bp, event->message, event->message_length);
  ------------------
  |  Branch (119:15): [True: 20, False: 0]
  ------------------
  120|     20|}
tox_event_friend_message_new:
  148|     15|{
  149|     15|    Tox_Event_Friend_Message *const friend_message =
  150|     15|        (Tox_Event_Friend_Message *)mem_alloc(mem, sizeof(Tox_Event_Friend_Message));
  151|       |
  152|     15|    if (friend_message == nullptr) {
  ------------------
  |  |   63|     15|#define nullptr NULL
  ------------------
  |  Branch (152:9): [True: 1, False: 14]
  ------------------
  153|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  154|      1|    }
  155|       |
  156|     14|    tox_event_friend_message_construct(friend_message);
  157|     14|    return friend_message;
  158|     15|}
tox_event_friend_message_free:
  161|     15|{
  162|     15|    if (friend_message != nullptr) {
  ------------------
  |  |   63|     15|#define nullptr NULL
  ------------------
  |  Branch (162:9): [True: 14, False: 1]
  ------------------
  163|     14|        tox_event_friend_message_destruct(friend_message, mem);
  164|     14|    }
  165|     15|    mem_delete(mem, friend_message);
  166|     15|}
tox_event_friend_message_unpack:
  190|     15|{
  191|     15|    assert(event != nullptr);
  192|     15|    assert(*event == nullptr);
  193|     15|    *event = tox_event_friend_message_new(mem);
  194|       |
  195|     15|    if (*event == nullptr) {
  ------------------
  |  |   63|     15|#define nullptr NULL
  ------------------
  |  Branch (195:9): [True: 1, False: 14]
  ------------------
  196|      1|        return false;
  197|      1|    }
  198|       |
  199|     14|    return tox_event_friend_message_unpack_into(*event, bu);
  200|     15|}
friend_message.c:tox_event_friend_message_construct:
  102|     14|{
  103|     14|    *friend_message = (Tox_Event_Friend_Message) {
  104|     14|        0
  105|     14|    };
  106|     14|}
friend_message.c:tox_event_friend_message_destruct:
  109|     14|{
  110|     14|    free(friend_message->message);
  111|     14|}
friend_message.c:tox_event_friend_message_unpack_into:
  125|     14|{
  126|     14|    assert(event != nullptr);
  127|     14|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (127:9): [True: 1, False: 13]
  ------------------
  128|      1|        return false;
  129|      1|    }
  130|       |
  131|     13|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (131:12): [True: 12, False: 1]
  ------------------
  132|     13|           && tox_message_type_unpack(&event->type, bu)
  ------------------
  |  Branch (132:15): [True: 11, False: 1]
  ------------------
  133|     13|           && bin_unpack_bin(bu, &event->message, &event->message_length);
  ------------------
  |  Branch (133:15): [True: 10, False: 1]
  ------------------
  134|     14|}

tox_event_friend_name_pack:
   99|     40|{
  100|     40|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (100:12): [True: 40, False: 0]
  ------------------
  101|     40|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (101:15): [True: 40, False: 0]
  ------------------
  102|     40|           && bin_pack_bin(bp, event->name, event->name_length);
  ------------------
  |  Branch (102:15): [True: 40, False: 0]
  ------------------
  103|     40|}
tox_event_friend_name_new:
  130|     42|{
  131|     42|    Tox_Event_Friend_Name *const friend_name =
  132|     42|        (Tox_Event_Friend_Name *)mem_alloc(mem, sizeof(Tox_Event_Friend_Name));
  133|       |
  134|     42|    if (friend_name == nullptr) {
  ------------------
  |  |   63|     42|#define nullptr NULL
  ------------------
  |  Branch (134:9): [True: 1, False: 41]
  ------------------
  135|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  136|      1|    }
  137|       |
  138|     41|    tox_event_friend_name_construct(friend_name);
  139|     41|    return friend_name;
  140|     42|}
tox_event_friend_name_free:
  143|     42|{
  144|     42|    if (friend_name != nullptr) {
  ------------------
  |  |   63|     42|#define nullptr NULL
  ------------------
  |  Branch (144:9): [True: 41, False: 1]
  ------------------
  145|     41|        tox_event_friend_name_destruct(friend_name, mem);
  146|     41|    }
  147|     42|    mem_delete(mem, friend_name);
  148|     42|}
tox_event_friend_name_unpack:
  172|     42|{
  173|     42|    assert(event != nullptr);
  174|     42|    assert(*event == nullptr);
  175|     42|    *event = tox_event_friend_name_new(mem);
  176|       |
  177|     42|    if (*event == nullptr) {
  ------------------
  |  |   63|     42|#define nullptr NULL
  ------------------
  |  Branch (177:9): [True: 1, False: 41]
  ------------------
  178|      1|        return false;
  179|      1|    }
  180|       |
  181|     41|    return tox_event_friend_name_unpack_into(*event, bu);
  182|     42|}
friend_name.c:tox_event_friend_name_construct:
   86|     41|{
   87|     41|    *friend_name = (Tox_Event_Friend_Name) {
   88|     41|        0
   89|     41|    };
   90|     41|}
friend_name.c:tox_event_friend_name_destruct:
   93|     41|{
   94|     41|    free(friend_name->name);
   95|     41|}
friend_name.c:tox_event_friend_name_unpack_into:
  108|     41|{
  109|     41|    assert(event != nullptr);
  110|     41|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     41|#define nullptr NULL
  ------------------
  |  Branch (110:9): [True: 1, False: 40]
  ------------------
  111|      1|        return false;
  112|      1|    }
  113|       |
  114|     40|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (114:12): [True: 39, False: 1]
  ------------------
  115|     40|           && bin_unpack_bin(bu, &event->name, &event->name_length);
  ------------------
  |  Branch (115:15): [True: 32, False: 7]
  ------------------
  116|     41|}

tox_event_friend_read_receipt_pack:
   70|     22|{
   71|     22|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (71:12): [True: 22, False: 0]
  ------------------
   72|     22|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (72:15): [True: 22, False: 0]
  ------------------
   73|     22|           && bin_pack_u32(bp, event->message_id);
  ------------------
  |  Branch (73:15): [True: 22, False: 0]
  ------------------
   74|     22|}
tox_event_friend_read_receipt_new:
  101|     19|{
  102|     19|    Tox_Event_Friend_Read_Receipt *const friend_read_receipt =
  103|     19|        (Tox_Event_Friend_Read_Receipt *)mem_alloc(mem, sizeof(Tox_Event_Friend_Read_Receipt));
  104|       |
  105|     19|    if (friend_read_receipt == nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (105:9): [True: 1, False: 18]
  ------------------
  106|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  107|      1|    }
  108|       |
  109|     18|    tox_event_friend_read_receipt_construct(friend_read_receipt);
  110|     18|    return friend_read_receipt;
  111|     19|}
tox_event_friend_read_receipt_free:
  114|     19|{
  115|     19|    if (friend_read_receipt != nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (115:9): [True: 18, False: 1]
  ------------------
  116|     18|        tox_event_friend_read_receipt_destruct(friend_read_receipt, mem);
  117|     18|    }
  118|     19|    mem_delete(mem, friend_read_receipt);
  119|     19|}
tox_event_friend_read_receipt_unpack:
  143|     19|{
  144|     19|    assert(event != nullptr);
  145|     19|    assert(*event == nullptr);
  146|     19|    *event = tox_event_friend_read_receipt_new(mem);
  147|       |
  148|     19|    if (*event == nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (148:9): [True: 1, False: 18]
  ------------------
  149|      1|        return false;
  150|      1|    }
  151|       |
  152|     18|    return tox_event_friend_read_receipt_unpack_into(*event, bu);
  153|     19|}
friend_read_receipt.c:tox_event_friend_read_receipt_construct:
   57|     18|{
   58|     18|    *friend_read_receipt = (Tox_Event_Friend_Read_Receipt) {
   59|     18|        0
   60|     18|    };
   61|     18|}
friend_read_receipt.c:tox_event_friend_read_receipt_destruct:
   64|     18|{
   65|     18|    return;
   66|     18|}
friend_read_receipt.c:tox_event_friend_read_receipt_unpack_into:
   79|     18|{
   80|     18|    assert(event != nullptr);
   81|     18|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
  |  Branch (81:9): [True: 1, False: 17]
  ------------------
   82|      1|        return false;
   83|      1|    }
   84|       |
   85|     17|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (85:12): [True: 16, False: 1]
  ------------------
   86|     17|           && bin_unpack_u32(bu, &event->message_id);
  ------------------
  |  Branch (86:15): [True: 14, False: 2]
  ------------------
   87|     18|}

tox_event_friend_request_pack:
   97|     20|{
   98|     20|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (98:12): [True: 20, False: 0]
  ------------------
   99|     20|           && bin_pack_bin(bp, event->public_key, TOX_PUBLIC_KEY_SIZE)
  ------------------
  |  |  212|     20|#define TOX_PUBLIC_KEY_SIZE            32
  ------------------
  |  Branch (99:15): [True: 20, False: 0]
  ------------------
  100|     20|           && bin_pack_bin(bp, event->message, event->message_length);
  ------------------
  |  Branch (100:15): [True: 20, False: 0]
  ------------------
  101|     20|}
tox_event_friend_request_new:
  123|     38|{
  124|     38|    Tox_Event_Friend_Request *const friend_request =
  125|     38|        (Tox_Event_Friend_Request *)mem_alloc(mem, sizeof(Tox_Event_Friend_Request));
  126|       |
  127|     38|    if (friend_request == nullptr) {
  ------------------
  |  |   63|     38|#define nullptr NULL
  ------------------
  |  Branch (127:9): [True: 1, False: 37]
  ------------------
  128|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  129|      1|    }
  130|       |
  131|     37|    tox_event_friend_request_construct(friend_request);
  132|     37|    return friend_request;
  133|     38|}
tox_event_friend_request_free:
  136|     38|{
  137|     38|    if (friend_request != nullptr) {
  ------------------
  |  |   63|     38|#define nullptr NULL
  ------------------
  |  Branch (137:9): [True: 37, False: 1]
  ------------------
  138|     37|        tox_event_friend_request_destruct(friend_request, mem);
  139|     37|    }
  140|     38|    mem_delete(mem, friend_request);
  141|     38|}
tox_event_friend_request_unpack:
  165|     38|{
  166|     38|    assert(event != nullptr);
  167|     38|    assert(*event == nullptr);
  168|     38|    *event = tox_event_friend_request_new(mem);
  169|       |
  170|     38|    if (*event == nullptr) {
  ------------------
  |  |   63|     38|#define nullptr NULL
  ------------------
  |  Branch (170:9): [True: 1, False: 37]
  ------------------
  171|      1|        return false;
  172|      1|    }
  173|       |
  174|     37|    return tox_event_friend_request_unpack_into(*event, bu);
  175|     38|}
friend_request.c:tox_event_friend_request_construct:
   82|     37|{
   83|     37|    *friend_request = (Tox_Event_Friend_Request) {
   84|     37|        {
   85|     37|            0
   86|     37|        }
   87|     37|    };
   88|     37|}
friend_request.c:tox_event_friend_request_destruct:
   91|     37|{
   92|     37|    mem_delete(mem, friend_request->message);
   93|     37|}
friend_request.c:tox_event_friend_request_unpack_into:
  106|     37|{
  107|     37|    assert(event != nullptr);
  108|     37|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     37|#define nullptr NULL
  ------------------
  |  Branch (108:9): [True: 2, False: 35]
  ------------------
  109|      2|        return false;
  110|      2|    }
  111|       |
  112|     35|    return bin_unpack_bin_fixed(bu, event->public_key, TOX_PUBLIC_KEY_SIZE)
  ------------------
  |  |  212|     35|#define TOX_PUBLIC_KEY_SIZE            32
  ------------------
  |  Branch (112:12): [True: 27, False: 8]
  ------------------
  113|     35|           && bin_unpack_bin(bu, &event->message, &event->message_length);
  ------------------
  |  Branch (113:15): [True: 22, False: 5]
  ------------------
  114|     37|}

tox_event_friend_status_pack:
   72|     26|{
   73|     26|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (73:12): [True: 26, False: 0]
  ------------------
   74|     26|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (74:15): [True: 26, False: 0]
  ------------------
   75|     26|           && tox_user_status_pack(event->status, bp);
  ------------------
  |  Branch (75:15): [True: 26, False: 0]
  ------------------
   76|     26|}
tox_event_friend_status_new:
  103|     29|{
  104|     29|    Tox_Event_Friend_Status *const friend_status =
  105|     29|        (Tox_Event_Friend_Status *)mem_alloc(mem, sizeof(Tox_Event_Friend_Status));
  106|       |
  107|     29|    if (friend_status == nullptr) {
  ------------------
  |  |   63|     29|#define nullptr NULL
  ------------------
  |  Branch (107:9): [True: 1, False: 28]
  ------------------
  108|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  109|      1|    }
  110|       |
  111|     28|    tox_event_friend_status_construct(friend_status);
  112|     28|    return friend_status;
  113|     29|}
tox_event_friend_status_free:
  116|     29|{
  117|     29|    if (friend_status != nullptr) {
  ------------------
  |  |   63|     29|#define nullptr NULL
  ------------------
  |  Branch (117:9): [True: 28, False: 1]
  ------------------
  118|     28|        tox_event_friend_status_destruct(friend_status, mem);
  119|     28|    }
  120|     29|    mem_delete(mem, friend_status);
  121|     29|}
tox_event_friend_status_unpack:
  145|     29|{
  146|     29|    assert(event != nullptr);
  147|     29|    assert(*event == nullptr);
  148|     29|    *event = tox_event_friend_status_new(mem);
  149|       |
  150|     29|    if (*event == nullptr) {
  ------------------
  |  |   63|     29|#define nullptr NULL
  ------------------
  |  Branch (150:9): [True: 1, False: 28]
  ------------------
  151|      1|        return false;
  152|      1|    }
  153|       |
  154|     28|    return tox_event_friend_status_unpack_into(*event, bu);
  155|     29|}
friend_status.c:tox_event_friend_status_construct:
   59|     28|{
   60|     28|    *friend_status = (Tox_Event_Friend_Status) {
   61|     28|        0
   62|     28|    };
   63|     28|}
friend_status.c:tox_event_friend_status_destruct:
   66|     28|{
   67|     28|    return;
   68|     28|}
friend_status.c:tox_event_friend_status_unpack_into:
   81|     28|{
   82|     28|    assert(event != nullptr);
   83|     28|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     28|#define nullptr NULL
  ------------------
  |  Branch (83:9): [True: 2, False: 26]
  ------------------
   84|      2|        return false;
   85|      2|    }
   86|       |
   87|     26|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (87:12): [True: 25, False: 1]
  ------------------
   88|     26|           && tox_user_status_unpack(&event->status, bu);
  ------------------
  |  Branch (88:15): [True: 22, False: 3]
  ------------------
   89|     28|}

tox_event_friend_status_message_pack:
   99|     20|{
  100|     20|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (100:12): [True: 20, False: 0]
  ------------------
  101|     20|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (101:15): [True: 20, False: 0]
  ------------------
  102|     20|           && bin_pack_bin(bp, event->message, event->message_length);
  ------------------
  |  Branch (102:15): [True: 20, False: 0]
  ------------------
  103|     20|}
tox_event_friend_status_message_new:
  130|     19|{
  131|     19|    Tox_Event_Friend_Status_Message *const friend_status_message =
  132|     19|        (Tox_Event_Friend_Status_Message *)mem_alloc(mem, sizeof(Tox_Event_Friend_Status_Message));
  133|       |
  134|     19|    if (friend_status_message == nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (134:9): [True: 1, False: 18]
  ------------------
  135|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  136|      1|    }
  137|       |
  138|     18|    tox_event_friend_status_message_construct(friend_status_message);
  139|     18|    return friend_status_message;
  140|     19|}
tox_event_friend_status_message_free:
  143|     19|{
  144|     19|    if (friend_status_message != nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (144:9): [True: 18, False: 1]
  ------------------
  145|     18|        tox_event_friend_status_message_destruct(friend_status_message, mem);
  146|     18|    }
  147|     19|    mem_delete(mem, friend_status_message);
  148|     19|}
tox_event_friend_status_message_unpack:
  172|     19|{
  173|     19|    assert(event != nullptr);
  174|     19|    assert(*event == nullptr);
  175|     19|    *event = tox_event_friend_status_message_new(mem);
  176|       |
  177|     19|    if (*event == nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (177:9): [True: 1, False: 18]
  ------------------
  178|      1|        return false;
  179|      1|    }
  180|       |
  181|     18|    return tox_event_friend_status_message_unpack_into(*event, bu);
  182|     19|}
friend_status_message.c:tox_event_friend_status_message_construct:
   86|     18|{
   87|     18|    *friend_status_message = (Tox_Event_Friend_Status_Message) {
   88|     18|        0
   89|     18|    };
   90|     18|}
friend_status_message.c:tox_event_friend_status_message_destruct:
   93|     18|{
   94|     18|    free(friend_status_message->message);
   95|     18|}
friend_status_message.c:tox_event_friend_status_message_unpack_into:
  108|     18|{
  109|     18|    assert(event != nullptr);
  110|     18|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
  |  Branch (110:9): [True: 1, False: 17]
  ------------------
  111|      1|        return false;
  112|      1|    }
  113|       |
  114|     17|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (114:12): [True: 16, False: 1]
  ------------------
  115|     17|           && bin_unpack_bin(bu, &event->message, &event->message_length);
  ------------------
  |  Branch (115:15): [True: 14, False: 2]
  ------------------
  116|     18|}

tox_event_friend_typing_pack:
   70|     30|{
   71|     30|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (71:12): [True: 30, False: 0]
  ------------------
   72|     30|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (72:15): [True: 30, False: 0]
  ------------------
   73|     30|           && bin_pack_bool(bp, event->typing);
  ------------------
  |  Branch (73:15): [True: 30, False: 0]
  ------------------
   74|     30|}
tox_event_friend_typing_new:
  101|     69|{
  102|     69|    Tox_Event_Friend_Typing *const friend_typing =
  103|     69|        (Tox_Event_Friend_Typing *)mem_alloc(mem, sizeof(Tox_Event_Friend_Typing));
  104|       |
  105|     69|    if (friend_typing == nullptr) {
  ------------------
  |  |   63|     69|#define nullptr NULL
  ------------------
  |  Branch (105:9): [True: 1, False: 68]
  ------------------
  106|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  107|      1|    }
  108|       |
  109|     68|    tox_event_friend_typing_construct(friend_typing);
  110|     68|    return friend_typing;
  111|     69|}
tox_event_friend_typing_free:
  114|     69|{
  115|     69|    if (friend_typing != nullptr) {
  ------------------
  |  |   63|     69|#define nullptr NULL
  ------------------
  |  Branch (115:9): [True: 68, False: 1]
  ------------------
  116|     68|        tox_event_friend_typing_destruct(friend_typing, mem);
  117|     68|    }
  118|     69|    mem_delete(mem, friend_typing);
  119|     69|}
tox_event_friend_typing_unpack:
  143|     69|{
  144|     69|    assert(event != nullptr);
  145|     69|    assert(*event == nullptr);
  146|     69|    *event = tox_event_friend_typing_new(mem);
  147|       |
  148|     69|    if (*event == nullptr) {
  ------------------
  |  |   63|     69|#define nullptr NULL
  ------------------
  |  Branch (148:9): [True: 1, False: 68]
  ------------------
  149|      1|        return false;
  150|      1|    }
  151|       |
  152|     68|    return tox_event_friend_typing_unpack_into(*event, bu);
  153|     69|}
friend_typing.c:tox_event_friend_typing_construct:
   57|     68|{
   58|     68|    *friend_typing = (Tox_Event_Friend_Typing) {
   59|     68|        0
   60|     68|    };
   61|     68|}
friend_typing.c:tox_event_friend_typing_destruct:
   64|     68|{
   65|     68|    return;
   66|     68|}
friend_typing.c:tox_event_friend_typing_unpack_into:
   79|     68|{
   80|     68|    assert(event != nullptr);
   81|     68|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     68|#define nullptr NULL
  ------------------
  |  Branch (81:9): [True: 2, False: 66]
  ------------------
   82|      2|        return false;
   83|      2|    }
   84|       |
   85|     66|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (85:12): [True: 65, False: 1]
  ------------------
   86|     66|           && bin_unpack_bool(bu, &event->typing);
  ------------------
  |  Branch (86:15): [True: 29, False: 36]
  ------------------
   87|     68|}

tox_event_group_custom_packet_pack:
  113|     20|{
  114|     20|    return bin_pack_array(bp, 3)
  ------------------
  |  Branch (114:12): [True: 20, False: 0]
  ------------------
  115|     20|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (115:15): [True: 20, False: 0]
  ------------------
  116|     20|           && bin_pack_u32(bp, event->peer_id)
  ------------------
  |  Branch (116:15): [True: 20, False: 0]
  ------------------
  117|     20|           && bin_pack_bin(bp, event->data, event->data_length);
  ------------------
  |  Branch (117:15): [True: 20, False: 0]
  ------------------
  118|     20|}
tox_event_group_custom_packet_new:
  146|     16|{
  147|     16|    Tox_Event_Group_Custom_Packet *const group_custom_packet =
  148|     16|        (Tox_Event_Group_Custom_Packet *)mem_alloc(mem, sizeof(Tox_Event_Group_Custom_Packet));
  149|       |
  150|     16|    if (group_custom_packet == nullptr) {
  ------------------
  |  |   63|     16|#define nullptr NULL
  ------------------
  |  Branch (150:9): [True: 1, False: 15]
  ------------------
  151|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  152|      1|    }
  153|       |
  154|     15|    tox_event_group_custom_packet_construct(group_custom_packet);
  155|     15|    return group_custom_packet;
  156|     16|}
tox_event_group_custom_packet_free:
  159|     16|{
  160|     16|    if (group_custom_packet != nullptr) {
  ------------------
  |  |   63|     16|#define nullptr NULL
  ------------------
  |  Branch (160:9): [True: 15, False: 1]
  ------------------
  161|     15|        tox_event_group_custom_packet_destruct(group_custom_packet, mem);
  162|     15|    }
  163|     16|    mem_delete(mem, group_custom_packet);
  164|     16|}
tox_event_group_custom_packet_unpack:
  188|     16|{
  189|     16|    assert(event != nullptr);
  190|     16|    assert(*event == nullptr);
  191|     16|    *event = tox_event_group_custom_packet_new(mem);
  192|       |
  193|     16|    if (*event == nullptr) {
  ------------------
  |  |   63|     16|#define nullptr NULL
  ------------------
  |  Branch (193:9): [True: 1, False: 15]
  ------------------
  194|      1|        return false;
  195|      1|    }
  196|       |
  197|     15|    return tox_event_group_custom_packet_unpack_into(*event, bu);
  198|     16|}
group_custom_packet.c:tox_event_group_custom_packet_construct:
  100|     15|{
  101|     15|    *group_custom_packet = (Tox_Event_Group_Custom_Packet) {
  102|     15|        0
  103|     15|    };
  104|     15|}
group_custom_packet.c:tox_event_group_custom_packet_destruct:
  107|     15|{
  108|     15|    free(group_custom_packet->data);
  109|     15|}
group_custom_packet.c:tox_event_group_custom_packet_unpack_into:
  123|     15|{
  124|     15|    assert(event != nullptr);
  125|     15|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|     15|#define nullptr NULL
  ------------------
  |  Branch (125:9): [True: 1, False: 14]
  ------------------
  126|      1|        return false;
  127|      1|    }
  128|       |
  129|     14|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (129:12): [True: 12, False: 2]
  ------------------
  130|     14|           && bin_unpack_u32(bu, &event->peer_id)
  ------------------
  |  Branch (130:15): [True: 11, False: 1]
  ------------------
  131|     14|           && bin_unpack_bin(bu, &event->data, &event->data_length);
  ------------------
  |  Branch (131:15): [True: 10, False: 1]
  ------------------
  132|     15|}

tox_event_group_custom_private_packet_pack:
  113|     24|{
  114|     24|    return bin_pack_array(bp, 3)
  ------------------
  |  Branch (114:12): [True: 24, False: 0]
  ------------------
  115|     24|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (115:15): [True: 24, False: 0]
  ------------------
  116|     24|           && bin_pack_u32(bp, event->peer_id)
  ------------------
  |  Branch (116:15): [True: 24, False: 0]
  ------------------
  117|     24|           && bin_pack_bin(bp, event->data, event->data_length);
  ------------------
  |  Branch (117:15): [True: 24, False: 0]
  ------------------
  118|     24|}
tox_event_group_custom_private_packet_new:
  146|     20|{
  147|     20|    Tox_Event_Group_Custom_Private_Packet *const group_custom_private_packet =
  148|     20|        (Tox_Event_Group_Custom_Private_Packet *)mem_alloc(mem, sizeof(Tox_Event_Group_Custom_Private_Packet));
  149|       |
  150|     20|    if (group_custom_private_packet == nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (150:9): [True: 1, False: 19]
  ------------------
  151|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  152|      1|    }
  153|       |
  154|     19|    tox_event_group_custom_private_packet_construct(group_custom_private_packet);
  155|     19|    return group_custom_private_packet;
  156|     20|}
tox_event_group_custom_private_packet_free:
  159|     20|{
  160|     20|    if (group_custom_private_packet != nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (160:9): [True: 19, False: 1]
  ------------------
  161|     19|        tox_event_group_custom_private_packet_destruct(group_custom_private_packet, mem);
  162|     19|    }
  163|     20|    mem_delete(mem, group_custom_private_packet);
  164|     20|}
tox_event_group_custom_private_packet_unpack:
  188|     20|{
  189|     20|    assert(event != nullptr);
  190|     20|    assert(*event == nullptr);
  191|     20|    *event = tox_event_group_custom_private_packet_new(mem);
  192|       |
  193|     20|    if (*event == nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (193:9): [True: 1, False: 19]
  ------------------
  194|      1|        return false;
  195|      1|    }
  196|       |
  197|     19|    return tox_event_group_custom_private_packet_unpack_into(*event, bu);
  198|     20|}
group_custom_private_packet.c:tox_event_group_custom_private_packet_construct:
  100|     19|{
  101|     19|    *group_custom_private_packet = (Tox_Event_Group_Custom_Private_Packet) {
  102|     19|        0
  103|     19|    };
  104|     19|}
group_custom_private_packet.c:tox_event_group_custom_private_packet_destruct:
  107|     19|{
  108|     19|    free(group_custom_private_packet->data);
  109|     19|}
group_custom_private_packet.c:tox_event_group_custom_private_packet_unpack_into:
  123|     19|{
  124|     19|    assert(event != nullptr);
  125|     19|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (125:9): [True: 1, False: 18]
  ------------------
  126|      1|        return false;
  127|      1|    }
  128|       |
  129|     18|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (129:12): [True: 17, False: 1]
  ------------------
  130|     18|           && bin_unpack_u32(bu, &event->peer_id)
  ------------------
  |  Branch (130:15): [True: 16, False: 1]
  ------------------
  131|     18|           && bin_unpack_bin(bu, &event->data, &event->data_length);
  ------------------
  |  Branch (131:15): [True: 14, False: 2]
  ------------------
  132|     19|}

tox_event_group_invite_pack:
  141|     22|{
  142|     22|    return bin_pack_array(bp, 3)
  ------------------
  |  Branch (142:12): [True: 22, False: 0]
  ------------------
  143|     22|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (143:15): [True: 22, False: 0]
  ------------------
  144|     22|           && bin_pack_bin(bp, event->invite_data, event->invite_data_length)
  ------------------
  |  Branch (144:15): [True: 22, False: 0]
  ------------------
  145|     22|           && bin_pack_bin(bp, event->group_name, event->group_name_length);
  ------------------
  |  Branch (145:15): [True: 22, False: 0]
  ------------------
  146|     22|}
tox_event_group_invite_new:
  174|     22|{
  175|     22|    Tox_Event_Group_Invite *const group_invite =
  176|     22|        (Tox_Event_Group_Invite *)mem_alloc(mem, sizeof(Tox_Event_Group_Invite));
  177|       |
  178|     22|    if (group_invite == nullptr) {
  ------------------
  |  |   63|     22|#define nullptr NULL
  ------------------
  |  Branch (178:9): [True: 1, False: 21]
  ------------------
  179|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  180|      1|    }
  181|       |
  182|     21|    tox_event_group_invite_construct(group_invite);
  183|     21|    return group_invite;
  184|     22|}
tox_event_group_invite_free:
  187|     22|{
  188|     22|    if (group_invite != nullptr) {
  ------------------
  |  |   63|     22|#define nullptr NULL
  ------------------
  |  Branch (188:9): [True: 21, False: 1]
  ------------------
  189|     21|        tox_event_group_invite_destruct(group_invite, mem);
  190|     21|    }
  191|     22|    mem_delete(mem, group_invite);
  192|     22|}
tox_event_group_invite_unpack:
  216|     22|{
  217|     22|    assert(event != nullptr);
  218|     22|    assert(*event == nullptr);
  219|     22|    *event = tox_event_group_invite_new(mem);
  220|       |
  221|     22|    if (*event == nullptr) {
  ------------------
  |  |   63|     22|#define nullptr NULL
  ------------------
  |  Branch (221:9): [True: 1, False: 21]
  ------------------
  222|      1|        return false;
  223|      1|    }
  224|       |
  225|     21|    return tox_event_group_invite_unpack_into(*event, bu);
  226|     22|}
group_invite.c:tox_event_group_invite_construct:
  127|     21|{
  128|     21|    *group_invite = (Tox_Event_Group_Invite) {
  129|     21|        0
  130|     21|    };
  131|     21|}
group_invite.c:tox_event_group_invite_destruct:
  134|     21|{
  135|     21|    free(group_invite->invite_data);
  136|     21|    free(group_invite->group_name);
  137|     21|}
group_invite.c:tox_event_group_invite_unpack_into:
  151|     21|{
  152|     21|    assert(event != nullptr);
  153|     21|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|     21|#define nullptr NULL
  ------------------
  |  Branch (153:9): [True: 1, False: 20]
  ------------------
  154|      1|        return false;
  155|      1|    }
  156|       |
  157|     20|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (157:12): [True: 19, False: 1]
  ------------------
  158|     20|           && bin_unpack_bin(bu, &event->invite_data, &event->invite_data_length)
  ------------------
  |  Branch (158:15): [True: 17, False: 2]
  ------------------
  159|     20|           && bin_unpack_bin(bu, &event->group_name, &event->group_name_length);
  ------------------
  |  Branch (159:15): [True: 14, False: 3]
  ------------------
  160|     21|}

tox_event_group_join_fail_pack:
   72|     36|{
   73|     36|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (73:12): [True: 36, False: 0]
  ------------------
   74|     36|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (74:15): [True: 36, False: 0]
  ------------------
   75|     36|           && tox_group_join_fail_pack(event->fail_type, bp);
  ------------------
  |  Branch (75:15): [True: 36, False: 0]
  ------------------
   76|     36|}
tox_event_group_join_fail_new:
  103|     37|{
  104|     37|    Tox_Event_Group_Join_Fail *const group_join_fail =
  105|     37|        (Tox_Event_Group_Join_Fail *)mem_alloc(mem, sizeof(Tox_Event_Group_Join_Fail));
  106|       |
  107|     37|    if (group_join_fail == nullptr) {
  ------------------
  |  |   63|     37|#define nullptr NULL
  ------------------
  |  Branch (107:9): [True: 1, False: 36]
  ------------------
  108|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  109|      1|    }
  110|       |
  111|     36|    tox_event_group_join_fail_construct(group_join_fail);
  112|     36|    return group_join_fail;
  113|     37|}
tox_event_group_join_fail_free:
  116|     37|{
  117|     37|    if (group_join_fail != nullptr) {
  ------------------
  |  |   63|     37|#define nullptr NULL
  ------------------
  |  Branch (117:9): [True: 36, False: 1]
  ------------------
  118|     36|        tox_event_group_join_fail_destruct(group_join_fail, mem);
  119|     36|    }
  120|     37|    mem_delete(mem, group_join_fail);
  121|     37|}
tox_event_group_join_fail_unpack:
  145|     37|{
  146|     37|    assert(event != nullptr);
  147|     37|    assert(*event == nullptr);
  148|     37|    *event = tox_event_group_join_fail_new(mem);
  149|       |
  150|     37|    if (*event == nullptr) {
  ------------------
  |  |   63|     37|#define nullptr NULL
  ------------------
  |  Branch (150:9): [True: 1, False: 36]
  ------------------
  151|      1|        return false;
  152|      1|    }
  153|       |
  154|     36|    return tox_event_group_join_fail_unpack_into(*event, bu);
  155|     37|}
group_join_fail.c:tox_event_group_join_fail_construct:
   59|     36|{
   60|     36|    *group_join_fail = (Tox_Event_Group_Join_Fail) {
   61|     36|        0
   62|     36|    };
   63|     36|}
group_join_fail.c:tox_event_group_join_fail_destruct:
   66|     36|{
   67|     36|    return;
   68|     36|}
group_join_fail.c:tox_event_group_join_fail_unpack_into:
   81|     36|{
   82|     36|    assert(event != nullptr);
   83|     36|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     36|#define nullptr NULL
  ------------------
  |  Branch (83:9): [True: 2, False: 34]
  ------------------
   84|      2|        return false;
   85|      2|    }
   86|       |
   87|     34|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (87:12): [True: 33, False: 1]
  ------------------
   88|     34|           && tox_group_join_fail_unpack(&event->fail_type, bu);
  ------------------
  |  Branch (88:15): [True: 30, False: 3]
  ------------------
   89|     36|}

tox_event_group_message_pack:
  143|     20|{
  144|     20|    return bin_pack_array(bp, 5)
  ------------------
  |  Branch (144:12): [True: 20, False: 0]
  ------------------
  145|     20|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (145:15): [True: 20, False: 0]
  ------------------
  146|     20|           && bin_pack_u32(bp, event->peer_id)
  ------------------
  |  Branch (146:15): [True: 20, False: 0]
  ------------------
  147|     20|           && tox_message_type_pack(event->message_type, bp)
  ------------------
  |  Branch (147:15): [True: 20, False: 0]
  ------------------
  148|     20|           && bin_pack_bin(bp, event->message, event->message_length)
  ------------------
  |  Branch (148:15): [True: 20, False: 0]
  ------------------
  149|     20|           && bin_pack_u32(bp, event->message_id);
  ------------------
  |  Branch (149:15): [True: 20, False: 0]
  ------------------
  150|     20|}
tox_event_group_message_new:
  180|     38|{
  181|     38|    Tox_Event_Group_Message *const group_message =
  182|     38|        (Tox_Event_Group_Message *)mem_alloc(mem, sizeof(Tox_Event_Group_Message));
  183|       |
  184|     38|    if (group_message == nullptr) {
  ------------------
  |  |   63|     38|#define nullptr NULL
  ------------------
  |  Branch (184:9): [True: 1, False: 37]
  ------------------
  185|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  186|      1|    }
  187|       |
  188|     37|    tox_event_group_message_construct(group_message);
  189|     37|    return group_message;
  190|     38|}
tox_event_group_message_free:
  193|     38|{
  194|     38|    if (group_message != nullptr) {
  ------------------
  |  |   63|     38|#define nullptr NULL
  ------------------
  |  Branch (194:9): [True: 37, False: 1]
  ------------------
  195|     37|        tox_event_group_message_destruct(group_message, mem);
  196|     37|    }
  197|     38|    mem_delete(mem, group_message);
  198|     38|}
tox_event_group_message_unpack:
  222|     38|{
  223|     38|    assert(event != nullptr);
  224|     38|    assert(*event == nullptr);
  225|     38|    *event = tox_event_group_message_new(mem);
  226|       |
  227|     38|    if (*event == nullptr) {
  ------------------
  |  |   63|     38|#define nullptr NULL
  ------------------
  |  Branch (227:9): [True: 1, False: 37]
  ------------------
  228|      1|        return false;
  229|      1|    }
  230|       |
  231|     37|    return tox_event_group_message_unpack_into(*event, bu);
  232|     38|}
group_message.c:tox_event_group_message_construct:
  130|     37|{
  131|     37|    *group_message = (Tox_Event_Group_Message) {
  132|     37|        0
  133|     37|    };
  134|     37|}
group_message.c:tox_event_group_message_destruct:
  137|     37|{
  138|     37|    free(group_message->message);
  139|     37|}
group_message.c:tox_event_group_message_unpack_into:
  155|     37|{
  156|     37|    assert(event != nullptr);
  157|     37|    if (!bin_unpack_array_fixed(bu, 5, nullptr)) {
  ------------------
  |  |   63|     37|#define nullptr NULL
  ------------------
  |  Branch (157:9): [True: 2, False: 35]
  ------------------
  158|      2|        return false;
  159|      2|    }
  160|       |
  161|     35|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (161:12): [True: 33, False: 2]
  ------------------
  162|     35|           && bin_unpack_u32(bu, &event->peer_id)
  ------------------
  |  Branch (162:15): [True: 32, False: 1]
  ------------------
  163|     35|           && tox_message_type_unpack(&event->message_type, bu)
  ------------------
  |  Branch (163:15): [True: 30, False: 2]
  ------------------
  164|     35|           && bin_unpack_bin(bu, &event->message, &event->message_length)
  ------------------
  |  Branch (164:15): [True: 27, False: 3]
  ------------------
  165|     35|           && bin_unpack_u32(bu, &event->message_id);
  ------------------
  |  Branch (165:15): [True: 26, False: 1]
  ------------------
  166|     37|}

tox_event_group_moderation_pack:
  100|     20|{
  101|     20|    return bin_pack_array(bp, 4)
  ------------------
  |  Branch (101:12): [True: 20, False: 0]
  ------------------
  102|     20|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (102:15): [True: 20, False: 0]
  ------------------
  103|     20|           && bin_pack_u32(bp, event->source_peer_id)
  ------------------
  |  Branch (103:15): [True: 20, False: 0]
  ------------------
  104|     20|           && bin_pack_u32(bp, event->target_peer_id)
  ------------------
  |  Branch (104:15): [True: 20, False: 0]
  ------------------
  105|     20|           && tox_group_mod_event_pack(event->mod_type, bp);
  ------------------
  |  Branch (105:15): [True: 20, False: 0]
  ------------------
  106|     20|}
tox_event_group_moderation_new:
  135|     35|{
  136|     35|    Tox_Event_Group_Moderation *const group_moderation =
  137|     35|        (Tox_Event_Group_Moderation *)mem_alloc(mem, sizeof(Tox_Event_Group_Moderation));
  138|       |
  139|     35|    if (group_moderation == nullptr) {
  ------------------
  |  |   63|     35|#define nullptr NULL
  ------------------
  |  Branch (139:9): [True: 1, False: 34]
  ------------------
  140|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  141|      1|    }
  142|       |
  143|     34|    tox_event_group_moderation_construct(group_moderation);
  144|     34|    return group_moderation;
  145|     35|}
tox_event_group_moderation_free:
  148|     35|{
  149|     35|    if (group_moderation != nullptr) {
  ------------------
  |  |   63|     35|#define nullptr NULL
  ------------------
  |  Branch (149:9): [True: 34, False: 1]
  ------------------
  150|     34|        tox_event_group_moderation_destruct(group_moderation, mem);
  151|     34|    }
  152|     35|    mem_delete(mem, group_moderation);
  153|     35|}
tox_event_group_moderation_unpack:
  177|     35|{
  178|     35|    assert(event != nullptr);
  179|     35|    assert(*event == nullptr);
  180|     35|    *event = tox_event_group_moderation_new(mem);
  181|       |
  182|     35|    if (*event == nullptr) {
  ------------------
  |  |   63|     35|#define nullptr NULL
  ------------------
  |  Branch (182:9): [True: 1, False: 34]
  ------------------
  183|      1|        return false;
  184|      1|    }
  185|       |
  186|     34|    return tox_event_group_moderation_unpack_into(*event, bu);
  187|     35|}
group_moderation.c:tox_event_group_moderation_construct:
   87|     34|{
   88|     34|    *group_moderation = (Tox_Event_Group_Moderation) {
   89|     34|        0
   90|     34|    };
   91|     34|}
group_moderation.c:tox_event_group_moderation_destruct:
   94|     34|{
   95|     34|    return;
   96|     34|}
group_moderation.c:tox_event_group_moderation_unpack_into:
  111|     34|{
  112|     34|    assert(event != nullptr);
  113|     34|    if (!bin_unpack_array_fixed(bu, 4, nullptr)) {
  ------------------
  |  |   63|     34|#define nullptr NULL
  ------------------
  |  Branch (113:9): [True: 4, False: 30]
  ------------------
  114|      4|        return false;
  115|      4|    }
  116|       |
  117|     30|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (117:12): [True: 29, False: 1]
  ------------------
  118|     30|           && bin_unpack_u32(bu, &event->source_peer_id)
  ------------------
  |  Branch (118:15): [True: 28, False: 1]
  ------------------
  119|     30|           && bin_unpack_u32(bu, &event->target_peer_id)
  ------------------
  |  Branch (119:15): [True: 27, False: 1]
  ------------------
  120|     30|           && tox_group_mod_event_unpack(&event->mod_type, bu);
  ------------------
  |  Branch (120:15): [True: 23, False: 4]
  ------------------
  121|     34|}

tox_event_group_password_pack:
   99|     20|{
  100|     20|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (100:12): [True: 20, False: 0]
  ------------------
  101|     20|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (101:15): [True: 20, False: 0]
  ------------------
  102|     20|           && bin_pack_bin(bp, event->password, event->password_length);
  ------------------
  |  Branch (102:15): [True: 20, False: 0]
  ------------------
  103|     20|}
tox_event_group_password_new:
  130|     21|{
  131|     21|    Tox_Event_Group_Password *const group_password =
  132|     21|        (Tox_Event_Group_Password *)mem_alloc(mem, sizeof(Tox_Event_Group_Password));
  133|       |
  134|     21|    if (group_password == nullptr) {
  ------------------
  |  |   63|     21|#define nullptr NULL
  ------------------
  |  Branch (134:9): [True: 1, False: 20]
  ------------------
  135|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  136|      1|    }
  137|       |
  138|     20|    tox_event_group_password_construct(group_password);
  139|     20|    return group_password;
  140|     21|}
tox_event_group_password_free:
  143|     21|{
  144|     21|    if (group_password != nullptr) {
  ------------------
  |  |   63|     21|#define nullptr NULL
  ------------------
  |  Branch (144:9): [True: 20, False: 1]
  ------------------
  145|     20|        tox_event_group_password_destruct(group_password, mem);
  146|     20|    }
  147|     21|    mem_delete(mem, group_password);
  148|     21|}
tox_event_group_password_unpack:
  172|     21|{
  173|     21|    assert(event != nullptr);
  174|     21|    assert(*event == nullptr);
  175|     21|    *event = tox_event_group_password_new(mem);
  176|       |
  177|     21|    if (*event == nullptr) {
  ------------------
  |  |   63|     21|#define nullptr NULL
  ------------------
  |  Branch (177:9): [True: 1, False: 20]
  ------------------
  178|      1|        return false;
  179|      1|    }
  180|       |
  181|     20|    return tox_event_group_password_unpack_into(*event, bu);
  182|     21|}
group_password.c:tox_event_group_password_construct:
   86|     20|{
   87|     20|    *group_password = (Tox_Event_Group_Password) {
   88|     20|        0
   89|     20|    };
   90|     20|}
group_password.c:tox_event_group_password_destruct:
   93|     20|{
   94|     20|    free(group_password->password);
   95|     20|}
group_password.c:tox_event_group_password_unpack_into:
  108|     20|{
  109|     20|    assert(event != nullptr);
  110|     20|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (110:9): [True: 1, False: 19]
  ------------------
  111|      1|        return false;
  112|      1|    }
  113|       |
  114|     19|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (114:12): [True: 18, False: 1]
  ------------------
  115|     19|           && bin_unpack_bin(bu, &event->password, &event->password_length);
  ------------------
  |  Branch (115:15): [True: 16, False: 2]
  ------------------
  116|     20|}

tox_event_group_peer_exit_pack:
  171|     30|{
  172|     30|    return bin_pack_array(bp, 5)
  ------------------
  |  Branch (172:12): [True: 30, False: 0]
  ------------------
  173|     30|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (173:15): [True: 30, False: 0]
  ------------------
  174|     30|           && bin_pack_u32(bp, event->peer_id)
  ------------------
  |  Branch (174:15): [True: 30, False: 0]
  ------------------
  175|     30|           && tox_group_exit_type_pack(event->exit_type, bp)
  ------------------
  |  Branch (175:15): [True: 30, False: 0]
  ------------------
  176|     30|           && bin_pack_bin(bp, event->name, event->name_length)
  ------------------
  |  Branch (176:15): [True: 30, False: 0]
  ------------------
  177|     30|           && bin_pack_bin(bp, event->part_message, event->part_message_length);
  ------------------
  |  Branch (177:15): [True: 30, False: 0]
  ------------------
  178|     30|}
tox_event_group_peer_exit_new:
  208|     64|{
  209|     64|    Tox_Event_Group_Peer_Exit *const group_peer_exit =
  210|     64|        (Tox_Event_Group_Peer_Exit *)mem_alloc(mem, sizeof(Tox_Event_Group_Peer_Exit));
  211|       |
  212|     64|    if (group_peer_exit == nullptr) {
  ------------------
  |  |   63|     64|#define nullptr NULL
  ------------------
  |  Branch (212:9): [True: 1, False: 63]
  ------------------
  213|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  214|      1|    }
  215|       |
  216|     63|    tox_event_group_peer_exit_construct(group_peer_exit);
  217|     63|    return group_peer_exit;
  218|     64|}
tox_event_group_peer_exit_free:
  221|     64|{
  222|     64|    if (group_peer_exit != nullptr) {
  ------------------
  |  |   63|     64|#define nullptr NULL
  ------------------
  |  Branch (222:9): [True: 63, False: 1]
  ------------------
  223|     63|        tox_event_group_peer_exit_destruct(group_peer_exit, mem);
  224|     63|    }
  225|     64|    mem_delete(mem, group_peer_exit);
  226|     64|}
tox_event_group_peer_exit_unpack:
  250|     64|{
  251|     64|    assert(event != nullptr);
  252|     64|    assert(*event == nullptr);
  253|     64|    *event = tox_event_group_peer_exit_new(mem);
  254|       |
  255|     64|    if (*event == nullptr) {
  ------------------
  |  |   63|     64|#define nullptr NULL
  ------------------
  |  Branch (255:9): [True: 1, False: 63]
  ------------------
  256|      1|        return false;
  257|      1|    }
  258|       |
  259|     63|    return tox_event_group_peer_exit_unpack_into(*event, bu);
  260|     64|}
group_peer_exit.c:tox_event_group_peer_exit_construct:
  157|     63|{
  158|     63|    *group_peer_exit = (Tox_Event_Group_Peer_Exit) {
  159|     63|        0
  160|     63|    };
  161|     63|}
group_peer_exit.c:tox_event_group_peer_exit_destruct:
  164|     63|{
  165|     63|    free(group_peer_exit->name);
  166|     63|    free(group_peer_exit->part_message);
  167|     63|}
group_peer_exit.c:tox_event_group_peer_exit_unpack_into:
  183|     63|{
  184|     63|    assert(event != nullptr);
  185|     63|    if (!bin_unpack_array_fixed(bu, 5, nullptr)) {
  ------------------
  |  |   63|     63|#define nullptr NULL
  ------------------
  |  Branch (185:9): [True: 2, False: 61]
  ------------------
  186|      2|        return false;
  187|      2|    }
  188|       |
  189|     61|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (189:12): [True: 60, False: 1]
  ------------------
  190|     61|           && bin_unpack_u32(bu, &event->peer_id)
  ------------------
  |  Branch (190:15): [True: 59, False: 1]
  ------------------
  191|     61|           && tox_group_exit_type_unpack(&event->exit_type, bu)
  ------------------
  |  Branch (191:15): [True: 57, False: 2]
  ------------------
  192|     61|           && bin_unpack_bin(bu, &event->name, &event->name_length)
  ------------------
  |  Branch (192:15): [True: 49, False: 8]
  ------------------
  193|     61|           && bin_unpack_bin(bu, &event->part_message, &event->part_message_length);
  ------------------
  |  Branch (193:15): [True: 44, False: 5]
  ------------------
  194|     63|}

tox_event_group_peer_join_pack:
   70|     20|{
   71|     20|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (71:12): [True: 20, False: 0]
  ------------------
   72|     20|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (72:15): [True: 20, False: 0]
  ------------------
   73|     20|           && bin_pack_u32(bp, event->peer_id);
  ------------------
  |  Branch (73:15): [True: 20, False: 0]
  ------------------
   74|     20|}
tox_event_group_peer_join_new:
  101|     20|{
  102|     20|    Tox_Event_Group_Peer_Join *const group_peer_join =
  103|     20|        (Tox_Event_Group_Peer_Join *)mem_alloc(mem, sizeof(Tox_Event_Group_Peer_Join));
  104|       |
  105|     20|    if (group_peer_join == nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (105:9): [True: 1, False: 19]
  ------------------
  106|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  107|      1|    }
  108|       |
  109|     19|    tox_event_group_peer_join_construct(group_peer_join);
  110|     19|    return group_peer_join;
  111|     20|}
tox_event_group_peer_join_free:
  114|     20|{
  115|     20|    if (group_peer_join != nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (115:9): [True: 19, False: 1]
  ------------------
  116|     19|        tox_event_group_peer_join_destruct(group_peer_join, mem);
  117|     19|    }
  118|     20|    mem_delete(mem, group_peer_join);
  119|     20|}
tox_event_group_peer_join_unpack:
  143|     20|{
  144|     20|    assert(event != nullptr);
  145|     20|    assert(*event == nullptr);
  146|     20|    *event = tox_event_group_peer_join_new(mem);
  147|       |
  148|     20|    if (*event == nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (148:9): [True: 1, False: 19]
  ------------------
  149|      1|        return false;
  150|      1|    }
  151|       |
  152|     19|    return tox_event_group_peer_join_unpack_into(*event, bu);
  153|     20|}
group_peer_join.c:tox_event_group_peer_join_construct:
   57|     19|{
   58|     19|    *group_peer_join = (Tox_Event_Group_Peer_Join) {
   59|     19|        0
   60|     19|    };
   61|     19|}
group_peer_join.c:tox_event_group_peer_join_destruct:
   64|     19|{
   65|     19|    return;
   66|     19|}
group_peer_join.c:tox_event_group_peer_join_unpack_into:
   79|     19|{
   80|     19|    assert(event != nullptr);
   81|     19|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (81:9): [True: 2, False: 17]
  ------------------
   82|      2|        return false;
   83|      2|    }
   84|       |
   85|     17|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (85:12): [True: 16, False: 1]
  ------------------
   86|     17|           && bin_unpack_u32(bu, &event->peer_id);
  ------------------
  |  Branch (86:15): [True: 15, False: 1]
  ------------------
   87|     19|}

tox_event_group_peer_limit_pack:
   70|     22|{
   71|     22|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (71:12): [True: 22, False: 0]
  ------------------
   72|     22|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (72:15): [True: 22, False: 0]
  ------------------
   73|     22|           && bin_pack_u32(bp, event->peer_limit);
  ------------------
  |  Branch (73:15): [True: 22, False: 0]
  ------------------
   74|     22|}
tox_event_group_peer_limit_new:
  101|     14|{
  102|     14|    Tox_Event_Group_Peer_Limit *const group_peer_limit =
  103|     14|        (Tox_Event_Group_Peer_Limit *)mem_alloc(mem, sizeof(Tox_Event_Group_Peer_Limit));
  104|       |
  105|     14|    if (group_peer_limit == nullptr) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (105:9): [True: 1, False: 13]
  ------------------
  106|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  107|      1|    }
  108|       |
  109|     13|    tox_event_group_peer_limit_construct(group_peer_limit);
  110|     13|    return group_peer_limit;
  111|     14|}
tox_event_group_peer_limit_free:
  114|     14|{
  115|     14|    if (group_peer_limit != nullptr) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (115:9): [True: 13, False: 1]
  ------------------
  116|     13|        tox_event_group_peer_limit_destruct(group_peer_limit, mem);
  117|     13|    }
  118|     14|    mem_delete(mem, group_peer_limit);
  119|     14|}
tox_event_group_peer_limit_unpack:
  143|     14|{
  144|     14|    assert(event != nullptr);
  145|     14|    assert(*event == nullptr);
  146|     14|    *event = tox_event_group_peer_limit_new(mem);
  147|       |
  148|     14|    if (*event == nullptr) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (148:9): [True: 1, False: 13]
  ------------------
  149|      1|        return false;
  150|      1|    }
  151|       |
  152|     13|    return tox_event_group_peer_limit_unpack_into(*event, bu);
  153|     14|}
group_peer_limit.c:tox_event_group_peer_limit_construct:
   57|     13|{
   58|     13|    *group_peer_limit = (Tox_Event_Group_Peer_Limit) {
   59|     13|        0
   60|     13|    };
   61|     13|}
group_peer_limit.c:tox_event_group_peer_limit_destruct:
   64|     13|{
   65|     13|    return;
   66|     13|}
group_peer_limit.c:tox_event_group_peer_limit_unpack_into:
   79|     13|{
   80|     13|    assert(event != nullptr);
   81|     13|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
  |  Branch (81:9): [True: 1, False: 12]
  ------------------
   82|      1|        return false;
   83|      1|    }
   84|       |
   85|     12|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (85:12): [True: 11, False: 1]
  ------------------
   86|     12|           && bin_unpack_u32(bu, &event->peer_limit);
  ------------------
  |  Branch (86:15): [True: 11, False: 0]
  ------------------
   87|     13|}

tox_event_group_peer_name_pack:
  113|     22|{
  114|     22|    return bin_pack_array(bp, 3)
  ------------------
  |  Branch (114:12): [True: 22, False: 0]
  ------------------
  115|     22|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (115:15): [True: 22, False: 0]
  ------------------
  116|     22|           && bin_pack_u32(bp, event->peer_id)
  ------------------
  |  Branch (116:15): [True: 22, False: 0]
  ------------------
  117|     22|           && bin_pack_bin(bp, event->name, event->name_length);
  ------------------
  |  Branch (117:15): [True: 22, False: 0]
  ------------------
  118|     22|}
tox_event_group_peer_name_new:
  146|     27|{
  147|     27|    Tox_Event_Group_Peer_Name *const group_peer_name =
  148|     27|        (Tox_Event_Group_Peer_Name *)mem_alloc(mem, sizeof(Tox_Event_Group_Peer_Name));
  149|       |
  150|     27|    if (group_peer_name == nullptr) {
  ------------------
  |  |   63|     27|#define nullptr NULL
  ------------------
  |  Branch (150:9): [True: 1, False: 26]
  ------------------
  151|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  152|      1|    }
  153|       |
  154|     26|    tox_event_group_peer_name_construct(group_peer_name);
  155|     26|    return group_peer_name;
  156|     27|}
tox_event_group_peer_name_free:
  159|     27|{
  160|     27|    if (group_peer_name != nullptr) {
  ------------------
  |  |   63|     27|#define nullptr NULL
  ------------------
  |  Branch (160:9): [True: 26, False: 1]
  ------------------
  161|     26|        tox_event_group_peer_name_destruct(group_peer_name, mem);
  162|     26|    }
  163|     27|    mem_delete(mem, group_peer_name);
  164|     27|}
tox_event_group_peer_name_unpack:
  188|     27|{
  189|     27|    assert(event != nullptr);
  190|     27|    assert(*event == nullptr);
  191|     27|    *event = tox_event_group_peer_name_new(mem);
  192|       |
  193|     27|    if (*event == nullptr) {
  ------------------
  |  |   63|     27|#define nullptr NULL
  ------------------
  |  Branch (193:9): [True: 1, False: 26]
  ------------------
  194|      1|        return false;
  195|      1|    }
  196|       |
  197|     26|    return tox_event_group_peer_name_unpack_into(*event, bu);
  198|     27|}
group_peer_name.c:tox_event_group_peer_name_construct:
  100|     26|{
  101|     26|    *group_peer_name = (Tox_Event_Group_Peer_Name) {
  102|     26|        0
  103|     26|    };
  104|     26|}
group_peer_name.c:tox_event_group_peer_name_destruct:
  107|     26|{
  108|     26|    free(group_peer_name->name);
  109|     26|}
group_peer_name.c:tox_event_group_peer_name_unpack_into:
  123|     26|{
  124|     26|    assert(event != nullptr);
  125|     26|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|     26|#define nullptr NULL
  ------------------
  |  Branch (125:9): [True: 1, False: 25]
  ------------------
  126|      1|        return false;
  127|      1|    }
  128|       |
  129|     25|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (129:12): [True: 24, False: 1]
  ------------------
  130|     25|           && bin_unpack_u32(bu, &event->peer_id)
  ------------------
  |  Branch (130:15): [True: 23, False: 1]
  ------------------
  131|     25|           && bin_unpack_bin(bu, &event->name, &event->name_length);
  ------------------
  |  Branch (131:15): [True: 20, False: 3]
  ------------------
  132|     26|}

tox_event_group_peer_status_pack:
   86|     22|{
   87|     22|    return bin_pack_array(bp, 3)
  ------------------
  |  Branch (87:12): [True: 22, False: 0]
  ------------------
   88|     22|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (88:15): [True: 22, False: 0]
  ------------------
   89|     22|           && bin_pack_u32(bp, event->peer_id)
  ------------------
  |  Branch (89:15): [True: 22, False: 0]
  ------------------
   90|     22|           && tox_user_status_pack(event->status, bp);
  ------------------
  |  Branch (90:15): [True: 22, False: 0]
  ------------------
   91|     22|}
tox_event_group_peer_status_new:
  119|     24|{
  120|     24|    Tox_Event_Group_Peer_Status *const group_peer_status =
  121|     24|        (Tox_Event_Group_Peer_Status *)mem_alloc(mem, sizeof(Tox_Event_Group_Peer_Status));
  122|       |
  123|     24|    if (group_peer_status == nullptr) {
  ------------------
  |  |   63|     24|#define nullptr NULL
  ------------------
  |  Branch (123:9): [True: 1, False: 23]
  ------------------
  124|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  125|      1|    }
  126|       |
  127|     23|    tox_event_group_peer_status_construct(group_peer_status);
  128|     23|    return group_peer_status;
  129|     24|}
tox_event_group_peer_status_free:
  132|     24|{
  133|     24|    if (group_peer_status != nullptr) {
  ------------------
  |  |   63|     24|#define nullptr NULL
  ------------------
  |  Branch (133:9): [True: 23, False: 1]
  ------------------
  134|     23|        tox_event_group_peer_status_destruct(group_peer_status, mem);
  135|     23|    }
  136|     24|    mem_delete(mem, group_peer_status);
  137|     24|}
tox_event_group_peer_status_unpack:
  161|     24|{
  162|     24|    assert(event != nullptr);
  163|     24|    assert(*event == nullptr);
  164|     24|    *event = tox_event_group_peer_status_new(mem);
  165|       |
  166|     24|    if (*event == nullptr) {
  ------------------
  |  |   63|     24|#define nullptr NULL
  ------------------
  |  Branch (166:9): [True: 1, False: 23]
  ------------------
  167|      1|        return false;
  168|      1|    }
  169|       |
  170|     23|    return tox_event_group_peer_status_unpack_into(*event, bu);
  171|     24|}
group_peer_status.c:tox_event_group_peer_status_construct:
   73|     23|{
   74|     23|    *group_peer_status = (Tox_Event_Group_Peer_Status) {
   75|     23|        0
   76|     23|    };
   77|     23|}
group_peer_status.c:tox_event_group_peer_status_destruct:
   80|     23|{
   81|     23|    return;
   82|     23|}
group_peer_status.c:tox_event_group_peer_status_unpack_into:
   96|     23|{
   97|     23|    assert(event != nullptr);
   98|     23|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
  |  Branch (98:9): [True: 3, False: 20]
  ------------------
   99|      3|        return false;
  100|      3|    }
  101|       |
  102|     20|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (102:12): [True: 19, False: 1]
  ------------------
  103|     20|           && bin_unpack_u32(bu, &event->peer_id)
  ------------------
  |  Branch (103:15): [True: 18, False: 1]
  ------------------
  104|     20|           && tox_user_status_unpack(&event->status, bu);
  ------------------
  |  Branch (104:15): [True: 16, False: 2]
  ------------------
  105|     23|}

tox_event_group_privacy_state_pack:
   72|     20|{
   73|     20|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (73:12): [True: 20, False: 0]
  ------------------
   74|     20|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (74:15): [True: 20, False: 0]
  ------------------
   75|     20|           && tox_group_privacy_state_pack(event->privacy_state, bp);
  ------------------
  |  Branch (75:15): [True: 20, False: 0]
  ------------------
   76|     20|}
tox_event_group_privacy_state_new:
  103|     26|{
  104|     26|    Tox_Event_Group_Privacy_State *const group_privacy_state =
  105|     26|        (Tox_Event_Group_Privacy_State *)mem_alloc(mem, sizeof(Tox_Event_Group_Privacy_State));
  106|       |
  107|     26|    if (group_privacy_state == nullptr) {
  ------------------
  |  |   63|     26|#define nullptr NULL
  ------------------
  |  Branch (107:9): [True: 1, False: 25]
  ------------------
  108|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  109|      1|    }
  110|       |
  111|     25|    tox_event_group_privacy_state_construct(group_privacy_state);
  112|     25|    return group_privacy_state;
  113|     26|}
tox_event_group_privacy_state_free:
  116|     26|{
  117|     26|    if (group_privacy_state != nullptr) {
  ------------------
  |  |   63|     26|#define nullptr NULL
  ------------------
  |  Branch (117:9): [True: 25, False: 1]
  ------------------
  118|     25|        tox_event_group_privacy_state_destruct(group_privacy_state, mem);
  119|     25|    }
  120|     26|    mem_delete(mem, group_privacy_state);
  121|     26|}
tox_event_group_privacy_state_unpack:
  145|     26|{
  146|     26|    assert(event != nullptr);
  147|     26|    assert(*event == nullptr);
  148|     26|    *event = tox_event_group_privacy_state_new(mem);
  149|       |
  150|     26|    if (*event == nullptr) {
  ------------------
  |  |   63|     26|#define nullptr NULL
  ------------------
  |  Branch (150:9): [True: 1, False: 25]
  ------------------
  151|      1|        return false;
  152|      1|    }
  153|       |
  154|     25|    return tox_event_group_privacy_state_unpack_into(*event, bu);
  155|     26|}
group_privacy_state.c:tox_event_group_privacy_state_construct:
   59|     25|{
   60|     25|    *group_privacy_state = (Tox_Event_Group_Privacy_State) {
   61|     25|        0
   62|     25|    };
   63|     25|}
group_privacy_state.c:tox_event_group_privacy_state_destruct:
   66|     25|{
   67|     25|    return;
   68|     25|}
group_privacy_state.c:tox_event_group_privacy_state_unpack_into:
   81|     25|{
   82|     25|    assert(event != nullptr);
   83|     25|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     25|#define nullptr NULL
  ------------------
  |  Branch (83:9): [True: 2, False: 23]
  ------------------
   84|      2|        return false;
   85|      2|    }
   86|       |
   87|     23|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (87:12): [True: 22, False: 1]
  ------------------
   88|     23|           && tox_group_privacy_state_unpack(&event->privacy_state, bu);
  ------------------
  |  Branch (88:15): [True: 20, False: 2]
  ------------------
   89|     25|}

tox_event_group_private_message_pack:
  143|     24|{
  144|     24|    return bin_pack_array(bp, 5)
  ------------------
  |  Branch (144:12): [True: 24, False: 0]
  ------------------
  145|     24|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (145:15): [True: 24, False: 0]
  ------------------
  146|     24|           && bin_pack_u32(bp, event->peer_id)
  ------------------
  |  Branch (146:15): [True: 24, False: 0]
  ------------------
  147|     24|           && tox_message_type_pack(event->message_type, bp)
  ------------------
  |  Branch (147:15): [True: 24, False: 0]
  ------------------
  148|     24|           && bin_pack_bin(bp, event->message, event->message_length)
  ------------------
  |  Branch (148:15): [True: 24, False: 0]
  ------------------
  149|     24|           && bin_pack_u32(bp, event->message_id);
  ------------------
  |  Branch (149:15): [True: 24, False: 0]
  ------------------
  150|     24|}
tox_event_group_private_message_new:
  180|     24|{
  181|     24|    Tox_Event_Group_Private_Message *const group_private_message =
  182|     24|        (Tox_Event_Group_Private_Message *)mem_alloc(mem, sizeof(Tox_Event_Group_Private_Message));
  183|       |
  184|     24|    if (group_private_message == nullptr) {
  ------------------
  |  |   63|     24|#define nullptr NULL
  ------------------
  |  Branch (184:9): [True: 1, False: 23]
  ------------------
  185|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  186|      1|    }
  187|       |
  188|     23|    tox_event_group_private_message_construct(group_private_message);
  189|     23|    return group_private_message;
  190|     24|}
tox_event_group_private_message_free:
  193|     24|{
  194|     24|    if (group_private_message != nullptr) {
  ------------------
  |  |   63|     24|#define nullptr NULL
  ------------------
  |  Branch (194:9): [True: 23, False: 1]
  ------------------
  195|     23|        tox_event_group_private_message_destruct(group_private_message, mem);
  196|     23|    }
  197|     24|    mem_delete(mem, group_private_message);
  198|     24|}
tox_event_group_private_message_unpack:
  222|     24|{
  223|     24|    assert(event != nullptr);
  224|     24|    assert(*event == nullptr);
  225|     24|    *event = tox_event_group_private_message_new(mem);
  226|       |
  227|     24|    if (*event == nullptr) {
  ------------------
  |  |   63|     24|#define nullptr NULL
  ------------------
  |  Branch (227:9): [True: 1, False: 23]
  ------------------
  228|      1|        return false;
  229|      1|    }
  230|       |
  231|     23|    return tox_event_group_private_message_unpack_into(*event, bu);
  232|     24|}
group_private_message.c:tox_event_group_private_message_construct:
  130|     23|{
  131|     23|    *group_private_message = (Tox_Event_Group_Private_Message) {
  132|     23|        0
  133|     23|    };
  134|     23|}
group_private_message.c:tox_event_group_private_message_destruct:
  137|     23|{
  138|     23|    free(group_private_message->message);
  139|     23|}
group_private_message.c:tox_event_group_private_message_unpack_into:
  155|     23|{
  156|     23|    assert(event != nullptr);
  157|     23|    if (!bin_unpack_array_fixed(bu, 5, nullptr)) {
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
  |  Branch (157:9): [True: 2, False: 21]
  ------------------
  158|      2|        return false;
  159|      2|    }
  160|       |
  161|     21|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (161:12): [True: 20, False: 1]
  ------------------
  162|     21|           && bin_unpack_u32(bu, &event->peer_id)
  ------------------
  |  Branch (162:15): [True: 19, False: 1]
  ------------------
  163|     21|           && tox_message_type_unpack(&event->message_type, bu)
  ------------------
  |  Branch (163:15): [True: 17, False: 2]
  ------------------
  164|     21|           && bin_unpack_bin(bu, &event->message, &event->message_length)
  ------------------
  |  Branch (164:15): [True: 16, False: 1]
  ------------------
  165|     21|           && bin_unpack_u32(bu, &event->message_id);
  ------------------
  |  Branch (165:15): [True: 15, False: 1]
  ------------------
  166|     23|}

tox_event_group_self_join_pack:
   56|     36|{
   57|     36|    return bin_pack_u32(bp, event->group_number);
   58|     36|}
tox_event_group_self_join_new:
   80|     49|{
   81|     49|    Tox_Event_Group_Self_Join *const group_self_join =
   82|     49|        (Tox_Event_Group_Self_Join *)mem_alloc(mem, sizeof(Tox_Event_Group_Self_Join));
   83|       |
   84|     49|    if (group_self_join == nullptr) {
  ------------------
  |  |   63|     49|#define nullptr NULL
  ------------------
  |  Branch (84:9): [True: 1, False: 48]
  ------------------
   85|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
   86|      1|    }
   87|       |
   88|     48|    tox_event_group_self_join_construct(group_self_join);
   89|     48|    return group_self_join;
   90|     49|}
tox_event_group_self_join_free:
   93|     49|{
   94|     49|    if (group_self_join != nullptr) {
  ------------------
  |  |   63|     49|#define nullptr NULL
  ------------------
  |  Branch (94:9): [True: 48, False: 1]
  ------------------
   95|     48|        tox_event_group_self_join_destruct(group_self_join, mem);
   96|     48|    }
   97|     49|    mem_delete(mem, group_self_join);
   98|     49|}
tox_event_group_self_join_unpack:
  122|     49|{
  123|     49|    assert(event != nullptr);
  124|     49|    assert(*event == nullptr);
  125|     49|    *event = tox_event_group_self_join_new(mem);
  126|       |
  127|     49|    if (*event == nullptr) {
  ------------------
  |  |   63|     49|#define nullptr NULL
  ------------------
  |  Branch (127:9): [True: 1, False: 48]
  ------------------
  128|      1|        return false;
  129|      1|    }
  130|       |
  131|     48|    return tox_event_group_self_join_unpack_into(*event, bu);
  132|     49|}
group_self_join.c:tox_event_group_self_join_construct:
   43|     48|{
   44|     48|    *group_self_join = (Tox_Event_Group_Self_Join) {
   45|     48|        0
   46|     48|    };
   47|     48|}
group_self_join.c:tox_event_group_self_join_destruct:
   50|     48|{
   51|     48|    return;
   52|     48|}
group_self_join.c:tox_event_group_self_join_unpack_into:
   63|     48|{
   64|     48|    assert(event != nullptr);
   65|     48|    return bin_unpack_u32(bu, &event->group_number);
   66|     48|}

tox_event_group_topic_pack:
  113|     28|{
  114|     28|    return bin_pack_array(bp, 3)
  ------------------
  |  Branch (114:12): [True: 28, False: 0]
  ------------------
  115|     28|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (115:15): [True: 28, False: 0]
  ------------------
  116|     28|           && bin_pack_u32(bp, event->peer_id)
  ------------------
  |  Branch (116:15): [True: 28, False: 0]
  ------------------
  117|     28|           && bin_pack_bin(bp, event->topic, event->topic_length);
  ------------------
  |  Branch (117:15): [True: 28, False: 0]
  ------------------
  118|     28|}
tox_event_group_topic_new:
  146|     26|{
  147|     26|    Tox_Event_Group_Topic *const group_topic =
  148|     26|        (Tox_Event_Group_Topic *)mem_alloc(mem, sizeof(Tox_Event_Group_Topic));
  149|       |
  150|     26|    if (group_topic == nullptr) {
  ------------------
  |  |   63|     26|#define nullptr NULL
  ------------------
  |  Branch (150:9): [True: 1, False: 25]
  ------------------
  151|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  152|      1|    }
  153|       |
  154|     25|    tox_event_group_topic_construct(group_topic);
  155|     25|    return group_topic;
  156|     26|}
tox_event_group_topic_free:
  159|     26|{
  160|     26|    if (group_topic != nullptr) {
  ------------------
  |  |   63|     26|#define nullptr NULL
  ------------------
  |  Branch (160:9): [True: 25, False: 1]
  ------------------
  161|     25|        tox_event_group_topic_destruct(group_topic, mem);
  162|     25|    }
  163|     26|    mem_delete(mem, group_topic);
  164|     26|}
tox_event_group_topic_unpack:
  188|     26|{
  189|     26|    assert(event != nullptr);
  190|     26|    assert(*event == nullptr);
  191|     26|    *event = tox_event_group_topic_new(mem);
  192|       |
  193|     26|    if (*event == nullptr) {
  ------------------
  |  |   63|     26|#define nullptr NULL
  ------------------
  |  Branch (193:9): [True: 1, False: 25]
  ------------------
  194|      1|        return false;
  195|      1|    }
  196|       |
  197|     25|    return tox_event_group_topic_unpack_into(*event, bu);
  198|     26|}
group_topic.c:tox_event_group_topic_construct:
  100|     25|{
  101|     25|    *group_topic = (Tox_Event_Group_Topic) {
  102|     25|        0
  103|     25|    };
  104|     25|}
group_topic.c:tox_event_group_topic_destruct:
  107|     25|{
  108|     25|    free(group_topic->topic);
  109|     25|}
group_topic.c:tox_event_group_topic_unpack_into:
  123|     25|{
  124|     25|    assert(event != nullptr);
  125|     25|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|     25|#define nullptr NULL
  ------------------
  |  Branch (125:9): [True: 1, False: 24]
  ------------------
  126|      1|        return false;
  127|      1|    }
  128|       |
  129|     24|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (129:12): [True: 23, False: 1]
  ------------------
  130|     24|           && bin_unpack_u32(bu, &event->peer_id)
  ------------------
  |  Branch (130:15): [True: 22, False: 1]
  ------------------
  131|     24|           && bin_unpack_bin(bu, &event->topic, &event->topic_length);
  ------------------
  |  Branch (131:15): [True: 20, False: 2]
  ------------------
  132|     25|}

tox_event_group_topic_lock_pack:
   72|     20|{
   73|     20|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (73:12): [True: 20, False: 0]
  ------------------
   74|     20|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (74:15): [True: 20, False: 0]
  ------------------
   75|     20|           && tox_group_topic_lock_pack(event->topic_lock, bp);
  ------------------
  |  Branch (75:15): [True: 20, False: 0]
  ------------------
   76|     20|}
tox_event_group_topic_lock_new:
  103|     26|{
  104|     26|    Tox_Event_Group_Topic_Lock *const group_topic_lock =
  105|     26|        (Tox_Event_Group_Topic_Lock *)mem_alloc(mem, sizeof(Tox_Event_Group_Topic_Lock));
  106|       |
  107|     26|    if (group_topic_lock == nullptr) {
  ------------------
  |  |   63|     26|#define nullptr NULL
  ------------------
  |  Branch (107:9): [True: 1, False: 25]
  ------------------
  108|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  109|      1|    }
  110|       |
  111|     25|    tox_event_group_topic_lock_construct(group_topic_lock);
  112|     25|    return group_topic_lock;
  113|     26|}
tox_event_group_topic_lock_free:
  116|     26|{
  117|     26|    if (group_topic_lock != nullptr) {
  ------------------
  |  |   63|     26|#define nullptr NULL
  ------------------
  |  Branch (117:9): [True: 25, False: 1]
  ------------------
  118|     25|        tox_event_group_topic_lock_destruct(group_topic_lock, mem);
  119|     25|    }
  120|     26|    mem_delete(mem, group_topic_lock);
  121|     26|}
tox_event_group_topic_lock_unpack:
  145|     26|{
  146|     26|    assert(event != nullptr);
  147|     26|    assert(*event == nullptr);
  148|     26|    *event = tox_event_group_topic_lock_new(mem);
  149|       |
  150|     26|    if (*event == nullptr) {
  ------------------
  |  |   63|     26|#define nullptr NULL
  ------------------
  |  Branch (150:9): [True: 1, False: 25]
  ------------------
  151|      1|        return false;
  152|      1|    }
  153|       |
  154|     25|    return tox_event_group_topic_lock_unpack_into(*event, bu);
  155|     26|}
group_topic_lock.c:tox_event_group_topic_lock_construct:
   59|     25|{
   60|     25|    *group_topic_lock = (Tox_Event_Group_Topic_Lock) {
   61|     25|        0
   62|     25|    };
   63|     25|}
group_topic_lock.c:tox_event_group_topic_lock_destruct:
   66|     25|{
   67|     25|    return;
   68|     25|}
group_topic_lock.c:tox_event_group_topic_lock_unpack_into:
   81|     25|{
   82|     25|    assert(event != nullptr);
   83|     25|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     25|#define nullptr NULL
  ------------------
  |  Branch (83:9): [True: 2, False: 23]
  ------------------
   84|      2|        return false;
   85|      2|    }
   86|       |
   87|     23|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (87:12): [True: 22, False: 1]
  ------------------
   88|     23|           && tox_group_topic_lock_unpack(&event->topic_lock, bu);
  ------------------
  |  Branch (88:15): [True: 20, False: 2]
  ------------------
   89|     25|}

tox_event_group_voice_state_pack:
   72|     36|{
   73|     36|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (73:12): [True: 36, False: 0]
  ------------------
   74|     36|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (74:15): [True: 36, False: 0]
  ------------------
   75|     36|           && tox_group_voice_state_pack(event->voice_state, bp);
  ------------------
  |  Branch (75:15): [True: 36, False: 0]
  ------------------
   76|     36|}
tox_event_group_voice_state_new:
  103|     38|{
  104|     38|    Tox_Event_Group_Voice_State *const group_voice_state =
  105|     38|        (Tox_Event_Group_Voice_State *)mem_alloc(mem, sizeof(Tox_Event_Group_Voice_State));
  106|       |
  107|     38|    if (group_voice_state == nullptr) {
  ------------------
  |  |   63|     38|#define nullptr NULL
  ------------------
  |  Branch (107:9): [True: 1, False: 37]
  ------------------
  108|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  109|      1|    }
  110|       |
  111|     37|    tox_event_group_voice_state_construct(group_voice_state);
  112|     37|    return group_voice_state;
  113|     38|}
tox_event_group_voice_state_free:
  116|     38|{
  117|     38|    if (group_voice_state != nullptr) {
  ------------------
  |  |   63|     38|#define nullptr NULL
  ------------------
  |  Branch (117:9): [True: 37, False: 1]
  ------------------
  118|     37|        tox_event_group_voice_state_destruct(group_voice_state, mem);
  119|     37|    }
  120|     38|    mem_delete(mem, group_voice_state);
  121|     38|}
tox_event_group_voice_state_unpack:
  145|     38|{
  146|     38|    assert(event != nullptr);
  147|     38|    assert(*event == nullptr);
  148|     38|    *event = tox_event_group_voice_state_new(mem);
  149|       |
  150|     38|    if (*event == nullptr) {
  ------------------
  |  |   63|     38|#define nullptr NULL
  ------------------
  |  Branch (150:9): [True: 1, False: 37]
  ------------------
  151|      1|        return false;
  152|      1|    }
  153|       |
  154|     37|    return tox_event_group_voice_state_unpack_into(*event, bu);
  155|     38|}
group_voice_state.c:tox_event_group_voice_state_construct:
   59|     37|{
   60|     37|    *group_voice_state = (Tox_Event_Group_Voice_State) {
   61|     37|        0
   62|     37|    };
   63|     37|}
group_voice_state.c:tox_event_group_voice_state_destruct:
   66|     37|{
   67|     37|    return;
   68|     37|}
group_voice_state.c:tox_event_group_voice_state_unpack_into:
   81|     37|{
   82|     37|    assert(event != nullptr);
   83|     37|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     37|#define nullptr NULL
  ------------------
  |  Branch (83:9): [True: 2, False: 35]
  ------------------
   84|      2|        return false;
   85|      2|    }
   86|       |
   87|     35|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (87:12): [True: 33, False: 2]
  ------------------
   88|     35|           && tox_group_voice_state_unpack(&event->voice_state, bu);
  ------------------
  |  Branch (88:15): [True: 31, False: 2]
  ------------------
   89|     37|}

tox_event_self_connection_status_pack:
   58|    212|{
   59|    212|    return tox_connection_pack(event->connection_status, bp);
   60|    212|}
tox_event_self_connection_status_new:
   82|    126|{
   83|    126|    Tox_Event_Self_Connection_Status *const self_connection_status =
   84|    126|        (Tox_Event_Self_Connection_Status *)mem_alloc(mem, sizeof(Tox_Event_Self_Connection_Status));
   85|       |
   86|    126|    if (self_connection_status == nullptr) {
  ------------------
  |  |   63|    126|#define nullptr NULL
  ------------------
  |  Branch (86:9): [True: 1, False: 125]
  ------------------
   87|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
   88|      1|    }
   89|       |
   90|    125|    tox_event_self_connection_status_construct(self_connection_status);
   91|    125|    return self_connection_status;
   92|    126|}
tox_event_self_connection_status_free:
   95|    126|{
   96|    126|    if (self_connection_status != nullptr) {
  ------------------
  |  |   63|    126|#define nullptr NULL
  ------------------
  |  Branch (96:9): [True: 125, False: 1]
  ------------------
   97|    125|        tox_event_self_connection_status_destruct(self_connection_status, mem);
   98|    125|    }
   99|    126|    mem_delete(mem, self_connection_status);
  100|    126|}
tox_event_self_connection_status_unpack:
  124|    126|{
  125|    126|    assert(event != nullptr);
  126|    126|    assert(*event == nullptr);
  127|    126|    *event = tox_event_self_connection_status_new(mem);
  128|       |
  129|    126|    if (*event == nullptr) {
  ------------------
  |  |   63|    126|#define nullptr NULL
  ------------------
  |  Branch (129:9): [True: 1, False: 125]
  ------------------
  130|      1|        return false;
  131|      1|    }
  132|       |
  133|    125|    return tox_event_self_connection_status_unpack_into(*event, bu);
  134|    126|}
self_connection_status.c:tox_event_self_connection_status_construct:
   45|    125|{
   46|    125|    *self_connection_status = (Tox_Event_Self_Connection_Status) {
   47|    125|        TOX_CONNECTION_NONE
   48|    125|    };
   49|    125|}
self_connection_status.c:tox_event_self_connection_status_destruct:
   52|    125|{
   53|    125|    return;
   54|    125|}
self_connection_status.c:tox_event_self_connection_status_unpack_into:
   65|    125|{
   66|    125|    assert(event != nullptr);
   67|    125|    return tox_connection_unpack(&event->connection_status, bu);
   68|    125|}

mem_balloc:
   51|    502|{
   52|    502|    void *const ptr = mem->funcs->malloc(mem->obj, size);
   53|    502|    return ptr;
   54|    502|}
mem_alloc:
   63|  2.40k|{
   64|  2.40k|    void *const ptr = mem->funcs->calloc(mem->obj, 1, size);
   65|  2.40k|    return ptr;
   66|  2.40k|}
mem_vrealloc:
   81|    798|{
   82|    798|    const uint32_t bytes = nmemb * size;
   83|       |
   84|    798|    if (size != 0 && bytes / size != nmemb) {
  ------------------
  |  Branch (84:9): [True: 798, False: 0]
  |  Branch (84:22): [True: 0, False: 798]
  ------------------
   85|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   86|      0|    }
   87|       |
   88|    798|    void *const new_ptr = mem->funcs->realloc(mem->obj, ptr, bytes);
   89|    798|    return new_ptr;
   90|    798|}
mem_delete:
   93|  3.23k|{
   94|  3.23k|    mem->funcs->free(mem->obj, ptr);
   95|  3.23k|}

tox_dispatch_new:
   60|    785|{
   61|    785|    Tox_Dispatch *dispatch = (Tox_Dispatch *)calloc(1, sizeof(Tox_Dispatch));
   62|       |
   63|    785|    if (dispatch == nullptr) {
  ------------------
  |  |   63|    785|#define nullptr NULL
  ------------------
  |  Branch (63:9): [True: 0, False: 785]
  ------------------
   64|      0|        if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (64:13): [True: 0, False: 0]
  ------------------
   65|      0|            *error = TOX_ERR_DISPATCH_NEW_MALLOC;
   66|      0|        }
   67|       |
   68|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   69|      0|    }
   70|       |
   71|    785|    *dispatch = (Tox_Dispatch) {
   72|    785|        nullptr
  ------------------
  |  |   63|    785|#define nullptr NULL
  ------------------
   73|    785|    };
   74|       |
   75|    785|    if (error != nullptr) {
  ------------------
  |  |   63|    785|#define nullptr NULL
  ------------------
  |  Branch (75:9): [True: 0, False: 785]
  ------------------
   76|      0|        *error = TOX_ERR_DISPATCH_NEW_OK;
   77|      0|    }
   78|       |
   79|    785|    return dispatch;
   80|    785|}
tox_dispatch_free:
   83|    785|{
   84|    785|    free(dispatch);
   85|    785|}
tox_events_callback_conference_connected:
   89|    785|{
   90|    785|    dispatch->conference_connected_callback = callback;
   91|    785|}
tox_events_callback_conference_invite:
   94|    785|{
   95|    785|    dispatch->conference_invite_callback = callback;
   96|    785|}
tox_events_callback_conference_message:
   99|    785|{
  100|    785|    dispatch->conference_message_callback = callback;
  101|    785|}
tox_events_callback_conference_peer_list_changed:
  104|    785|{
  105|    785|    dispatch->conference_peer_list_changed_callback = callback;
  106|    785|}
tox_events_callback_conference_peer_name:
  109|    785|{
  110|    785|    dispatch->conference_peer_name_callback = callback;
  111|    785|}
tox_events_callback_conference_title:
  114|    785|{
  115|    785|    dispatch->conference_title_callback = callback;
  116|    785|}
tox_events_callback_file_chunk_request:
  119|    785|{
  120|    785|    dispatch->file_chunk_request_callback = callback;
  121|    785|}
tox_events_callback_file_recv:
  124|    785|{
  125|    785|    dispatch->file_recv_callback = callback;
  126|    785|}
tox_events_callback_file_recv_chunk:
  129|    785|{
  130|    785|    dispatch->file_recv_chunk_callback = callback;
  131|    785|}
tox_events_callback_file_recv_control:
  134|    785|{
  135|    785|    dispatch->file_recv_control_callback = callback;
  136|    785|}
tox_events_callback_friend_connection_status:
  139|    785|{
  140|    785|    dispatch->friend_connection_status_callback = callback;
  141|    785|}
tox_events_callback_friend_lossless_packet:
  144|    785|{
  145|    785|    dispatch->friend_lossless_packet_callback = callback;
  146|    785|}
tox_events_callback_friend_lossy_packet:
  149|    785|{
  150|    785|    dispatch->friend_lossy_packet_callback = callback;
  151|    785|}
tox_events_callback_friend_message:
  154|    785|{
  155|    785|    dispatch->friend_message_callback = callback;
  156|    785|}
tox_events_callback_friend_name:
  159|    785|{
  160|    785|    dispatch->friend_name_callback = callback;
  161|    785|}
tox_events_callback_friend_read_receipt:
  164|    785|{
  165|    785|    dispatch->friend_read_receipt_callback = callback;
  166|    785|}
tox_events_callback_friend_request:
  169|    785|{
  170|    785|    dispatch->friend_request_callback = callback;
  171|    785|}
tox_events_callback_friend_status:
  174|    785|{
  175|    785|    dispatch->friend_status_callback = callback;
  176|    785|}
tox_events_callback_friend_status_message:
  179|    785|{
  180|    785|    dispatch->friend_status_message_callback = callback;
  181|    785|}
tox_events_callback_friend_typing:
  184|    785|{
  185|    785|    dispatch->friend_typing_callback = callback;
  186|    785|}
tox_events_callback_self_connection_status:
  189|    785|{
  190|    785|    dispatch->self_connection_status_callback = callback;
  191|    785|}
tox_events_callback_group_peer_name:
  194|    785|{
  195|    785|    dispatch->group_peer_name_callback = callback;
  196|    785|}
tox_events_callback_group_peer_status:
  199|    785|{
  200|    785|    dispatch->group_peer_status_callback = callback;
  201|    785|}
tox_events_callback_group_topic:
  204|    785|{
  205|    785|    dispatch->group_topic_callback = callback;
  206|    785|}
tox_events_callback_group_privacy_state:
  209|    785|{
  210|    785|    dispatch->group_privacy_state_callback = callback;
  211|    785|}
tox_events_callback_group_voice_state:
  214|    785|{
  215|    785|    dispatch->group_voice_state_callback = callback;
  216|    785|}
tox_events_callback_group_topic_lock:
  219|    785|{
  220|    785|    dispatch->group_topic_lock_callback = callback;
  221|    785|}
tox_events_callback_group_peer_limit:
  224|    785|{
  225|    785|    dispatch->group_peer_limit_callback = callback;
  226|    785|}
tox_events_callback_group_password:
  229|    785|{
  230|    785|    dispatch->group_password_callback = callback;
  231|    785|}
tox_events_callback_group_message:
  234|    785|{
  235|    785|    dispatch->group_message_callback = callback;
  236|    785|}
tox_events_callback_group_private_message:
  239|    785|{
  240|    785|    dispatch->group_private_message_callback = callback;
  241|    785|}
tox_events_callback_group_custom_packet:
  244|    785|{
  245|    785|    dispatch->group_custom_packet_callback = callback;
  246|    785|}
tox_events_callback_group_custom_private_packet:
  249|    785|{
  250|    785|    dispatch->group_custom_private_packet_callback = callback;
  251|    785|}
tox_events_callback_group_invite:
  254|    785|{
  255|    785|    dispatch->group_invite_callback = callback;
  256|    785|}
tox_events_callback_group_peer_join:
  259|    785|{
  260|    785|    dispatch->group_peer_join_callback = callback;
  261|    785|}
tox_events_callback_group_peer_exit:
  264|    785|{
  265|    785|    dispatch->group_peer_exit_callback = callback;
  266|    785|}
tox_events_callback_group_self_join:
  269|    785|{
  270|    785|    dispatch->group_self_join_callback = callback;
  271|    785|}
tox_events_callback_group_join_fail:
  274|    785|{
  275|    785|    dispatch->group_join_fail_callback = callback;
  276|    785|}
tox_events_callback_group_moderation:
  279|    785|{
  280|    785|    dispatch->group_moderation_callback = callback;
  281|    785|}
tox_dispatch_invoke:
  619|    182|{
  620|    182|    const uint32_t size = tox_events_get_size(events);
  621|    904|    for (uint32_t i = 0; i < size; ++i) {
  ------------------
  |  Branch (621:26): [True: 722, False: 182]
  ------------------
  622|    722|        const Tox_Event *event = &events->events[i];
  623|    722|        tox_dispatch_invoke_event(dispatch, event, user_data);
  624|    722|    }
  625|    182|}
tox_dispatch.c:tox_dispatch_invoke_event:
  290|    722|{
  291|    722|    switch (event->type) {
  ------------------
  |  Branch (291:13): [True: 0, False: 722]
  ------------------
  292|     18|        case TOX_EVENT_CONFERENCE_CONNECTED: {
  ------------------
  |  Branch (292:9): [True: 18, False: 704]
  ------------------
  293|     18|            if (dispatch->conference_connected_callback != nullptr) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
  |  Branch (293:17): [True: 18, False: 0]
  ------------------
  294|     18|                dispatch->conference_connected_callback(event->data.conference_connected, user_data);
  295|     18|            }
  296|       |
  297|     18|            break;
  298|      0|        }
  299|       |
  300|     16|        case TOX_EVENT_CONFERENCE_INVITE: {
  ------------------
  |  Branch (300:9): [True: 16, False: 706]
  ------------------
  301|     16|            if (dispatch->conference_invite_callback != nullptr) {
  ------------------
  |  |   63|     16|#define nullptr NULL
  ------------------
  |  Branch (301:17): [True: 16, False: 0]
  ------------------
  302|     16|                dispatch->conference_invite_callback(event->data.conference_invite, user_data);
  303|     16|            }
  304|       |
  305|     16|            break;
  306|      0|        }
  307|       |
  308|     10|        case TOX_EVENT_CONFERENCE_MESSAGE: {
  ------------------
  |  Branch (308:9): [True: 10, False: 712]
  ------------------
  309|     10|            if (dispatch->conference_message_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (309:17): [True: 10, False: 0]
  ------------------
  310|     10|                dispatch->conference_message_callback(event->data.conference_message, user_data);
  311|     10|            }
  312|       |
  313|     10|            break;
  314|      0|        }
  315|       |
  316|     84|        case TOX_EVENT_CONFERENCE_PEER_LIST_CHANGED: {
  ------------------
  |  Branch (316:9): [True: 84, False: 638]
  ------------------
  317|     84|            if (dispatch->conference_peer_list_changed_callback != nullptr) {
  ------------------
  |  |   63|     84|#define nullptr NULL
  ------------------
  |  Branch (317:17): [True: 84, False: 0]
  ------------------
  318|     84|                dispatch->conference_peer_list_changed_callback(event->data.conference_peer_list_changed, user_data);
  319|     84|            }
  320|       |
  321|     84|            break;
  322|      0|        }
  323|       |
  324|     10|        case TOX_EVENT_CONFERENCE_PEER_NAME: {
  ------------------
  |  Branch (324:9): [True: 10, False: 712]
  ------------------
  325|     10|            if (dispatch->conference_peer_name_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (325:17): [True: 10, False: 0]
  ------------------
  326|     10|                dispatch->conference_peer_name_callback(event->data.conference_peer_name, user_data);
  327|     10|            }
  328|       |
  329|     10|            break;
  330|      0|        }
  331|       |
  332|     40|        case TOX_EVENT_CONFERENCE_TITLE: {
  ------------------
  |  Branch (332:9): [True: 40, False: 682]
  ------------------
  333|     40|            if (dispatch->conference_title_callback != nullptr) {
  ------------------
  |  |   63|     40|#define nullptr NULL
  ------------------
  |  Branch (333:17): [True: 40, False: 0]
  ------------------
  334|     40|                dispatch->conference_title_callback(event->data.conference_title, user_data);
  335|     40|            }
  336|       |
  337|     40|            break;
  338|      0|        }
  339|       |
  340|     47|        case TOX_EVENT_FILE_CHUNK_REQUEST: {
  ------------------
  |  Branch (340:9): [True: 47, False: 675]
  ------------------
  341|     47|            if (dispatch->file_chunk_request_callback != nullptr) {
  ------------------
  |  |   63|     47|#define nullptr NULL
  ------------------
  |  Branch (341:17): [True: 47, False: 0]
  ------------------
  342|     47|                dispatch->file_chunk_request_callback(event->data.file_chunk_request, user_data);
  343|     47|            }
  344|       |
  345|     47|            break;
  346|      0|        }
  347|       |
  348|     10|        case TOX_EVENT_FILE_RECV_CHUNK: {
  ------------------
  |  Branch (348:9): [True: 10, False: 712]
  ------------------
  349|     10|            if (dispatch->file_recv_chunk_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (349:17): [True: 10, False: 0]
  ------------------
  350|     10|                dispatch->file_recv_chunk_callback(event->data.file_recv_chunk, user_data);
  351|     10|            }
  352|       |
  353|     10|            break;
  354|      0|        }
  355|       |
  356|     12|        case TOX_EVENT_FILE_RECV_CONTROL: {
  ------------------
  |  Branch (356:9): [True: 12, False: 710]
  ------------------
  357|     12|            if (dispatch->file_recv_control_callback != nullptr) {
  ------------------
  |  |   63|     12|#define nullptr NULL
  ------------------
  |  Branch (357:17): [True: 12, False: 0]
  ------------------
  358|     12|                dispatch->file_recv_control_callback(event->data.file_recv_control, user_data);
  359|     12|            }
  360|       |
  361|     12|            break;
  362|      0|        }
  363|       |
  364|     11|        case TOX_EVENT_FILE_RECV: {
  ------------------
  |  Branch (364:9): [True: 11, False: 711]
  ------------------
  365|     11|            if (dispatch->file_recv_callback != nullptr) {
  ------------------
  |  |   63|     11|#define nullptr NULL
  ------------------
  |  Branch (365:17): [True: 11, False: 0]
  ------------------
  366|     11|                dispatch->file_recv_callback(event->data.file_recv, user_data);
  367|     11|            }
  368|       |
  369|     11|            break;
  370|      0|        }
  371|       |
  372|     24|        case TOX_EVENT_FRIEND_CONNECTION_STATUS: {
  ------------------
  |  Branch (372:9): [True: 24, False: 698]
  ------------------
  373|     24|            if (dispatch->friend_connection_status_callback != nullptr) {
  ------------------
  |  |   63|     24|#define nullptr NULL
  ------------------
  |  Branch (373:17): [True: 24, False: 0]
  ------------------
  374|     24|                dispatch->friend_connection_status_callback(event->data.friend_connection_status, user_data);
  375|     24|            }
  376|       |
  377|     24|            break;
  378|      0|        }
  379|       |
  380|     10|        case TOX_EVENT_FRIEND_LOSSLESS_PACKET: {
  ------------------
  |  Branch (380:9): [True: 10, False: 712]
  ------------------
  381|     10|            if (dispatch->friend_lossless_packet_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (381:17): [True: 10, False: 0]
  ------------------
  382|     10|                dispatch->friend_lossless_packet_callback(event->data.friend_lossless_packet, user_data);
  383|     10|            }
  384|       |
  385|     10|            break;
  386|      0|        }
  387|       |
  388|     14|        case TOX_EVENT_FRIEND_LOSSY_PACKET: {
  ------------------
  |  Branch (388:9): [True: 14, False: 708]
  ------------------
  389|     14|            if (dispatch->friend_lossy_packet_callback != nullptr) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (389:17): [True: 14, False: 0]
  ------------------
  390|     14|                dispatch->friend_lossy_packet_callback(event->data.friend_lossy_packet, user_data);
  391|     14|            }
  392|       |
  393|     14|            break;
  394|      0|        }
  395|       |
  396|     10|        case TOX_EVENT_FRIEND_MESSAGE: {
  ------------------
  |  Branch (396:9): [True: 10, False: 712]
  ------------------
  397|     10|            if (dispatch->friend_message_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (397:17): [True: 10, False: 0]
  ------------------
  398|     10|                dispatch->friend_message_callback(event->data.friend_message, user_data);
  399|     10|            }
  400|       |
  401|     10|            break;
  402|      0|        }
  403|       |
  404|     20|        case TOX_EVENT_FRIEND_NAME: {
  ------------------
  |  Branch (404:9): [True: 20, False: 702]
  ------------------
  405|     20|            if (dispatch->friend_name_callback != nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (405:17): [True: 20, False: 0]
  ------------------
  406|     20|                dispatch->friend_name_callback(event->data.friend_name, user_data);
  407|     20|            }
  408|       |
  409|     20|            break;
  410|      0|        }
  411|       |
  412|     11|        case TOX_EVENT_FRIEND_READ_RECEIPT: {
  ------------------
  |  Branch (412:9): [True: 11, False: 711]
  ------------------
  413|     11|            if (dispatch->friend_read_receipt_callback != nullptr) {
  ------------------
  |  |   63|     11|#define nullptr NULL
  ------------------
  |  Branch (413:17): [True: 11, False: 0]
  ------------------
  414|     11|                dispatch->friend_read_receipt_callback(event->data.friend_read_receipt, user_data);
  415|     11|            }
  416|       |
  417|     11|            break;
  418|      0|        }
  419|       |
  420|     10|        case TOX_EVENT_FRIEND_REQUEST: {
  ------------------
  |  Branch (420:9): [True: 10, False: 712]
  ------------------
  421|     10|            if (dispatch->friend_request_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (421:17): [True: 10, False: 0]
  ------------------
  422|     10|                dispatch->friend_request_callback(event->data.friend_request, user_data);
  423|     10|            }
  424|       |
  425|     10|            break;
  426|      0|        }
  427|       |
  428|     13|        case TOX_EVENT_FRIEND_STATUS: {
  ------------------
  |  Branch (428:9): [True: 13, False: 709]
  ------------------
  429|     13|            if (dispatch->friend_status_callback != nullptr) {
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
  |  Branch (429:17): [True: 13, False: 0]
  ------------------
  430|     13|                dispatch->friend_status_callback(event->data.friend_status, user_data);
  431|     13|            }
  432|       |
  433|     13|            break;
  434|      0|        }
  435|       |
  436|     10|        case TOX_EVENT_FRIEND_STATUS_MESSAGE: {
  ------------------
  |  Branch (436:9): [True: 10, False: 712]
  ------------------
  437|     10|            if (dispatch->friend_status_message_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (437:17): [True: 10, False: 0]
  ------------------
  438|     10|                dispatch->friend_status_message_callback(event->data.friend_status_message, user_data);
  439|     10|            }
  440|       |
  441|     10|            break;
  442|      0|        }
  443|       |
  444|     15|        case TOX_EVENT_FRIEND_TYPING: {
  ------------------
  |  Branch (444:9): [True: 15, False: 707]
  ------------------
  445|     15|            if (dispatch->friend_typing_callback != nullptr) {
  ------------------
  |  |   63|     15|#define nullptr NULL
  ------------------
  |  Branch (445:17): [True: 15, False: 0]
  ------------------
  446|     15|                dispatch->friend_typing_callback(event->data.friend_typing, user_data);
  447|     15|            }
  448|       |
  449|     15|            break;
  450|      0|        }
  451|       |
  452|    106|        case TOX_EVENT_SELF_CONNECTION_STATUS: {
  ------------------
  |  Branch (452:9): [True: 106, False: 616]
  ------------------
  453|    106|            if (dispatch->self_connection_status_callback != nullptr) {
  ------------------
  |  |   63|    106|#define nullptr NULL
  ------------------
  |  Branch (453:17): [True: 106, False: 0]
  ------------------
  454|    106|                dispatch->self_connection_status_callback(event->data.self_connection_status, user_data);
  455|    106|            }
  456|       |
  457|    106|            break;
  458|      0|        }
  459|       |
  460|     11|        case TOX_EVENT_GROUP_PEER_NAME: {
  ------------------
  |  Branch (460:9): [True: 11, False: 711]
  ------------------
  461|     11|            if (dispatch->group_peer_name_callback != nullptr) {
  ------------------
  |  |   63|     11|#define nullptr NULL
  ------------------
  |  Branch (461:17): [True: 11, False: 0]
  ------------------
  462|     11|                dispatch->group_peer_name_callback(event->data.group_peer_name, user_data);
  463|     11|            }
  464|       |
  465|     11|            break;
  466|      0|        }
  467|       |
  468|     11|        case TOX_EVENT_GROUP_PEER_STATUS: {
  ------------------
  |  Branch (468:9): [True: 11, False: 711]
  ------------------
  469|     11|            if (dispatch->group_peer_status_callback != nullptr) {
  ------------------
  |  |   63|     11|#define nullptr NULL
  ------------------
  |  Branch (469:17): [True: 11, False: 0]
  ------------------
  470|     11|                dispatch->group_peer_status_callback(event->data.group_peer_status, user_data);
  471|     11|            }
  472|       |
  473|     11|            break;
  474|      0|        }
  475|       |
  476|     14|        case TOX_EVENT_GROUP_TOPIC: {
  ------------------
  |  Branch (476:9): [True: 14, False: 708]
  ------------------
  477|     14|            if (dispatch->group_topic_callback != nullptr) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (477:17): [True: 14, False: 0]
  ------------------
  478|     14|                dispatch->group_topic_callback(event->data.group_topic, user_data);
  479|     14|            }
  480|       |
  481|     14|            break;
  482|      0|        }
  483|       |
  484|     10|        case TOX_EVENT_GROUP_PRIVACY_STATE: {
  ------------------
  |  Branch (484:9): [True: 10, False: 712]
  ------------------
  485|     10|            if (dispatch->group_privacy_state_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (485:17): [True: 10, False: 0]
  ------------------
  486|     10|                dispatch->group_privacy_state_callback(event->data.group_privacy_state, user_data);
  487|     10|            }
  488|       |
  489|     10|            break;
  490|      0|        }
  491|       |
  492|     18|        case TOX_EVENT_GROUP_VOICE_STATE: {
  ------------------
  |  Branch (492:9): [True: 18, False: 704]
  ------------------
  493|     18|            if (dispatch->group_voice_state_callback != nullptr) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
  |  Branch (493:17): [True: 18, False: 0]
  ------------------
  494|     18|                dispatch->group_voice_state_callback(event->data.group_voice_state, user_data);
  495|     18|            }
  496|       |
  497|     18|            break;
  498|      0|        }
  499|       |
  500|     10|        case TOX_EVENT_GROUP_TOPIC_LOCK: {
  ------------------
  |  Branch (500:9): [True: 10, False: 712]
  ------------------
  501|     10|            if (dispatch->group_topic_lock_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (501:17): [True: 10, False: 0]
  ------------------
  502|     10|                dispatch->group_topic_lock_callback(event->data.group_topic_lock, user_data);
  503|     10|            }
  504|       |
  505|     10|            break;
  506|      0|        }
  507|       |
  508|     11|        case TOX_EVENT_GROUP_PEER_LIMIT: {
  ------------------
  |  Branch (508:9): [True: 11, False: 711]
  ------------------
  509|     11|            if (dispatch->group_peer_limit_callback != nullptr) {
  ------------------
  |  |   63|     11|#define nullptr NULL
  ------------------
  |  Branch (509:17): [True: 11, False: 0]
  ------------------
  510|     11|                dispatch->group_peer_limit_callback(event->data.group_peer_limit, user_data);
  511|     11|            }
  512|       |
  513|     11|            break;
  514|      0|        }
  515|       |
  516|     10|        case TOX_EVENT_GROUP_PASSWORD: {
  ------------------
  |  Branch (516:9): [True: 10, False: 712]
  ------------------
  517|     10|            if (dispatch->group_password_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (517:17): [True: 10, False: 0]
  ------------------
  518|     10|                dispatch->group_password_callback(event->data.group_password, user_data);
  519|     10|            }
  520|       |
  521|     10|            break;
  522|      0|        }
  523|       |
  524|     10|        case TOX_EVENT_GROUP_MESSAGE: {
  ------------------
  |  Branch (524:9): [True: 10, False: 712]
  ------------------
  525|     10|            if (dispatch->group_message_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (525:17): [True: 10, False: 0]
  ------------------
  526|     10|                dispatch->group_message_callback(event->data.group_message, user_data);
  527|     10|            }
  528|       |
  529|     10|            break;
  530|      0|        }
  531|       |
  532|     12|        case TOX_EVENT_GROUP_PRIVATE_MESSAGE: {
  ------------------
  |  Branch (532:9): [True: 12, False: 710]
  ------------------
  533|     12|            if (dispatch->group_private_message_callback != nullptr) {
  ------------------
  |  |   63|     12|#define nullptr NULL
  ------------------
  |  Branch (533:17): [True: 12, False: 0]
  ------------------
  534|     12|                dispatch->group_private_message_callback(event->data.group_private_message, user_data);
  535|     12|            }
  536|       |
  537|     12|            break;
  538|      0|        }
  539|       |
  540|     10|        case TOX_EVENT_GROUP_CUSTOM_PACKET: {
  ------------------
  |  Branch (540:9): [True: 10, False: 712]
  ------------------
  541|     10|            if (dispatch->group_custom_packet_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (541:17): [True: 10, False: 0]
  ------------------
  542|     10|                dispatch->group_custom_packet_callback(event->data.group_custom_packet, user_data);
  543|     10|            }
  544|       |
  545|     10|            break;
  546|      0|        }
  547|       |
  548|     12|        case TOX_EVENT_GROUP_CUSTOM_PRIVATE_PACKET: {
  ------------------
  |  Branch (548:9): [True: 12, False: 710]
  ------------------
  549|     12|            if (dispatch->group_custom_private_packet_callback != nullptr) {
  ------------------
  |  |   63|     12|#define nullptr NULL
  ------------------
  |  Branch (549:17): [True: 12, False: 0]
  ------------------
  550|     12|                dispatch->group_custom_private_packet_callback(event->data.group_custom_private_packet, user_data);
  551|     12|            }
  552|       |
  553|     12|            break;
  554|      0|        }
  555|       |
  556|     11|        case TOX_EVENT_GROUP_INVITE: {
  ------------------
  |  Branch (556:9): [True: 11, False: 711]
  ------------------
  557|     11|            if (dispatch->group_invite_callback != nullptr) {
  ------------------
  |  |   63|     11|#define nullptr NULL
  ------------------
  |  Branch (557:17): [True: 11, False: 0]
  ------------------
  558|     11|                dispatch->group_invite_callback(event->data.group_invite, user_data);
  559|     11|            }
  560|       |
  561|     11|            break;
  562|      0|        }
  563|       |
  564|     10|        case TOX_EVENT_GROUP_PEER_JOIN: {
  ------------------
  |  Branch (564:9): [True: 10, False: 712]
  ------------------
  565|     10|            if (dispatch->group_peer_join_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (565:17): [True: 10, False: 0]
  ------------------
  566|     10|                dispatch->group_peer_join_callback(event->data.group_peer_join, user_data);
  567|     10|            }
  568|       |
  569|     10|            break;
  570|      0|        }
  571|       |
  572|     15|        case TOX_EVENT_GROUP_PEER_EXIT: {
  ------------------
  |  Branch (572:9): [True: 15, False: 707]
  ------------------
  573|     15|            if (dispatch->group_peer_exit_callback != nullptr) {
  ------------------
  |  |   63|     15|#define nullptr NULL
  ------------------
  |  Branch (573:17): [True: 15, False: 0]
  ------------------
  574|     15|                dispatch->group_peer_exit_callback(event->data.group_peer_exit, user_data);
  575|     15|            }
  576|       |
  577|     15|            break;
  578|      0|        }
  579|       |
  580|     18|        case TOX_EVENT_GROUP_SELF_JOIN: {
  ------------------
  |  Branch (580:9): [True: 18, False: 704]
  ------------------
  581|     18|            if (dispatch->group_self_join_callback != nullptr) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
  |  Branch (581:17): [True: 18, False: 0]
  ------------------
  582|     18|                dispatch->group_self_join_callback(event->data.group_self_join, user_data);
  583|     18|            }
  584|       |
  585|     18|            break;
  586|      0|        }
  587|       |
  588|     18|        case TOX_EVENT_GROUP_JOIN_FAIL: {
  ------------------
  |  Branch (588:9): [True: 18, False: 704]
  ------------------
  589|     18|            if (dispatch->group_join_fail_callback != nullptr) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
  |  Branch (589:17): [True: 18, False: 0]
  ------------------
  590|     18|                dispatch->group_join_fail_callback(event->data.group_join_fail, user_data);
  591|     18|            }
  592|       |
  593|     18|            break;
  594|      0|        }
  595|       |
  596|     10|        case TOX_EVENT_GROUP_MODERATION: {
  ------------------
  |  Branch (596:9): [True: 10, False: 712]
  ------------------
  597|     10|            if (dispatch->group_moderation_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (597:17): [True: 10, False: 0]
  ------------------
  598|     10|                dispatch->group_moderation_callback(event->data.group_moderation, user_data);
  599|     10|            }
  600|       |
  601|     10|            break;
  602|      0|        }
  603|       |
  604|      0|        case TOX_EVENT_DHT_GET_NODES_RESPONSE: {
  ------------------
  |  Branch (604:9): [True: 0, False: 722]
  ------------------
  605|      0|            if (dispatch->dht_nodes_response_callback != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (605:17): [True: 0, False: 0]
  ------------------
  606|      0|                dispatch->dht_nodes_response_callback(event->data.dht_nodes_response, user_data);
  607|      0|            }
  608|       |
  609|      0|            break;
  610|      0|        }
  611|       |
  612|      0|        case TOX_EVENT_INVALID: {
  ------------------
  |  Branch (612:9): [True: 0, False: 722]
  ------------------
  613|      0|            break;
  614|      0|        }
  615|    722|    }
  616|    722|}

tox_event_destruct:
  367|  1.72k|{
  368|  1.72k|    if (event == nullptr) {
  ------------------
  |  |   63|  1.72k|#define nullptr NULL
  ------------------
  |  Branch (368:9): [True: 0, False: 1.72k]
  ------------------
  369|      0|        return;
  370|      0|    }
  371|       |
  372|  1.72k|    switch (event->type) {
  ------------------
  |  Branch (372:13): [True: 0, False: 1.72k]
  ------------------
  373|     20|        case TOX_EVENT_CONFERENCE_CONNECTED: {
  ------------------
  |  Branch (373:9): [True: 20, False: 1.70k]
  ------------------
  374|     20|            tox_event_conference_connected_free(event->data.conference_connected, mem);
  375|     20|            break;
  376|      0|        }
  377|       |
  378|     31|        case TOX_EVENT_CONFERENCE_INVITE: {
  ------------------
  |  Branch (378:9): [True: 31, False: 1.69k]
  ------------------
  379|     31|            tox_event_conference_invite_free(event->data.conference_invite, mem);
  380|     31|            break;
  381|      0|        }
  382|       |
  383|     22|        case TOX_EVENT_CONFERENCE_MESSAGE: {
  ------------------
  |  Branch (383:9): [True: 22, False: 1.70k]
  ------------------
  384|     22|            tox_event_conference_message_free(event->data.conference_message, mem);
  385|     22|            break;
  386|      0|        }
  387|       |
  388|    118|        case TOX_EVENT_CONFERENCE_PEER_LIST_CHANGED: {
  ------------------
  |  Branch (388:9): [True: 118, False: 1.61k]
  ------------------
  389|    118|            tox_event_conference_peer_list_changed_free(event->data.conference_peer_list_changed, mem);
  390|    118|            break;
  391|      0|        }
  392|       |
  393|     19|        case TOX_EVENT_CONFERENCE_PEER_NAME: {
  ------------------
  |  Branch (393:9): [True: 19, False: 1.70k]
  ------------------
  394|     19|            tox_event_conference_peer_name_free(event->data.conference_peer_name, mem);
  395|     19|            break;
  396|      0|        }
  397|       |
  398|     73|        case TOX_EVENT_CONFERENCE_TITLE: {
  ------------------
  |  Branch (398:9): [True: 73, False: 1.65k]
  ------------------
  399|     73|            tox_event_conference_title_free(event->data.conference_title, mem);
  400|     73|            break;
  401|      0|        }
  402|       |
  403|    242|        case TOX_EVENT_FILE_CHUNK_REQUEST: {
  ------------------
  |  Branch (403:9): [True: 242, False: 1.48k]
  ------------------
  404|    242|            tox_event_file_chunk_request_free(event->data.file_chunk_request, mem);
  405|    242|            break;
  406|      0|        }
  407|       |
  408|     28|        case TOX_EVENT_FILE_RECV_CHUNK: {
  ------------------
  |  Branch (408:9): [True: 28, False: 1.70k]
  ------------------
  409|     28|            tox_event_file_recv_chunk_free(event->data.file_recv_chunk, mem);
  410|     28|            break;
  411|      0|        }
  412|       |
  413|     43|        case TOX_EVENT_FILE_RECV_CONTROL: {
  ------------------
  |  Branch (413:9): [True: 43, False: 1.68k]
  ------------------
  414|     43|            tox_event_file_recv_control_free(event->data.file_recv_control, mem);
  415|     43|            break;
  416|      0|        }
  417|       |
  418|     25|        case TOX_EVENT_FILE_RECV: {
  ------------------
  |  Branch (418:9): [True: 25, False: 1.70k]
  ------------------
  419|     25|            tox_event_file_recv_free(event->data.file_recv, mem);
  420|     25|            break;
  421|      0|        }
  422|       |
  423|     49|        case TOX_EVENT_FRIEND_CONNECTION_STATUS: {
  ------------------
  |  Branch (423:9): [True: 49, False: 1.67k]
  ------------------
  424|     49|            tox_event_friend_connection_status_free(event->data.friend_connection_status, mem);
  425|     49|            break;
  426|      0|        }
  427|       |
  428|     22|        case TOX_EVENT_FRIEND_LOSSLESS_PACKET: {
  ------------------
  |  Branch (428:9): [True: 22, False: 1.70k]
  ------------------
  429|     22|            tox_event_friend_lossless_packet_free(event->data.friend_lossless_packet, mem);
  430|     22|            break;
  431|      0|        }
  432|       |
  433|     34|        case TOX_EVENT_FRIEND_LOSSY_PACKET: {
  ------------------
  |  Branch (433:9): [True: 34, False: 1.69k]
  ------------------
  434|     34|            tox_event_friend_lossy_packet_free(event->data.friend_lossy_packet, mem);
  435|     34|            break;
  436|      0|        }
  437|       |
  438|     15|        case TOX_EVENT_FRIEND_MESSAGE: {
  ------------------
  |  Branch (438:9): [True: 15, False: 1.71k]
  ------------------
  439|     15|            tox_event_friend_message_free(event->data.friend_message, mem);
  440|     15|            break;
  441|      0|        }
  442|       |
  443|     42|        case TOX_EVENT_FRIEND_NAME: {
  ------------------
  |  Branch (443:9): [True: 42, False: 1.68k]
  ------------------
  444|     42|            tox_event_friend_name_free(event->data.friend_name, mem);
  445|     42|            break;
  446|      0|        }
  447|       |
  448|     19|        case TOX_EVENT_FRIEND_READ_RECEIPT: {
  ------------------
  |  Branch (448:9): [True: 19, False: 1.70k]
  ------------------
  449|     19|            tox_event_friend_read_receipt_free(event->data.friend_read_receipt, mem);
  450|     19|            break;
  451|      0|        }
  452|       |
  453|     38|        case TOX_EVENT_FRIEND_REQUEST: {
  ------------------
  |  Branch (453:9): [True: 38, False: 1.69k]
  ------------------
  454|     38|            tox_event_friend_request_free(event->data.friend_request, mem);
  455|     38|            break;
  456|      0|        }
  457|       |
  458|     29|        case TOX_EVENT_FRIEND_STATUS: {
  ------------------
  |  Branch (458:9): [True: 29, False: 1.69k]
  ------------------
  459|     29|            tox_event_friend_status_free(event->data.friend_status, mem);
  460|     29|            break;
  461|      0|        }
  462|       |
  463|     19|        case TOX_EVENT_FRIEND_STATUS_MESSAGE: {
  ------------------
  |  Branch (463:9): [True: 19, False: 1.70k]
  ------------------
  464|     19|            tox_event_friend_status_message_free(event->data.friend_status_message, mem);
  465|     19|            break;
  466|      0|        }
  467|       |
  468|     69|        case TOX_EVENT_FRIEND_TYPING: {
  ------------------
  |  Branch (468:9): [True: 69, False: 1.65k]
  ------------------
  469|     69|            tox_event_friend_typing_free(event->data.friend_typing, mem);
  470|     69|            break;
  471|      0|        }
  472|       |
  473|    126|        case TOX_EVENT_SELF_CONNECTION_STATUS: {
  ------------------
  |  Branch (473:9): [True: 126, False: 1.60k]
  ------------------
  474|    126|            tox_event_self_connection_status_free(event->data.self_connection_status, mem);
  475|    126|            break;
  476|      0|        }
  477|       |
  478|     27|        case TOX_EVENT_GROUP_PEER_NAME: {
  ------------------
  |  Branch (478:9): [True: 27, False: 1.70k]
  ------------------
  479|     27|            tox_event_group_peer_name_free(event->data.group_peer_name, mem);
  480|     27|            break;
  481|      0|        }
  482|       |
  483|     24|        case TOX_EVENT_GROUP_PEER_STATUS: {
  ------------------
  |  Branch (483:9): [True: 24, False: 1.70k]
  ------------------
  484|     24|            tox_event_group_peer_status_free(event->data.group_peer_status, mem);
  485|     24|            break;
  486|      0|        }
  487|       |
  488|     26|        case TOX_EVENT_GROUP_TOPIC: {
  ------------------
  |  Branch (488:9): [True: 26, False: 1.70k]
  ------------------
  489|     26|            tox_event_group_topic_free(event->data.group_topic, mem);
  490|     26|            break;
  491|      0|        }
  492|       |
  493|     26|        case TOX_EVENT_GROUP_PRIVACY_STATE: {
  ------------------
  |  Branch (493:9): [True: 26, False: 1.70k]
  ------------------
  494|     26|            tox_event_group_privacy_state_free(event->data.group_privacy_state, mem);
  495|     26|            break;
  496|      0|        }
  497|       |
  498|     38|        case TOX_EVENT_GROUP_VOICE_STATE: {
  ------------------
  |  Branch (498:9): [True: 38, False: 1.69k]
  ------------------
  499|     38|            tox_event_group_voice_state_free(event->data.group_voice_state, mem);
  500|     38|            break;
  501|      0|        }
  502|       |
  503|     26|        case TOX_EVENT_GROUP_TOPIC_LOCK: {
  ------------------
  |  Branch (503:9): [True: 26, False: 1.70k]
  ------------------
  504|     26|            tox_event_group_topic_lock_free(event->data.group_topic_lock, mem);
  505|     26|            break;
  506|      0|        }
  507|       |
  508|     14|        case TOX_EVENT_GROUP_PEER_LIMIT: {
  ------------------
  |  Branch (508:9): [True: 14, False: 1.71k]
  ------------------
  509|     14|            tox_event_group_peer_limit_free(event->data.group_peer_limit, mem);
  510|     14|            break;
  511|      0|        }
  512|       |
  513|     21|        case TOX_EVENT_GROUP_PASSWORD: {
  ------------------
  |  Branch (513:9): [True: 21, False: 1.70k]
  ------------------
  514|     21|            tox_event_group_password_free(event->data.group_password, mem);
  515|     21|            break;
  516|      0|        }
  517|       |
  518|     38|        case TOX_EVENT_GROUP_MESSAGE: {
  ------------------
  |  Branch (518:9): [True: 38, False: 1.69k]
  ------------------
  519|     38|            tox_event_group_message_free(event->data.group_message, mem);
  520|     38|            break;
  521|      0|        }
  522|       |
  523|     24|        case TOX_EVENT_GROUP_PRIVATE_MESSAGE: {
  ------------------
  |  Branch (523:9): [True: 24, False: 1.70k]
  ------------------
  524|     24|            tox_event_group_private_message_free(event->data.group_private_message, mem);
  525|     24|            break;
  526|      0|        }
  527|       |
  528|     16|        case TOX_EVENT_GROUP_CUSTOM_PACKET: {
  ------------------
  |  Branch (528:9): [True: 16, False: 1.71k]
  ------------------
  529|     16|            tox_event_group_custom_packet_free(event->data.group_custom_packet, mem);
  530|     16|            break;
  531|      0|        }
  532|       |
  533|     20|        case TOX_EVENT_GROUP_CUSTOM_PRIVATE_PACKET: {
  ------------------
  |  Branch (533:9): [True: 20, False: 1.70k]
  ------------------
  534|     20|            tox_event_group_custom_private_packet_free(event->data.group_custom_private_packet, mem);
  535|     20|            break;
  536|      0|        }
  537|       |
  538|     22|        case TOX_EVENT_GROUP_INVITE: {
  ------------------
  |  Branch (538:9): [True: 22, False: 1.70k]
  ------------------
  539|     22|            tox_event_group_invite_free(event->data.group_invite, mem);
  540|     22|            break;
  541|      0|        }
  542|       |
  543|     20|        case TOX_EVENT_GROUP_PEER_JOIN: {
  ------------------
  |  Branch (543:9): [True: 20, False: 1.70k]
  ------------------
  544|     20|            tox_event_group_peer_join_free(event->data.group_peer_join, mem);
  545|     20|            break;
  546|      0|        }
  547|       |
  548|     64|        case TOX_EVENT_GROUP_PEER_EXIT: {
  ------------------
  |  Branch (548:9): [True: 64, False: 1.66k]
  ------------------
  549|     64|            tox_event_group_peer_exit_free(event->data.group_peer_exit, mem);
  550|     64|            break;
  551|      0|        }
  552|       |
  553|     49|        case TOX_EVENT_GROUP_SELF_JOIN: {
  ------------------
  |  Branch (553:9): [True: 49, False: 1.67k]
  ------------------
  554|     49|            tox_event_group_self_join_free(event->data.group_self_join, mem);
  555|     49|            break;
  556|      0|        }
  557|       |
  558|     37|        case TOX_EVENT_GROUP_JOIN_FAIL: {
  ------------------
  |  Branch (558:9): [True: 37, False: 1.69k]
  ------------------
  559|     37|            tox_event_group_join_fail_free(event->data.group_join_fail, mem);
  560|     37|            break;
  561|      0|        }
  562|       |
  563|     35|        case TOX_EVENT_GROUP_MODERATION: {
  ------------------
  |  Branch (563:9): [True: 35, False: 1.69k]
  ------------------
  564|     35|            tox_event_group_moderation_free(event->data.group_moderation, mem);
  565|     35|            break;
  566|      0|        }
  567|       |
  568|      9|        case TOX_EVENT_DHT_GET_NODES_RESPONSE: {
  ------------------
  |  Branch (568:9): [True: 9, False: 1.71k]
  ------------------
  569|      9|            tox_event_dht_nodes_response_free(event->data.dht_nodes_response, mem);
  570|      9|            break;
  571|      0|        }
  572|       |
  573|    109|        case TOX_EVENT_INVALID: {
  ------------------
  |  Branch (573:9): [True: 109, False: 1.61k]
  ------------------
  574|    109|            break;
  575|      0|        }
  576|  1.72k|    }
  577|       |
  578|  1.72k|    event->data.value = nullptr;
  ------------------
  |  |   63|  1.72k|#define nullptr NULL
  ------------------
  579|  1.72k|}
tox_event_pack:
  719|  1.44k|{
  720|  1.44k|    assert(event->type != TOX_EVENT_INVALID);
  721|       |
  722|  1.44k|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (722:12): [True: 1.44k, False: 0]
  ------------------
  723|  1.44k|           && tox_event_type_pack(event->type, bp)
  ------------------
  |  Branch (723:15): [True: 1.44k, False: 0]
  ------------------
  724|  1.44k|           && tox_event_data_pack(event->type, &event->data, bp);
  ------------------
  |  Branch (724:15): [True: 1.44k, False: 0]
  ------------------
  725|  1.44k|}
tox_event_unpack_into:
 1083|  1.72k|{
 1084|  1.72k|    return bin_unpack_array_fixed(bu, 2, nullptr)  //
  ------------------
  |  |   63|  1.72k|#define nullptr NULL
  ------------------
  |  Branch (1084:12): [True: 1.65k, False: 76]
  ------------------
 1085|  1.72k|           && tox_event_type_unpack(&event->type, bu)  //
  ------------------
  |  Branch (1085:15): [True: 1.62k, False: 32]
  ------------------
 1086|  1.72k|           && tox_event_data_unpack(event->type, &event->data, bu, mem);
  ------------------
  |  Branch (1086:15): [True: 1.19k, False: 428]
  ------------------
 1087|  1.72k|}
tox_event.c:tox_event_type_pack:
  583|  1.44k|{
  584|  1.44k|    return bin_pack_u32(bp, (uint32_t)type);
  585|  1.44k|}
tox_event.c:tox_event_data_pack:
  589|  1.44k|{
  590|  1.44k|    switch (type) {
  ------------------
  |  Branch (590:13): [True: 0, False: 1.44k]
  ------------------
  591|     36|        case TOX_EVENT_CONFERENCE_CONNECTED:
  ------------------
  |  Branch (591:9): [True: 36, False: 1.40k]
  ------------------
  592|     36|            return tox_event_conference_connected_pack(data->conference_connected, bp);
  593|       |
  594|     32|        case TOX_EVENT_CONFERENCE_INVITE:
  ------------------
  |  Branch (594:9): [True: 32, False: 1.41k]
  ------------------
  595|     32|            return tox_event_conference_invite_pack(data->conference_invite, bp);
  596|       |
  597|     20|        case TOX_EVENT_CONFERENCE_MESSAGE:
  ------------------
  |  Branch (597:9): [True: 20, False: 1.42k]
  ------------------
  598|     20|            return tox_event_conference_message_pack(data->conference_message, bp);
  599|       |
  600|    168|        case TOX_EVENT_CONFERENCE_PEER_LIST_CHANGED:
  ------------------
  |  Branch (600:9): [True: 168, False: 1.27k]
  ------------------
  601|    168|            return tox_event_conference_peer_list_changed_pack(data->conference_peer_list_changed, bp);
  602|       |
  603|     20|        case TOX_EVENT_CONFERENCE_PEER_NAME:
  ------------------
  |  Branch (603:9): [True: 20, False: 1.42k]
  ------------------
  604|     20|            return tox_event_conference_peer_name_pack(data->conference_peer_name, bp);
  605|       |
  606|     80|        case TOX_EVENT_CONFERENCE_TITLE:
  ------------------
  |  Branch (606:9): [True: 80, False: 1.36k]
  ------------------
  607|     80|            return tox_event_conference_title_pack(data->conference_title, bp);
  608|       |
  609|     94|        case TOX_EVENT_FILE_CHUNK_REQUEST:
  ------------------
  |  Branch (609:9): [True: 94, False: 1.35k]
  ------------------
  610|     94|            return tox_event_file_chunk_request_pack(data->file_chunk_request, bp);
  611|       |
  612|     20|        case TOX_EVENT_FILE_RECV_CHUNK:
  ------------------
  |  Branch (612:9): [True: 20, False: 1.42k]
  ------------------
  613|     20|            return tox_event_file_recv_chunk_pack(data->file_recv_chunk, bp);
  614|       |
  615|     24|        case TOX_EVENT_FILE_RECV_CONTROL:
  ------------------
  |  Branch (615:9): [True: 24, False: 1.42k]
  ------------------
  616|     24|            return tox_event_file_recv_control_pack(data->file_recv_control, bp);
  617|       |
  618|     22|        case TOX_EVENT_FILE_RECV:
  ------------------
  |  Branch (618:9): [True: 22, False: 1.42k]
  ------------------
  619|     22|            return tox_event_file_recv_pack(data->file_recv, bp);
  620|       |
  621|     48|        case TOX_EVENT_FRIEND_CONNECTION_STATUS:
  ------------------
  |  Branch (621:9): [True: 48, False: 1.39k]
  ------------------
  622|     48|            return tox_event_friend_connection_status_pack(data->friend_connection_status, bp);
  623|       |
  624|     20|        case TOX_EVENT_FRIEND_LOSSLESS_PACKET:
  ------------------
  |  Branch (624:9): [True: 20, False: 1.42k]
  ------------------
  625|     20|            return tox_event_friend_lossless_packet_pack(data->friend_lossless_packet, bp);
  626|       |
  627|     28|        case TOX_EVENT_FRIEND_LOSSY_PACKET:
  ------------------
  |  Branch (627:9): [True: 28, False: 1.41k]
  ------------------
  628|     28|            return tox_event_friend_lossy_packet_pack(data->friend_lossy_packet, bp);
  629|       |
  630|     20|        case TOX_EVENT_FRIEND_MESSAGE:
  ------------------
  |  Branch (630:9): [True: 20, False: 1.42k]
  ------------------
  631|     20|            return tox_event_friend_message_pack(data->friend_message, bp);
  632|       |
  633|     40|        case TOX_EVENT_FRIEND_NAME:
  ------------------
  |  Branch (633:9): [True: 40, False: 1.40k]
  ------------------
  634|     40|            return tox_event_friend_name_pack(data->friend_name, bp);
  635|       |
  636|     22|        case TOX_EVENT_FRIEND_READ_RECEIPT:
  ------------------
  |  Branch (636:9): [True: 22, False: 1.42k]
  ------------------
  637|     22|            return tox_event_friend_read_receipt_pack(data->friend_read_receipt, bp);
  638|       |
  639|     20|        case TOX_EVENT_FRIEND_REQUEST:
  ------------------
  |  Branch (639:9): [True: 20, False: 1.42k]
  ------------------
  640|     20|            return tox_event_friend_request_pack(data->friend_request, bp);
  641|       |
  642|     26|        case TOX_EVENT_FRIEND_STATUS:
  ------------------
  |  Branch (642:9): [True: 26, False: 1.41k]
  ------------------
  643|     26|            return tox_event_friend_status_pack(data->friend_status, bp);
  644|       |
  645|     20|        case TOX_EVENT_FRIEND_STATUS_MESSAGE:
  ------------------
  |  Branch (645:9): [True: 20, False: 1.42k]
  ------------------
  646|     20|            return tox_event_friend_status_message_pack(data->friend_status_message, bp);
  647|       |
  648|     30|        case TOX_EVENT_FRIEND_TYPING:
  ------------------
  |  Branch (648:9): [True: 30, False: 1.41k]
  ------------------
  649|     30|            return tox_event_friend_typing_pack(data->friend_typing, bp);
  650|       |
  651|    212|        case TOX_EVENT_SELF_CONNECTION_STATUS:
  ------------------
  |  Branch (651:9): [True: 212, False: 1.23k]
  ------------------
  652|    212|            return tox_event_self_connection_status_pack(data->self_connection_status, bp);
  653|       |
  654|     22|        case TOX_EVENT_GROUP_PEER_NAME:
  ------------------
  |  Branch (654:9): [True: 22, False: 1.42k]
  ------------------
  655|     22|            return tox_event_group_peer_name_pack(data->group_peer_name, bp);
  656|       |
  657|     22|        case TOX_EVENT_GROUP_PEER_STATUS:
  ------------------
  |  Branch (657:9): [True: 22, False: 1.42k]
  ------------------
  658|     22|            return tox_event_group_peer_status_pack(data->group_peer_status, bp);
  659|       |
  660|     28|        case TOX_EVENT_GROUP_TOPIC:
  ------------------
  |  Branch (660:9): [True: 28, False: 1.41k]
  ------------------
  661|     28|            return tox_event_group_topic_pack(data->group_topic, bp);
  662|       |
  663|     20|        case TOX_EVENT_GROUP_PRIVACY_STATE:
  ------------------
  |  Branch (663:9): [True: 20, False: 1.42k]
  ------------------
  664|     20|            return tox_event_group_privacy_state_pack(data->group_privacy_state, bp);
  665|       |
  666|     36|        case TOX_EVENT_GROUP_VOICE_STATE:
  ------------------
  |  Branch (666:9): [True: 36, False: 1.40k]
  ------------------
  667|     36|            return tox_event_group_voice_state_pack(data->group_voice_state, bp);
  668|       |
  669|     20|        case TOX_EVENT_GROUP_TOPIC_LOCK:
  ------------------
  |  Branch (669:9): [True: 20, False: 1.42k]
  ------------------
  670|     20|            return tox_event_group_topic_lock_pack(data->group_topic_lock, bp);
  671|       |
  672|     22|        case TOX_EVENT_GROUP_PEER_LIMIT:
  ------------------
  |  Branch (672:9): [True: 22, False: 1.42k]
  ------------------
  673|     22|            return tox_event_group_peer_limit_pack(data->group_peer_limit, bp);
  674|       |
  675|     20|        case TOX_EVENT_GROUP_PASSWORD:
  ------------------
  |  Branch (675:9): [True: 20, False: 1.42k]
  ------------------
  676|     20|            return tox_event_group_password_pack(data->group_password, bp);
  677|       |
  678|     20|        case TOX_EVENT_GROUP_MESSAGE:
  ------------------
  |  Branch (678:9): [True: 20, False: 1.42k]
  ------------------
  679|     20|            return tox_event_group_message_pack(data->group_message, bp);
  680|       |
  681|     24|        case TOX_EVENT_GROUP_PRIVATE_MESSAGE:
  ------------------
  |  Branch (681:9): [True: 24, False: 1.42k]
  ------------------
  682|     24|            return tox_event_group_private_message_pack(data->group_private_message, bp);
  683|       |
  684|     20|        case TOX_EVENT_GROUP_CUSTOM_PACKET:
  ------------------
  |  Branch (684:9): [True: 20, False: 1.42k]
  ------------------
  685|     20|            return tox_event_group_custom_packet_pack(data->group_custom_packet, bp);
  686|       |
  687|     24|        case TOX_EVENT_GROUP_CUSTOM_PRIVATE_PACKET:
  ------------------
  |  Branch (687:9): [True: 24, False: 1.42k]
  ------------------
  688|     24|            return tox_event_group_custom_private_packet_pack(data->group_custom_private_packet, bp);
  689|       |
  690|     22|        case TOX_EVENT_GROUP_INVITE:
  ------------------
  |  Branch (690:9): [True: 22, False: 1.42k]
  ------------------
  691|     22|            return tox_event_group_invite_pack(data->group_invite, bp);
  692|       |
  693|     20|        case TOX_EVENT_GROUP_PEER_JOIN:
  ------------------
  |  Branch (693:9): [True: 20, False: 1.42k]
  ------------------
  694|     20|            return tox_event_group_peer_join_pack(data->group_peer_join, bp);
  695|       |
  696|     30|        case TOX_EVENT_GROUP_PEER_EXIT:
  ------------------
  |  Branch (696:9): [True: 30, False: 1.41k]
  ------------------
  697|     30|            return tox_event_group_peer_exit_pack(data->group_peer_exit, bp);
  698|       |
  699|     36|        case TOX_EVENT_GROUP_SELF_JOIN:
  ------------------
  |  Branch (699:9): [True: 36, False: 1.40k]
  ------------------
  700|     36|            return tox_event_group_self_join_pack(data->group_self_join, bp);
  701|       |
  702|     36|        case TOX_EVENT_GROUP_JOIN_FAIL:
  ------------------
  |  Branch (702:9): [True: 36, False: 1.40k]
  ------------------
  703|     36|            return tox_event_group_join_fail_pack(data->group_join_fail, bp);
  704|       |
  705|     20|        case TOX_EVENT_GROUP_MODERATION:
  ------------------
  |  Branch (705:9): [True: 20, False: 1.42k]
  ------------------
  706|     20|            return tox_event_group_moderation_pack(data->group_moderation, bp);
  707|       |
  708|      0|        case TOX_EVENT_DHT_GET_NODES_RESPONSE:
  ------------------
  |  Branch (708:9): [True: 0, False: 1.44k]
  ------------------
  709|      0|            return tox_event_dht_nodes_response_pack(data->dht_nodes_response, bp);
  710|       |
  711|      0|        case TOX_EVENT_INVALID:
  ------------------
  |  Branch (711:9): [True: 0, False: 1.44k]
  ------------------
  712|      0|            return false;
  713|  1.44k|    }
  714|       |
  715|      0|    return false;
  716|  1.44k|}
tox_event.c:tox_event_type_unpack:
  945|  1.65k|{
  946|  1.65k|    uint32_t u32;
  947|  1.65k|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (947:12): [True: 1.62k, False: 26]
  ------------------
  948|  1.65k|           && tox_event_type_from_int(u32, val);
  ------------------
  |  Branch (948:15): [True: 1.62k, False: 6]
  ------------------
  949|  1.65k|}
tox_event.c:tox_event_type_from_int:
  729|  1.62k|{
  730|  1.62k|    switch (value) {
  731|    126|        case TOX_EVENT_SELF_CONNECTION_STATUS: {
  ------------------
  |  Branch (731:9): [True: 126, False: 1.50k]
  ------------------
  732|    126|            *out_enum = TOX_EVENT_SELF_CONNECTION_STATUS;
  733|    126|            return true;
  734|      0|        }
  735|       |
  736|     38|        case TOX_EVENT_FRIEND_REQUEST: {
  ------------------
  |  Branch (736:9): [True: 38, False: 1.58k]
  ------------------
  737|     38|            *out_enum = TOX_EVENT_FRIEND_REQUEST;
  738|     38|            return true;
  739|      0|        }
  740|       |
  741|     49|        case TOX_EVENT_FRIEND_CONNECTION_STATUS: {
  ------------------
  |  Branch (741:9): [True: 49, False: 1.57k]
  ------------------
  742|     49|            *out_enum = TOX_EVENT_FRIEND_CONNECTION_STATUS;
  743|     49|            return true;
  744|      0|        }
  745|       |
  746|     34|        case TOX_EVENT_FRIEND_LOSSY_PACKET: {
  ------------------
  |  Branch (746:9): [True: 34, False: 1.59k]
  ------------------
  747|     34|            *out_enum = TOX_EVENT_FRIEND_LOSSY_PACKET;
  748|     34|            return true;
  749|      0|        }
  750|       |
  751|     22|        case TOX_EVENT_FRIEND_LOSSLESS_PACKET: {
  ------------------
  |  Branch (751:9): [True: 22, False: 1.60k]
  ------------------
  752|     22|            *out_enum = TOX_EVENT_FRIEND_LOSSLESS_PACKET;
  753|     22|            return true;
  754|      0|        }
  755|       |
  756|     42|        case TOX_EVENT_FRIEND_NAME: {
  ------------------
  |  Branch (756:9): [True: 42, False: 1.58k]
  ------------------
  757|     42|            *out_enum = TOX_EVENT_FRIEND_NAME;
  758|     42|            return true;
  759|      0|        }
  760|       |
  761|     29|        case TOX_EVENT_FRIEND_STATUS: {
  ------------------
  |  Branch (761:9): [True: 29, False: 1.59k]
  ------------------
  762|     29|            *out_enum = TOX_EVENT_FRIEND_STATUS;
  763|     29|            return true;
  764|      0|        }
  765|       |
  766|     19|        case TOX_EVENT_FRIEND_STATUS_MESSAGE: {
  ------------------
  |  Branch (766:9): [True: 19, False: 1.60k]
  ------------------
  767|     19|            *out_enum = TOX_EVENT_FRIEND_STATUS_MESSAGE;
  768|     19|            return true;
  769|      0|        }
  770|       |
  771|     15|        case TOX_EVENT_FRIEND_MESSAGE: {
  ------------------
  |  Branch (771:9): [True: 15, False: 1.61k]
  ------------------
  772|     15|            *out_enum = TOX_EVENT_FRIEND_MESSAGE;
  773|     15|            return true;
  774|      0|        }
  775|       |
  776|     19|        case TOX_EVENT_FRIEND_READ_RECEIPT: {
  ------------------
  |  Branch (776:9): [True: 19, False: 1.60k]
  ------------------
  777|     19|            *out_enum = TOX_EVENT_FRIEND_READ_RECEIPT;
  778|     19|            return true;
  779|      0|        }
  780|       |
  781|     69|        case TOX_EVENT_FRIEND_TYPING: {
  ------------------
  |  Branch (781:9): [True: 69, False: 1.55k]
  ------------------
  782|     69|            *out_enum = TOX_EVENT_FRIEND_TYPING;
  783|     69|            return true;
  784|      0|        }
  785|       |
  786|    242|        case TOX_EVENT_FILE_CHUNK_REQUEST: {
  ------------------
  |  Branch (786:9): [True: 242, False: 1.38k]
  ------------------
  787|    242|            *out_enum = TOX_EVENT_FILE_CHUNK_REQUEST;
  788|    242|            return true;
  789|      0|        }
  790|       |
  791|     25|        case TOX_EVENT_FILE_RECV: {
  ------------------
  |  Branch (791:9): [True: 25, False: 1.60k]
  ------------------
  792|     25|            *out_enum = TOX_EVENT_FILE_RECV;
  793|     25|            return true;
  794|      0|        }
  795|       |
  796|     28|        case TOX_EVENT_FILE_RECV_CHUNK: {
  ------------------
  |  Branch (796:9): [True: 28, False: 1.59k]
  ------------------
  797|     28|            *out_enum = TOX_EVENT_FILE_RECV_CHUNK;
  798|     28|            return true;
  799|      0|        }
  800|       |
  801|     43|        case TOX_EVENT_FILE_RECV_CONTROL: {
  ------------------
  |  Branch (801:9): [True: 43, False: 1.58k]
  ------------------
  802|     43|            *out_enum = TOX_EVENT_FILE_RECV_CONTROL;
  803|     43|            return true;
  804|      0|        }
  805|       |
  806|     31|        case TOX_EVENT_CONFERENCE_INVITE: {
  ------------------
  |  Branch (806:9): [True: 31, False: 1.59k]
  ------------------
  807|     31|            *out_enum = TOX_EVENT_CONFERENCE_INVITE;
  808|     31|            return true;
  809|      0|        }
  810|       |
  811|     20|        case TOX_EVENT_CONFERENCE_CONNECTED: {
  ------------------
  |  Branch (811:9): [True: 20, False: 1.60k]
  ------------------
  812|     20|            *out_enum = TOX_EVENT_CONFERENCE_CONNECTED;
  813|     20|            return true;
  814|      0|        }
  815|       |
  816|    118|        case TOX_EVENT_CONFERENCE_PEER_LIST_CHANGED: {
  ------------------
  |  Branch (816:9): [True: 118, False: 1.50k]
  ------------------
  817|    118|            *out_enum = TOX_EVENT_CONFERENCE_PEER_LIST_CHANGED;
  818|    118|            return true;
  819|      0|        }
  820|       |
  821|     19|        case TOX_EVENT_CONFERENCE_PEER_NAME: {
  ------------------
  |  Branch (821:9): [True: 19, False: 1.60k]
  ------------------
  822|     19|            *out_enum = TOX_EVENT_CONFERENCE_PEER_NAME;
  823|     19|            return true;
  824|      0|        }
  825|       |
  826|     73|        case TOX_EVENT_CONFERENCE_TITLE: {
  ------------------
  |  Branch (826:9): [True: 73, False: 1.55k]
  ------------------
  827|     73|            *out_enum = TOX_EVENT_CONFERENCE_TITLE;
  828|     73|            return true;
  829|      0|        }
  830|       |
  831|     22|        case TOX_EVENT_CONFERENCE_MESSAGE: {
  ------------------
  |  Branch (831:9): [True: 22, False: 1.60k]
  ------------------
  832|     22|            *out_enum = TOX_EVENT_CONFERENCE_MESSAGE;
  833|     22|            return true;
  834|      0|        }
  835|       |
  836|     27|        case TOX_EVENT_GROUP_PEER_NAME: {
  ------------------
  |  Branch (836:9): [True: 27, False: 1.59k]
  ------------------
  837|     27|            *out_enum = TOX_EVENT_GROUP_PEER_NAME;
  838|     27|            return true;
  839|      0|        }
  840|       |
  841|     24|        case TOX_EVENT_GROUP_PEER_STATUS: {
  ------------------
  |  Branch (841:9): [True: 24, False: 1.60k]
  ------------------
  842|     24|            *out_enum = TOX_EVENT_GROUP_PEER_STATUS;
  843|     24|            return true;
  844|      0|        }
  845|       |
  846|     26|        case TOX_EVENT_GROUP_TOPIC: {
  ------------------
  |  Branch (846:9): [True: 26, False: 1.60k]
  ------------------
  847|     26|            *out_enum = TOX_EVENT_GROUP_TOPIC;
  848|     26|            return true;
  849|      0|        }
  850|       |
  851|     26|        case TOX_EVENT_GROUP_PRIVACY_STATE: {
  ------------------
  |  Branch (851:9): [True: 26, False: 1.60k]
  ------------------
  852|     26|            *out_enum = TOX_EVENT_GROUP_PRIVACY_STATE;
  853|     26|            return true;
  854|      0|        }
  855|       |
  856|     38|        case TOX_EVENT_GROUP_VOICE_STATE: {
  ------------------
  |  Branch (856:9): [True: 38, False: 1.58k]
  ------------------
  857|     38|            *out_enum = TOX_EVENT_GROUP_VOICE_STATE;
  858|     38|            return true;
  859|      0|        }
  860|       |
  861|     26|        case TOX_EVENT_GROUP_TOPIC_LOCK: {
  ------------------
  |  Branch (861:9): [True: 26, False: 1.60k]
  ------------------
  862|     26|            *out_enum = TOX_EVENT_GROUP_TOPIC_LOCK;
  863|     26|            return true;
  864|      0|        }
  865|       |
  866|     14|        case TOX_EVENT_GROUP_PEER_LIMIT: {
  ------------------
  |  Branch (866:9): [True: 14, False: 1.61k]
  ------------------
  867|     14|            *out_enum = TOX_EVENT_GROUP_PEER_LIMIT;
  868|     14|            return true;
  869|      0|        }
  870|       |
  871|     21|        case TOX_EVENT_GROUP_PASSWORD: {
  ------------------
  |  Branch (871:9): [True: 21, False: 1.60k]
  ------------------
  872|     21|            *out_enum = TOX_EVENT_GROUP_PASSWORD;
  873|     21|            return true;
  874|      0|        }
  875|       |
  876|     38|        case TOX_EVENT_GROUP_MESSAGE: {
  ------------------
  |  Branch (876:9): [True: 38, False: 1.58k]
  ------------------
  877|     38|            *out_enum = TOX_EVENT_GROUP_MESSAGE;
  878|     38|            return true;
  879|      0|        }
  880|       |
  881|     24|        case TOX_EVENT_GROUP_PRIVATE_MESSAGE: {
  ------------------
  |  Branch (881:9): [True: 24, False: 1.60k]
  ------------------
  882|     24|            *out_enum = TOX_EVENT_GROUP_PRIVATE_MESSAGE;
  883|     24|            return true;
  884|      0|        }
  885|       |
  886|     16|        case TOX_EVENT_GROUP_CUSTOM_PACKET: {
  ------------------
  |  Branch (886:9): [True: 16, False: 1.61k]
  ------------------
  887|     16|            *out_enum = TOX_EVENT_GROUP_CUSTOM_PACKET;
  888|     16|            return true;
  889|      0|        }
  890|       |
  891|     20|        case TOX_EVENT_GROUP_CUSTOM_PRIVATE_PACKET: {
  ------------------
  |  Branch (891:9): [True: 20, False: 1.60k]
  ------------------
  892|     20|            *out_enum = TOX_EVENT_GROUP_CUSTOM_PRIVATE_PACKET;
  893|     20|            return true;
  894|      0|        }
  895|       |
  896|     22|        case TOX_EVENT_GROUP_INVITE: {
  ------------------
  |  Branch (896:9): [True: 22, False: 1.60k]
  ------------------
  897|     22|            *out_enum = TOX_EVENT_GROUP_INVITE;
  898|     22|            return true;
  899|      0|        }
  900|       |
  901|     20|        case TOX_EVENT_GROUP_PEER_JOIN: {
  ------------------
  |  Branch (901:9): [True: 20, False: 1.60k]
  ------------------
  902|     20|            *out_enum = TOX_EVENT_GROUP_PEER_JOIN;
  903|     20|            return true;
  904|      0|        }
  905|       |
  906|     64|        case TOX_EVENT_GROUP_PEER_EXIT: {
  ------------------
  |  Branch (906:9): [True: 64, False: 1.56k]
  ------------------
  907|     64|            *out_enum = TOX_EVENT_GROUP_PEER_EXIT;
  908|     64|            return true;
  909|      0|        }
  910|       |
  911|     49|        case TOX_EVENT_GROUP_SELF_JOIN: {
  ------------------
  |  Branch (911:9): [True: 49, False: 1.57k]
  ------------------
  912|     49|            *out_enum = TOX_EVENT_GROUP_SELF_JOIN;
  913|     49|            return true;
  914|      0|        }
  915|       |
  916|     37|        case TOX_EVENT_GROUP_JOIN_FAIL: {
  ------------------
  |  Branch (916:9): [True: 37, False: 1.58k]
  ------------------
  917|     37|            *out_enum = TOX_EVENT_GROUP_JOIN_FAIL;
  918|     37|            return true;
  919|      0|        }
  920|       |
  921|     35|        case TOX_EVENT_GROUP_MODERATION: {
  ------------------
  |  Branch (921:9): [True: 35, False: 1.59k]
  ------------------
  922|     35|            *out_enum = TOX_EVENT_GROUP_MODERATION;
  923|     35|            return true;
  924|      0|        }
  925|       |
  926|      9|        case TOX_EVENT_DHT_GET_NODES_RESPONSE: {
  ------------------
  |  Branch (926:9): [True: 9, False: 1.61k]
  ------------------
  927|      9|            *out_enum = TOX_EVENT_DHT_GET_NODES_RESPONSE;
  928|      9|            return true;
  929|      0|        }
  930|       |
  931|      1|        case TOX_EVENT_INVALID: {
  ------------------
  |  Branch (931:9): [True: 1, False: 1.62k]
  ------------------
  932|      1|            *out_enum = TOX_EVENT_INVALID;
  933|      1|            return true;
  934|      0|        }
  935|       |
  936|      6|        default: {
  ------------------
  |  Branch (936:9): [True: 6, False: 1.62k]
  ------------------
  937|      6|            *out_enum = TOX_EVENT_INVALID;
  938|      6|            return false;
  939|      0|        }
  940|  1.62k|    }
  941|  1.62k|}
tox_event.c:tox_event_data_unpack:
  953|  1.62k|{
  954|  1.62k|    switch (type) {
  ------------------
  |  Branch (954:13): [True: 0, False: 1.62k]
  ------------------
  955|     20|        case TOX_EVENT_CONFERENCE_CONNECTED:
  ------------------
  |  Branch (955:9): [True: 20, False: 1.60k]
  ------------------
  956|     20|            return tox_event_conference_connected_unpack(&data->conference_connected, bu, mem);
  957|       |
  958|     31|        case TOX_EVENT_CONFERENCE_INVITE:
  ------------------
  |  Branch (958:9): [True: 31, False: 1.58k]
  ------------------
  959|     31|            return tox_event_conference_invite_unpack(&data->conference_invite, bu, mem);
  960|       |
  961|     22|        case TOX_EVENT_CONFERENCE_MESSAGE:
  ------------------
  |  Branch (961:9): [True: 22, False: 1.59k]
  ------------------
  962|     22|            return tox_event_conference_message_unpack(&data->conference_message, bu, mem);
  963|       |
  964|    118|        case TOX_EVENT_CONFERENCE_PEER_LIST_CHANGED:
  ------------------
  |  Branch (964:9): [True: 118, False: 1.50k]
  ------------------
  965|    118|            return tox_event_conference_peer_list_changed_unpack(&data->conference_peer_list_changed, bu, mem);
  966|       |
  967|     19|        case TOX_EVENT_CONFERENCE_PEER_NAME:
  ------------------
  |  Branch (967:9): [True: 19, False: 1.60k]
  ------------------
  968|     19|            return tox_event_conference_peer_name_unpack(&data->conference_peer_name, bu, mem);
  969|       |
  970|     73|        case TOX_EVENT_CONFERENCE_TITLE:
  ------------------
  |  Branch (970:9): [True: 73, False: 1.54k]
  ------------------
  971|     73|            return tox_event_conference_title_unpack(&data->conference_title, bu, mem);
  972|       |
  973|    242|        case TOX_EVENT_FILE_CHUNK_REQUEST:
  ------------------
  |  Branch (973:9): [True: 242, False: 1.37k]
  ------------------
  974|    242|            return tox_event_file_chunk_request_unpack(&data->file_chunk_request, bu, mem);
  975|       |
  976|     28|        case TOX_EVENT_FILE_RECV_CHUNK:
  ------------------
  |  Branch (976:9): [True: 28, False: 1.59k]
  ------------------
  977|     28|            return tox_event_file_recv_chunk_unpack(&data->file_recv_chunk, bu, mem);
  978|       |
  979|     43|        case TOX_EVENT_FILE_RECV_CONTROL:
  ------------------
  |  Branch (979:9): [True: 43, False: 1.57k]
  ------------------
  980|     43|            return tox_event_file_recv_control_unpack(&data->file_recv_control, bu, mem);
  981|       |
  982|     25|        case TOX_EVENT_FILE_RECV:
  ------------------
  |  Branch (982:9): [True: 25, False: 1.59k]
  ------------------
  983|     25|            return tox_event_file_recv_unpack(&data->file_recv, bu, mem);
  984|       |
  985|     49|        case TOX_EVENT_FRIEND_CONNECTION_STATUS:
  ------------------
  |  Branch (985:9): [True: 49, False: 1.57k]
  ------------------
  986|     49|            return tox_event_friend_connection_status_unpack(&data->friend_connection_status, bu, mem);
  987|       |
  988|     22|        case TOX_EVENT_FRIEND_LOSSLESS_PACKET:
  ------------------
  |  Branch (988:9): [True: 22, False: 1.59k]
  ------------------
  989|     22|            return tox_event_friend_lossless_packet_unpack(&data->friend_lossless_packet, bu, mem);
  990|       |
  991|     34|        case TOX_EVENT_FRIEND_LOSSY_PACKET:
  ------------------
  |  Branch (991:9): [True: 34, False: 1.58k]
  ------------------
  992|     34|            return tox_event_friend_lossy_packet_unpack(&data->friend_lossy_packet, bu, mem);
  993|       |
  994|     15|        case TOX_EVENT_FRIEND_MESSAGE:
  ------------------
  |  Branch (994:9): [True: 15, False: 1.60k]
  ------------------
  995|     15|            return tox_event_friend_message_unpack(&data->friend_message, bu, mem);
  996|       |
  997|     42|        case TOX_EVENT_FRIEND_NAME:
  ------------------
  |  Branch (997:9): [True: 42, False: 1.57k]
  ------------------
  998|     42|            return tox_event_friend_name_unpack(&data->friend_name, bu, mem);
  999|       |
 1000|     19|        case TOX_EVENT_FRIEND_READ_RECEIPT:
  ------------------
  |  Branch (1000:9): [True: 19, False: 1.60k]
  ------------------
 1001|     19|            return tox_event_friend_read_receipt_unpack(&data->friend_read_receipt, bu, mem);
 1002|       |
 1003|     38|        case TOX_EVENT_FRIEND_REQUEST:
  ------------------
  |  Branch (1003:9): [True: 38, False: 1.58k]
  ------------------
 1004|     38|            return tox_event_friend_request_unpack(&data->friend_request, bu, mem);
 1005|       |
 1006|     19|        case TOX_EVENT_FRIEND_STATUS_MESSAGE:
  ------------------
  |  Branch (1006:9): [True: 19, False: 1.60k]
  ------------------
 1007|     19|            return tox_event_friend_status_message_unpack(&data->friend_status_message, bu, mem);
 1008|       |
 1009|     29|        case TOX_EVENT_FRIEND_STATUS:
  ------------------
  |  Branch (1009:9): [True: 29, False: 1.59k]
  ------------------
 1010|     29|            return tox_event_friend_status_unpack(&data->friend_status, bu, mem);
 1011|       |
 1012|     69|        case TOX_EVENT_FRIEND_TYPING:
  ------------------
  |  Branch (1012:9): [True: 69, False: 1.55k]
  ------------------
 1013|     69|            return tox_event_friend_typing_unpack(&data->friend_typing, bu, mem);
 1014|       |
 1015|    126|        case TOX_EVENT_SELF_CONNECTION_STATUS:
  ------------------
  |  Branch (1015:9): [True: 126, False: 1.49k]
  ------------------
 1016|    126|            return tox_event_self_connection_status_unpack(&data->self_connection_status, bu, mem);
 1017|       |
 1018|     27|        case TOX_EVENT_GROUP_PEER_NAME:
  ------------------
  |  Branch (1018:9): [True: 27, False: 1.59k]
  ------------------
 1019|     27|            return tox_event_group_peer_name_unpack(&data->group_peer_name, bu, mem);
 1020|       |
 1021|     24|        case TOX_EVENT_GROUP_PEER_STATUS:
  ------------------
  |  Branch (1021:9): [True: 24, False: 1.59k]
  ------------------
 1022|     24|            return tox_event_group_peer_status_unpack(&data->group_peer_status, bu, mem);
 1023|       |
 1024|     26|        case TOX_EVENT_GROUP_TOPIC:
  ------------------
  |  Branch (1024:9): [True: 26, False: 1.59k]
  ------------------
 1025|     26|            return tox_event_group_topic_unpack(&data->group_topic, bu, mem);
 1026|       |
 1027|     26|        case TOX_EVENT_GROUP_PRIVACY_STATE:
  ------------------
  |  Branch (1027:9): [True: 26, False: 1.59k]
  ------------------
 1028|     26|            return tox_event_group_privacy_state_unpack(&data->group_privacy_state, bu, mem);
 1029|       |
 1030|     38|        case TOX_EVENT_GROUP_VOICE_STATE:
  ------------------
  |  Branch (1030:9): [True: 38, False: 1.58k]
  ------------------
 1031|     38|            return tox_event_group_voice_state_unpack(&data->group_voice_state, bu, mem);
 1032|       |
 1033|     26|        case TOX_EVENT_GROUP_TOPIC_LOCK:
  ------------------
  |  Branch (1033:9): [True: 26, False: 1.59k]
  ------------------
 1034|     26|            return tox_event_group_topic_lock_unpack(&data->group_topic_lock, bu, mem);
 1035|       |
 1036|     14|        case TOX_EVENT_GROUP_PEER_LIMIT:
  ------------------
  |  Branch (1036:9): [True: 14, False: 1.60k]
  ------------------
 1037|     14|            return tox_event_group_peer_limit_unpack(&data->group_peer_limit, bu, mem);
 1038|       |
 1039|     21|        case TOX_EVENT_GROUP_PASSWORD:
  ------------------
  |  Branch (1039:9): [True: 21, False: 1.59k]
  ------------------
 1040|     21|            return tox_event_group_password_unpack(&data->group_password, bu, mem);
 1041|       |
 1042|     38|        case TOX_EVENT_GROUP_MESSAGE:
  ------------------
  |  Branch (1042:9): [True: 38, False: 1.58k]
  ------------------
 1043|     38|            return tox_event_group_message_unpack(&data->group_message, bu, mem);
 1044|       |
 1045|     24|        case TOX_EVENT_GROUP_PRIVATE_MESSAGE:
  ------------------
  |  Branch (1045:9): [True: 24, False: 1.59k]
  ------------------
 1046|     24|            return tox_event_group_private_message_unpack(&data->group_private_message, bu, mem);
 1047|       |
 1048|     16|        case TOX_EVENT_GROUP_CUSTOM_PACKET:
  ------------------
  |  Branch (1048:9): [True: 16, False: 1.60k]
  ------------------
 1049|     16|            return tox_event_group_custom_packet_unpack(&data->group_custom_packet, bu, mem);
 1050|       |
 1051|     20|        case TOX_EVENT_GROUP_CUSTOM_PRIVATE_PACKET:
  ------------------
  |  Branch (1051:9): [True: 20, False: 1.60k]
  ------------------
 1052|     20|            return tox_event_group_custom_private_packet_unpack(&data->group_custom_private_packet, bu, mem);
 1053|       |
 1054|     22|        case TOX_EVENT_GROUP_INVITE:
  ------------------
  |  Branch (1054:9): [True: 22, False: 1.59k]
  ------------------
 1055|     22|            return tox_event_group_invite_unpack(&data->group_invite, bu, mem);
 1056|       |
 1057|     20|        case TOX_EVENT_GROUP_PEER_JOIN:
  ------------------
  |  Branch (1057:9): [True: 20, False: 1.60k]
  ------------------
 1058|     20|            return tox_event_group_peer_join_unpack(&data->group_peer_join, bu, mem);
 1059|       |
 1060|     64|        case TOX_EVENT_GROUP_PEER_EXIT:
  ------------------
  |  Branch (1060:9): [True: 64, False: 1.55k]
  ------------------
 1061|     64|            return tox_event_group_peer_exit_unpack(&data->group_peer_exit, bu, mem);
 1062|       |
 1063|     49|        case TOX_EVENT_GROUP_SELF_JOIN:
  ------------------
  |  Branch (1063:9): [True: 49, False: 1.57k]
  ------------------
 1064|     49|            return tox_event_group_self_join_unpack(&data->group_self_join, bu, mem);
 1065|       |
 1066|     37|        case TOX_EVENT_GROUP_JOIN_FAIL:
  ------------------
  |  Branch (1066:9): [True: 37, False: 1.58k]
  ------------------
 1067|     37|            return tox_event_group_join_fail_unpack(&data->group_join_fail, bu, mem);
 1068|       |
 1069|     35|        case TOX_EVENT_GROUP_MODERATION:
  ------------------
  |  Branch (1069:9): [True: 35, False: 1.58k]
  ------------------
 1070|     35|            return tox_event_group_moderation_unpack(&data->group_moderation, bu, mem);
 1071|       |
 1072|      9|        case TOX_EVENT_DHT_GET_NODES_RESPONSE:
  ------------------
  |  Branch (1072:9): [True: 9, False: 1.61k]
  ------------------
 1073|      9|            return tox_event_dht_nodes_response_unpack(&data->dht_nodes_response, bu, mem);
 1074|       |
 1075|      1|        case TOX_EVENT_INVALID:
  ------------------
  |  Branch (1075:9): [True: 1, False: 1.61k]
  ------------------
 1076|      1|            return false;
 1077|  1.62k|    }
 1078|       |
 1079|      0|    return false;
 1080|  1.62k|}

tox_events_get_size:
   73|    728|{
   74|    728|    return events == nullptr ? 0 : events->events_size;
  ------------------
  |  |   63|    728|#define nullptr NULL
  ------------------
  |  Branch (74:12): [True: 0, False: 728]
  ------------------
   75|    728|}
tox_events_bytes_size:
  126|    182|{
  127|    182|    return bin_pack_obj_size(tox_events_pack_handler, events, nullptr);
  ------------------
  |  |   63|    182|#define nullptr NULL
  ------------------
  128|    182|}
tox_events_get_bytes:
  131|    182|{
  132|    182|    return bin_pack_obj(tox_events_pack_handler, events, nullptr, bytes, UINT32_MAX);
  ------------------
  |  |   63|    182|#define nullptr NULL
  ------------------
  133|    182|}
tox_events_load:
  164|    785|{
  165|    785|    Tox_Events *events = (Tox_Events *)mem_alloc(sys->mem, sizeof(Tox_Events));
  166|       |
  167|    785|    if (events == nullptr) {
  ------------------
  |  |   63|    785|#define nullptr NULL
  ------------------
  |  Branch (167:9): [True: 1, False: 784]
  ------------------
  168|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  169|      1|    }
  170|       |
  171|    784|    *events = (Tox_Events) {
  172|    784|        nullptr
  ------------------
  |  |   63|    784|#define nullptr NULL
  ------------------
  173|    784|    };
  174|    784|    events->mem = sys->mem;
  175|       |
  176|    784|    if (!bin_unpack_obj(sys->mem, tox_events_unpack_handler, events, bytes, bytes_size)) {
  ------------------
  |  Branch (176:9): [True: 602, False: 182]
  ------------------
  177|    602|        tox_events_free(events);
  178|    602|        return nullptr;
  ------------------
  |  |   63|    602|#define nullptr NULL
  ------------------
  179|    602|    }
  180|       |
  181|    182|    return events;
  182|    784|}
tox_events.c:tox_events_pack_handler:
  120|    364|{
  121|    364|    const Tox_Events *events = (const Tox_Events *)obj;
  122|    364|    return bin_pack_obj_array(bp, tox_event_pack_handler, tox_events_get_events(events), tox_events_get_size(events), logger);
  123|    364|}
tox_events.c:tox_event_pack_handler:
  112|  1.44k|{
  113|  1.44k|    const Tox_Event *events = (const Tox_Event *)arr;
  114|  1.44k|    assert(events != nullptr);
  115|  1.44k|    return tox_event_pack(&events[index], bp);
  116|  1.44k|}
tox_events.c:tox_events_get_events:
   79|    364|{
   80|    364|    return events == nullptr ? nullptr : events->events;
  ------------------
  |  |   63|    364|#define nullptr NULL
  ------------------
                  return events == nullptr ? nullptr : events->events;
  ------------------
  |  |   63|    364|#define nullptr NULL
  ------------------
  |  Branch (80:12): [True: 0, False: 364]
  ------------------
   81|    364|}
tox_events.c:tox_events_unpack_handler:
  137|    784|{
  138|    784|    Tox_Events *events = (Tox_Events *)obj;
  139|       |
  140|    784|    uint32_t size;
  141|    784|    if (!bin_unpack_array(bu, &size)) {
  ------------------
  |  Branch (141:9): [True: 65, False: 719]
  ------------------
  142|     65|        return false;
  143|     65|    }
  144|       |
  145|  1.91k|    for (uint32_t i = 0; i < size; ++i) {
  ------------------
  |  Branch (145:26): [True: 1.72k, False: 182]
  ------------------
  146|  1.72k|        Tox_Event event = {TOX_EVENT_INVALID};
  147|  1.72k|        if (!tox_event_unpack_into(&event, bu, events->mem)) {
  ------------------
  |  Branch (147:13): [True: 536, False: 1.19k]
  ------------------
  148|    536|            tox_event_destruct(&event, events->mem);
  149|    536|            return false;
  150|    536|        }
  151|       |
  152|  1.19k|        if (!tox_events_add(events, &event)) {
  ------------------
  |  Branch (152:13): [True: 1, False: 1.19k]
  ------------------
  153|      1|            tox_event_destruct(&event, events->mem);
  154|      1|            return false;
  155|      1|        }
  156|  1.19k|    }
  157|       |
  158|       |    // Invariant: if all adds worked, the events size must be the input array size.
  159|    182|    assert(tox_events_get_size(events) == size);
  160|    182|    return true;
  161|    182|}

LLVMFuzzerTestOneInput:
   91|    788|{
   92|    788|    TestUnpack(Fuzz_Data(data, size));
   93|    788|    return 0;
   94|    788|}
tox_events_fuzz_test.cc:_ZN12_GLOBAL__N_110TestUnpackE9Fuzz_Data:
   14|    788|{
   15|       |    // 2 bytes: size of the events data
   16|    788|    CONSUME_OR_RETURN(const uint8_t *events_size_bytes, data, sizeof(uint16_t));
  ------------------
  |  |  139|    788|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 1, False: 787]
  |  |  ------------------
  |  |  140|      1|        return;                              \
  |  |  141|      1|    }                                        \
  |  |  142|    788|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   17|    787|    uint16_t events_size;
   18|    787|    std::memcpy(&events_size, events_size_bytes, sizeof(uint16_t));
   19|       |
   20|       |    // events_size bytes: events data (max 64K)
   21|    787|    CONSUME_OR_RETURN(const uint8_t *events_data, data, events_size);
  ------------------
  |  |  139|    787|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 1, False: 786]
  |  |  ------------------
  |  |  140|      1|        return;                              \
  |  |  141|      1|    }                                        \
  |  |  142|    787|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   22|       |
   23|    786|    if (data.empty()) {
  ------------------
  |  Branch (23:9): [True: 1, False: 785]
  ------------------
   24|       |        // If there's no more input, no malloc failure paths can possibly be
   25|       |        // tested, so we ignore this input.
   26|      1|        return;
   27|      1|    }
   28|       |
   29|       |    // rest of the fuzz data is input for malloc
   30|    785|    Fuzz_System sys{data};
   31|       |
   32|    785|    Tox_Dispatch *dispatch = tox_dispatch_new(nullptr);
   33|    785|    assert(dispatch != nullptr);
   34|       |
   35|    785|    auto ignore = [](auto *event, void *user_data) {};
   36|    785|    tox_events_callback_conference_connected(dispatch, ignore);
   37|    785|    tox_events_callback_conference_invite(dispatch, ignore);
   38|    785|    tox_events_callback_conference_message(dispatch, ignore);
   39|    785|    tox_events_callback_conference_peer_list_changed(dispatch, ignore);
   40|    785|    tox_events_callback_conference_peer_name(dispatch, ignore);
   41|    785|    tox_events_callback_conference_title(dispatch, ignore);
   42|    785|    tox_events_callback_file_chunk_request(dispatch, ignore);
   43|    785|    tox_events_callback_file_recv(dispatch, ignore);
   44|    785|    tox_events_callback_file_recv_chunk(dispatch, ignore);
   45|    785|    tox_events_callback_file_recv_control(dispatch, ignore);
   46|    785|    tox_events_callback_friend_connection_status(dispatch, ignore);
   47|    785|    tox_events_callback_friend_lossless_packet(dispatch, ignore);
   48|    785|    tox_events_callback_friend_lossy_packet(dispatch, ignore);
   49|    785|    tox_events_callback_friend_message(dispatch, ignore);
   50|    785|    tox_events_callback_friend_name(dispatch, ignore);
   51|    785|    tox_events_callback_friend_read_receipt(dispatch, ignore);
   52|    785|    tox_events_callback_friend_request(dispatch, ignore);
   53|    785|    tox_events_callback_friend_status(dispatch, ignore);
   54|    785|    tox_events_callback_friend_status_message(dispatch, ignore);
   55|    785|    tox_events_callback_friend_typing(dispatch, ignore);
   56|    785|    tox_events_callback_self_connection_status(dispatch, ignore);
   57|    785|    tox_events_callback_group_peer_name(dispatch, ignore);
   58|    785|    tox_events_callback_group_peer_status(dispatch, ignore);
   59|    785|    tox_events_callback_group_topic(dispatch, ignore);
   60|    785|    tox_events_callback_group_privacy_state(dispatch, ignore);
   61|    785|    tox_events_callback_group_voice_state(dispatch, ignore);
   62|    785|    tox_events_callback_group_topic_lock(dispatch, ignore);
   63|    785|    tox_events_callback_group_peer_limit(dispatch, ignore);
   64|    785|    tox_events_callback_group_password(dispatch, ignore);
   65|    785|    tox_events_callback_group_message(dispatch, ignore);
   66|    785|    tox_events_callback_group_private_message(dispatch, ignore);
   67|    785|    tox_events_callback_group_custom_packet(dispatch, ignore);
   68|    785|    tox_events_callback_group_custom_private_packet(dispatch, ignore);
   69|    785|    tox_events_callback_group_invite(dispatch, ignore);
   70|    785|    tox_events_callback_group_peer_join(dispatch, ignore);
   71|    785|    tox_events_callback_group_peer_exit(dispatch, ignore);
   72|    785|    tox_events_callback_group_self_join(dispatch, ignore);
   73|    785|    tox_events_callback_group_join_fail(dispatch, ignore);
   74|    785|    tox_events_callback_group_moderation(dispatch, ignore);
   75|       |
   76|    785|    Tox_Events *events = tox_events_load(sys.sys.get(), events_data, events_size);
   77|    785|    if (events) {
  ------------------
  |  Branch (77:9): [True: 182, False: 603]
  ------------------
   78|    182|        std::vector<uint8_t> packed(tox_events_bytes_size(events));
   79|    182|        tox_events_get_bytes(events, packed.data());
   80|       |
   81|    182|        tox_dispatch_invoke(dispatch, events, nullptr);
   82|    182|    }
   83|    785|    tox_events_free(events);
   84|    785|    tox_dispatch_free(dispatch);
   85|    785|}
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK30Tox_Event_Conference_ConnectedEEDaPT_Pv:
   35|     18|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK27Tox_Event_Conference_InviteEEDaPT_Pv:
   35|     16|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK28Tox_Event_Conference_MessageEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK38Tox_Event_Conference_Peer_List_ChangedEEDaPT_Pv:
   35|     84|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK30Tox_Event_Conference_Peer_NameEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK26Tox_Event_Conference_TitleEEDaPT_Pv:
   35|     40|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK28Tox_Event_File_Chunk_RequestEEDaPT_Pv:
   35|     47|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK19Tox_Event_File_RecvEEDaPT_Pv:
   35|     11|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK25Tox_Event_File_Recv_ChunkEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK27Tox_Event_File_Recv_ControlEEDaPT_Pv:
   35|     12|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK34Tox_Event_Friend_Connection_StatusEEDaPT_Pv:
   35|     24|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK32Tox_Event_Friend_Lossless_PacketEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK29Tox_Event_Friend_Lossy_PacketEEDaPT_Pv:
   35|     14|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK24Tox_Event_Friend_MessageEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK21Tox_Event_Friend_NameEEDaPT_Pv:
   35|     20|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK29Tox_Event_Friend_Read_ReceiptEEDaPT_Pv:
   35|     11|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK24Tox_Event_Friend_RequestEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK23Tox_Event_Friend_StatusEEDaPT_Pv:
   35|     13|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK31Tox_Event_Friend_Status_MessageEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK23Tox_Event_Friend_TypingEEDaPT_Pv:
   35|     15|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK32Tox_Event_Self_Connection_StatusEEDaPT_Pv:
   35|    106|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK25Tox_Event_Group_Peer_NameEEDaPT_Pv:
   35|     11|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK27Tox_Event_Group_Peer_StatusEEDaPT_Pv:
   35|     11|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK21Tox_Event_Group_TopicEEDaPT_Pv:
   35|     14|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK29Tox_Event_Group_Privacy_StateEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK27Tox_Event_Group_Voice_StateEEDaPT_Pv:
   35|     18|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK26Tox_Event_Group_Topic_LockEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK26Tox_Event_Group_Peer_LimitEEDaPT_Pv:
   35|     11|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK24Tox_Event_Group_PasswordEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK23Tox_Event_Group_MessageEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK31Tox_Event_Group_Private_MessageEEDaPT_Pv:
   35|     12|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK29Tox_Event_Group_Custom_PacketEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK37Tox_Event_Group_Custom_Private_PacketEEDaPT_Pv:
   35|     12|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK22Tox_Event_Group_InviteEEDaPT_Pv:
   35|     11|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK25Tox_Event_Group_Peer_JoinEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK25Tox_Event_Group_Peer_ExitEEDaPT_Pv:
   35|     15|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK25Tox_Event_Group_Self_JoinEEDaPT_Pv:
   35|     18|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK25Tox_Event_Group_Join_FailEEDaPT_Pv:
   35|     18|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK26Tox_Event_Group_ModerationEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};

tox_conference_type_pack:
   13|     32|{
   14|     32|    return bin_pack_u32(bp, (uint32_t)val);
   15|     32|}
tox_connection_pack:
   17|    260|{
   18|    260|    return bin_pack_u32(bp, (uint32_t)val);
   19|    260|}
tox_file_control_pack:
   21|     24|{
   22|     24|    return bin_pack_u32(bp, (uint32_t)val);
   23|     24|}
tox_message_type_pack:
   25|     84|{
   26|     84|    return bin_pack_u32(bp, (uint32_t)val);
   27|     84|}
tox_user_status_pack:
   29|     48|{
   30|     48|    return bin_pack_u32(bp, (uint32_t)val);
   31|     48|}
tox_group_privacy_state_pack:
   33|     20|{
   34|     20|    return bin_pack_u32(bp, (uint32_t)val);
   35|     20|}
tox_group_voice_state_pack:
   37|     36|{
   38|     36|    return bin_pack_u32(bp, (uint32_t)val);
   39|     36|}
tox_group_topic_lock_pack:
   41|     20|{
   42|     20|    return bin_pack_u32(bp, (uint32_t)val);
   43|     20|}
tox_group_join_fail_pack:
   45|     36|{
   46|     36|    return bin_pack_u32(bp, (uint32_t)val);
   47|     36|}
tox_group_mod_event_pack:
   49|     20|{
   50|     20|    return bin_pack_u32(bp, (uint32_t)val);
   51|     20|}
tox_group_exit_type_pack:
   53|     30|{
   54|     30|    return bin_pack_u32(bp, (uint32_t)val);
   55|     30|}

tox_conference_type_unpack:
   34|     28|{
   35|     28|    uint32_t u32;
   36|     28|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (36:12): [True: 27, False: 1]
  ------------------
   37|     28|           && tox_conference_type_from_int(u32, val);
  ------------------
  |  Branch (37:15): [True: 26, False: 1]
  ------------------
   38|     28|}
tox_connection_unpack:
   67|    170|{
   68|    170|    uint32_t u32;
   69|    170|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (69:12): [True: 168, False: 2]
  ------------------
   70|    170|           && tox_connection_from_int(u32, val);
  ------------------
  |  Branch (70:15): [True: 167, False: 1]
  ------------------
   71|    170|}
tox_file_control_unpack:
  100|     37|{
  101|     37|    uint32_t u32;
  102|     37|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (102:12): [True: 36, False: 1]
  ------------------
  103|     37|           && tox_file_control_from_int(u32, val);
  ------------------
  |  Branch (103:15): [True: 35, False: 1]
  ------------------
  104|     37|}
tox_message_type_unpack:
  128|     81|{
  129|     81|    uint32_t u32;
  130|     81|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (130:12): [True: 75, False: 6]
  ------------------
  131|     81|           && tox_message_type_from_int(u32, val);
  ------------------
  |  Branch (131:15): [True: 72, False: 3]
  ------------------
  132|     81|}
tox_user_status_unpack:
  161|     43|{
  162|     43|    uint32_t u32;
  163|     43|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (163:12): [True: 39, False: 4]
  ------------------
  164|     43|           && tox_user_status_from_int(u32, val);
  ------------------
  |  Branch (164:15): [True: 38, False: 1]
  ------------------
  165|     43|}
tox_group_privacy_state_unpack:
  186|     22|{
  187|     22|    uint32_t u32;
  188|     22|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (188:12): [True: 21, False: 1]
  ------------------
  189|     22|           && tox_group_privacy_state_from_int(u32, val);
  ------------------
  |  Branch (189:15): [True: 20, False: 1]
  ------------------
  190|     22|}
tox_group_voice_state_unpack:
  214|     33|{
  215|     33|    uint32_t u32;
  216|     33|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (216:12): [True: 32, False: 1]
  ------------------
  217|     33|           && tox_group_voice_state_from_int(u32, val);
  ------------------
  |  Branch (217:15): [True: 31, False: 1]
  ------------------
  218|     33|}
tox_group_topic_lock_unpack:
  239|     22|{
  240|     22|    uint32_t u32;
  241|     22|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (241:12): [True: 21, False: 1]
  ------------------
  242|     22|           && tox_group_topic_lock_from_int(u32, val);
  ------------------
  |  Branch (242:15): [True: 20, False: 1]
  ------------------
  243|     22|}
tox_group_join_fail_unpack:
  268|     33|{
  269|     33|    uint32_t u32;
  270|     33|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (270:12): [True: 31, False: 2]
  ------------------
  271|     33|           && tox_group_join_fail_from_int(u32, val);
  ------------------
  |  Branch (271:15): [True: 30, False: 1]
  ------------------
  272|     33|}
tox_group_mod_event_unpack:
  301|     27|{
  302|     27|    uint32_t u32;
  303|     27|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (303:12): [True: 25, False: 2]
  ------------------
  304|     27|           && tox_group_mod_event_from_int(u32, val);
  ------------------
  |  Branch (304:15): [True: 23, False: 2]
  ------------------
  305|     27|}
tox_group_exit_type_unpack:
  342|     59|{
  343|     59|    uint32_t u32;
  344|     59|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (344:12): [True: 58, False: 1]
  ------------------
  345|     59|           && tox_group_exit_type_from_int(u32, val);
  ------------------
  |  Branch (345:15): [True: 57, False: 1]
  ------------------
  346|     59|}
tox_unpack.c:tox_conference_type_from_int:
   15|     27|{
   16|     27|    switch (value) {
   17|     16|        case TOX_CONFERENCE_TYPE_TEXT: {
  ------------------
  |  Branch (17:9): [True: 16, False: 11]
  ------------------
   18|     16|            *out_enum = TOX_CONFERENCE_TYPE_TEXT;
   19|     16|            return true;
   20|      0|        }
   21|       |
   22|     10|        case TOX_CONFERENCE_TYPE_AV: {
  ------------------
  |  Branch (22:9): [True: 10, False: 17]
  ------------------
   23|     10|            *out_enum = TOX_CONFERENCE_TYPE_AV;
   24|     10|            return true;
   25|      0|        }
   26|       |
   27|      1|        default: {
  ------------------
  |  Branch (27:9): [True: 1, False: 26]
  ------------------
   28|      1|            *out_enum = TOX_CONFERENCE_TYPE_TEXT;
   29|      1|            return false;
   30|      0|        }
   31|     27|    }
   32|     27|}
tox_unpack.c:tox_connection_from_int:
   42|    168|{
   43|    168|    switch (value) {
   44|    102|        case TOX_CONNECTION_NONE: {
  ------------------
  |  Branch (44:9): [True: 102, False: 66]
  ------------------
   45|    102|            *out_enum = TOX_CONNECTION_NONE;
   46|    102|            return true;
   47|      0|        }
   48|       |
   49|     48|        case TOX_CONNECTION_TCP: {
  ------------------
  |  Branch (49:9): [True: 48, False: 120]
  ------------------
   50|     48|            *out_enum = TOX_CONNECTION_TCP;
   51|     48|            return true;
   52|      0|        }
   53|       |
   54|     17|        case TOX_CONNECTION_UDP: {
  ------------------
  |  Branch (54:9): [True: 17, False: 151]
  ------------------
   55|     17|            *out_enum = TOX_CONNECTION_UDP;
   56|     17|            return true;
   57|      0|        }
   58|       |
   59|      1|        default: {
  ------------------
  |  Branch (59:9): [True: 1, False: 167]
  ------------------
   60|      1|            *out_enum = TOX_CONNECTION_NONE;
   61|      1|            return false;
   62|      0|        }
   63|    168|    }
   64|    168|}
tox_unpack.c:tox_file_control_from_int:
   75|     36|{
   76|     36|    switch (value) {
   77|     12|        case TOX_FILE_CONTROL_RESUME: {
  ------------------
  |  Branch (77:9): [True: 12, False: 24]
  ------------------
   78|     12|            *out_enum = TOX_FILE_CONTROL_RESUME;
   79|     12|            return true;
   80|      0|        }
   81|       |
   82|     11|        case TOX_FILE_CONTROL_PAUSE: {
  ------------------
  |  Branch (82:9): [True: 11, False: 25]
  ------------------
   83|     11|            *out_enum = TOX_FILE_CONTROL_PAUSE;
   84|     11|            return true;
   85|      0|        }
   86|       |
   87|     12|        case TOX_FILE_CONTROL_CANCEL: {
  ------------------
  |  Branch (87:9): [True: 12, False: 24]
  ------------------
   88|     12|            *out_enum = TOX_FILE_CONTROL_CANCEL;
   89|     12|            return true;
   90|      0|        }
   91|       |
   92|      1|        default: {
  ------------------
  |  Branch (92:9): [True: 1, False: 35]
  ------------------
   93|      1|            *out_enum = TOX_FILE_CONTROL_RESUME;
   94|      1|            return false;
   95|      0|        }
   96|     36|    }
   97|     36|}
tox_unpack.c:tox_message_type_from_int:
  108|     75|{
  109|     75|    switch (value) {
  110|     26|        case TOX_MESSAGE_TYPE_NORMAL: {
  ------------------
  |  Branch (110:9): [True: 26, False: 49]
  ------------------
  111|     26|            *out_enum = TOX_MESSAGE_TYPE_NORMAL;
  112|     26|            return true;
  113|      0|        }
  114|       |
  115|     46|        case TOX_MESSAGE_TYPE_ACTION: {
  ------------------
  |  Branch (115:9): [True: 46, False: 29]
  ------------------
  116|     46|            *out_enum = TOX_MESSAGE_TYPE_ACTION;
  117|     46|            return true;
  118|      0|        }
  119|       |
  120|      3|        default: {
  ------------------
  |  Branch (120:9): [True: 3, False: 72]
  ------------------
  121|      3|            *out_enum = TOX_MESSAGE_TYPE_NORMAL;
  122|      3|            return false;
  123|      0|        }
  124|     75|    }
  125|     75|}
tox_unpack.c:tox_user_status_from_int:
  136|     39|{
  137|     39|    switch (value) {
  138|     17|        case TOX_USER_STATUS_NONE: {
  ------------------
  |  Branch (138:9): [True: 17, False: 22]
  ------------------
  139|     17|            *out_enum = TOX_USER_STATUS_NONE;
  140|     17|            return true;
  141|      0|        }
  142|       |
  143|     10|        case TOX_USER_STATUS_AWAY: {
  ------------------
  |  Branch (143:9): [True: 10, False: 29]
  ------------------
  144|     10|            *out_enum = TOX_USER_STATUS_AWAY;
  145|     10|            return true;
  146|      0|        }
  147|       |
  148|     11|        case TOX_USER_STATUS_BUSY: {
  ------------------
  |  Branch (148:9): [True: 11, False: 28]
  ------------------
  149|     11|            *out_enum = TOX_USER_STATUS_BUSY;
  150|     11|            return true;
  151|      0|        }
  152|       |
  153|      1|        default: {
  ------------------
  |  Branch (153:9): [True: 1, False: 38]
  ------------------
  154|      1|            *out_enum = TOX_USER_STATUS_NONE;
  155|      1|            return false;
  156|      0|        }
  157|     39|    }
  158|     39|}
tox_unpack.c:tox_group_privacy_state_from_int:
  169|     21|{
  170|     21|    switch (value) {
  171|     10|        case TOX_GROUP_PRIVACY_STATE_PUBLIC: {
  ------------------
  |  Branch (171:9): [True: 10, False: 11]
  ------------------
  172|     10|            *out_enum = TOX_GROUP_PRIVACY_STATE_PUBLIC;
  173|     10|            return true;
  174|      0|        }
  175|     10|        case TOX_GROUP_PRIVACY_STATE_PRIVATE: {
  ------------------
  |  Branch (175:9): [True: 10, False: 11]
  ------------------
  176|     10|            *out_enum = TOX_GROUP_PRIVACY_STATE_PRIVATE;
  177|     10|            return true;
  178|      0|        }
  179|      1|        default: {
  ------------------
  |  Branch (179:9): [True: 1, False: 20]
  ------------------
  180|      1|            *out_enum = TOX_GROUP_PRIVACY_STATE_PUBLIC;
  181|      1|            return false;
  182|      0|        }
  183|     21|    }
  184|     21|}
tox_unpack.c:tox_group_voice_state_from_int:
  193|     32|{
  194|     32|    switch (value) {
  195|     10|        case TOX_GROUP_VOICE_STATE_ALL: {
  ------------------
  |  Branch (195:9): [True: 10, False: 22]
  ------------------
  196|     10|            *out_enum = TOX_GROUP_VOICE_STATE_ALL;
  197|     10|            return true;
  198|      0|        }
  199|     18|        case TOX_GROUP_VOICE_STATE_MODERATOR: {
  ------------------
  |  Branch (199:9): [True: 18, False: 14]
  ------------------
  200|     18|            *out_enum = TOX_GROUP_VOICE_STATE_MODERATOR;
  201|     18|            return true;
  202|      0|        }
  203|      3|        case TOX_GROUP_VOICE_STATE_FOUNDER: {
  ------------------
  |  Branch (203:9): [True: 3, False: 29]
  ------------------
  204|      3|            *out_enum = TOX_GROUP_VOICE_STATE_FOUNDER;
  205|      3|            return true;
  206|      0|        }
  207|      1|        default: {
  ------------------
  |  Branch (207:9): [True: 1, False: 31]
  ------------------
  208|      1|            *out_enum = TOX_GROUP_VOICE_STATE_ALL;
  209|      1|            return false;
  210|      0|        }
  211|     32|    }
  212|     32|}
tox_unpack.c:tox_group_topic_lock_from_int:
  222|     21|{
  223|     21|    switch (value) {
  224|     10|        case TOX_GROUP_TOPIC_LOCK_ENABLED: {
  ------------------
  |  Branch (224:9): [True: 10, False: 11]
  ------------------
  225|     10|            *out_enum = TOX_GROUP_TOPIC_LOCK_ENABLED;
  226|     10|            return true;
  227|      0|        }
  228|     10|        case TOX_GROUP_TOPIC_LOCK_DISABLED: {
  ------------------
  |  Branch (228:9): [True: 10, False: 11]
  ------------------
  229|     10|            *out_enum = TOX_GROUP_TOPIC_LOCK_DISABLED;
  230|     10|            return true;
  231|      0|        }
  232|      1|        default: {
  ------------------
  |  Branch (232:9): [True: 1, False: 20]
  ------------------
  233|      1|            *out_enum = TOX_GROUP_TOPIC_LOCK_ENABLED;
  234|      1|            return false;
  235|      0|        }
  236|     21|    }
  237|     21|}
tox_unpack.c:tox_group_join_fail_from_int:
  247|     31|{
  248|     31|    switch (value) {
  249|      8|        case TOX_GROUP_JOIN_FAIL_PEER_LIMIT: {
  ------------------
  |  Branch (249:9): [True: 8, False: 23]
  ------------------
  250|      8|            *out_enum = TOX_GROUP_JOIN_FAIL_PEER_LIMIT;
  251|      8|            return true;
  252|      0|        }
  253|     10|        case TOX_GROUP_JOIN_FAIL_INVALID_PASSWORD: {
  ------------------
  |  Branch (253:9): [True: 10, False: 21]
  ------------------
  254|     10|            *out_enum = TOX_GROUP_JOIN_FAIL_INVALID_PASSWORD;
  255|     10|            return true;
  256|      0|        }
  257|     12|        case TOX_GROUP_JOIN_FAIL_UNKNOWN: {
  ------------------
  |  Branch (257:9): [True: 12, False: 19]
  ------------------
  258|     12|            *out_enum = TOX_GROUP_JOIN_FAIL_UNKNOWN;
  259|     12|            return true;
  260|      0|        }
  261|      1|        default: {
  ------------------
  |  Branch (261:9): [True: 1, False: 30]
  ------------------
  262|      1|            *out_enum = TOX_GROUP_JOIN_FAIL_PEER_LIMIT;
  263|      1|            return false;
  264|      0|        }
  265|     31|    }
  266|     31|}
tox_unpack.c:tox_group_mod_event_from_int:
  276|     25|{
  277|     25|    switch (value) {
  278|      6|        case TOX_GROUP_MOD_EVENT_KICK: {
  ------------------
  |  Branch (278:9): [True: 6, False: 19]
  ------------------
  279|      6|            *out_enum = TOX_GROUP_MOD_EVENT_KICK;
  280|      6|            return true;
  281|      0|        }
  282|      3|        case TOX_GROUP_MOD_EVENT_OBSERVER: {
  ------------------
  |  Branch (282:9): [True: 3, False: 22]
  ------------------
  283|      3|            *out_enum = TOX_GROUP_MOD_EVENT_OBSERVER;
  284|      3|            return true;
  285|      0|        }
  286|      3|        case TOX_GROUP_MOD_EVENT_USER: {
  ------------------
  |  Branch (286:9): [True: 3, False: 22]
  ------------------
  287|      3|            *out_enum = TOX_GROUP_MOD_EVENT_USER;
  288|      3|            return true;
  289|      0|        }
  290|     11|        case TOX_GROUP_MOD_EVENT_MODERATOR: {
  ------------------
  |  Branch (290:9): [True: 11, False: 14]
  ------------------
  291|     11|            *out_enum = TOX_GROUP_MOD_EVENT_MODERATOR;
  292|     11|            return true;
  293|      0|        }
  294|      2|        default: {
  ------------------
  |  Branch (294:9): [True: 2, False: 23]
  ------------------
  295|      2|            *out_enum = TOX_GROUP_MOD_EVENT_KICK;
  296|      2|            return false;
  297|      0|        }
  298|     25|    }
  299|     25|}
tox_unpack.c:tox_group_exit_type_from_int:
  309|     58|{
  310|     58|    switch (value) {
  311|     10|        case TOX_GROUP_EXIT_TYPE_QUIT: {
  ------------------
  |  Branch (311:9): [True: 10, False: 48]
  ------------------
  312|     10|            *out_enum = TOX_GROUP_EXIT_TYPE_QUIT;
  313|     10|            return true;
  314|      0|        }
  315|     26|        case TOX_GROUP_EXIT_TYPE_TIMEOUT: {
  ------------------
  |  Branch (315:9): [True: 26, False: 32]
  ------------------
  316|     26|            *out_enum = TOX_GROUP_EXIT_TYPE_TIMEOUT;
  317|     26|            return true;
  318|      0|        }
  319|      3|        case TOX_GROUP_EXIT_TYPE_DISCONNECTED: {
  ------------------
  |  Branch (319:9): [True: 3, False: 55]
  ------------------
  320|      3|            *out_enum = TOX_GROUP_EXIT_TYPE_DISCONNECTED;
  321|      3|            return true;
  322|      0|        }
  323|     12|        case TOX_GROUP_EXIT_TYPE_SELF_DISCONNECTED: {
  ------------------
  |  Branch (323:9): [True: 12, False: 46]
  ------------------
  324|     12|            *out_enum = TOX_GROUP_EXIT_TYPE_SELF_DISCONNECTED;
  325|     12|            return true;
  326|      0|        }
  327|      3|        case TOX_GROUP_EXIT_TYPE_KICK: {
  ------------------
  |  Branch (327:9): [True: 3, False: 55]
  ------------------
  328|      3|            *out_enum = TOX_GROUP_EXIT_TYPE_KICK;
  329|      3|            return true;
  330|      0|        }
  331|      3|        case TOX_GROUP_EXIT_TYPE_SYNC_ERROR: {
  ------------------
  |  Branch (331:9): [True: 3, False: 55]
  ------------------
  332|      3|            *out_enum = TOX_GROUP_EXIT_TYPE_SYNC_ERROR;
  333|      3|            return true;
  334|      0|        }
  335|      1|        default: {
  ------------------
  |  Branch (335:9): [True: 1, False: 57]
  ------------------
  336|      1|            *out_enum = TOX_GROUP_EXIT_TYPE_QUIT;
  337|      1|            return false;
  338|      0|        }
  339|     58|    }
  340|     58|}

