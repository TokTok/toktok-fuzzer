fuzz_support.cc:_ZZN6detail15func_conversionIPFPvP11Fuzz_SystemjEXadL_ZN3$_08__invokeES3_jEEEcvPFT_T0_DpT1_EIS1_S1_JjEEEvENKUlS1_DpT_E_clIJjEEEDaS1_SG_:
   31|    494|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFPvP11Fuzz_SystemjEXadL_ZN3$_08__invokeES3_jEEE13static_casterIS1_EcvT_IS3_EEv:
   22|    494|        {
   23|    494|            return static_cast<To>(obj);
   24|    494|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFPvP11Fuzz_SystemjjEXadL_ZN3$_18__invokeES3_jjEEEcvPFT_T0_DpT1_EIS1_S1_JjjEEEvENKUlS1_DpT_E_clIJjjEEEDaS1_SG_:
   31|  2.55k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFPvP11Fuzz_SystemjjEXadL_ZN3$_18__invokeES3_jjEEE13static_casterIS1_EcvT_IS3_EEv:
   22|  2.55k|        {
   23|  2.55k|            return static_cast<To>(obj);
   24|  2.55k|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFPvP11Fuzz_SystemS1_jEXadL_ZN3$_28__invokeES3_S1_jEEEcvPFT_T0_DpT1_EIS1_S1_JS1_jEEEvENKUlS1_DpT_E_clIJS1_jEEEDaS1_SG_:
   31|    841|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFPvP11Fuzz_SystemS1_jEXadL_ZN3$_28__invokeES3_S1_jEEE13static_casterIS1_EcvT_IS3_EEv:
   22|    841|        {
   23|    841|            return static_cast<To>(obj);
   24|    841|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFvP11Fuzz_SystemPvEXadL_ZN3$_38__invokeES2_S3_EEEcvPFT_T0_DpT1_EIvS3_JS3_EEEvENKUlS3_DpT_E_clIJS3_EEEDaS3_SG_:
   31|  3.41k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFvP11Fuzz_SystemPvEXadL_ZN3$_38__invokeES2_S3_EEE13static_casterIS3_EcvT_IS2_EEv:
   22|  3.41k|        {
   23|  3.41k|            return static_cast<To>(obj);
   24|  3.41k|        }

_ZN6SystemC2ENSt3__110unique_ptrI10Tox_SystemNS0_14default_deleteIS2_EEEENS1_I6MemoryNS3_IS6_EEEENS1_I7NetworkNS3_IS9_EEEENS1_I6RandomNS3_ISC_EEEE:
   38|    805|    : sys(std::move(in_sys))
   39|    805|    , mem(std::move(in_mem))
   40|    805|    , ns(std::move(in_ns))
   41|    805|    , rng(std::move(in_rng))
   42|    805|{
   43|    805|}
_ZN6SystemD2Ev:
   46|    805|System::~System() { }
_ZN11Fuzz_SystemC2ER9Fuzz_Data:
  232|    805|    : System{
  233|    805|        std::make_unique<Tox_System>(),
  234|    805|        std::make_unique<Memory>(Memory{&fuzz_memory_funcs, this}),
  235|    805|        std::make_unique<Network>(Network{&fuzz_network_funcs, this}),
  236|    805|        std::make_unique<Random>(Random{&fuzz_random_funcs, this}),
  237|    805|    }
  238|    805|    , data(input)
  239|    805|{
  240|    805|    sys->mono_time_callback = [](void *self) { return static_cast<Fuzz_System *>(self)->clock; };
  241|    805|    sys->mono_time_user_data = this;
  242|    805|    sys->mem = mem.get();
  243|    805|    sys->ns = ns.get();
  244|    805|    sys->rng = rng.get();
  245|    805|}
fuzz_support.cc:_ZNK3$_0clEP11Fuzz_Systemj:
   99|    494|    ![](Fuzz_System *self, uint32_t size) {
  100|    494|        return alloc_common<decltype(std::malloc), std::malloc>("malloc", size, self->data, size);
  101|    494|    },
fuzz_support.cc:_ZL12alloc_commonIDoFPvmETnT_XadL_Z6mallocEEJjEES0_PKcmR9Fuzz_DataDpT1_:
   88|    494|{
   89|    494|    CONSUME1_OR_RETURN_VAL(
  ------------------
  |  |  122|    494|    if (INPUT.size() < sizeof(TYPE)) {                 \
  |  |  ------------------
  |  |  |  Branch (122:9): [True: 475, False: 19]
  |  |  ------------------
  |  |  123|    475|        return VAL;                                    \
  |  |  124|    475|    }                                                  \
  |  |  125|    494|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   90|     19|        const bool, want_alloc, data, report_alloc("tox1", func, size, Func(args...)));
   91|     19|    if (!want_alloc) {
  ------------------
  |  Branch (91:9): [True: 1, False: 18]
  ------------------
   92|      1|        return nullptr;
   93|      1|    }
   94|     18|    return report_alloc("tox1", func, size, Func(args...));
   95|     19|}
fuzz_support.cc:_ZL12report_allocPKcS0_mPv:
   79|  3.84k|{
   80|  3.84k|    if (Fuzz_Data::FUZZ_DEBUG) {
  ------------------
  |  Branch (80:9): [Folded - Ignored]
  ------------------
   81|      0|        printf("%s: %s(%zu): %s\n", name, func, size, ptr == nullptr ? "false" : "true");
  ------------------
  |  Branch (81:55): [True: 0, False: 0]
  ------------------
   82|      0|    }
   83|  3.84k|    return ptr;
   84|  3.84k|}
fuzz_support.cc:_ZNK3$_1clEP11Fuzz_Systemjj:
  103|  2.55k|    ![](Fuzz_System *self, uint32_t nmemb, uint32_t size) {
  104|  2.55k|        return alloc_common<decltype(std::calloc), std::calloc>(
  105|  2.55k|            "calloc", nmemb * size, self->data, nmemb, size);
  106|  2.55k|    },
fuzz_support.cc:_ZL12alloc_commonIDoFPvmmETnT_XadL_Z6callocEEJjjEES0_PKcmR9Fuzz_DataDpT1_:
   88|  2.55k|{
   89|  2.55k|    CONSUME1_OR_RETURN_VAL(
  ------------------
  |  |  122|  2.55k|    if (INPUT.size() < sizeof(TYPE)) {                 \
  |  |  ------------------
  |  |  |  Branch (122:9): [True: 1.66k, False: 894]
  |  |  ------------------
  |  |  123|  1.66k|        return VAL;                                    \
  |  |  124|  1.66k|    }                                                  \
  |  |  125|  2.55k|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   90|    894|        const bool, want_alloc, data, report_alloc("tox1", func, size, Func(args...)));
   91|    894|    if (!want_alloc) {
  ------------------
  |  Branch (91:9): [True: 41, False: 853]
  ------------------
   92|     41|        return nullptr;
   93|     41|    }
   94|    853|    return report_alloc("tox1", func, size, Func(args...));
   95|    894|}
fuzz_support.cc:_ZNK3$_2clEP11Fuzz_SystemPvj:
  108|    841|    ![](Fuzz_System *self, void *ptr, uint32_t size) {
  109|    841|        return alloc_common<decltype(std::realloc), std::realloc>(
  110|    841|            "realloc", size, self->data, ptr, size);
  111|    841|    },
fuzz_support.cc:_ZL12alloc_commonIDoFPvS0_mETnT_XadL_Z7reallocEEJS0_jEES0_PKcmR9Fuzz_DataDpT1_:
   88|    841|{
   89|    841|    CONSUME1_OR_RETURN_VAL(
  ------------------
  |  |  122|    841|    if (INPUT.size() < sizeof(TYPE)) {                 \
  |  |  ------------------
  |  |  |  Branch (122:9): [True: 818, False: 23]
  |  |  ------------------
  |  |  123|    818|        return VAL;                                    \
  |  |  124|    818|    }                                                  \
  |  |  125|    841|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   90|     23|        const bool, want_alloc, data, report_alloc("tox1", func, size, Func(args...)));
   91|     23|    if (!want_alloc) {
  ------------------
  |  Branch (91:9): [True: 1, False: 22]
  ------------------
   92|      1|        return nullptr;
   93|      1|    }
   94|     22|    return report_alloc("tox1", func, size, Func(args...));
   95|     23|}
fuzz_support.cc:_ZNK3$_3clEP11Fuzz_SystemPv:
  113|  3.41k|    ![](Fuzz_System *self, void *ptr) { std::free(ptr); },

_ZNK9Fuzz_Data4sizeEv:
   69|  5.50k|    std::size_t size() const { return size_; }
_ZN9Fuzz_Data7consumeEPKcm:
   75|  1.61k|    {
   76|  1.61k|        const uint8_t *val = data_;
   77|  1.61k|        if (FUZZ_DEBUG) {
  ------------------
  |  Branch (77:13): [Folded - Ignored]
  ------------------
   78|      0|            if (pos() == TRACE_TRAP) {
  ------------------
  |  Branch (78:17): [True: 0, False: 0]
  ------------------
   79|      0|                __asm__("int $3");
   80|      0|            }
   81|      0|            if (count == 1) {
  ------------------
  |  Branch (81:17): [True: 0, False: 0]
  ------------------
   82|      0|                std::printf("consume@%zu(%s): %d (0x%02x)\n", pos(), func, val[0], val[0]);
   83|      0|            } else if (count != 0) {
  ------------------
  |  Branch (83:24): [True: 0, False: 0]
  ------------------
   84|      0|                std::printf("consume@%zu(%s): %02x..%02x[%zu]\n", pos(), func, val[0],
   85|      0|                    val[count - 1], count);
   86|      0|            }
   87|      0|        }
   88|  1.61k|        data_ += count;
   89|  1.61k|        size_ -= count;
   90|  1.61k|        return val;
   91|  1.61k|    }
_ZNK9Fuzz_Data5emptyEv:
   72|    806|    bool empty() const { return size_ == 0; }
_ZN9Fuzz_DataC2EPKhm:
   32|    808|        : data_(input_data)
   33|    808|        , base_(input_data)
   34|    808|        , size_(input_size)
   35|    808|    {
   36|    808|    }
_ZN9Fuzz_Data8ConsumercvbEv:
   46|    936|        {
   47|       |            // Special case because memcpy causes UB for bool (which can't be
   48|       |            // anything other than 0 or 1).
   49|    936|            const bool val = fd.data_[0];
   50|    936|            if (FUZZ_DEBUG) {
  ------------------
  |  Branch (50:17): [Folded - Ignored]
  ------------------
   51|      0|                std::printf("consume@%zu(%s): bool %s\n", fd.pos(), func, val ? "true" : "false");
  ------------------
  |  Branch (51:75): [True: 0, False: 0]
  ------------------
   52|      0|            }
   53|    936|            ++fd.data_;
   54|    936|            --fd.size_;
   55|    936|            return val;
   56|    936|        }
_ZN9Fuzz_Data8consume1EPKc:
   68|    936|    Consumer consume1(const char *func) { return Consumer{func, *this}; }

cmp_init:
  837|  1.18k|                                         cmp_writer *write) {
  838|  1.18k|  ctx->error = CMP_ERROR_NONE;
  839|  1.18k|  ctx->buf = buf;
  840|  1.18k|  ctx->read = read;
  841|  1.18k|  ctx->skip = skip;
  842|  1.18k|  ctx->write = write;
  843|  1.18k|}
cmp_write_pfix:
  859|  4.30k|bool cmp_write_pfix(cmp_ctx_t *ctx, uint8_t c) {
  860|  4.30k|  if (c <= 0x7F)
  ------------------
  |  Branch (860:7): [True: 4.30k, False: 0]
  ------------------
  861|  4.30k|    return write_fixed_value(ctx, c);
  862|       |
  863|      0|  ctx->error = CMP_ERROR_INPUT_VALUE_TOO_LARGE;
  864|      0|  return false;
  865|  4.30k|}
cmp_write_u8:
  938|     64|bool cmp_write_u8(cmp_ctx_t *ctx, uint8_t c) {
  939|     64|  if (!write_type_marker(ctx, U8_MARKER))
  ------------------
  |  Branch (939:7): [True: 0, False: 64]
  ------------------
  940|      0|    return false;
  941|       |
  942|     64|  return ctx->write(ctx, &c, sizeof(uint8_t)) == sizeof(uint8_t);
  943|     64|}
cmp_write_u16:
  945|    100|bool cmp_write_u16(cmp_ctx_t *ctx, uint16_t s) {
  946|    100|  if (!write_type_marker(ctx, U16_MARKER))
  ------------------
  |  Branch (946:7): [True: 0, False: 100]
  ------------------
  947|      0|    return false;
  948|       |
  949|    100|  s = be16(s);
  950|       |
  951|    100|  return ctx->write(ctx, &s, sizeof(uint16_t)) == sizeof(uint16_t);
  952|    100|}
cmp_write_u32:
  954|     44|bool cmp_write_u32(cmp_ctx_t *ctx, uint32_t i) {
  955|     44|  if (!write_type_marker(ctx, U32_MARKER))
  ------------------
  |  Branch (955:7): [True: 0, False: 44]
  ------------------
  956|      0|    return false;
  957|       |
  958|     44|  i = be32(i);
  959|       |
  960|     44|  return ctx->write(ctx, &i, sizeof(uint32_t)) == sizeof(uint32_t);
  961|     44|}
cmp_write_u64:
  963|     14|bool cmp_write_u64(cmp_ctx_t *ctx, uint64_t l) {
  964|     14|  if (!write_type_marker(ctx, U64_MARKER))
  ------------------
  |  Branch (964:7): [True: 0, False: 14]
  ------------------
  965|      0|    return false;
  966|       |
  967|     14|  l = be64(l);
  968|       |
  969|     14|  return ctx->write(ctx, &l, sizeof(uint64_t)) == sizeof(uint64_t);
  970|     14|}
cmp_write_uinteger:
  972|  4.53k|bool cmp_write_uinteger(cmp_ctx_t *ctx, uint64_t u) {
  973|  4.53k|  if (u <= 0x7F)
  ------------------
  |  Branch (973:7): [True: 4.30k, False: 222]
  ------------------
  974|  4.30k|    return cmp_write_pfix(ctx, (uint8_t)u);
  975|    222|  if (u <= 0xFF)
  ------------------
  |  Branch (975:7): [True: 64, False: 158]
  ------------------
  976|     64|    return cmp_write_u8(ctx, (uint8_t)u);
  977|    158|  if (u <= 0xFFFF)
  ------------------
  |  Branch (977:7): [True: 100, False: 58]
  ------------------
  978|    100|    return cmp_write_u16(ctx, (uint16_t)u);
  979|     58|  if (u <= 0xFFFFFFFF)
  ------------------
  |  Branch (979:7): [True: 44, False: 14]
  ------------------
  980|     44|    return cmp_write_u32(ctx, (uint32_t)u);
  981|       |
  982|     14|  return cmp_write_u64(ctx, u);
  983|     58|}
cmp_write_true:
 1045|     14|bool cmp_write_true(cmp_ctx_t *ctx) {
 1046|     14|  return write_type_marker(ctx, TRUE_MARKER);
 1047|     14|}
cmp_write_false:
 1049|     16|bool cmp_write_false(cmp_ctx_t *ctx) {
 1050|     16|  return write_type_marker(ctx, FALSE_MARKER);
 1051|     16|}
cmp_write_bool:
 1053|     30|bool cmp_write_bool(cmp_ctx_t *ctx, bool b) {
 1054|     30|  if (b)
  ------------------
  |  Branch (1054:7): [True: 14, False: 16]
  ------------------
 1055|     14|    return cmp_write_true(ctx);
 1056|       |
 1057|     16|  return cmp_write_false(ctx);
 1058|     30|}
cmp_write_bin8_marker:
 1205|    628|bool cmp_write_bin8_marker(cmp_ctx_t *ctx, uint8_t size) {
 1206|    628|  if (!write_type_marker(ctx, BIN8_MARKER))
  ------------------
  |  Branch (1206:7): [True: 0, False: 628]
  ------------------
 1207|      0|    return false;
 1208|       |
 1209|    628|  if (ctx->write(ctx, &size, sizeof(uint8_t)) == sizeof(uint8_t))
  ------------------
  |  Branch (1209:7): [True: 628, False: 0]
  ------------------
 1210|    628|    return true;
 1211|       |
 1212|      0|  ctx->error = CMP_ERROR_LENGTH_WRITING;
 1213|      0|  return false;
 1214|    628|}
cmp_write_bin8:
 1216|    628|bool cmp_write_bin8(cmp_ctx_t *ctx, const void *data, uint8_t size) {
 1217|    628|  if (!cmp_write_bin8_marker(ctx, size))
  ------------------
  |  Branch (1217:7): [True: 0, False: 628]
  ------------------
 1218|      0|    return false;
 1219|       |
 1220|    628|  if (size == 0)
  ------------------
  |  Branch (1220:7): [True: 554, False: 74]
  ------------------
 1221|    554|    return true;
 1222|       |
 1223|     74|  if (ctx->write(ctx, data, size) == size)
  ------------------
  |  Branch (1223:7): [True: 74, False: 0]
  ------------------
 1224|     74|    return true;
 1225|       |
 1226|      0|  ctx->error = CMP_ERROR_DATA_WRITING;
 1227|      0|  return false;
 1228|     74|}
cmp_write_bin16_marker:
 1230|      2|bool cmp_write_bin16_marker(cmp_ctx_t *ctx, uint16_t size) {
 1231|      2|  if (!write_type_marker(ctx, BIN16_MARKER))
  ------------------
  |  Branch (1231:7): [True: 0, False: 2]
  ------------------
 1232|      0|    return false;
 1233|       |
 1234|      2|  size = be16(size);
 1235|       |
 1236|      2|  if (ctx->write(ctx, &size, sizeof(uint16_t)) == sizeof(uint16_t))
  ------------------
  |  Branch (1236:7): [True: 2, False: 0]
  ------------------
 1237|      2|    return true;
 1238|       |
 1239|      0|  ctx->error = CMP_ERROR_LENGTH_WRITING;
 1240|      0|  return false;
 1241|      2|}
cmp_write_bin16:
 1243|      2|bool cmp_write_bin16(cmp_ctx_t *ctx, const void *data, uint16_t size) {
 1244|      2|  if (!cmp_write_bin16_marker(ctx, size))
  ------------------
  |  Branch (1244:7): [True: 0, False: 2]
  ------------------
 1245|      0|    return false;
 1246|       |
 1247|      2|  if (size == 0)
  ------------------
  |  Branch (1247:7): [True: 0, False: 2]
  ------------------
 1248|      0|    return true;
 1249|       |
 1250|      2|  if (ctx->write(ctx, data, size) == size)
  ------------------
  |  Branch (1250:7): [True: 2, False: 0]
  ------------------
 1251|      2|    return true;
 1252|       |
 1253|      0|  ctx->error = CMP_ERROR_DATA_WRITING;
 1254|      0|  return false;
 1255|      2|}
cmp_write_bin:
 1293|    630|bool cmp_write_bin(cmp_ctx_t *ctx, const void *data, uint32_t size) {
 1294|    630|  if (size <= 0xFF)
  ------------------
  |  Branch (1294:7): [True: 628, False: 2]
  ------------------
 1295|    628|    return cmp_write_bin8(ctx, data, (uint8_t)size);
 1296|      2|  if (size <= 0xFFFF)
  ------------------
  |  Branch (1296:7): [True: 2, False: 0]
  ------------------
 1297|      2|    return cmp_write_bin16(ctx, data, (uint16_t)size);
 1298|       |
 1299|      0|  return cmp_write_bin32(ctx, data, size);
 1300|      2|}
cmp_write_fixarray:
 1302|  2.98k|bool cmp_write_fixarray(cmp_ctx_t *ctx, uint8_t size) {
 1303|  2.98k|  if (size <= FIXARRAY_SIZE)
  ------------------
  |  Branch (1303:7): [True: 2.98k, False: 0]
  ------------------
 1304|  2.98k|    return write_fixed_value(ctx, FIXARRAY_MARKER | size);
 1305|       |
 1306|      0|  ctx->error = CMP_ERROR_INPUT_VALUE_TOO_LARGE;
 1307|      0|  return false;
 1308|  2.98k|}
cmp_write_array:
 1336|  2.98k|bool cmp_write_array(cmp_ctx_t *ctx, uint32_t size) {
 1337|  2.98k|  if (size <= FIXARRAY_SIZE)
  ------------------
  |  Branch (1337:7): [True: 2.98k, False: 0]
  ------------------
 1338|  2.98k|    return cmp_write_fixarray(ctx, (uint8_t)size);
 1339|      0|  if (size <= 0xFFFF)
  ------------------
  |  Branch (1339:7): [True: 0, False: 0]
  ------------------
 1340|      0|    return cmp_write_array16(ctx, (uint16_t)size);
 1341|       |
 1342|      0|  return cmp_write_array32(ctx, size);
 1343|      0|}
cmp_read_ushort:
 2172|    241|bool cmp_read_ushort(cmp_ctx_t *ctx, uint16_t *s) {
 2173|    241|  cmp_object_t obj;
 2174|       |
 2175|    241|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2175:7): [True: 43, False: 198]
  ------------------
 2176|     43|    return false;
 2177|       |
 2178|    198|  switch (obj.type) {
 2179|     87|    case CMP_TYPE_POSITIVE_FIXNUM:
  ------------------
  |  Branch (2179:5): [True: 87, False: 111]
  ------------------
 2180|    126|    case CMP_TYPE_UINT8: {
  ------------------
  |  Branch (2180:5): [True: 39, False: 159]
  ------------------
 2181|    126|      *s = obj.as.u8;
 2182|    126|      return true;
 2183|     87|    }
 2184|     26|    case CMP_TYPE_UINT16: {
  ------------------
  |  Branch (2184:5): [True: 26, False: 172]
  ------------------
 2185|     26|      *s = obj.as.u16;
 2186|     26|      return true;
 2187|     87|    }
 2188|      2|    case CMP_TYPE_NEGATIVE_FIXNUM:
  ------------------
  |  Branch (2188:5): [True: 2, False: 196]
  ------------------
 2189|     12|    case CMP_TYPE_SINT8: {
  ------------------
  |  Branch (2189:5): [True: 10, False: 188]
  ------------------
 2190|     12|      if (obj.as.s8 >= 0) {
  ------------------
  |  Branch (2190:11): [True: 10, False: 2]
  ------------------
 2191|     10|        *s = (uint8_t)obj.as.s8;
 2192|     10|        return true;
 2193|     10|      }
 2194|      2|      break;
 2195|     12|    }
 2196|     22|    case CMP_TYPE_SINT16: {
  ------------------
  |  Branch (2196:5): [True: 22, False: 176]
  ------------------
 2197|     22|      if (obj.as.s16 >= 0) {
  ------------------
  |  Branch (2197:11): [True: 21, False: 1]
  ------------------
 2198|     21|        *s = (uint16_t)obj.as.s16;
 2199|     21|        return true;
 2200|     21|      }
 2201|      1|      break;
 2202|     22|    }
 2203|     12|    default:
  ------------------
  |  Branch (2203:5): [True: 12, False: 186]
  ------------------
 2204|     12|      break;
 2205|    198|  }
 2206|       |
 2207|     15|  ctx->error = CMP_ERROR_INVALID_TYPE;
 2208|     15|  return false;
 2209|    198|}
cmp_read_uint:
 2211|  4.70k|bool cmp_read_uint(cmp_ctx_t *ctx, uint32_t *i) {
 2212|  4.70k|  cmp_object_t obj;
 2213|       |
 2214|  4.70k|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2214:7): [True: 108, False: 4.60k]
  ------------------
 2215|    108|    return false;
 2216|       |
 2217|  4.60k|  switch (obj.type) {
 2218|  4.36k|    case CMP_TYPE_POSITIVE_FIXNUM:
  ------------------
  |  Branch (2218:5): [True: 4.36k, False: 237]
  ------------------
 2219|  4.43k|    case CMP_TYPE_UINT8: {
  ------------------
  |  Branch (2219:5): [True: 73, False: 4.52k]
  ------------------
 2220|  4.43k|      *i = obj.as.u8;
 2221|  4.43k|      return true;
 2222|  4.36k|    }
 2223|     49|    case CMP_TYPE_UINT16: {
  ------------------
  |  Branch (2223:5): [True: 49, False: 4.55k]
  ------------------
 2224|     49|      *i = obj.as.u16;
 2225|     49|      return true;
 2226|  4.36k|    }
 2227|     42|    case CMP_TYPE_UINT32: {
  ------------------
  |  Branch (2227:5): [True: 42, False: 4.55k]
  ------------------
 2228|     42|      *i = obj.as.u32;
 2229|     42|      return true;
 2230|  4.36k|    }
 2231|      1|    case CMP_TYPE_NEGATIVE_FIXNUM:
  ------------------
  |  Branch (2231:5): [True: 1, False: 4.60k]
  ------------------
 2232|     21|    case CMP_TYPE_SINT8: {
  ------------------
  |  Branch (2232:5): [True: 20, False: 4.58k]
  ------------------
 2233|     21|      if (obj.as.s8 >= 0) {
  ------------------
  |  Branch (2233:11): [True: 20, False: 1]
  ------------------
 2234|     20|        *i = (uint8_t)obj.as.s8;
 2235|     20|        return true;
 2236|     20|      }
 2237|      1|      break;
 2238|     21|    }
 2239|     29|    case CMP_TYPE_SINT16: {
  ------------------
  |  Branch (2239:5): [True: 29, False: 4.57k]
  ------------------
 2240|     29|      if (obj.as.s16 >= 0) {
  ------------------
  |  Branch (2240:11): [True: 28, False: 1]
  ------------------
 2241|     28|        *i = (uint16_t)obj.as.s16;
 2242|     28|        return true;
 2243|     28|      }
 2244|      1|      break;
 2245|     29|    }
 2246|     16|    case CMP_TYPE_SINT32: {
  ------------------
  |  Branch (2246:5): [True: 16, False: 4.58k]
  ------------------
 2247|     16|      if (obj.as.s32 >= 0) {
  ------------------
  |  Branch (2247:11): [True: 15, False: 1]
  ------------------
 2248|     15|        *i = (uint32_t)obj.as.s32;
 2249|     15|        return true;
 2250|     15|      }
 2251|      1|      break;
 2252|     16|    }
 2253|      7|    default:
  ------------------
  |  Branch (2253:5): [True: 7, False: 4.59k]
  ------------------
 2254|      7|      break;
 2255|  4.60k|  }
 2256|       |
 2257|     10|  ctx->error = CMP_ERROR_INVALID_TYPE;
 2258|     10|  return false;
 2259|  4.60k|}
cmp_read_ulong:
 2261|    326|bool cmp_read_ulong(cmp_ctx_t *ctx, uint64_t *u) {
 2262|    326|  cmp_object_t obj;
 2263|       |
 2264|    326|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2264:7): [True: 30, False: 296]
  ------------------
 2265|     30|    return false;
 2266|       |
 2267|    296|  switch (obj.type) {
 2268|    136|    case CMP_TYPE_POSITIVE_FIXNUM:
  ------------------
  |  Branch (2268:5): [True: 136, False: 160]
  ------------------
 2269|    167|    case CMP_TYPE_UINT8: {
  ------------------
  |  Branch (2269:5): [True: 31, False: 265]
  ------------------
 2270|    167|      *u = obj.as.u8;
 2271|    167|      return true;
 2272|    136|    }
 2273|     22|    case CMP_TYPE_UINT16: {
  ------------------
  |  Branch (2273:5): [True: 22, False: 274]
  ------------------
 2274|     22|      *u = obj.as.u16;
 2275|     22|      return true;
 2276|    136|    }
 2277|     11|    case CMP_TYPE_UINT32: {
  ------------------
  |  Branch (2277:5): [True: 11, False: 285]
  ------------------
 2278|     11|      *u = obj.as.u32;
 2279|     11|      return true;
 2280|    136|    }
 2281|     21|    case CMP_TYPE_UINT64: {
  ------------------
  |  Branch (2281:5): [True: 21, False: 275]
  ------------------
 2282|     21|      *u = obj.as.u64;
 2283|     21|      return true;
 2284|    136|    }
 2285|      1|    case CMP_TYPE_NEGATIVE_FIXNUM:
  ------------------
  |  Branch (2285:5): [True: 1, False: 295]
  ------------------
 2286|     11|    case CMP_TYPE_SINT8: {
  ------------------
  |  Branch (2286:5): [True: 10, False: 286]
  ------------------
 2287|     11|      if (obj.as.s8 >= 0) {
  ------------------
  |  Branch (2287:11): [True: 10, False: 1]
  ------------------
 2288|     10|        *u = (uint8_t)obj.as.s8;
 2289|     10|        return true;
 2290|     10|      }
 2291|      1|      break;
 2292|     11|    }
 2293|     34|    case CMP_TYPE_SINT16: {
  ------------------
  |  Branch (2293:5): [True: 34, False: 262]
  ------------------
 2294|     34|      if (obj.as.s16 >= 0) {
  ------------------
  |  Branch (2294:11): [True: 33, False: 1]
  ------------------
 2295|     33|        *u = (uint16_t)obj.as.s16;
 2296|     33|        return true;
 2297|     33|      }
 2298|      1|      break;
 2299|     34|    }
 2300|     12|    case CMP_TYPE_SINT32: {
  ------------------
  |  Branch (2300:5): [True: 12, False: 284]
  ------------------
 2301|     12|      if (obj.as.s32 >= 0) {
  ------------------
  |  Branch (2301:11): [True: 11, False: 1]
  ------------------
 2302|     11|        *u = (uint32_t)obj.as.s32;
 2303|     11|        return true;
 2304|     11|      }
 2305|      1|      break;
 2306|     12|    }
 2307|     12|    case CMP_TYPE_SINT64: {
  ------------------
  |  Branch (2307:5): [True: 12, False: 284]
  ------------------
 2308|     12|      if (obj.as.s64 >= 0) {
  ------------------
  |  Branch (2308:11): [True: 11, False: 1]
  ------------------
 2309|     11|        *u = (uint64_t)obj.as.s64;
 2310|     11|        return true;
 2311|     11|      }
 2312|      1|      break;
 2313|     12|    }
 2314|      6|    default:
  ------------------
  |  Branch (2314:5): [True: 6, False: 290]
  ------------------
 2315|      6|      break;
 2316|    296|  }
 2317|       |
 2318|     10|  ctx->error = CMP_ERROR_INVALID_TYPE;
 2319|     10|  return false;
 2320|    296|}
cmp_read_bool:
 2395|     65|bool cmp_read_bool(cmp_ctx_t *ctx, bool *b) {
 2396|     65|  cmp_object_t obj;
 2397|       |
 2398|     65|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2398:7): [True: 30, False: 35]
  ------------------
 2399|     30|    return false;
 2400|       |
 2401|     35|  if (obj.type != CMP_TYPE_BOOLEAN) {
  ------------------
  |  Branch (2401:7): [True: 6, False: 29]
  ------------------
 2402|      6|    ctx->error = CMP_ERROR_INVALID_TYPE;
 2403|      6|    return false;
 2404|      6|  }
 2405|       |
 2406|     29|  if (obj.as.boolean) {
  ------------------
  |  Branch (2406:7): [True: 15, False: 14]
  ------------------
 2407|     15|    *b = true;
 2408|     15|  } else {
 2409|     14|    *b = false;
 2410|     14|  }
 2411|       |
 2412|     29|  return true;
 2413|     35|}
cmp_read_bin_size:
 2479|    612|bool cmp_read_bin_size(cmp_ctx_t *ctx, uint32_t *size) {
 2480|    612|  cmp_object_t obj;
 2481|       |
 2482|    612|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2482:7): [True: 82, False: 530]
  ------------------
 2483|     82|    return false;
 2484|       |
 2485|    530|  switch (obj.type) {
 2486|    148|    case CMP_TYPE_BIN8:
  ------------------
  |  Branch (2486:5): [True: 148, False: 382]
  ------------------
 2487|    432|    case CMP_TYPE_BIN16:
  ------------------
  |  Branch (2487:5): [True: 284, False: 246]
  ------------------
 2488|    519|    case CMP_TYPE_BIN32: {
  ------------------
  |  Branch (2488:5): [True: 87, False: 443]
  ------------------
 2489|    519|      *size = obj.as.bin_size;
 2490|    519|      return true;
 2491|    432|    }
 2492|     11|    default: {
  ------------------
  |  Branch (2492:5): [True: 11, False: 519]
  ------------------
 2493|     11|      ctx->error = CMP_ERROR_INVALID_TYPE;
 2494|     11|      return false;
 2495|    432|    }
 2496|    530|  }
 2497|    530|}
cmp_read_array:
 2519|  4.00k|bool cmp_read_array(cmp_ctx_t *ctx, uint32_t *size) {
 2520|  4.00k|  cmp_object_t obj;
 2521|       |
 2522|  4.00k|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2522:7): [True: 147, False: 3.85k]
  ------------------
 2523|    147|    return false;
 2524|       |
 2525|  3.85k|  switch (obj.type) {
 2526|  3.80k|    case CMP_TYPE_FIXARRAY:
  ------------------
  |  Branch (2526:5): [True: 3.80k, False: 55]
  ------------------
 2527|  3.80k|    case CMP_TYPE_ARRAY16:
  ------------------
  |  Branch (2527:5): [True: 3, False: 3.85k]
  ------------------
 2528|  3.80k|    case CMP_TYPE_ARRAY32: {
  ------------------
  |  Branch (2528:5): [True: 4, False: 3.85k]
  ------------------
 2529|  3.80k|      *size = obj.as.array_size;
 2530|  3.80k|      return true;
 2531|  3.80k|    }
 2532|     48|    default: {
  ------------------
  |  Branch (2532:5): [True: 48, False: 3.80k]
  ------------------
 2533|     48|      ctx->error = CMP_ERROR_INVALID_TYPE;
 2534|     48|      return false;
 2535|  3.80k|    }
 2536|  3.85k|  }
 2537|  3.85k|}
cmp_read_object:
 2810|  9.95k|bool cmp_read_object(cmp_ctx_t *ctx, cmp_object_t *obj) {
 2811|  9.95k|  uint8_t type_marker = 0;
 2812|       |
 2813|  9.95k|  if (!read_type_marker(ctx, &type_marker))
  ------------------
  |  Branch (2813:7): [True: 269, False: 9.68k]
  ------------------
 2814|    269|    return false;
 2815|       |
 2816|  9.68k|  if (!type_marker_to_cmp_type(type_marker, &obj->type)) {
  ------------------
  |  Branch (2816:7): [True: 6, False: 9.68k]
  ------------------
 2817|      6|    ctx->error = CMP_ERROR_INVALID_TYPE;
 2818|      6|    return false;
 2819|      6|  }
 2820|       |
 2821|  9.68k|  return read_obj_data(ctx, type_marker, obj);
 2822|  9.68k|}
cmp.c:write_fixed_value:
  245|  7.29k|static bool write_fixed_value(cmp_ctx_t *ctx, uint8_t value) {
  246|  7.29k|  if (write_byte(ctx, value))
  ------------------
  |  Branch (246:7): [True: 7.29k, False: 0]
  ------------------
  247|  7.29k|    return true;
  248|       |
  249|      0|  ctx->error = CMP_ERROR_FIXED_VALUE_WRITING;
  250|      0|  return false;
  251|  7.29k|}
cmp.c:write_byte:
  207|  8.17k|static bool write_byte(cmp_ctx_t *ctx, uint8_t x) {
  208|  8.17k|  return ctx->write(ctx, &x, sizeof(uint8_t)) == sizeof(uint8_t);
  209|  8.17k|}
cmp.c:write_type_marker:
  237|    882|static bool write_type_marker(cmp_ctx_t *ctx, uint8_t marker) {
  238|    882|  if (write_byte(ctx, marker))
  ------------------
  |  Branch (238:7): [True: 882, False: 0]
  ------------------
  239|    882|    return true;
  240|       |
  241|      0|  ctx->error = CMP_ERROR_TYPE_MARKER_WRITING;
  242|      0|  return false;
  243|    882|}
cmp.c:sbe16:
  127|     87|static int16_t sbe16(int16_t x) {
  128|     87|  return (int16_t)be16((uint16_t)x);
  129|     87|}
cmp.c:sbe32:
  138|     31|static int32_t sbe32(int32_t x) {
  139|     31|  return (int32_t)be32((uint32_t)x);
  140|     31|}
cmp.c:sbe64:
  149|     14|static int64_t sbe64(int64_t x) {
  150|     14|  return (int64_t)be64((uint64_t)x);
  151|     14|}
cmp.c:be16:
  119|  1.24k|static uint16_t be16(uint16_t x) {
  120|  1.24k|  if (!is_bigendian())
  ------------------
  |  Branch (120:7): [True: 1.24k, False: 0]
  ------------------
  121|  1.24k|    return ((x >> 8) & 0x00ff)
  122|  1.24k|         | ((x << 8) & 0xff00);
  123|       |
  124|      0|  return x;
  125|  1.24k|}
cmp.c:is_bigendian:
  109|  1.63k|static bool is_bigendian(void) {
  110|       |#ifdef WORDS_BIGENDIAN
  111|       |  return WORDS_BIGENDIAN;
  112|       |#else
  113|  1.63k|  const int32_t i_ = 1;
  114|  1.63k|  const char *i_bytes = (const char *)&i_;
  115|  1.63k|  return *i_bytes == 0;
  116|  1.63k|#endif /* WORDS_BIGENDIAN */
  117|  1.63k|}
cmp.c:be32:
  131|    333|static uint32_t be32(uint32_t x) {
  132|    333|  if (!is_bigendian())
  ------------------
  |  Branch (132:7): [True: 333, False: 0]
  ------------------
  133|    333|    return ((uint32_t)be16((uint16_t)(x & 0xffff)) << 16) | (uint32_t)be16((uint16_t)(x >> 16));
  134|       |
  135|      0|  return x;
  136|    333|}
cmp.c:be64:
  142|     53|static uint64_t be64(uint64_t x) {
  143|     53|  if (!is_bigendian())
  ------------------
  |  Branch (143:7): [True: 53, False: 0]
  ------------------
  144|     53|    return ((uint64_t)be32((uint32_t)(x & 0xffffffff)) << 32) | (uint64_t)be32((uint32_t)(x >> 32));
  145|       |
  146|      0|  return x;
  147|     53|}
cmp.c:read_type_marker:
  228|  9.95k|static bool read_type_marker(cmp_ctx_t *ctx, uint8_t *marker) {
  229|  9.95k|  if (read_byte(ctx, marker)) {
  ------------------
  |  Branch (229:7): [True: 9.68k, False: 269]
  ------------------
  230|  9.68k|    return true;
  231|  9.68k|  }
  232|       |
  233|    269|  ctx->error = CMP_ERROR_TYPE_MARKER_READING;
  234|    269|  return false;
  235|  9.95k|}
cmp.c:read_byte:
  203|  9.95k|static bool read_byte(cmp_ctx_t *ctx, uint8_t *x) {
  204|  9.95k|  return ctx->read(ctx, x, sizeof(uint8_t));
  205|  9.95k|}
cmp.c:type_marker_to_cmp_type:
  253|  9.68k|static bool type_marker_to_cmp_type(uint8_t type_marker, uint8_t *cmp_type) {
  254|  9.68k|  if (type_marker <= 0x7F) {
  ------------------
  |  Branch (254:7): [True: 4.59k, False: 5.09k]
  ------------------
  255|  4.59k|    *cmp_type = CMP_TYPE_POSITIVE_FIXNUM;
  256|  4.59k|    return true;
  257|  4.59k|  }
  258|       |
  259|  5.09k|  if (type_marker <= 0x8F) {
  ------------------
  |  Branch (259:7): [True: 6, False: 5.08k]
  ------------------
  260|      6|    *cmp_type = CMP_TYPE_FIXMAP;
  261|      6|    return true;
  262|      6|  }
  263|       |
  264|  5.08k|  if (type_marker <= 0x9F) {
  ------------------
  |  Branch (264:7): [True: 3.80k, False: 1.28k]
  ------------------
  265|  3.80k|    *cmp_type = CMP_TYPE_FIXARRAY;
  266|  3.80k|    return true;
  267|  3.80k|  }
  268|       |
  269|  1.28k|  if (type_marker <= 0xBF) {
  ------------------
  |  Branch (269:7): [True: 6, False: 1.27k]
  ------------------
  270|      6|    *cmp_type = CMP_TYPE_FIXSTR;
  271|      6|    return true;
  272|      6|  }
  273|       |
  274|  1.27k|  if (type_marker >= 0xE0) {
  ------------------
  |  Branch (274:7): [True: 9, False: 1.26k]
  ------------------
  275|      9|    *cmp_type = CMP_TYPE_NEGATIVE_FIXNUM;
  276|      9|    return true;
  277|      9|  }
  278|       |
  279|  1.26k|  switch (type_marker) {
  280|      6|    case NIL_MARKER: {
  ------------------
  |  Branch (280:5): [True: 6, False: 1.25k]
  ------------------
  281|      6|      *cmp_type = CMP_TYPE_NIL;
  282|      6|      return true;
  283|      0|    }
  284|     22|    case FALSE_MARKER: {
  ------------------
  |  Branch (284:5): [True: 22, False: 1.24k]
  ------------------
  285|     22|      *cmp_type = CMP_TYPE_BOOLEAN;
  286|     22|      return true;
  287|      0|    }
  288|     22|    case TRUE_MARKER: {
  ------------------
  |  Branch (288:5): [True: 22, False: 1.24k]
  ------------------
  289|     22|      *cmp_type = CMP_TYPE_BOOLEAN;
  290|     22|      return true;
  291|      0|    }
  292|    156|    case BIN8_MARKER: {
  ------------------
  |  Branch (292:5): [True: 156, False: 1.10k]
  ------------------
  293|    156|      *cmp_type = CMP_TYPE_BIN8;
  294|    156|      return true;
  295|      0|    }
  296|    294|    case BIN16_MARKER: {
  ------------------
  |  Branch (296:5): [True: 294, False: 971]
  ------------------
  297|    294|      *cmp_type = CMP_TYPE_BIN16;
  298|    294|      return true;
  299|      0|    }
  300|     99|    case BIN32_MARKER: {
  ------------------
  |  Branch (300:5): [True: 99, False: 1.16k]
  ------------------
  301|     99|      *cmp_type = CMP_TYPE_BIN32;
  302|     99|      return true;
  303|      0|    }
  304|      9|    case EXT8_MARKER: {
  ------------------
  |  Branch (304:5): [True: 9, False: 1.25k]
  ------------------
  305|      9|      *cmp_type = CMP_TYPE_EXT8;
  306|      9|      return true;
  307|      0|    }
  308|      8|    case EXT16_MARKER: {
  ------------------
  |  Branch (308:5): [True: 8, False: 1.25k]
  ------------------
  309|      8|      *cmp_type = CMP_TYPE_EXT16;
  310|      8|      return true;
  311|      0|    }
  312|     10|    case EXT32_MARKER: {
  ------------------
  |  Branch (312:5): [True: 10, False: 1.25k]
  ------------------
  313|     10|      *cmp_type = CMP_TYPE_EXT32;
  314|     10|      return true;
  315|      0|    }
  316|      6|    case FLOAT_MARKER: {
  ------------------
  |  Branch (316:5): [True: 6, False: 1.25k]
  ------------------
  317|      6|      *cmp_type = CMP_TYPE_FLOAT;
  318|      6|      return true;
  319|      0|    }
  320|      6|    case DOUBLE_MARKER: {
  ------------------
  |  Branch (320:5): [True: 6, False: 1.25k]
  ------------------
  321|      6|      *cmp_type = CMP_TYPE_DOUBLE;
  322|      6|      return true;
  323|      0|    }
  324|    150|    case U8_MARKER: {
  ------------------
  |  Branch (324:5): [True: 150, False: 1.11k]
  ------------------
  325|    150|      *cmp_type = CMP_TYPE_UINT8;
  326|    150|      return true;
  327|      0|    }
  328|    101|    case U16_MARKER: {
  ------------------
  |  Branch (328:5): [True: 101, False: 1.16k]
  ------------------
  329|    101|      *cmp_type = CMP_TYPE_UINT16;
  330|    101|      return true;
  331|      0|    }
  332|     59|    case U32_MARKER: {
  ------------------
  |  Branch (332:5): [True: 59, False: 1.20k]
  ------------------
  333|     59|      *cmp_type = CMP_TYPE_UINT32;
  334|     59|      return true;
  335|      0|    }
  336|     31|    case U64_MARKER: {
  ------------------
  |  Branch (336:5): [True: 31, False: 1.23k]
  ------------------
  337|     31|      *cmp_type = CMP_TYPE_UINT64;
  338|     31|      return true;
  339|      0|    }
  340|     45|    case S8_MARKER: {
  ------------------
  |  Branch (340:5): [True: 45, False: 1.22k]
  ------------------
  341|     45|      *cmp_type = CMP_TYPE_SINT8;
  342|     45|      return true;
  343|      0|    }
  344|     90|    case S16_MARKER: {
  ------------------
  |  Branch (344:5): [True: 90, False: 1.17k]
  ------------------
  345|     90|      *cmp_type = CMP_TYPE_SINT16;
  346|     90|      return true;
  347|      0|    }
  348|     35|    case S32_MARKER: {
  ------------------
  |  Branch (348:5): [True: 35, False: 1.23k]
  ------------------
  349|     35|      *cmp_type = CMP_TYPE_SINT32;
  350|     35|      return true;
  351|      0|    }
  352|     19|    case S64_MARKER: {
  ------------------
  |  Branch (352:5): [True: 19, False: 1.24k]
  ------------------
  353|     19|      *cmp_type = CMP_TYPE_SINT64;
  354|     19|      return true;
  355|      0|    }
  356|      7|    case FIXEXT1_MARKER: {
  ------------------
  |  Branch (356:5): [True: 7, False: 1.25k]
  ------------------
  357|      7|      *cmp_type = CMP_TYPE_FIXEXT1;
  358|      7|      return true;
  359|      0|    }
  360|      7|    case FIXEXT2_MARKER: {
  ------------------
  |  Branch (360:5): [True: 7, False: 1.25k]
  ------------------
  361|      7|      *cmp_type = CMP_TYPE_FIXEXT2;
  362|      7|      return true;
  363|      0|    }
  364|      7|    case FIXEXT4_MARKER: {
  ------------------
  |  Branch (364:5): [True: 7, False: 1.25k]
  ------------------
  365|      7|      *cmp_type = CMP_TYPE_FIXEXT4;
  366|      7|      return true;
  367|      0|    }
  368|      8|    case FIXEXT8_MARKER: {
  ------------------
  |  Branch (368:5): [True: 8, False: 1.25k]
  ------------------
  369|      8|      *cmp_type = CMP_TYPE_FIXEXT8;
  370|      8|      return true;
  371|      0|    }
  372|      7|    case FIXEXT16_MARKER: {
  ------------------
  |  Branch (372:5): [True: 7, False: 1.25k]
  ------------------
  373|      7|      *cmp_type = CMP_TYPE_FIXEXT16;
  374|      7|      return true;
  375|      0|    }
  376|      7|    case STR8_MARKER: {
  ------------------
  |  Branch (376:5): [True: 7, False: 1.25k]
  ------------------
  377|      7|      *cmp_type = CMP_TYPE_STR8;
  378|      7|      return true;
  379|      0|    }
  380|      7|    case STR16_MARKER: {
  ------------------
  |  Branch (380:5): [True: 7, False: 1.25k]
  ------------------
  381|      7|      *cmp_type = CMP_TYPE_STR16;
  382|      7|      return true;
  383|      0|    }
  384|      7|    case STR32_MARKER: {
  ------------------
  |  Branch (384:5): [True: 7, False: 1.25k]
  ------------------
  385|      7|      *cmp_type = CMP_TYPE_STR32;
  386|      7|      return true;
  387|      0|    }
  388|      9|    case ARRAY16_MARKER: {
  ------------------
  |  Branch (388:5): [True: 9, False: 1.25k]
  ------------------
  389|      9|      *cmp_type = CMP_TYPE_ARRAY16;
  390|      9|      return true;
  391|      0|    }
  392|     11|    case ARRAY32_MARKER: {
  ------------------
  |  Branch (392:5): [True: 11, False: 1.25k]
  ------------------
  393|     11|      *cmp_type = CMP_TYPE_ARRAY32;
  394|     11|      return true;
  395|      0|    }
  396|      7|    case MAP16_MARKER: {
  ------------------
  |  Branch (396:5): [True: 7, False: 1.25k]
  ------------------
  397|      7|      *cmp_type = CMP_TYPE_MAP16;
  398|      7|      return true;
  399|      0|    }
  400|      7|    case MAP32_MARKER: {
  ------------------
  |  Branch (400:5): [True: 7, False: 1.25k]
  ------------------
  401|      7|      *cmp_type = CMP_TYPE_MAP32;
  402|      7|      return true;
  403|      0|    }
  404|      6|    default: {
  ------------------
  |  Branch (404:5): [True: 6, False: 1.25k]
  ------------------
  405|      6|      return false;
  406|      0|    }
  407|  1.26k|  }
  408|  1.26k|}
cmp.c:read_obj_data:
  618|  9.68k|                                          cmp_object_t *obj) {
  619|  9.68k|  switch (obj->type) {
  620|  4.59k|    case CMP_TYPE_POSITIVE_FIXNUM: {
  ------------------
  |  Branch (620:5): [True: 4.59k, False: 5.08k]
  ------------------
  621|  4.59k|      obj->as.u8 = type_marker;
  622|  4.59k|      return true;
  623|      0|    }
  624|      9|    case CMP_TYPE_NEGATIVE_FIXNUM: {
  ------------------
  |  Branch (624:5): [True: 9, False: 9.67k]
  ------------------
  625|      9|      obj->as.s8 = (int8_t)type_marker;
  626|      9|      return true;
  627|      0|    }
  628|      6|    case CMP_TYPE_NIL: {
  ------------------
  |  Branch (628:5): [True: 6, False: 9.67k]
  ------------------
  629|      6|      obj->as.u8 = 0;
  630|      6|      return true;
  631|      0|    }
  632|     44|    case CMP_TYPE_BOOLEAN: {
  ------------------
  |  Branch (632:5): [True: 44, False: 9.63k]
  ------------------
  633|     44|      switch (type_marker) {
  634|     22|        case TRUE_MARKER: {
  ------------------
  |  Branch (634:9): [True: 22, False: 22]
  ------------------
  635|     22|          obj->as.boolean = true;
  636|     22|          return true;
  637|      0|        }
  638|     22|        case FALSE_MARKER: {
  ------------------
  |  Branch (638:9): [True: 22, False: 22]
  ------------------
  639|     22|          obj->as.boolean = false;
  640|     22|          return true;
  641|      0|        }
  642|      0|        default:
  ------------------
  |  Branch (642:9): [True: 0, False: 44]
  ------------------
  643|      0|          break;
  644|     44|      }
  645|      0|      ctx->error = CMP_ERROR_INTERNAL;
  646|      0|      return false;
  647|     44|    }
  648|    150|    case CMP_TYPE_UINT8: {
  ------------------
  |  Branch (648:5): [True: 150, False: 9.53k]
  ------------------
  649|    150|      if (!ctx->read(ctx, &obj->as.u8, sizeof(uint8_t))) {
  ------------------
  |  Branch (649:11): [True: 5, False: 145]
  ------------------
  650|      5|        ctx->error = CMP_ERROR_DATA_READING;
  651|      5|        return false;
  652|      5|      }
  653|    145|      return true;
  654|    150|    }
  655|    101|    case CMP_TYPE_UINT16: {
  ------------------
  |  Branch (655:5): [True: 101, False: 9.58k]
  ------------------
  656|    101|      if (!ctx->read(ctx, &obj->as.u16, sizeof(uint16_t))) {
  ------------------
  |  Branch (656:11): [True: 2, False: 99]
  ------------------
  657|      2|        ctx->error = CMP_ERROR_DATA_READING;
  658|      2|        return false;
  659|      2|      }
  660|     99|      obj->as.u16 = be16(obj->as.u16);
  661|     99|      return true;
  662|    101|    }
  663|     59|    case CMP_TYPE_UINT32: {
  ------------------
  |  Branch (663:5): [True: 59, False: 9.62k]
  ------------------
  664|     59|      if (!ctx->read(ctx, &obj->as.u32, sizeof(uint32_t))) {
  ------------------
  |  Branch (664:11): [True: 4, False: 55]
  ------------------
  665|      4|        ctx->error = CMP_ERROR_DATA_READING;
  666|      4|        return false;
  667|      4|      }
  668|     55|      obj->as.u32 = be32(obj->as.u32);
  669|     55|      return true;
  670|     59|    }
  671|     31|    case CMP_TYPE_UINT64: {
  ------------------
  |  Branch (671:5): [True: 31, False: 9.65k]
  ------------------
  672|     31|      if (!ctx->read(ctx, &obj->as.u64, sizeof(uint64_t))) {
  ------------------
  |  Branch (672:11): [True: 6, False: 25]
  ------------------
  673|      6|        ctx->error = CMP_ERROR_DATA_READING;
  674|      6|        return false;
  675|      6|      }
  676|     25|      obj->as.u64 = be64(obj->as.u64);
  677|     25|      return true;
  678|     31|    }
  679|     45|    case CMP_TYPE_SINT8: {
  ------------------
  |  Branch (679:5): [True: 45, False: 9.63k]
  ------------------
  680|     45|      if (!ctx->read(ctx, &obj->as.s8, sizeof(int8_t))) {
  ------------------
  |  Branch (680:11): [True: 4, False: 41]
  ------------------
  681|      4|        ctx->error = CMP_ERROR_DATA_READING;
  682|      4|        return false;
  683|      4|      }
  684|     41|      return true;
  685|     45|    }
  686|     90|    case CMP_TYPE_SINT16: {
  ------------------
  |  Branch (686:5): [True: 90, False: 9.59k]
  ------------------
  687|     90|      if (!ctx->read(ctx, &obj->as.s16, sizeof(int16_t))) {
  ------------------
  |  Branch (687:11): [True: 3, False: 87]
  ------------------
  688|      3|        ctx->error = CMP_ERROR_DATA_READING;
  689|      3|        return false;
  690|      3|      }
  691|     87|      obj->as.s16 = sbe16(obj->as.s16);
  692|     87|      return true;
  693|     90|    }
  694|     35|    case CMP_TYPE_SINT32: {
  ------------------
  |  Branch (694:5): [True: 35, False: 9.64k]
  ------------------
  695|     35|      if (!ctx->read(ctx, &obj->as.s32, sizeof(int32_t))) {
  ------------------
  |  Branch (695:11): [True: 4, False: 31]
  ------------------
  696|      4|        ctx->error = CMP_ERROR_DATA_READING;
  697|      4|        return false;
  698|      4|      }
  699|     31|      obj->as.s32 = sbe32(obj->as.s32);
  700|     31|      return true;
  701|     35|    }
  702|     19|    case CMP_TYPE_SINT64: {
  ------------------
  |  Branch (702:5): [True: 19, False: 9.66k]
  ------------------
  703|     19|      if (!ctx->read(ctx, &obj->as.s64, sizeof(int64_t))) {
  ------------------
  |  Branch (703:11): [True: 5, False: 14]
  ------------------
  704|      5|        ctx->error = CMP_ERROR_DATA_READING;
  705|      5|        return false;
  706|      5|      }
  707|     14|      obj->as.s64 = sbe64(obj->as.s64);
  708|     14|      return true;
  709|     19|    }
  710|      6|    case CMP_TYPE_FLOAT: {
  ------------------
  |  Branch (710:5): [True: 6, False: 9.67k]
  ------------------
  711|       |#ifndef CMP_NO_FLOAT
  712|       |      char bytes[4];
  713|       |
  714|       |      if (!ctx->read(ctx, bytes, 4)) {
  715|       |        ctx->error = CMP_ERROR_DATA_READING;
  716|       |        return false;
  717|       |      }
  718|       |      obj->as.flt = decode_befloat(bytes);
  719|       |      return true;
  720|       |#else /* CMP_NO_FLOAT */
  721|      6|      ctx->error = CMP_ERROR_DISABLED_FLOATING_POINT;
  722|      6|      return false;
  723|     19|#endif /* CMP_NO_FLOAT */
  724|     19|    }
  725|      6|    case CMP_TYPE_DOUBLE: {
  ------------------
  |  Branch (725:5): [True: 6, False: 9.67k]
  ------------------
  726|       |#ifndef CMP_NO_FLOAT
  727|       |      char bytes[8];
  728|       |
  729|       |      if (!ctx->read(ctx, bytes, 8)) {
  730|       |        ctx->error = CMP_ERROR_DATA_READING;
  731|       |        return false;
  732|       |      }
  733|       |      obj->as.dbl = decode_bedouble(bytes);
  734|       |      return true;
  735|       |#else /* CMP_NO_FLOAT */
  736|      6|      ctx->error = CMP_ERROR_DISABLED_FLOATING_POINT;
  737|      6|      return false;
  738|     19|#endif /* CMP_NO_FLOAT */
  739|     19|    }
  740|    156|    case CMP_TYPE_BIN8:
  ------------------
  |  Branch (740:5): [True: 156, False: 9.52k]
  ------------------
  741|    450|    case CMP_TYPE_BIN16:
  ------------------
  |  Branch (741:5): [True: 294, False: 9.38k]
  ------------------
  742|    549|    case CMP_TYPE_BIN32:
  ------------------
  |  Branch (742:5): [True: 99, False: 9.58k]
  ------------------
  743|    549|      return read_type_size(ctx, type_marker, obj->type, &obj->as.bin_size);
  744|      6|    case CMP_TYPE_FIXSTR:
  ------------------
  |  Branch (744:5): [True: 6, False: 9.67k]
  ------------------
  745|     13|    case CMP_TYPE_STR8:
  ------------------
  |  Branch (745:5): [True: 7, False: 9.67k]
  ------------------
  746|     20|    case CMP_TYPE_STR16:
  ------------------
  |  Branch (746:5): [True: 7, False: 9.67k]
  ------------------
  747|     27|    case CMP_TYPE_STR32:
  ------------------
  |  Branch (747:5): [True: 7, False: 9.67k]
  ------------------
  748|     27|      return read_type_size(ctx, type_marker, obj->type, &obj->as.str_size);
  749|  3.80k|    case CMP_TYPE_FIXARRAY:
  ------------------
  |  Branch (749:5): [True: 3.80k, False: 5.87k]
  ------------------
  750|  3.81k|    case CMP_TYPE_ARRAY16:
  ------------------
  |  Branch (750:5): [True: 9, False: 9.67k]
  ------------------
  751|  3.82k|    case CMP_TYPE_ARRAY32:
  ------------------
  |  Branch (751:5): [True: 11, False: 9.67k]
  ------------------
  752|  3.82k|      return read_type_size(ctx, type_marker, obj->type, &obj->as.array_size);
  753|      6|    case CMP_TYPE_FIXMAP:
  ------------------
  |  Branch (753:5): [True: 6, False: 9.67k]
  ------------------
  754|     13|    case CMP_TYPE_MAP16:
  ------------------
  |  Branch (754:5): [True: 7, False: 9.67k]
  ------------------
  755|     20|    case CMP_TYPE_MAP32:
  ------------------
  |  Branch (755:5): [True: 7, False: 9.67k]
  ------------------
  756|     20|      return read_type_size(ctx, type_marker, obj->type, &obj->as.map_size);
  757|      7|    case CMP_TYPE_FIXEXT1: {
  ------------------
  |  Branch (757:5): [True: 7, False: 9.67k]
  ------------------
  758|      7|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (758:11): [True: 6, False: 1]
  ------------------
  759|      6|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  760|      6|        return false;
  761|      6|      }
  762|      1|      obj->as.ext.size = 1;
  763|      1|      return true;
  764|      7|    }
  765|      7|    case CMP_TYPE_FIXEXT2: {
  ------------------
  |  Branch (765:5): [True: 7, False: 9.67k]
  ------------------
  766|      7|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (766:11): [True: 6, False: 1]
  ------------------
  767|      6|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  768|      6|        return false;
  769|      6|      }
  770|      1|      obj->as.ext.size = 2;
  771|      1|      return true;
  772|      7|    }
  773|      7|    case CMP_TYPE_FIXEXT4: {
  ------------------
  |  Branch (773:5): [True: 7, False: 9.67k]
  ------------------
  774|      7|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (774:11): [True: 6, False: 1]
  ------------------
  775|      6|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  776|      6|        return false;
  777|      6|      }
  778|      1|      obj->as.ext.size = 4;
  779|      1|      return true;
  780|      7|    }
  781|      8|    case CMP_TYPE_FIXEXT8: {
  ------------------
  |  Branch (781:5): [True: 8, False: 9.67k]
  ------------------
  782|      8|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (782:11): [True: 6, False: 2]
  ------------------
  783|      6|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  784|      6|        return false;
  785|      6|      }
  786|      2|      obj->as.ext.size = 8;
  787|      2|      return true;
  788|      8|    }
  789|      7|    case CMP_TYPE_FIXEXT16: {
  ------------------
  |  Branch (789:5): [True: 7, False: 9.67k]
  ------------------
  790|      7|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (790:11): [True: 6, False: 1]
  ------------------
  791|      6|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  792|      6|        return false;
  793|      6|      }
  794|      1|      obj->as.ext.size = 16;
  795|      1|      return true;
  796|      7|    }
  797|      9|    case CMP_TYPE_EXT8: {
  ------------------
  |  Branch (797:5): [True: 9, False: 9.67k]
  ------------------
  798|      9|      if (!read_type_size(ctx, type_marker, obj->type, &obj->as.ext.size)) {
  ------------------
  |  Branch (798:11): [True: 7, False: 2]
  ------------------
  799|      7|        return false;
  800|      7|      }
  801|      2|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (801:11): [True: 1, False: 1]
  ------------------
  802|      1|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  803|      1|        return false;
  804|      1|      }
  805|      1|      return true;
  806|      2|    }
  807|      8|    case CMP_TYPE_EXT16: {
  ------------------
  |  Branch (807:5): [True: 8, False: 9.67k]
  ------------------
  808|      8|      if (!read_type_size(ctx, type_marker, obj->type, &obj->as.ext.size)) {
  ------------------
  |  Branch (808:11): [True: 6, False: 2]
  ------------------
  809|      6|        return false;
  810|      6|      }
  811|      2|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (811:11): [True: 1, False: 1]
  ------------------
  812|      1|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  813|      1|        return false;
  814|      1|      }
  815|      1|      return true;
  816|      2|    }
  817|     10|    case CMP_TYPE_EXT32: {
  ------------------
  |  Branch (817:5): [True: 10, False: 9.67k]
  ------------------
  818|     10|      if (!read_type_size(ctx, type_marker, obj->type, &obj->as.ext.size)) {
  ------------------
  |  Branch (818:11): [True: 8, False: 2]
  ------------------
  819|      8|        return false;
  820|      8|      }
  821|      2|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (821:11): [True: 1, False: 1]
  ------------------
  822|      1|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  823|      1|        return false;
  824|      1|      }
  825|      1|      return true;
  826|      2|    }
  827|      0|    default:
  ------------------
  |  Branch (827:5): [True: 0, False: 9.68k]
  ------------------
  828|      0|      break;
  829|  9.68k|  }
  830|       |
  831|      0|  ctx->error = CMP_ERROR_INVALID_TYPE;
  832|      0|  return false;
  833|  9.68k|}
cmp.c:read_type_size:
  412|  4.45k|                                           uint32_t *size) {
  413|  4.45k|  uint8_t u8temp = 0;
  414|  4.45k|  uint16_t u16temp = 0;
  415|  4.45k|  uint32_t u32temp = 0;
  416|       |
  417|  4.45k|  switch (cmp_type) {
  418|      0|    case CMP_TYPE_POSITIVE_FIXNUM: {
  ------------------
  |  Branch (418:5): [True: 0, False: 4.45k]
  ------------------
  419|      0|      *size = 0;
  420|      0|      return true;
  421|      0|    }
  422|      6|    case CMP_TYPE_FIXMAP: {
  ------------------
  |  Branch (422:5): [True: 6, False: 4.44k]
  ------------------
  423|      6|      *size = type_marker & FIXMAP_SIZE;
  424|      6|      return true;
  425|      0|    }
  426|  3.80k|    case CMP_TYPE_FIXARRAY: {
  ------------------
  |  Branch (426:5): [True: 3.80k, False: 643]
  ------------------
  427|  3.80k|      *size = type_marker & FIXARRAY_SIZE;
  428|  3.80k|      return true;
  429|      0|    }
  430|      6|    case CMP_TYPE_FIXSTR: {
  ------------------
  |  Branch (430:5): [True: 6, False: 4.44k]
  ------------------
  431|      6|      *size = type_marker & FIXSTR_SIZE;
  432|      6|      return true;
  433|      0|    }
  434|      0|    case CMP_TYPE_NIL: {
  ------------------
  |  Branch (434:5): [True: 0, False: 4.45k]
  ------------------
  435|      0|      *size = 0;
  436|      0|      return true;
  437|      0|    }
  438|      0|    case CMP_TYPE_BOOLEAN: {
  ------------------
  |  Branch (438:5): [True: 0, False: 4.45k]
  ------------------
  439|      0|      *size = 0;
  440|      0|      return true;
  441|      0|    }
  442|    156|    case CMP_TYPE_BIN8: {
  ------------------
  |  Branch (442:5): [True: 156, False: 4.29k]
  ------------------
  443|    156|      if (!ctx->read(ctx, &u8temp, sizeof(uint8_t))) {
  ------------------
  |  Branch (443:11): [True: 5, False: 151]
  ------------------
  444|      5|        ctx->error = CMP_ERROR_LENGTH_READING;
  445|      5|        return false;
  446|      5|      }
  447|    151|      *size = u8temp;
  448|    151|      return true;
  449|    156|    }
  450|    294|    case CMP_TYPE_BIN16: {
  ------------------
  |  Branch (450:5): [True: 294, False: 4.15k]
  ------------------
  451|    294|      if (!ctx->read(ctx, &u16temp, sizeof(uint16_t))) {
  ------------------
  |  Branch (451:11): [True: 8, False: 286]
  ------------------
  452|      8|        ctx->error = CMP_ERROR_LENGTH_READING;
  453|      8|        return false;
  454|      8|      }
  455|    286|      *size = be16(u16temp);
  456|    286|      return true;
  457|    294|    }
  458|     99|    case CMP_TYPE_BIN32: {
  ------------------
  |  Branch (458:5): [True: 99, False: 4.35k]
  ------------------
  459|     99|      if (!ctx->read(ctx, &u32temp, sizeof(uint32_t))) {
  ------------------
  |  Branch (459:11): [True: 10, False: 89]
  ------------------
  460|     10|        ctx->error = CMP_ERROR_LENGTH_READING;
  461|     10|        return false;
  462|     10|      }
  463|     89|      *size = be32(u32temp);
  464|     89|      return true;
  465|     99|    }
  466|      9|    case CMP_TYPE_EXT8: {
  ------------------
  |  Branch (466:5): [True: 9, False: 4.44k]
  ------------------
  467|      9|      if (!ctx->read(ctx, &u8temp, sizeof(uint8_t))) {
  ------------------
  |  Branch (467:11): [True: 7, False: 2]
  ------------------
  468|      7|        ctx->error = CMP_ERROR_LENGTH_READING;
  469|      7|        return false;
  470|      7|      }
  471|      2|      *size = u8temp;
  472|      2|      return true;
  473|      9|    }
  474|      8|    case CMP_TYPE_EXT16: {
  ------------------
  |  Branch (474:5): [True: 8, False: 4.44k]
  ------------------
  475|      8|      if (!ctx->read(ctx, &u16temp, sizeof(uint16_t))) {
  ------------------
  |  Branch (475:11): [True: 6, False: 2]
  ------------------
  476|      6|        ctx->error = CMP_ERROR_LENGTH_READING;
  477|      6|        return false;
  478|      6|      }
  479|      2|      *size = be16(u16temp);
  480|      2|      return true;
  481|      8|    }
  482|     10|    case CMP_TYPE_EXT32: {
  ------------------
  |  Branch (482:5): [True: 10, False: 4.44k]
  ------------------
  483|     10|      if (!ctx->read(ctx, &u32temp, sizeof(uint32_t))) {
  ------------------
  |  Branch (483:11): [True: 8, False: 2]
  ------------------
  484|      8|        ctx->error = CMP_ERROR_LENGTH_READING;
  485|      8|        return false;
  486|      8|      }
  487|      2|      *size = be32(u32temp);
  488|      2|      return true;
  489|     10|    }
  490|      0|    case CMP_TYPE_FLOAT: {
  ------------------
  |  Branch (490:5): [True: 0, False: 4.45k]
  ------------------
  491|      0|      *size = 4;
  492|      0|      return true;
  493|     10|    }
  494|      0|    case CMP_TYPE_DOUBLE: {
  ------------------
  |  Branch (494:5): [True: 0, False: 4.45k]
  ------------------
  495|      0|      *size = 8;
  496|      0|      return true;
  497|     10|    }
  498|      0|    case CMP_TYPE_UINT8: {
  ------------------
  |  Branch (498:5): [True: 0, False: 4.45k]
  ------------------
  499|      0|      *size = 1;
  500|      0|      return true;
  501|     10|    }
  502|      0|    case CMP_TYPE_UINT16: {
  ------------------
  |  Branch (502:5): [True: 0, False: 4.45k]
  ------------------
  503|      0|      *size = 2;
  504|      0|      return true;
  505|     10|    }
  506|      0|    case CMP_TYPE_UINT32: {
  ------------------
  |  Branch (506:5): [True: 0, False: 4.45k]
  ------------------
  507|      0|      *size = 4;
  508|      0|      return true;
  509|     10|    }
  510|      0|    case CMP_TYPE_UINT64: {
  ------------------
  |  Branch (510:5): [True: 0, False: 4.45k]
  ------------------
  511|      0|      *size = 8;
  512|      0|      return true;
  513|     10|    }
  514|      0|    case CMP_TYPE_SINT8: {
  ------------------
  |  Branch (514:5): [True: 0, False: 4.45k]
  ------------------
  515|      0|      *size = 1;
  516|      0|      return true;
  517|     10|    }
  518|      0|    case CMP_TYPE_SINT16: {
  ------------------
  |  Branch (518:5): [True: 0, False: 4.45k]
  ------------------
  519|      0|      *size = 2;
  520|      0|      return true;
  521|     10|    }
  522|      0|    case CMP_TYPE_SINT32: {
  ------------------
  |  Branch (522:5): [True: 0, False: 4.45k]
  ------------------
  523|      0|      *size = 4;
  524|      0|      return true;
  525|     10|    }
  526|      0|    case CMP_TYPE_SINT64: {
  ------------------
  |  Branch (526:5): [True: 0, False: 4.45k]
  ------------------
  527|      0|      *size = 8;
  528|      0|      return true;
  529|     10|    }
  530|      0|    case CMP_TYPE_FIXEXT1: {
  ------------------
  |  Branch (530:5): [True: 0, False: 4.45k]
  ------------------
  531|      0|      *size = 1;
  532|      0|      return true;
  533|     10|    }
  534|      0|    case CMP_TYPE_FIXEXT2: {
  ------------------
  |  Branch (534:5): [True: 0, False: 4.45k]
  ------------------
  535|      0|      *size = 2;
  536|      0|      return true;
  537|     10|    }
  538|      0|    case CMP_TYPE_FIXEXT4: {
  ------------------
  |  Branch (538:5): [True: 0, False: 4.45k]
  ------------------
  539|      0|      *size = 4;
  540|      0|      return true;
  541|     10|    }
  542|      0|    case CMP_TYPE_FIXEXT8: {
  ------------------
  |  Branch (542:5): [True: 0, False: 4.45k]
  ------------------
  543|      0|      *size = 8;
  544|      0|      return true;
  545|     10|    }
  546|      0|    case CMP_TYPE_FIXEXT16: {
  ------------------
  |  Branch (546:5): [True: 0, False: 4.45k]
  ------------------
  547|      0|      *size = 16;
  548|      0|      return true;
  549|     10|    }
  550|      7|    case CMP_TYPE_STR8: {
  ------------------
  |  Branch (550:5): [True: 7, False: 4.44k]
  ------------------
  551|      7|      if (!ctx->read(ctx, &u8temp, sizeof(uint8_t))) {
  ------------------
  |  Branch (551:11): [True: 6, False: 1]
  ------------------
  552|      6|        ctx->error = CMP_ERROR_DATA_READING;
  553|      6|        return false;
  554|      6|      }
  555|      1|      *size = u8temp;
  556|      1|      return true;
  557|      7|    }
  558|      7|    case CMP_TYPE_STR16: {
  ------------------
  |  Branch (558:5): [True: 7, False: 4.44k]
  ------------------
  559|      7|      if (!ctx->read(ctx, &u16temp, sizeof(uint16_t))) {
  ------------------
  |  Branch (559:11): [True: 6, False: 1]
  ------------------
  560|      6|        ctx->error = CMP_ERROR_DATA_READING;
  561|      6|        return false;
  562|      6|      }
  563|      1|      *size = be16(u16temp);
  564|      1|      return true;
  565|      7|    }
  566|      7|    case CMP_TYPE_STR32: {
  ------------------
  |  Branch (566:5): [True: 7, False: 4.44k]
  ------------------
  567|      7|      if (!ctx->read(ctx, &u32temp, sizeof(uint32_t))) {
  ------------------
  |  Branch (567:11): [True: 6, False: 1]
  ------------------
  568|      6|        ctx->error = CMP_ERROR_DATA_READING;
  569|      6|        return false;
  570|      6|      }
  571|      1|      *size = be32(u32temp);
  572|      1|      return true;
  573|      7|    }
  574|      9|    case CMP_TYPE_ARRAY16: {
  ------------------
  |  Branch (574:5): [True: 9, False: 4.44k]
  ------------------
  575|      9|      if (!ctx->read(ctx, &u16temp, sizeof(uint16_t))) {
  ------------------
  |  Branch (575:11): [True: 6, False: 3]
  ------------------
  576|      6|        ctx->error = CMP_ERROR_DATA_READING;
  577|      6|        return false;
  578|      6|      }
  579|      3|      *size = be16(u16temp);
  580|      3|      return true;
  581|      9|    }
  582|     11|    case CMP_TYPE_ARRAY32: {
  ------------------
  |  Branch (582:5): [True: 11, False: 4.43k]
  ------------------
  583|     11|      if (!ctx->read(ctx, &u32temp, sizeof(uint32_t))) {
  ------------------
  |  Branch (583:11): [True: 7, False: 4]
  ------------------
  584|      7|        ctx->error = CMP_ERROR_DATA_READING;
  585|      7|        return false;
  586|      7|      }
  587|      4|      *size = be32(u32temp);
  588|      4|      return true;
  589|     11|    }
  590|      7|    case CMP_TYPE_MAP16: {
  ------------------
  |  Branch (590:5): [True: 7, False: 4.44k]
  ------------------
  591|      7|      if (!ctx->read(ctx, &u16temp, sizeof(uint16_t))) {
  ------------------
  |  Branch (591:11): [True: 6, False: 1]
  ------------------
  592|      6|        ctx->error = CMP_ERROR_DATA_READING;
  593|      6|        return false;
  594|      6|      }
  595|      1|      *size = be16(u16temp);
  596|      1|      return true;
  597|      7|    }
  598|      7|    case CMP_TYPE_MAP32: {
  ------------------
  |  Branch (598:5): [True: 7, False: 4.44k]
  ------------------
  599|      7|      if (!ctx->read(ctx, &u32temp, sizeof(uint32_t))) {
  ------------------
  |  Branch (599:11): [True: 6, False: 1]
  ------------------
  600|      6|        ctx->error = CMP_ERROR_DATA_READING;
  601|      6|        return false;
  602|      6|      }
  603|      1|      *size = be32(u32temp);
  604|      1|      return true;
  605|      7|    }
  606|      0|    case CMP_TYPE_NEGATIVE_FIXNUM: {
  ------------------
  |  Branch (606:5): [True: 0, False: 4.45k]
  ------------------
  607|      0|      *size = 0;
  608|      0|      return true;
  609|      7|    }
  610|      0|    default: {
  ------------------
  |  Branch (610:5): [True: 0, False: 4.45k]
  ------------------
  611|      0|      ctx->error = CMP_ERROR_INVALID_TYPE;
  612|      0|      return false;
  613|      7|    }
  614|  4.45k|  }
  615|  4.45k|}

bin_pack_obj_size:
   64|    191|{
   65|    191|    Bin_Pack bp;
   66|    191|    bin_pack_init(&bp, nullptr, 0);
  ------------------
  |  |   63|    191|#define nullptr NULL
  ------------------
   67|    191|    if (!callback(obj, logger, &bp)) {
  ------------------
  |  Branch (67:9): [True: 0, False: 191]
  ------------------
   68|      0|        return UINT32_MAX;
   69|      0|    }
   70|    191|    return bp.bytes_pos;
   71|    191|}
bin_pack_obj:
   74|    191|{
   75|    191|    Bin_Pack bp;
   76|    191|    bin_pack_init(&bp, buf, buf_size);
   77|    191|    return callback(obj, logger, &bp);
   78|    191|}
bin_pack_obj_array:
  111|    382|{
  112|    382|    if (arr == nullptr) {
  ------------------
  |  |   63|    382|#define nullptr NULL
  ------------------
  |  Branch (112:9): [True: 2, False: 380]
  ------------------
  113|      2|        assert(arr_size == 0);
  114|      2|        return bin_pack_array(bp, 0);
  115|      2|    }
  116|       |
  117|    380|    if (!bin_pack_array(bp, arr_size)) {
  ------------------
  |  Branch (117:9): [True: 0, False: 380]
  ------------------
  118|      0|        return false;
  119|      0|    }
  120|       |
  121|  1.93k|    for (uint32_t i = 0; i < arr_size; ++i) {
  ------------------
  |  Branch (121:26): [True: 1.55k, False: 380]
  ------------------
  122|  1.55k|        if (!callback(arr, i, logger, bp)) {
  ------------------
  |  Branch (122:13): [True: 0, False: 1.55k]
  ------------------
  123|      0|            return false;
  124|      0|        }
  125|  1.55k|    }
  126|       |
  127|    380|    return true;
  128|    380|}
bin_pack_array:
  131|  2.98k|{
  132|  2.98k|    return cmp_write_array(&bp->ctx, size);
  133|  2.98k|}
bin_pack_bool:
  136|     30|{
  137|     30|    return cmp_write_bool(&bp->ctx, val);
  138|     30|}
bin_pack_u16:
  146|    112|{
  147|    112|    return cmp_write_uinteger(&bp->ctx, val);
  148|    112|}
bin_pack_u32:
  151|  4.24k|{
  152|  4.24k|    return cmp_write_uinteger(&bp->ctx, val);
  153|  4.24k|}
bin_pack_u64:
  156|    176|{
  157|    176|    return cmp_write_uinteger(&bp->ctx, val);
  158|    176|}
bin_pack_bin:
  161|    630|{
  162|    630|    return cmp_write_bin(&bp->ctx, data, length);
  163|    630|}
bin_pack.c:bin_pack_init:
   56|    382|{
   57|    382|    bp->bytes = buf;
   58|    382|    bp->bytes_size = buf_size;
   59|    382|    bp->bytes_pos = 0;
   60|    382|    cmp_init(&bp->ctx, bp, null_reader, null_skipper, buf_writer);
   61|    382|}
bin_pack.c:buf_writer:
   35|  9.10k|{
   36|  9.10k|    const uint8_t *bytes = (const uint8_t *)data;
   37|  9.10k|    Bin_Pack *bp = (Bin_Pack *)ctx->buf;
   38|  9.10k|    assert(bp != nullptr);
   39|  9.10k|    const uint32_t new_pos = bp->bytes_pos + count;
   40|  9.10k|    if (new_pos < bp->bytes_pos) {
  ------------------
  |  Branch (40:9): [True: 0, False: 9.10k]
  ------------------
   41|       |        // 32 bit overflow.
   42|      0|        return 0;
   43|      0|    }
   44|  9.10k|    if (bp->bytes != nullptr) {
  ------------------
  |  |   63|  9.10k|#define nullptr NULL
  ------------------
  |  Branch (44:9): [True: 4.55k, False: 4.55k]
  ------------------
   45|  4.55k|        if (new_pos > bp->bytes_size) {
  ------------------
  |  Branch (45:13): [True: 0, False: 4.55k]
  ------------------
   46|       |            // Buffer too small.
   47|      0|            return 0;
   48|      0|        }
   49|  4.55k|        memcpy(&bp->bytes[bp->bytes_pos], bytes, count);
   50|  4.55k|    }
   51|  9.10k|    bp->bytes_pos += count;
   52|  9.10k|    return count;
   53|  9.10k|}

bin_unpack_obj:
   64|    804|{
   65|    804|    Bin_Unpack bu;
   66|    804|    bin_unpack_init(&bu, mem, buf, buf_size);
   67|    804|    return callback(obj, &bu);
   68|    804|}
bin_unpack_array:
   71|    804|{
   72|    804|    return cmp_read_array(&bu->ctx, size) && *size <= bu->bytes_size;
  ------------------
  |  Branch (72:12): [True: 741, False: 63]
  |  Branch (72:46): [True: 739, False: 2]
  ------------------
   73|    804|}
bin_unpack_array_fixed:
   76|  3.19k|{
   77|  3.19k|    uint32_t size = 0;
   78|  3.19k|    const bool success = cmp_read_array(&bu->ctx, &size) && size == required_size;
  ------------------
  |  Branch (78:26): [True: 3.06k, False: 132]
  |  Branch (78:61): [True: 3.06k, False: 4]
  ------------------
   79|  3.19k|    if (actual_size != nullptr) {
  ------------------
  |  |   63|  3.19k|#define nullptr NULL
  ------------------
  |  Branch (79:9): [True: 0, False: 3.19k]
  ------------------
   80|      0|        *actual_size = size;
   81|      0|    }
   82|  3.19k|    return success;
   83|  3.19k|}
bin_unpack_bool:
   86|     65|{
   87|     65|    return cmp_read_bool(&bu->ctx, val);
   88|     65|}
bin_unpack_u16:
   96|    241|{
   97|    241|    return cmp_read_ushort(&bu->ctx, val);
   98|    241|}
bin_unpack_u32:
  101|  4.70k|{
  102|  4.70k|    return cmp_read_uint(&bu->ctx, val);
  103|  4.70k|}
bin_unpack_u64:
  106|    326|{
  107|    326|    return cmp_read_ulong(&bu->ctx, val);
  108|    326|}
bin_unpack_bin:
  116|    560|{
  117|    560|    uint32_t bin_size;
  118|    560|    if (!bin_unpack_bin_size(bu, &bin_size) || bin_size > bu->bytes_size) {
  ------------------
  |  Branch (118:9): [True: 65, False: 495]
  |  Branch (118:48): [True: 1, False: 494]
  ------------------
  119|       |        // There aren't as many bytes as this bin claims to want to allocate.
  120|     66|        return false;
  121|     66|    }
  122|    494|    uint8_t *const data = (uint8_t *)mem_balloc(bu->mem, bin_size);
  123|       |
  124|    494|    if (data == nullptr) {
  ------------------
  |  |   63|    494|#define nullptr NULL
  ------------------
  |  Branch (124:9): [True: 1, False: 493]
  ------------------
  125|      1|        return false;
  126|      1|    }
  127|       |
  128|    493|    if (!bin_unpack_bin_b(bu, data, bin_size)) {
  ------------------
  |  Branch (128:9): [True: 0, False: 493]
  ------------------
  129|      0|        mem_delete(bu->mem, data);
  130|      0|        return false;
  131|      0|    }
  132|       |
  133|    493|    *data_ptr = data;
  134|    493|    *data_length_ptr = bin_size;
  135|    493|    return true;
  136|    493|}
bin_unpack_bin_fixed:
  151|     52|{
  152|     52|    uint32_t bin_size;
  153|     52|    if (!bin_unpack_bin_size(bu, &bin_size) || bin_size != data_length) {
  ------------------
  |  Branch (153:9): [True: 28, False: 24]
  |  Branch (153:48): [True: 1, False: 23]
  ------------------
  154|     29|        return false;
  155|     29|    }
  156|       |
  157|     23|    return bin_unpack_bin_b(bu, data, bin_size);
  158|     52|}
bin_unpack_bin_size:
  161|    612|{
  162|    612|    return cmp_read_bin_size(&bu->ctx, size);
  163|    612|}
bin_unpack_bin_b:
  207|    516|{
  208|    516|    return bu->ctx.read(&bu->ctx, data, length);
  209|    516|}
bin_unpack.c:bin_unpack_init:
   56|    804|{
   57|    804|    bu->mem = mem;
   58|    804|    bu->bytes = buf;
   59|    804|    bu->bytes_size = buf_size;
   60|    804|    cmp_init(&bu->ctx, bu, buf_reader, buf_skipper, null_writer);
   61|    804|}
bin_unpack.c:buf_reader:
   24|  11.6k|{
   25|  11.6k|    uint8_t *bytes = (uint8_t *)data;
   26|  11.6k|    Bin_Unpack *reader = (Bin_Unpack *)ctx->buf;
   27|  11.6k|    assert(reader != nullptr && reader->bytes != nullptr);
   28|  11.6k|    if (limit > reader->bytes_size) {
  ------------------
  |  Branch (28:9): [True: 424, False: 11.2k]
  ------------------
   29|    424|        return false;
   30|    424|    }
   31|  11.2k|    memcpy(bytes, reader->bytes, limit);
   32|  11.2k|    reader->bytes += limit;
   33|  11.2k|    reader->bytes_size -= limit;
   34|  11.2k|    return true;
   35|  11.6k|}

tox_event_conference_connected_pack:
   52|     46|{
   53|     46|    return bin_pack_u32(bp, event->conference_number);
   54|     46|}
tox_event_conference_connected_new:
   74|     24|{
   75|     24|    Tox_Event_Conference_Connected *const conference_connected =
   76|     24|        (Tox_Event_Conference_Connected *)mem_alloc(mem, sizeof(Tox_Event_Conference_Connected));
   77|       |
   78|     24|    if (conference_connected == nullptr) {
  ------------------
  |  |   63|     24|#define nullptr NULL
  ------------------
  |  Branch (78:9): [True: 1, False: 23]
  ------------------
   79|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
   80|      1|    }
   81|       |
   82|     23|    tox_event_conference_connected_construct(conference_connected);
   83|     23|    return conference_connected;
   84|     24|}
tox_event_conference_connected_free:
   87|     24|{
   88|     24|    if (conference_connected != nullptr) {
  ------------------
  |  |   63|     24|#define nullptr NULL
  ------------------
  |  Branch (88:9): [True: 23, False: 1]
  ------------------
   89|     23|        tox_event_conference_connected_destruct(conference_connected, mem);
   90|     23|    }
   91|     24|    mem_delete(mem, conference_connected);
   92|     24|}
tox_event_conference_connected_unpack:
  115|     24|{
  116|     24|    assert(event != nullptr);
  117|     24|    assert(*event == nullptr);
  118|     24|    *event = tox_event_conference_connected_new(mem);
  119|       |
  120|     24|    if (*event == nullptr) {
  ------------------
  |  |   63|     24|#define nullptr NULL
  ------------------
  |  Branch (120:9): [True: 1, False: 23]
  ------------------
  121|      1|        return false;
  122|      1|    }
  123|       |
  124|     23|    return tox_event_conference_connected_unpack_into(*event, bu);
  125|     24|}
conference_connected.c:tox_event_conference_connected_construct:
   40|     23|{
   41|     23|    *conference_connected = (Tox_Event_Conference_Connected) {
   42|     23|        0
   43|     23|    };
   44|     23|}
conference_connected.c:tox_event_conference_connected_destruct:
   46|     23|{
   47|     23|    return;
   48|     23|}
conference_connected.c:tox_event_conference_connected_unpack_into:
   57|     23|{
   58|     23|    assert(event != nullptr);
   59|     23|    return bin_unpack_u32(bu, &event->conference_number);
   60|     23|}

tox_event_conference_invite_pack:
  107|     24|{
  108|     24|    return bin_pack_array(bp, 3)
  ------------------
  |  Branch (108:12): [True: 24, False: 0]
  ------------------
  109|     24|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (109:15): [True: 24, False: 0]
  ------------------
  110|     24|           && tox_conference_type_pack(event->type, bp)
  ------------------
  |  Branch (110:15): [True: 24, False: 0]
  ------------------
  111|     24|           && bin_pack_bin(bp, event->cookie, event->cookie_length);
  ------------------
  |  Branch (111:15): [True: 24, False: 0]
  ------------------
  112|     24|}
tox_event_conference_invite_new:
  138|     27|{
  139|     27|    Tox_Event_Conference_Invite *const conference_invite =
  140|     27|        (Tox_Event_Conference_Invite *)mem_alloc(mem, sizeof(Tox_Event_Conference_Invite));
  141|       |
  142|     27|    if (conference_invite == nullptr) {
  ------------------
  |  |   63|     27|#define nullptr NULL
  ------------------
  |  Branch (142:9): [True: 1, False: 26]
  ------------------
  143|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  144|      1|    }
  145|       |
  146|     26|    tox_event_conference_invite_construct(conference_invite);
  147|     26|    return conference_invite;
  148|     27|}
tox_event_conference_invite_free:
  151|     27|{
  152|     27|    if (conference_invite != nullptr) {
  ------------------
  |  |   63|     27|#define nullptr NULL
  ------------------
  |  Branch (152:9): [True: 26, False: 1]
  ------------------
  153|     26|        tox_event_conference_invite_destruct(conference_invite, mem);
  154|     26|    }
  155|     27|    mem_delete(mem, conference_invite);
  156|     27|}
tox_event_conference_invite_unpack:
  179|     27|{
  180|     27|    assert(event != nullptr);
  181|     27|    assert(*event == nullptr);
  182|     27|    *event = tox_event_conference_invite_new(mem);
  183|       |
  184|     27|    if (*event == nullptr) {
  ------------------
  |  |   63|     27|#define nullptr NULL
  ------------------
  |  Branch (184:9): [True: 1, False: 26]
  ------------------
  185|      1|        return false;
  186|      1|    }
  187|       |
  188|     26|    return tox_event_conference_invite_unpack_into(*event, bu);
  189|     27|}
conference_invite.c:tox_event_conference_invite_construct:
   95|     26|{
   96|     26|    *conference_invite = (Tox_Event_Conference_Invite) {
   97|     26|        0
   98|     26|    };
   99|     26|}
conference_invite.c:tox_event_conference_invite_destruct:
  101|     26|{
  102|     26|    free(conference_invite->cookie);
  103|     26|}
conference_invite.c:tox_event_conference_invite_unpack_into:
  115|     26|{
  116|     26|    assert(event != nullptr);
  117|     26|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|     26|#define nullptr NULL
  ------------------
  |  Branch (117:9): [True: 1, False: 25]
  ------------------
  118|      1|        return false;
  119|      1|    }
  120|       |
  121|     25|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (121:12): [True: 24, False: 1]
  ------------------
  122|     25|           && tox_conference_type_unpack(&event->type, bu)
  ------------------
  |  Branch (122:15): [True: 22, False: 2]
  ------------------
  123|     25|           && bin_unpack_bin(bu, &event->cookie, &event->cookie_length);
  ------------------
  |  Branch (123:15): [True: 18, False: 4]
  ------------------
  124|     26|}

tox_event_conference_message_pack:
  119|     20|{
  120|     20|    return bin_pack_array(bp, 4)
  ------------------
  |  Branch (120:12): [True: 20, False: 0]
  ------------------
  121|     20|           && bin_pack_u32(bp, event->conference_number)
  ------------------
  |  Branch (121:15): [True: 20, False: 0]
  ------------------
  122|     20|           && bin_pack_u32(bp, event->peer_number)
  ------------------
  |  Branch (122:15): [True: 20, False: 0]
  ------------------
  123|     20|           && tox_message_type_pack(event->type, bp)
  ------------------
  |  Branch (123:15): [True: 20, False: 0]
  ------------------
  124|     20|           && bin_pack_bin(bp, event->message, event->message_length);
  ------------------
  |  Branch (124:15): [True: 20, False: 0]
  ------------------
  125|     20|}
tox_event_conference_message_new:
  152|     22|{
  153|     22|    Tox_Event_Conference_Message *const conference_message =
  154|     22|        (Tox_Event_Conference_Message *)mem_alloc(mem, sizeof(Tox_Event_Conference_Message));
  155|       |
  156|     22|    if (conference_message == nullptr) {
  ------------------
  |  |   63|     22|#define nullptr NULL
  ------------------
  |  Branch (156:9): [True: 1, False: 21]
  ------------------
  157|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  158|      1|    }
  159|       |
  160|     21|    tox_event_conference_message_construct(conference_message);
  161|     21|    return conference_message;
  162|     22|}
tox_event_conference_message_free:
  165|     22|{
  166|     22|    if (conference_message != nullptr) {
  ------------------
  |  |   63|     22|#define nullptr NULL
  ------------------
  |  Branch (166:9): [True: 21, False: 1]
  ------------------
  167|     21|        tox_event_conference_message_destruct(conference_message, mem);
  168|     21|    }
  169|     22|    mem_delete(mem, conference_message);
  170|     22|}
tox_event_conference_message_unpack:
  193|     22|{
  194|     22|    assert(event != nullptr);
  195|     22|    assert(*event == nullptr);
  196|     22|    *event = tox_event_conference_message_new(mem);
  197|       |
  198|     22|    if (*event == nullptr) {
  ------------------
  |  |   63|     22|#define nullptr NULL
  ------------------
  |  Branch (198:9): [True: 1, False: 21]
  ------------------
  199|      1|        return false;
  200|      1|    }
  201|       |
  202|     21|    return tox_event_conference_message_unpack_into(*event, bu);
  203|     22|}
conference_message.c:tox_event_conference_message_construct:
  107|     21|{
  108|     21|    *conference_message = (Tox_Event_Conference_Message) {
  109|     21|        0
  110|     21|    };
  111|     21|}
conference_message.c:tox_event_conference_message_destruct:
  113|     21|{
  114|     21|    free(conference_message->message);
  115|     21|}
conference_message.c:tox_event_conference_message_unpack_into:
  128|     21|{
  129|     21|    assert(event != nullptr);
  130|     21|    if (!bin_unpack_array_fixed(bu, 4, nullptr)) {
  ------------------
  |  |   63|     21|#define nullptr NULL
  ------------------
  |  Branch (130:9): [True: 1, False: 20]
  ------------------
  131|      1|        return false;
  132|      1|    }
  133|       |
  134|     20|    return bin_unpack_u32(bu, &event->conference_number)
  ------------------
  |  Branch (134:12): [True: 19, False: 1]
  ------------------
  135|     20|           && bin_unpack_u32(bu, &event->peer_number)
  ------------------
  |  Branch (135:15): [True: 18, False: 1]
  ------------------
  136|     20|           && tox_message_type_unpack(&event->type, bu)
  ------------------
  |  Branch (136:15): [True: 14, False: 4]
  ------------------
  137|     20|           && bin_unpack_bin(bu, &event->message, &event->message_length);
  ------------------
  |  Branch (137:15): [True: 12, False: 2]
  ------------------
  138|     21|}

tox_event_conference_peer_list_changed_pack:
   52|    158|{
   53|    158|    return bin_pack_u32(bp, event->conference_number);
   54|    158|}
tox_event_conference_peer_list_changed_new:
   74|    114|{
   75|    114|    Tox_Event_Conference_Peer_List_Changed *const conference_peer_list_changed =
   76|    114|        (Tox_Event_Conference_Peer_List_Changed *)mem_alloc(mem, sizeof(Tox_Event_Conference_Peer_List_Changed));
   77|       |
   78|    114|    if (conference_peer_list_changed == nullptr) {
  ------------------
  |  |   63|    114|#define nullptr NULL
  ------------------
  |  Branch (78:9): [True: 1, False: 113]
  ------------------
   79|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
   80|      1|    }
   81|       |
   82|    113|    tox_event_conference_peer_list_changed_construct(conference_peer_list_changed);
   83|    113|    return conference_peer_list_changed;
   84|    114|}
tox_event_conference_peer_list_changed_free:
   87|    114|{
   88|    114|    if (conference_peer_list_changed != nullptr) {
  ------------------
  |  |   63|    114|#define nullptr NULL
  ------------------
  |  Branch (88:9): [True: 113, False: 1]
  ------------------
   89|    113|        tox_event_conference_peer_list_changed_destruct(conference_peer_list_changed, mem);
   90|    113|    }
   91|    114|    mem_delete(mem, conference_peer_list_changed);
   92|    114|}
tox_event_conference_peer_list_changed_unpack:
  115|    114|{
  116|    114|    assert(event != nullptr);
  117|    114|    assert(*event == nullptr);
  118|    114|    *event = tox_event_conference_peer_list_changed_new(mem);
  119|       |
  120|    114|    if (*event == nullptr) {
  ------------------
  |  |   63|    114|#define nullptr NULL
  ------------------
  |  Branch (120:9): [True: 1, False: 113]
  ------------------
  121|      1|        return false;
  122|      1|    }
  123|       |
  124|    113|    return tox_event_conference_peer_list_changed_unpack_into(*event, bu);
  125|    114|}
conference_peer_list_changed.c:tox_event_conference_peer_list_changed_construct:
   40|    113|{
   41|    113|    *conference_peer_list_changed = (Tox_Event_Conference_Peer_List_Changed) {
   42|    113|        0
   43|    113|    };
   44|    113|}
conference_peer_list_changed.c:tox_event_conference_peer_list_changed_destruct:
   46|    113|{
   47|    113|    return;
   48|    113|}
conference_peer_list_changed.c:tox_event_conference_peer_list_changed_unpack_into:
   57|    113|{
   58|    113|    assert(event != nullptr);
   59|    113|    return bin_unpack_u32(bu, &event->conference_number);
   60|    113|}

tox_event_conference_peer_name_pack:
  105|     20|{
  106|     20|    return bin_pack_array(bp, 3)
  ------------------
  |  Branch (106:12): [True: 20, False: 0]
  ------------------
  107|     20|           && bin_pack_u32(bp, event->conference_number)
  ------------------
  |  Branch (107:15): [True: 20, False: 0]
  ------------------
  108|     20|           && bin_pack_u32(bp, event->peer_number)
  ------------------
  |  Branch (108:15): [True: 20, False: 0]
  ------------------
  109|     20|           && bin_pack_bin(bp, event->name, event->name_length);
  ------------------
  |  Branch (109:15): [True: 20, False: 0]
  ------------------
  110|     20|}
tox_event_conference_peer_name_new:
  136|     19|{
  137|     19|    Tox_Event_Conference_Peer_Name *const conference_peer_name =
  138|     19|        (Tox_Event_Conference_Peer_Name *)mem_alloc(mem, sizeof(Tox_Event_Conference_Peer_Name));
  139|       |
  140|     19|    if (conference_peer_name == nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (140:9): [True: 1, False: 18]
  ------------------
  141|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  142|      1|    }
  143|       |
  144|     18|    tox_event_conference_peer_name_construct(conference_peer_name);
  145|     18|    return conference_peer_name;
  146|     19|}
tox_event_conference_peer_name_free:
  149|     19|{
  150|     19|    if (conference_peer_name != nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (150:9): [True: 18, False: 1]
  ------------------
  151|     18|        tox_event_conference_peer_name_destruct(conference_peer_name, mem);
  152|     18|    }
  153|     19|    mem_delete(mem, conference_peer_name);
  154|     19|}
tox_event_conference_peer_name_unpack:
  177|     19|{
  178|     19|    assert(event != nullptr);
  179|     19|    assert(*event == nullptr);
  180|     19|    *event = tox_event_conference_peer_name_new(mem);
  181|       |
  182|     19|    if (*event == nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (182:9): [True: 1, False: 18]
  ------------------
  183|      1|        return false;
  184|      1|    }
  185|       |
  186|     18|    return tox_event_conference_peer_name_unpack_into(*event, bu);
  187|     19|}
conference_peer_name.c:tox_event_conference_peer_name_construct:
   93|     18|{
   94|     18|    *conference_peer_name = (Tox_Event_Conference_Peer_Name) {
   95|     18|        0
   96|     18|    };
   97|     18|}
conference_peer_name.c:tox_event_conference_peer_name_destruct:
   99|     18|{
  100|     18|    free(conference_peer_name->name);
  101|     18|}
conference_peer_name.c:tox_event_conference_peer_name_unpack_into:
  113|     18|{
  114|     18|    assert(event != nullptr);
  115|     18|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
  |  Branch (115:9): [True: 1, False: 17]
  ------------------
  116|      1|        return false;
  117|      1|    }
  118|       |
  119|     17|    return bin_unpack_u32(bu, &event->conference_number)
  ------------------
  |  Branch (119:12): [True: 16, False: 1]
  ------------------
  120|     17|           && bin_unpack_u32(bu, &event->peer_number)
  ------------------
  |  Branch (120:15): [True: 15, False: 1]
  ------------------
  121|     17|           && bin_unpack_bin(bu, &event->name, &event->name_length);
  ------------------
  |  Branch (121:15): [True: 13, False: 2]
  ------------------
  122|     18|}

tox_event_conference_title_pack:
  105|     68|{
  106|     68|    return bin_pack_array(bp, 3)
  ------------------
  |  Branch (106:12): [True: 68, False: 0]
  ------------------
  107|     68|           && bin_pack_u32(bp, event->conference_number)
  ------------------
  |  Branch (107:15): [True: 68, False: 0]
  ------------------
  108|     68|           && bin_pack_u32(bp, event->peer_number)
  ------------------
  |  Branch (108:15): [True: 68, False: 0]
  ------------------
  109|     68|           && bin_pack_bin(bp, event->title, event->title_length);
  ------------------
  |  Branch (109:15): [True: 68, False: 0]
  ------------------
  110|     68|}
tox_event_conference_title_new:
  136|     60|{
  137|     60|    Tox_Event_Conference_Title *const conference_title =
  138|     60|        (Tox_Event_Conference_Title *)mem_alloc(mem, sizeof(Tox_Event_Conference_Title));
  139|       |
  140|     60|    if (conference_title == nullptr) {
  ------------------
  |  |   63|     60|#define nullptr NULL
  ------------------
  |  Branch (140:9): [True: 1, False: 59]
  ------------------
  141|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  142|      1|    }
  143|       |
  144|     59|    tox_event_conference_title_construct(conference_title);
  145|     59|    return conference_title;
  146|     60|}
tox_event_conference_title_free:
  149|     60|{
  150|     60|    if (conference_title != nullptr) {
  ------------------
  |  |   63|     60|#define nullptr NULL
  ------------------
  |  Branch (150:9): [True: 59, False: 1]
  ------------------
  151|     59|        tox_event_conference_title_destruct(conference_title, mem);
  152|     59|    }
  153|     60|    mem_delete(mem, conference_title);
  154|     60|}
tox_event_conference_title_unpack:
  177|     60|{
  178|     60|    assert(event != nullptr);
  179|     60|    assert(*event == nullptr);
  180|     60|    *event = tox_event_conference_title_new(mem);
  181|       |
  182|     60|    if (*event == nullptr) {
  ------------------
  |  |   63|     60|#define nullptr NULL
  ------------------
  |  Branch (182:9): [True: 1, False: 59]
  ------------------
  183|      1|        return false;
  184|      1|    }
  185|       |
  186|     59|    return tox_event_conference_title_unpack_into(*event, bu);
  187|     60|}
conference_title.c:tox_event_conference_title_construct:
   93|     59|{
   94|     59|    *conference_title = (Tox_Event_Conference_Title) {
   95|     59|        0
   96|     59|    };
   97|     59|}
conference_title.c:tox_event_conference_title_destruct:
   99|     59|{
  100|     59|    free(conference_title->title);
  101|     59|}
conference_title.c:tox_event_conference_title_unpack_into:
  113|     59|{
  114|     59|    assert(event != nullptr);
  115|     59|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|     59|#define nullptr NULL
  ------------------
  |  Branch (115:9): [True: 1, False: 58]
  ------------------
  116|      1|        return false;
  117|      1|    }
  118|       |
  119|     58|    return bin_unpack_u32(bu, &event->conference_number)
  ------------------
  |  Branch (119:12): [True: 57, False: 1]
  ------------------
  120|     58|           && bin_unpack_u32(bu, &event->peer_number)
  ------------------
  |  Branch (120:15): [True: 56, False: 1]
  ------------------
  121|     58|           && bin_unpack_bin(bu, &event->title, &event->title_length);
  ------------------
  |  Branch (121:15): [True: 52, False: 4]
  ------------------
  122|     59|}

tox_event_dht_nodes_response_pack:
   96|      2|{
   97|      2|    return bin_pack_array(bp, 3)
  ------------------
  |  Branch (97:12): [True: 2, False: 0]
  ------------------
   98|      2|           && bin_pack_bin(bp, event->public_key, TOX_PUBLIC_KEY_SIZE)
  ------------------
  |  |  212|      2|#define TOX_PUBLIC_KEY_SIZE            32
  ------------------
  |  Branch (98:15): [True: 2, False: 0]
  ------------------
   99|      2|           && bin_pack_bin(bp, event->ip, event->ip_length)
  ------------------
  |  Branch (99:15): [True: 2, False: 0]
  ------------------
  100|      2|           && bin_pack_u16(bp, event->port);
  ------------------
  |  Branch (100:15): [True: 2, False: 0]
  ------------------
  101|      2|}
tox_event_dht_nodes_response_new:
  121|     19|{
  122|     19|    Tox_Event_Dht_Nodes_Response *const dht_nodes_response =
  123|     19|        (Tox_Event_Dht_Nodes_Response *)mem_alloc(mem, sizeof(Tox_Event_Dht_Nodes_Response));
  124|       |
  125|     19|    if (dht_nodes_response == nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (125:9): [True: 1, False: 18]
  ------------------
  126|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  127|      1|    }
  128|       |
  129|     18|    tox_event_dht_nodes_response_construct(dht_nodes_response);
  130|     18|    return dht_nodes_response;
  131|     19|}
tox_event_dht_nodes_response_free:
  134|     19|{
  135|     19|    if (dht_nodes_response != nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (135:9): [True: 18, False: 1]
  ------------------
  136|     18|        tox_event_dht_nodes_response_destruct(dht_nodes_response, mem);
  137|     18|    }
  138|     19|    mem_delete(mem, dht_nodes_response);
  139|     19|}
tox_event_dht_nodes_response_unpack:
  162|     19|{
  163|     19|    *event = tox_event_dht_nodes_response_new(mem);
  164|       |
  165|     19|    if (*event == nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (165:9): [True: 1, False: 18]
  ------------------
  166|      1|        return false;
  167|      1|    }
  168|       |
  169|     18|    return tox_event_dht_nodes_response_unpack_into(*event, bu);
  170|     19|}
dht_nodes_response.c:tox_event_dht_nodes_response_construct:
   82|     18|{
   83|     18|    *dht_nodes_response = (Tox_Event_Dht_Nodes_Response) {
   84|     18|        {
   85|     18|            0
   86|     18|        }
   87|     18|    };
   88|     18|}
dht_nodes_response.c:tox_event_dht_nodes_response_destruct:
   90|     18|{
   91|     18|    mem_delete(mem, dht_nodes_response->ip);
   92|     18|}
dht_nodes_response.c:tox_event_dht_nodes_response_unpack_into:
  104|     18|{
  105|     18|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
  |  Branch (105:9): [True: 2, False: 16]
  ------------------
  106|      2|        return false;
  107|      2|    }
  108|       |
  109|     16|    return bin_unpack_bin_fixed(bu, event->public_key, TOX_PUBLIC_KEY_SIZE)
  ------------------
  |  |  212|     16|#define TOX_PUBLIC_KEY_SIZE            32
  ------------------
  |  Branch (109:12): [True: 2, False: 14]
  ------------------
  110|     16|           && bin_unpack_bin(bu, &event->ip, &event->ip_length)
  ------------------
  |  Branch (110:15): [True: 1, False: 1]
  ------------------
  111|     16|           && bin_unpack_u16(bu, &event->port);
  ------------------
  |  Branch (111:15): [True: 1, False: 0]
  ------------------
  112|     18|}

tox_events_free:
   44|  1.41k|{
   45|  1.41k|    if (events == nullptr) {
  ------------------
  |  |   63|  1.41k|#define nullptr NULL
  ------------------
  |  Branch (45:9): [True: 614, False: 804]
  ------------------
   46|    614|        return;
   47|    614|    }
   48|       |
   49|  2.11k|    for (uint32_t i = 0; i < events->events_size; ++i) {
  ------------------
  |  Branch (49:26): [True: 1.30k, False: 804]
  ------------------
   50|  1.30k|        tox_event_destruct(&events->events[i], events->mem);
   51|  1.30k|    }
   52|       |
   53|    804|    mem_delete(events->mem, events->events);
   54|    804|    mem_delete(events->mem, events);
   55|    804|}
tox_events_add:
   58|  1.30k|{
   59|  1.30k|    if (events->events_size == UINT32_MAX) {
  ------------------
  |  Branch (59:9): [True: 0, False: 1.30k]
  ------------------
   60|      0|        return false;
   61|      0|    }
   62|       |
   63|  1.30k|    if (events->events_size == events->events_capacity) {
  ------------------
  |  Branch (63:9): [True: 841, False: 466]
  ------------------
   64|    841|        const uint32_t new_events_capacity = events->events_capacity * 2 + 1;
   65|    841|        Tox_Event *new_events = (Tox_Event *)mem_vrealloc(
   66|    841|                                    events->mem, events->events, new_events_capacity, sizeof(Tox_Event));
   67|       |
   68|    841|        if (new_events == nullptr) {
  ------------------
  |  |   63|    841|#define nullptr NULL
  ------------------
  |  Branch (68:13): [True: 1, False: 840]
  ------------------
   69|      1|            return false;
   70|      1|        }
   71|       |
   72|    840|        events->events = new_events;
   73|    840|        events->events_capacity = new_events_capacity;
   74|    840|    }
   75|       |
   76|  1.30k|    events->events[events->events_size] = *event;
   77|  1.30k|    ++events->events_size;
   78|       |
   79|  1.30k|    return true;
   80|  1.30k|}

tox_event_file_chunk_request_pack:
   88|    110|{
   89|    110|    return bin_pack_array(bp, 4)
  ------------------
  |  Branch (89:12): [True: 110, False: 0]
  ------------------
   90|    110|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (90:15): [True: 110, False: 0]
  ------------------
   91|    110|           && bin_pack_u32(bp, event->file_number)
  ------------------
  |  Branch (91:15): [True: 110, False: 0]
  ------------------
   92|    110|           && bin_pack_u64(bp, event->position)
  ------------------
  |  Branch (92:15): [True: 110, False: 0]
  ------------------
   93|    110|           && bin_pack_u16(bp, event->length);
  ------------------
  |  Branch (93:15): [True: 110, False: 0]
  ------------------
   94|    110|}
tox_event_file_chunk_request_new:
  121|    278|{
  122|    278|    Tox_Event_File_Chunk_Request *const file_chunk_request =
  123|    278|        (Tox_Event_File_Chunk_Request *)mem_alloc(mem, sizeof(Tox_Event_File_Chunk_Request));
  124|       |
  125|    278|    if (file_chunk_request == nullptr) {
  ------------------
  |  |   63|    278|#define nullptr NULL
  ------------------
  |  Branch (125:9): [True: 1, False: 277]
  ------------------
  126|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  127|      1|    }
  128|       |
  129|    277|    tox_event_file_chunk_request_construct(file_chunk_request);
  130|    277|    return file_chunk_request;
  131|    278|}
tox_event_file_chunk_request_free:
  134|    278|{
  135|    278|    if (file_chunk_request != nullptr) {
  ------------------
  |  |   63|    278|#define nullptr NULL
  ------------------
  |  Branch (135:9): [True: 277, False: 1]
  ------------------
  136|    277|        tox_event_file_chunk_request_destruct(file_chunk_request, mem);
  137|    277|    }
  138|    278|    mem_delete(mem, file_chunk_request);
  139|    278|}
tox_event_file_chunk_request_unpack:
  162|    278|{
  163|    278|    assert(event != nullptr);
  164|    278|    assert(*event == nullptr);
  165|    278|    *event = tox_event_file_chunk_request_new(mem);
  166|       |
  167|    278|    if (*event == nullptr) {
  ------------------
  |  |   63|    278|#define nullptr NULL
  ------------------
  |  Branch (167:9): [True: 1, False: 277]
  ------------------
  168|      1|        return false;
  169|      1|    }
  170|       |
  171|    277|    return tox_event_file_chunk_request_unpack_into(*event, bu);
  172|    278|}
file_chunk_request.c:tox_event_file_chunk_request_construct:
   76|    277|{
   77|    277|    *file_chunk_request = (Tox_Event_File_Chunk_Request) {
   78|    277|        0
   79|    277|    };
   80|    277|}
file_chunk_request.c:tox_event_file_chunk_request_destruct:
   82|    277|{
   83|    277|    return;
   84|    277|}
file_chunk_request.c:tox_event_file_chunk_request_unpack_into:
   97|    277|{
   98|    277|    assert(event != nullptr);
   99|    277|    if (!bin_unpack_array_fixed(bu, 4, nullptr)) {
  ------------------
  |  |   63|    277|#define nullptr NULL
  ------------------
  |  Branch (99:9): [True: 2, False: 275]
  ------------------
  100|      2|        return false;
  101|      2|    }
  102|       |
  103|    275|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (103:12): [True: 274, False: 1]
  ------------------
  104|    275|           && bin_unpack_u32(bu, &event->file_number)
  ------------------
  |  Branch (104:15): [True: 273, False: 1]
  ------------------
  105|    275|           && bin_unpack_u64(bu, &event->position)
  ------------------
  |  Branch (105:15): [True: 240, False: 33]
  ------------------
  106|    275|           && bin_unpack_u16(bu, &event->length);
  ------------------
  |  Branch (106:15): [True: 182, False: 58]
  ------------------
  107|    277|}

tox_event_file_recv_pack:
  129|     46|{
  130|     46|    return bin_pack_array(bp, 5)
  ------------------
  |  Branch (130:12): [True: 46, False: 0]
  ------------------
  131|     46|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (131:15): [True: 46, False: 0]
  ------------------
  132|     46|           && bin_pack_u32(bp, event->file_number)
  ------------------
  |  Branch (132:15): [True: 46, False: 0]
  ------------------
  133|     46|           && bin_pack_u32(bp, event->kind)
  ------------------
  |  Branch (133:15): [True: 46, False: 0]
  ------------------
  134|     46|           && bin_pack_u64(bp, event->file_size)
  ------------------
  |  Branch (134:15): [True: 46, False: 0]
  ------------------
  135|     46|           && bin_pack_bin(bp, event->filename, event->filename_length);
  ------------------
  |  Branch (135:15): [True: 46, False: 0]
  ------------------
  136|     46|}
tox_event_file_recv_new:
  164|     37|{
  165|     37|    Tox_Event_File_Recv *const file_recv =
  166|     37|        (Tox_Event_File_Recv *)mem_alloc(mem, sizeof(Tox_Event_File_Recv));
  167|       |
  168|     37|    if (file_recv == nullptr) {
  ------------------
  |  |   63|     37|#define nullptr NULL
  ------------------
  |  Branch (168:9): [True: 1, False: 36]
  ------------------
  169|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  170|      1|    }
  171|       |
  172|     36|    tox_event_file_recv_construct(file_recv);
  173|     36|    return file_recv;
  174|     37|}
tox_event_file_recv_free:
  177|     37|{
  178|     37|    if (file_recv != nullptr) {
  ------------------
  |  |   63|     37|#define nullptr NULL
  ------------------
  |  Branch (178:9): [True: 36, False: 1]
  ------------------
  179|     36|        tox_event_file_recv_destruct(file_recv, mem);
  180|     36|    }
  181|     37|    mem_delete(mem, file_recv);
  182|     37|}
tox_event_file_recv_unpack:
  205|     37|{
  206|     37|    assert(event != nullptr);
  207|     37|    assert(*event == nullptr);
  208|     37|    *event = tox_event_file_recv_new(mem);
  209|       |
  210|     37|    if (*event == nullptr) {
  ------------------
  |  |   63|     37|#define nullptr NULL
  ------------------
  |  Branch (210:9): [True: 1, False: 36]
  ------------------
  211|      1|        return false;
  212|      1|    }
  213|       |
  214|     36|    return tox_event_file_recv_unpack_into(*event, bu);
  215|     37|}
file_recv.c:tox_event_file_recv_construct:
  117|     36|{
  118|     36|    *file_recv = (Tox_Event_File_Recv) {
  119|     36|        0
  120|     36|    };
  121|     36|}
file_recv.c:tox_event_file_recv_destruct:
  123|     36|{
  124|     36|    free(file_recv->filename);
  125|     36|}
file_recv.c:tox_event_file_recv_unpack_into:
  139|     36|{
  140|     36|    assert(event != nullptr);
  141|     36|    if (!bin_unpack_array_fixed(bu, 5, nullptr)) {
  ------------------
  |  |   63|     36|#define nullptr NULL
  ------------------
  |  Branch (141:9): [True: 2, False: 34]
  ------------------
  142|      2|        return false;
  143|      2|    }
  144|       |
  145|     34|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (145:12): [True: 33, False: 1]
  ------------------
  146|     34|           && bin_unpack_u32(bu, &event->file_number)
  ------------------
  |  Branch (146:15): [True: 32, False: 1]
  ------------------
  147|     34|           && bin_unpack_u32(bu, &event->kind)
  ------------------
  |  Branch (147:15): [True: 31, False: 1]
  ------------------
  148|     34|           && bin_unpack_u64(bu, &event->file_size)
  ------------------
  |  Branch (148:15): [True: 30, False: 1]
  ------------------
  149|     34|           && bin_unpack_bin(bu, &event->filename, &event->filename_length);
  ------------------
  |  Branch (149:15): [True: 28, False: 2]
  ------------------
  150|     36|}

tox_event_file_recv_chunk_pack:
  117|     20|{
  118|     20|    return bin_pack_array(bp, 4)
  ------------------
  |  Branch (118:12): [True: 20, False: 0]
  ------------------
  119|     20|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (119:15): [True: 20, False: 0]
  ------------------
  120|     20|           && bin_pack_u32(bp, event->file_number)
  ------------------
  |  Branch (120:15): [True: 20, False: 0]
  ------------------
  121|     20|           && bin_pack_u64(bp, event->position)
  ------------------
  |  Branch (121:15): [True: 20, False: 0]
  ------------------
  122|     20|           && bin_pack_bin(bp, event->data, event->data_length);
  ------------------
  |  Branch (122:15): [True: 20, False: 0]
  ------------------
  123|     20|}
tox_event_file_recv_chunk_new:
  150|     28|{
  151|     28|    Tox_Event_File_Recv_Chunk *const file_recv_chunk =
  152|     28|        (Tox_Event_File_Recv_Chunk *)mem_alloc(mem, sizeof(Tox_Event_File_Recv_Chunk));
  153|       |
  154|     28|    if (file_recv_chunk == nullptr) {
  ------------------
  |  |   63|     28|#define nullptr NULL
  ------------------
  |  Branch (154:9): [True: 1, False: 27]
  ------------------
  155|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  156|      1|    }
  157|       |
  158|     27|    tox_event_file_recv_chunk_construct(file_recv_chunk);
  159|     27|    return file_recv_chunk;
  160|     28|}
tox_event_file_recv_chunk_free:
  163|     28|{
  164|     28|    if (file_recv_chunk != nullptr) {
  ------------------
  |  |   63|     28|#define nullptr NULL
  ------------------
  |  Branch (164:9): [True: 27, False: 1]
  ------------------
  165|     27|        tox_event_file_recv_chunk_destruct(file_recv_chunk, mem);
  166|     27|    }
  167|     28|    mem_delete(mem, file_recv_chunk);
  168|     28|}
tox_event_file_recv_chunk_unpack:
  191|     28|{
  192|     28|    assert(event != nullptr);
  193|     28|    assert(*event == nullptr);
  194|     28|    *event = tox_event_file_recv_chunk_new(mem);
  195|       |
  196|     28|    if (*event == nullptr) {
  ------------------
  |  |   63|     28|#define nullptr NULL
  ------------------
  |  Branch (196:9): [True: 1, False: 27]
  ------------------
  197|      1|        return false;
  198|      1|    }
  199|       |
  200|     27|    return tox_event_file_recv_chunk_unpack_into(*event, bu);
  201|     28|}
file_recv_chunk.c:tox_event_file_recv_chunk_construct:
  105|     27|{
  106|     27|    *file_recv_chunk = (Tox_Event_File_Recv_Chunk) {
  107|     27|        0
  108|     27|    };
  109|     27|}
file_recv_chunk.c:tox_event_file_recv_chunk_destruct:
  111|     27|{
  112|     27|    free(file_recv_chunk->data);
  113|     27|}
file_recv_chunk.c:tox_event_file_recv_chunk_unpack_into:
  126|     27|{
  127|     27|    assert(event != nullptr);
  128|     27|    if (!bin_unpack_array_fixed(bu, 4, nullptr)) {
  ------------------
  |  |   63|     27|#define nullptr NULL
  ------------------
  |  Branch (128:9): [True: 3, False: 24]
  ------------------
  129|      3|        return false;
  130|      3|    }
  131|       |
  132|     24|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (132:12): [True: 23, False: 1]
  ------------------
  133|     24|           && bin_unpack_u32(bu, &event->file_number)
  ------------------
  |  Branch (133:15): [True: 22, False: 1]
  ------------------
  134|     24|           && bin_unpack_u64(bu, &event->position)
  ------------------
  |  Branch (134:15): [True: 16, False: 6]
  ------------------
  135|     24|           && bin_unpack_bin(bu, &event->data, &event->data_length);
  ------------------
  |  Branch (135:15): [True: 14, False: 2]
  ------------------
  136|     27|}

tox_event_file_recv_control_pack:
   78|     26|{
   79|     26|    return bin_pack_array(bp, 3)
  ------------------
  |  Branch (79:12): [True: 26, False: 0]
  ------------------
   80|     26|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (80:15): [True: 26, False: 0]
  ------------------
   81|     26|           && bin_pack_u32(bp, event->file_number)
  ------------------
  |  Branch (81:15): [True: 26, False: 0]
  ------------------
   82|     26|           && tox_file_control_pack(event->control, bp);
  ------------------
  |  Branch (82:15): [True: 26, False: 0]
  ------------------
   83|     26|}
tox_event_file_recv_control_new:
  109|     42|{
  110|     42|    Tox_Event_File_Recv_Control *const file_recv_control =
  111|     42|        (Tox_Event_File_Recv_Control *)mem_alloc(mem, sizeof(Tox_Event_File_Recv_Control));
  112|       |
  113|     42|    if (file_recv_control == nullptr) {
  ------------------
  |  |   63|     42|#define nullptr NULL
  ------------------
  |  Branch (113:9): [True: 1, False: 41]
  ------------------
  114|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  115|      1|    }
  116|       |
  117|     41|    tox_event_file_recv_control_construct(file_recv_control);
  118|     41|    return file_recv_control;
  119|     42|}
tox_event_file_recv_control_free:
  122|     42|{
  123|     42|    if (file_recv_control != nullptr) {
  ------------------
  |  |   63|     42|#define nullptr NULL
  ------------------
  |  Branch (123:9): [True: 41, False: 1]
  ------------------
  124|     41|        tox_event_file_recv_control_destruct(file_recv_control, mem);
  125|     41|    }
  126|     42|    mem_delete(mem, file_recv_control);
  127|     42|}
tox_event_file_recv_control_unpack:
  150|     42|{
  151|     42|    assert(event != nullptr);
  152|     42|    assert(*event == nullptr);
  153|     42|    *event = tox_event_file_recv_control_new(mem);
  154|       |
  155|     42|    if (*event == nullptr) {
  ------------------
  |  |   63|     42|#define nullptr NULL
  ------------------
  |  Branch (155:9): [True: 1, False: 41]
  ------------------
  156|      1|        return false;
  157|      1|    }
  158|       |
  159|     41|    return tox_event_file_recv_control_unpack_into(*event, bu);
  160|     42|}
file_recv_control.c:tox_event_file_recv_control_construct:
   66|     41|{
   67|     41|    *file_recv_control = (Tox_Event_File_Recv_Control) {
   68|     41|        0
   69|     41|    };
   70|     41|}
file_recv_control.c:tox_event_file_recv_control_destruct:
   72|     41|{
   73|     41|    return;
   74|     41|}
file_recv_control.c:tox_event_file_recv_control_unpack_into:
   86|     41|{
   87|     41|    assert(event != nullptr);
   88|     41|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|     41|#define nullptr NULL
  ------------------
  |  Branch (88:9): [True: 5, False: 36]
  ------------------
   89|      5|        return false;
   90|      5|    }
   91|       |
   92|     36|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (92:12): [True: 35, False: 1]
  ------------------
   93|     36|           && bin_unpack_u32(bu, &event->file_number)
  ------------------
  |  Branch (93:15): [True: 34, False: 1]
  ------------------
   94|     36|           && tox_file_control_unpack(&event->control, bu);
  ------------------
  |  Branch (94:15): [True: 31, False: 3]
  ------------------
   95|     41|}

tox_event_friend_connection_status_pack:
   66|     40|{
   67|     40|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (67:12): [True: 40, False: 0]
  ------------------
   68|     40|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (68:15): [True: 40, False: 0]
  ------------------
   69|     40|           && tox_connection_pack(event->connection_status, bp);
  ------------------
  |  Branch (69:15): [True: 40, False: 0]
  ------------------
   70|     40|}
tox_event_friend_connection_status_new:
   95|     39|{
   96|     39|    Tox_Event_Friend_Connection_Status *const friend_connection_status =
   97|     39|        (Tox_Event_Friend_Connection_Status *)mem_alloc(mem, sizeof(Tox_Event_Friend_Connection_Status));
   98|       |
   99|     39|    if (friend_connection_status == nullptr) {
  ------------------
  |  |   63|     39|#define nullptr NULL
  ------------------
  |  Branch (99:9): [True: 1, False: 38]
  ------------------
  100|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  101|      1|    }
  102|       |
  103|     38|    tox_event_friend_connection_status_construct(friend_connection_status);
  104|     38|    return friend_connection_status;
  105|     39|}
tox_event_friend_connection_status_free:
  108|     39|{
  109|     39|    if (friend_connection_status != nullptr) {
  ------------------
  |  |   63|     39|#define nullptr NULL
  ------------------
  |  Branch (109:9): [True: 38, False: 1]
  ------------------
  110|     38|        tox_event_friend_connection_status_destruct(friend_connection_status, mem);
  111|     38|    }
  112|     39|    mem_delete(mem, friend_connection_status);
  113|     39|}
tox_event_friend_connection_status_unpack:
  136|     39|{
  137|     39|    assert(event != nullptr);
  138|     39|    assert(*event == nullptr);
  139|     39|    *event = tox_event_friend_connection_status_new(mem);
  140|       |
  141|     39|    if (*event == nullptr) {
  ------------------
  |  |   63|     39|#define nullptr NULL
  ------------------
  |  Branch (141:9): [True: 1, False: 38]
  ------------------
  142|      1|        return false;
  143|      1|    }
  144|       |
  145|     38|    return tox_event_friend_connection_status_unpack_into(*event, bu);
  146|     39|}
friend_connection_status.c:tox_event_friend_connection_status_construct:
   54|     38|{
   55|     38|    *friend_connection_status = (Tox_Event_Friend_Connection_Status) {
   56|     38|        0
   57|     38|    };
   58|     38|}
friend_connection_status.c:tox_event_friend_connection_status_destruct:
   60|     38|{
   61|     38|    return;
   62|     38|}
friend_connection_status.c:tox_event_friend_connection_status_unpack_into:
   73|     38|{
   74|     38|    assert(event != nullptr);
   75|     38|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     38|#define nullptr NULL
  ------------------
  |  Branch (75:9): [True: 2, False: 36]
  ------------------
   76|      2|        return false;
   77|      2|    }
   78|       |
   79|     36|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (79:12): [True: 35, False: 1]
  ------------------
   80|     36|           && tox_connection_unpack(&event->connection_status, bu);
  ------------------
  |  Branch (80:15): [True: 34, False: 1]
  ------------------
   81|     38|}

tox_event_friend_lossless_packet_pack:
   93|     20|{
   94|     20|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (94:12): [True: 20, False: 0]
  ------------------
   95|     20|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (95:15): [True: 20, False: 0]
  ------------------
   96|     20|           && bin_pack_bin(bp, event->data, event->data_length);
  ------------------
  |  Branch (96:15): [True: 20, False: 0]
  ------------------
   97|     20|}
tox_event_friend_lossless_packet_new:
  122|     21|{
  123|     21|    Tox_Event_Friend_Lossless_Packet *const friend_lossless_packet =
  124|     21|        (Tox_Event_Friend_Lossless_Packet *)mem_alloc(mem, sizeof(Tox_Event_Friend_Lossless_Packet));
  125|       |
  126|     21|    if (friend_lossless_packet == nullptr) {
  ------------------
  |  |   63|     21|#define nullptr NULL
  ------------------
  |  Branch (126:9): [True: 1, False: 20]
  ------------------
  127|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  128|      1|    }
  129|       |
  130|     20|    tox_event_friend_lossless_packet_construct(friend_lossless_packet);
  131|     20|    return friend_lossless_packet;
  132|     21|}
tox_event_friend_lossless_packet_free:
  135|     21|{
  136|     21|    if (friend_lossless_packet != nullptr) {
  ------------------
  |  |   63|     21|#define nullptr NULL
  ------------------
  |  Branch (136:9): [True: 20, False: 1]
  ------------------
  137|     20|        tox_event_friend_lossless_packet_destruct(friend_lossless_packet, mem);
  138|     20|    }
  139|     21|    mem_delete(mem, friend_lossless_packet);
  140|     21|}
tox_event_friend_lossless_packet_unpack:
  163|     21|{
  164|     21|    assert(event != nullptr);
  165|     21|    assert(*event == nullptr);
  166|     21|    *event = tox_event_friend_lossless_packet_new(mem);
  167|       |
  168|     21|    if (*event == nullptr) {
  ------------------
  |  |   63|     21|#define nullptr NULL
  ------------------
  |  Branch (168:9): [True: 1, False: 20]
  ------------------
  169|      1|        return false;
  170|      1|    }
  171|       |
  172|     20|    return tox_event_friend_lossless_packet_unpack_into(*event, bu);
  173|     21|}
friend_lossless_packet.c:tox_event_friend_lossless_packet_construct:
   81|     20|{
   82|     20|    *friend_lossless_packet = (Tox_Event_Friend_Lossless_Packet) {
   83|     20|        0
   84|     20|    };
   85|     20|}
friend_lossless_packet.c:tox_event_friend_lossless_packet_destruct:
   87|     20|{
   88|     20|    free(friend_lossless_packet->data);
   89|     20|}
friend_lossless_packet.c:tox_event_friend_lossless_packet_unpack_into:
  100|     20|{
  101|     20|    assert(event != nullptr);
  102|     20|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (102:9): [True: 1, False: 19]
  ------------------
  103|      1|        return false;
  104|      1|    }
  105|       |
  106|     19|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (106:12): [True: 18, False: 1]
  ------------------
  107|     19|           && bin_unpack_bin(bu, &event->data, &event->data_length);
  ------------------
  |  Branch (107:15): [True: 15, False: 3]
  ------------------
  108|     20|}

tox_event_friend_lossy_packet_pack:
   93|     26|{
   94|     26|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (94:12): [True: 26, False: 0]
  ------------------
   95|     26|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (95:15): [True: 26, False: 0]
  ------------------
   96|     26|           && bin_pack_bin(bp, event->data, event->data_length);
  ------------------
  |  Branch (96:15): [True: 26, False: 0]
  ------------------
   97|     26|}
tox_event_friend_lossy_packet_new:
  122|     27|{
  123|     27|    Tox_Event_Friend_Lossy_Packet *const friend_lossy_packet =
  124|     27|        (Tox_Event_Friend_Lossy_Packet *)mem_alloc(mem, sizeof(Tox_Event_Friend_Lossy_Packet));
  125|       |
  126|     27|    if (friend_lossy_packet == nullptr) {
  ------------------
  |  |   63|     27|#define nullptr NULL
  ------------------
  |  Branch (126:9): [True: 1, False: 26]
  ------------------
  127|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  128|      1|    }
  129|       |
  130|     26|    tox_event_friend_lossy_packet_construct(friend_lossy_packet);
  131|     26|    return friend_lossy_packet;
  132|     27|}
tox_event_friend_lossy_packet_free:
  135|     27|{
  136|     27|    if (friend_lossy_packet != nullptr) {
  ------------------
  |  |   63|     27|#define nullptr NULL
  ------------------
  |  Branch (136:9): [True: 26, False: 1]
  ------------------
  137|     26|        tox_event_friend_lossy_packet_destruct(friend_lossy_packet, mem);
  138|     26|    }
  139|     27|    mem_delete(mem, friend_lossy_packet);
  140|     27|}
tox_event_friend_lossy_packet_unpack:
  163|     27|{
  164|     27|    assert(event != nullptr);
  165|     27|    assert(*event == nullptr);
  166|     27|    *event = tox_event_friend_lossy_packet_new(mem);
  167|       |
  168|     27|    if (*event == nullptr) {
  ------------------
  |  |   63|     27|#define nullptr NULL
  ------------------
  |  Branch (168:9): [True: 1, False: 26]
  ------------------
  169|      1|        return false;
  170|      1|    }
  171|       |
  172|     26|    return tox_event_friend_lossy_packet_unpack_into(*event, bu);
  173|     27|}
friend_lossy_packet.c:tox_event_friend_lossy_packet_construct:
   81|     26|{
   82|     26|    *friend_lossy_packet = (Tox_Event_Friend_Lossy_Packet) {
   83|     26|        0
   84|     26|    };
   85|     26|}
friend_lossy_packet.c:tox_event_friend_lossy_packet_destruct:
   87|     26|{
   88|     26|    free(friend_lossy_packet->data);
   89|     26|}
friend_lossy_packet.c:tox_event_friend_lossy_packet_unpack_into:
  100|     26|{
  101|     26|    assert(event != nullptr);
  102|     26|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     26|#define nullptr NULL
  ------------------
  |  Branch (102:9): [True: 1, False: 25]
  ------------------
  103|      1|        return false;
  104|      1|    }
  105|       |
  106|     25|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (106:12): [True: 24, False: 1]
  ------------------
  107|     25|           && bin_unpack_bin(bu, &event->data, &event->data_length);
  ------------------
  |  Branch (107:15): [True: 22, False: 2]
  ------------------
  108|     26|}

tox_event_friend_message_pack:
  107|     20|{
  108|     20|    return bin_pack_array(bp, 3)
  ------------------
  |  Branch (108:12): [True: 20, False: 0]
  ------------------
  109|     20|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (109:15): [True: 20, False: 0]
  ------------------
  110|     20|           && tox_message_type_pack(event->type, bp)
  ------------------
  |  Branch (110:15): [True: 20, False: 0]
  ------------------
  111|     20|           && bin_pack_bin(bp, event->message, event->message_length);
  ------------------
  |  Branch (111:15): [True: 20, False: 0]
  ------------------
  112|     20|}
tox_event_friend_message_new:
  138|     15|{
  139|     15|    Tox_Event_Friend_Message *const friend_message =
  140|     15|        (Tox_Event_Friend_Message *)mem_alloc(mem, sizeof(Tox_Event_Friend_Message));
  141|       |
  142|     15|    if (friend_message == nullptr) {
  ------------------
  |  |   63|     15|#define nullptr NULL
  ------------------
  |  Branch (142:9): [True: 1, False: 14]
  ------------------
  143|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  144|      1|    }
  145|       |
  146|     14|    tox_event_friend_message_construct(friend_message);
  147|     14|    return friend_message;
  148|     15|}
tox_event_friend_message_free:
  151|     15|{
  152|     15|    if (friend_message != nullptr) {
  ------------------
  |  |   63|     15|#define nullptr NULL
  ------------------
  |  Branch (152:9): [True: 14, False: 1]
  ------------------
  153|     14|        tox_event_friend_message_destruct(friend_message, mem);
  154|     14|    }
  155|     15|    mem_delete(mem, friend_message);
  156|     15|}
tox_event_friend_message_unpack:
  179|     15|{
  180|     15|    assert(event != nullptr);
  181|     15|    assert(*event == nullptr);
  182|     15|    *event = tox_event_friend_message_new(mem);
  183|       |
  184|     15|    if (*event == nullptr) {
  ------------------
  |  |   63|     15|#define nullptr NULL
  ------------------
  |  Branch (184:9): [True: 1, False: 14]
  ------------------
  185|      1|        return false;
  186|      1|    }
  187|       |
  188|     14|    return tox_event_friend_message_unpack_into(*event, bu);
  189|     15|}
friend_message.c:tox_event_friend_message_construct:
   95|     14|{
   96|     14|    *friend_message = (Tox_Event_Friend_Message) {
   97|     14|        0
   98|     14|    };
   99|     14|}
friend_message.c:tox_event_friend_message_destruct:
  101|     14|{
  102|     14|    free(friend_message->message);
  103|     14|}
friend_message.c:tox_event_friend_message_unpack_into:
  115|     14|{
  116|     14|    assert(event != nullptr);
  117|     14|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (117:9): [True: 1, False: 13]
  ------------------
  118|      1|        return false;
  119|      1|    }
  120|       |
  121|     13|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (121:12): [True: 12, False: 1]
  ------------------
  122|     13|           && tox_message_type_unpack(&event->type, bu)
  ------------------
  |  Branch (122:15): [True: 11, False: 1]
  ------------------
  123|     13|           && bin_unpack_bin(bu, &event->message, &event->message_length);
  ------------------
  |  Branch (123:15): [True: 10, False: 1]
  ------------------
  124|     14|}

tox_event_friend_name_pack:
   93|     24|{
   94|     24|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (94:12): [True: 24, False: 0]
  ------------------
   95|     24|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (95:15): [True: 24, False: 0]
  ------------------
   96|     24|           && bin_pack_bin(bp, event->name, event->name_length);
  ------------------
  |  Branch (96:15): [True: 24, False: 0]
  ------------------
   97|     24|}
tox_event_friend_name_new:
  122|     28|{
  123|     28|    Tox_Event_Friend_Name *const friend_name =
  124|     28|        (Tox_Event_Friend_Name *)mem_alloc(mem, sizeof(Tox_Event_Friend_Name));
  125|       |
  126|     28|    if (friend_name == nullptr) {
  ------------------
  |  |   63|     28|#define nullptr NULL
  ------------------
  |  Branch (126:9): [True: 1, False: 27]
  ------------------
  127|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  128|      1|    }
  129|       |
  130|     27|    tox_event_friend_name_construct(friend_name);
  131|     27|    return friend_name;
  132|     28|}
tox_event_friend_name_free:
  135|     28|{
  136|     28|    if (friend_name != nullptr) {
  ------------------
  |  |   63|     28|#define nullptr NULL
  ------------------
  |  Branch (136:9): [True: 27, False: 1]
  ------------------
  137|     27|        tox_event_friend_name_destruct(friend_name, mem);
  138|     27|    }
  139|     28|    mem_delete(mem, friend_name);
  140|     28|}
tox_event_friend_name_unpack:
  163|     28|{
  164|     28|    assert(event != nullptr);
  165|     28|    assert(*event == nullptr);
  166|     28|    *event = tox_event_friend_name_new(mem);
  167|       |
  168|     28|    if (*event == nullptr) {
  ------------------
  |  |   63|     28|#define nullptr NULL
  ------------------
  |  Branch (168:9): [True: 1, False: 27]
  ------------------
  169|      1|        return false;
  170|      1|    }
  171|       |
  172|     27|    return tox_event_friend_name_unpack_into(*event, bu);
  173|     28|}
friend_name.c:tox_event_friend_name_construct:
   81|     27|{
   82|     27|    *friend_name = (Tox_Event_Friend_Name) {
   83|     27|        0
   84|     27|    };
   85|     27|}
friend_name.c:tox_event_friend_name_destruct:
   87|     27|{
   88|     27|    free(friend_name->name);
   89|     27|}
friend_name.c:tox_event_friend_name_unpack_into:
  100|     27|{
  101|     27|    assert(event != nullptr);
  102|     27|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     27|#define nullptr NULL
  ------------------
  |  Branch (102:9): [True: 1, False: 26]
  ------------------
  103|      1|        return false;
  104|      1|    }
  105|       |
  106|     26|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (106:12): [True: 25, False: 1]
  ------------------
  107|     26|           && bin_unpack_bin(bu, &event->name, &event->name_length);
  ------------------
  |  Branch (107:15): [True: 20, False: 5]
  ------------------
  108|     27|}

tox_event_friend_read_receipt_pack:
   64|     36|{
   65|     36|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (65:12): [True: 36, False: 0]
  ------------------
   66|     36|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (66:15): [True: 36, False: 0]
  ------------------
   67|     36|           && bin_pack_u32(bp, event->message_id);
  ------------------
  |  Branch (67:15): [True: 36, False: 0]
  ------------------
   68|     36|}
tox_event_friend_read_receipt_new:
   93|     34|{
   94|     34|    Tox_Event_Friend_Read_Receipt *const friend_read_receipt =
   95|     34|        (Tox_Event_Friend_Read_Receipt *)mem_alloc(mem, sizeof(Tox_Event_Friend_Read_Receipt));
   96|       |
   97|     34|    if (friend_read_receipt == nullptr) {
  ------------------
  |  |   63|     34|#define nullptr NULL
  ------------------
  |  Branch (97:9): [True: 1, False: 33]
  ------------------
   98|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
   99|      1|    }
  100|       |
  101|     33|    tox_event_friend_read_receipt_construct(friend_read_receipt);
  102|     33|    return friend_read_receipt;
  103|     34|}
tox_event_friend_read_receipt_free:
  106|     34|{
  107|     34|    if (friend_read_receipt != nullptr) {
  ------------------
  |  |   63|     34|#define nullptr NULL
  ------------------
  |  Branch (107:9): [True: 33, False: 1]
  ------------------
  108|     33|        tox_event_friend_read_receipt_destruct(friend_read_receipt, mem);
  109|     33|    }
  110|     34|    mem_delete(mem, friend_read_receipt);
  111|     34|}
tox_event_friend_read_receipt_unpack:
  134|     34|{
  135|     34|    assert(event != nullptr);
  136|     34|    assert(*event == nullptr);
  137|     34|    *event = tox_event_friend_read_receipt_new(mem);
  138|       |
  139|     34|    if (*event == nullptr) {
  ------------------
  |  |   63|     34|#define nullptr NULL
  ------------------
  |  Branch (139:9): [True: 1, False: 33]
  ------------------
  140|      1|        return false;
  141|      1|    }
  142|       |
  143|     33|    return tox_event_friend_read_receipt_unpack_into(*event, bu);
  144|     34|}
friend_read_receipt.c:tox_event_friend_read_receipt_construct:
   52|     33|{
   53|     33|    *friend_read_receipt = (Tox_Event_Friend_Read_Receipt) {
   54|     33|        0
   55|     33|    };
   56|     33|}
friend_read_receipt.c:tox_event_friend_read_receipt_destruct:
   58|     33|{
   59|     33|    return;
   60|     33|}
friend_read_receipt.c:tox_event_friend_read_receipt_unpack_into:
   71|     33|{
   72|     33|    assert(event != nullptr);
   73|     33|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     33|#define nullptr NULL
  ------------------
  |  Branch (73:9): [True: 1, False: 32]
  ------------------
   74|      1|        return false;
   75|      1|    }
   76|       |
   77|     32|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (77:12): [True: 31, False: 1]
  ------------------
   78|     32|           && bin_unpack_u32(bu, &event->message_id);
  ------------------
  |  Branch (78:15): [True: 28, False: 3]
  ------------------
   79|     33|}

tox_event_friend_request_pack:
   92|     20|{
   93|     20|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (93:12): [True: 20, False: 0]
  ------------------
   94|     20|           && bin_pack_bin(bp, event->public_key, TOX_PUBLIC_KEY_SIZE)
  ------------------
  |  |  212|     20|#define TOX_PUBLIC_KEY_SIZE            32
  ------------------
  |  Branch (94:15): [True: 20, False: 0]
  ------------------
   95|     20|           && bin_pack_bin(bp, event->message, event->message_length);
  ------------------
  |  Branch (95:15): [True: 20, False: 0]
  ------------------
   96|     20|}
tox_event_friend_request_new:
  116|     39|{
  117|     39|    Tox_Event_Friend_Request *const friend_request =
  118|     39|        (Tox_Event_Friend_Request *)mem_alloc(mem, sizeof(Tox_Event_Friend_Request));
  119|       |
  120|     39|    if (friend_request == nullptr) {
  ------------------
  |  |   63|     39|#define nullptr NULL
  ------------------
  |  Branch (120:9): [True: 1, False: 38]
  ------------------
  121|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  122|      1|    }
  123|       |
  124|     38|    tox_event_friend_request_construct(friend_request);
  125|     38|    return friend_request;
  126|     39|}
tox_event_friend_request_free:
  129|     39|{
  130|     39|    if (friend_request != nullptr) {
  ------------------
  |  |   63|     39|#define nullptr NULL
  ------------------
  |  Branch (130:9): [True: 38, False: 1]
  ------------------
  131|     38|        tox_event_friend_request_destruct(friend_request, mem);
  132|     38|    }
  133|     39|    mem_delete(mem, friend_request);
  134|     39|}
tox_event_friend_request_unpack:
  157|     39|{
  158|     39|    assert(event != nullptr);
  159|     39|    assert(*event == nullptr);
  160|     39|    *event = tox_event_friend_request_new(mem);
  161|       |
  162|     39|    if (*event == nullptr) {
  ------------------
  |  |   63|     39|#define nullptr NULL
  ------------------
  |  Branch (162:9): [True: 1, False: 38]
  ------------------
  163|      1|        return false;
  164|      1|    }
  165|       |
  166|     38|    return tox_event_friend_request_unpack_into(*event, bu);
  167|     39|}
friend_request.c:tox_event_friend_request_construct:
   78|     38|{
   79|     38|    *friend_request = (Tox_Event_Friend_Request) {
   80|     38|        {
   81|     38|            0
   82|     38|        }
   83|     38|    };
   84|     38|}
friend_request.c:tox_event_friend_request_destruct:
   86|     38|{
   87|     38|    mem_delete(mem, friend_request->message);
   88|     38|}
friend_request.c:tox_event_friend_request_unpack_into:
   99|     38|{
  100|     38|    assert(event != nullptr);
  101|     38|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     38|#define nullptr NULL
  ------------------
  |  Branch (101:9): [True: 2, False: 36]
  ------------------
  102|      2|        return false;
  103|      2|    }
  104|       |
  105|     36|    return bin_unpack_bin_fixed(bu, event->public_key, TOX_PUBLIC_KEY_SIZE)
  ------------------
  |  |  212|     36|#define TOX_PUBLIC_KEY_SIZE            32
  ------------------
  |  Branch (105:12): [True: 19, False: 17]
  ------------------
  106|     36|           && bin_unpack_bin(bu, &event->message, &event->message_length);
  ------------------
  |  Branch (106:15): [True: 16, False: 3]
  ------------------
  107|     38|}

tox_event_friend_status_pack:
   66|     20|{
   67|     20|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (67:12): [True: 20, False: 0]
  ------------------
   68|     20|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (68:15): [True: 20, False: 0]
  ------------------
   69|     20|           && tox_user_status_pack(event->status, bp);
  ------------------
  |  Branch (69:15): [True: 20, False: 0]
  ------------------
   70|     20|}
tox_event_friend_status_new:
   95|     29|{
   96|     29|    Tox_Event_Friend_Status *const friend_status =
   97|     29|        (Tox_Event_Friend_Status *)mem_alloc(mem, sizeof(Tox_Event_Friend_Status));
   98|       |
   99|     29|    if (friend_status == nullptr) {
  ------------------
  |  |   63|     29|#define nullptr NULL
  ------------------
  |  Branch (99:9): [True: 1, False: 28]
  ------------------
  100|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  101|      1|    }
  102|       |
  103|     28|    tox_event_friend_status_construct(friend_status);
  104|     28|    return friend_status;
  105|     29|}
tox_event_friend_status_free:
  108|     29|{
  109|     29|    if (friend_status != nullptr) {
  ------------------
  |  |   63|     29|#define nullptr NULL
  ------------------
  |  Branch (109:9): [True: 28, False: 1]
  ------------------
  110|     28|        tox_event_friend_status_destruct(friend_status, mem);
  111|     28|    }
  112|     29|    mem_delete(mem, friend_status);
  113|     29|}
tox_event_friend_status_unpack:
  136|     29|{
  137|     29|    assert(event != nullptr);
  138|     29|    assert(*event == nullptr);
  139|     29|    *event = tox_event_friend_status_new(mem);
  140|       |
  141|     29|    if (*event == nullptr) {
  ------------------
  |  |   63|     29|#define nullptr NULL
  ------------------
  |  Branch (141:9): [True: 1, False: 28]
  ------------------
  142|      1|        return false;
  143|      1|    }
  144|       |
  145|     28|    return tox_event_friend_status_unpack_into(*event, bu);
  146|     29|}
friend_status.c:tox_event_friend_status_construct:
   54|     28|{
   55|     28|    *friend_status = (Tox_Event_Friend_Status) {
   56|     28|        0
   57|     28|    };
   58|     28|}
friend_status.c:tox_event_friend_status_destruct:
   60|     28|{
   61|     28|    return;
   62|     28|}
friend_status.c:tox_event_friend_status_unpack_into:
   73|     28|{
   74|     28|    assert(event != nullptr);
   75|     28|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     28|#define nullptr NULL
  ------------------
  |  Branch (75:9): [True: 2, False: 26]
  ------------------
   76|      2|        return false;
   77|      2|    }
   78|       |
   79|     26|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (79:12): [True: 24, False: 2]
  ------------------
   80|     26|           && tox_user_status_unpack(&event->status, bu);
  ------------------
  |  Branch (80:15): [True: 21, False: 3]
  ------------------
   81|     28|}

tox_event_friend_status_message_pack:
   93|     20|{
   94|     20|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (94:12): [True: 20, False: 0]
  ------------------
   95|     20|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (95:15): [True: 20, False: 0]
  ------------------
   96|     20|           && bin_pack_bin(bp, event->message, event->message_length);
  ------------------
  |  Branch (96:15): [True: 20, False: 0]
  ------------------
   97|     20|}
tox_event_friend_status_message_new:
  122|     19|{
  123|     19|    Tox_Event_Friend_Status_Message *const friend_status_message =
  124|     19|        (Tox_Event_Friend_Status_Message *)mem_alloc(mem, sizeof(Tox_Event_Friend_Status_Message));
  125|       |
  126|     19|    if (friend_status_message == nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (126:9): [True: 1, False: 18]
  ------------------
  127|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  128|      1|    }
  129|       |
  130|     18|    tox_event_friend_status_message_construct(friend_status_message);
  131|     18|    return friend_status_message;
  132|     19|}
tox_event_friend_status_message_free:
  135|     19|{
  136|     19|    if (friend_status_message != nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (136:9): [True: 18, False: 1]
  ------------------
  137|     18|        tox_event_friend_status_message_destruct(friend_status_message, mem);
  138|     18|    }
  139|     19|    mem_delete(mem, friend_status_message);
  140|     19|}
tox_event_friend_status_message_unpack:
  163|     19|{
  164|     19|    assert(event != nullptr);
  165|     19|    assert(*event == nullptr);
  166|     19|    *event = tox_event_friend_status_message_new(mem);
  167|       |
  168|     19|    if (*event == nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (168:9): [True: 1, False: 18]
  ------------------
  169|      1|        return false;
  170|      1|    }
  171|       |
  172|     18|    return tox_event_friend_status_message_unpack_into(*event, bu);
  173|     19|}
friend_status_message.c:tox_event_friend_status_message_construct:
   81|     18|{
   82|     18|    *friend_status_message = (Tox_Event_Friend_Status_Message) {
   83|     18|        0
   84|     18|    };
   85|     18|}
friend_status_message.c:tox_event_friend_status_message_destruct:
   87|     18|{
   88|     18|    free(friend_status_message->message);
   89|     18|}
friend_status_message.c:tox_event_friend_status_message_unpack_into:
  100|     18|{
  101|     18|    assert(event != nullptr);
  102|     18|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
  |  Branch (102:9): [True: 1, False: 17]
  ------------------
  103|      1|        return false;
  104|      1|    }
  105|       |
  106|     17|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (106:12): [True: 16, False: 1]
  ------------------
  107|     17|           && bin_unpack_bin(bu, &event->message, &event->message_length);
  ------------------
  |  Branch (107:15): [True: 14, False: 2]
  ------------------
  108|     18|}

tox_event_friend_typing_pack:
   64|     30|{
   65|     30|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (65:12): [True: 30, False: 0]
  ------------------
   66|     30|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (66:15): [True: 30, False: 0]
  ------------------
   67|     30|           && bin_pack_bool(bp, event->typing);
  ------------------
  |  Branch (67:15): [True: 30, False: 0]
  ------------------
   68|     30|}
tox_event_friend_typing_new:
   93|     69|{
   94|     69|    Tox_Event_Friend_Typing *const friend_typing =
   95|     69|        (Tox_Event_Friend_Typing *)mem_alloc(mem, sizeof(Tox_Event_Friend_Typing));
   96|       |
   97|     69|    if (friend_typing == nullptr) {
  ------------------
  |  |   63|     69|#define nullptr NULL
  ------------------
  |  Branch (97:9): [True: 1, False: 68]
  ------------------
   98|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
   99|      1|    }
  100|       |
  101|     68|    tox_event_friend_typing_construct(friend_typing);
  102|     68|    return friend_typing;
  103|     69|}
tox_event_friend_typing_free:
  106|     69|{
  107|     69|    if (friend_typing != nullptr) {
  ------------------
  |  |   63|     69|#define nullptr NULL
  ------------------
  |  Branch (107:9): [True: 68, False: 1]
  ------------------
  108|     68|        tox_event_friend_typing_destruct(friend_typing, mem);
  109|     68|    }
  110|     69|    mem_delete(mem, friend_typing);
  111|     69|}
tox_event_friend_typing_unpack:
  134|     69|{
  135|     69|    assert(event != nullptr);
  136|     69|    assert(*event == nullptr);
  137|     69|    *event = tox_event_friend_typing_new(mem);
  138|       |
  139|     69|    if (*event == nullptr) {
  ------------------
  |  |   63|     69|#define nullptr NULL
  ------------------
  |  Branch (139:9): [True: 1, False: 68]
  ------------------
  140|      1|        return false;
  141|      1|    }
  142|       |
  143|     68|    return tox_event_friend_typing_unpack_into(*event, bu);
  144|     69|}
friend_typing.c:tox_event_friend_typing_construct:
   52|     68|{
   53|     68|    *friend_typing = (Tox_Event_Friend_Typing) {
   54|     68|        0
   55|     68|    };
   56|     68|}
friend_typing.c:tox_event_friend_typing_destruct:
   58|     68|{
   59|     68|    return;
   60|     68|}
friend_typing.c:tox_event_friend_typing_unpack_into:
   71|     68|{
   72|     68|    assert(event != nullptr);
   73|     68|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     68|#define nullptr NULL
  ------------------
  |  Branch (73:9): [True: 2, False: 66]
  ------------------
   74|      2|        return false;
   75|      2|    }
   76|       |
   77|     66|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (77:12): [True: 65, False: 1]
  ------------------
   78|     66|           && bin_unpack_bool(bu, &event->typing);
  ------------------
  |  Branch (78:15): [True: 29, False: 36]
  ------------------
   79|     68|}

tox_event_group_custom_packet_pack:
  105|     20|{
  106|     20|    return bin_pack_array(bp, 3)
  ------------------
  |  Branch (106:12): [True: 20, False: 0]
  ------------------
  107|     20|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (107:15): [True: 20, False: 0]
  ------------------
  108|     20|           && bin_pack_u32(bp, event->peer_id)
  ------------------
  |  Branch (108:15): [True: 20, False: 0]
  ------------------
  109|     20|           && bin_pack_bin(bp, event->data, event->data_length);
  ------------------
  |  Branch (109:15): [True: 20, False: 0]
  ------------------
  110|     20|}
tox_event_group_custom_packet_new:
  136|     15|{
  137|     15|    Tox_Event_Group_Custom_Packet *const group_custom_packet =
  138|     15|        (Tox_Event_Group_Custom_Packet *)mem_alloc(mem, sizeof(Tox_Event_Group_Custom_Packet));
  139|       |
  140|     15|    if (group_custom_packet == nullptr) {
  ------------------
  |  |   63|     15|#define nullptr NULL
  ------------------
  |  Branch (140:9): [True: 1, False: 14]
  ------------------
  141|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  142|      1|    }
  143|       |
  144|     14|    tox_event_group_custom_packet_construct(group_custom_packet);
  145|     14|    return group_custom_packet;
  146|     15|}
tox_event_group_custom_packet_free:
  149|     15|{
  150|     15|    if (group_custom_packet != nullptr) {
  ------------------
  |  |   63|     15|#define nullptr NULL
  ------------------
  |  Branch (150:9): [True: 14, False: 1]
  ------------------
  151|     14|        tox_event_group_custom_packet_destruct(group_custom_packet, mem);
  152|     14|    }
  153|     15|    mem_delete(mem, group_custom_packet);
  154|     15|}
tox_event_group_custom_packet_unpack:
  177|     15|{
  178|     15|    assert(event != nullptr);
  179|     15|    assert(*event == nullptr);
  180|     15|    *event = tox_event_group_custom_packet_new(mem);
  181|       |
  182|     15|    if (*event == nullptr) {
  ------------------
  |  |   63|     15|#define nullptr NULL
  ------------------
  |  Branch (182:9): [True: 1, False: 14]
  ------------------
  183|      1|        return false;
  184|      1|    }
  185|       |
  186|     14|    return tox_event_group_custom_packet_unpack_into(*event, bu);
  187|     15|}
group_custom_packet.c:tox_event_group_custom_packet_construct:
   93|     14|{
   94|     14|    *group_custom_packet = (Tox_Event_Group_Custom_Packet) {
   95|     14|        0
   96|     14|    };
   97|     14|}
group_custom_packet.c:tox_event_group_custom_packet_destruct:
   99|     14|{
  100|     14|    free(group_custom_packet->data);
  101|     14|}
group_custom_packet.c:tox_event_group_custom_packet_unpack_into:
  113|     14|{
  114|     14|    assert(event != nullptr);
  115|     14|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (115:9): [True: 1, False: 13]
  ------------------
  116|      1|        return false;
  117|      1|    }
  118|       |
  119|     13|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (119:12): [True: 12, False: 1]
  ------------------
  120|     13|           && bin_unpack_u32(bu, &event->peer_id)
  ------------------
  |  Branch (120:15): [True: 11, False: 1]
  ------------------
  121|     13|           && bin_unpack_bin(bu, &event->data, &event->data_length);
  ------------------
  |  Branch (121:15): [True: 10, False: 1]
  ------------------
  122|     14|}

tox_event_group_custom_private_packet_pack:
  105|     24|{
  106|     24|    return bin_pack_array(bp, 3)
  ------------------
  |  Branch (106:12): [True: 24, False: 0]
  ------------------
  107|     24|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (107:15): [True: 24, False: 0]
  ------------------
  108|     24|           && bin_pack_u32(bp, event->peer_id)
  ------------------
  |  Branch (108:15): [True: 24, False: 0]
  ------------------
  109|     24|           && bin_pack_bin(bp, event->data, event->data_length);
  ------------------
  |  Branch (109:15): [True: 24, False: 0]
  ------------------
  110|     24|}
tox_event_group_custom_private_packet_new:
  136|     20|{
  137|     20|    Tox_Event_Group_Custom_Private_Packet *const group_custom_private_packet =
  138|     20|        (Tox_Event_Group_Custom_Private_Packet *)mem_alloc(mem, sizeof(Tox_Event_Group_Custom_Private_Packet));
  139|       |
  140|     20|    if (group_custom_private_packet == nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (140:9): [True: 1, False: 19]
  ------------------
  141|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  142|      1|    }
  143|       |
  144|     19|    tox_event_group_custom_private_packet_construct(group_custom_private_packet);
  145|     19|    return group_custom_private_packet;
  146|     20|}
tox_event_group_custom_private_packet_free:
  149|     20|{
  150|     20|    if (group_custom_private_packet != nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (150:9): [True: 19, False: 1]
  ------------------
  151|     19|        tox_event_group_custom_private_packet_destruct(group_custom_private_packet, mem);
  152|     19|    }
  153|     20|    mem_delete(mem, group_custom_private_packet);
  154|     20|}
tox_event_group_custom_private_packet_unpack:
  177|     20|{
  178|     20|    assert(event != nullptr);
  179|     20|    assert(*event == nullptr);
  180|     20|    *event = tox_event_group_custom_private_packet_new(mem);
  181|       |
  182|     20|    if (*event == nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (182:9): [True: 1, False: 19]
  ------------------
  183|      1|        return false;
  184|      1|    }
  185|       |
  186|     19|    return tox_event_group_custom_private_packet_unpack_into(*event, bu);
  187|     20|}
group_custom_private_packet.c:tox_event_group_custom_private_packet_construct:
   93|     19|{
   94|     19|    *group_custom_private_packet = (Tox_Event_Group_Custom_Private_Packet) {
   95|     19|        0
   96|     19|    };
   97|     19|}
group_custom_private_packet.c:tox_event_group_custom_private_packet_destruct:
   99|     19|{
  100|     19|    free(group_custom_private_packet->data);
  101|     19|}
group_custom_private_packet.c:tox_event_group_custom_private_packet_unpack_into:
  113|     19|{
  114|     19|    assert(event != nullptr);
  115|     19|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (115:9): [True: 1, False: 18]
  ------------------
  116|      1|        return false;
  117|      1|    }
  118|       |
  119|     18|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (119:12): [True: 17, False: 1]
  ------------------
  120|     18|           && bin_unpack_u32(bu, &event->peer_id)
  ------------------
  |  Branch (120:15): [True: 16, False: 1]
  ------------------
  121|     18|           && bin_unpack_bin(bu, &event->data, &event->data_length);
  ------------------
  |  Branch (121:15): [True: 14, False: 2]
  ------------------
  122|     19|}

tox_event_group_invite_pack:
  133|     22|{
  134|     22|    return bin_pack_array(bp, 3)
  ------------------
  |  Branch (134:12): [True: 22, False: 0]
  ------------------
  135|     22|           && bin_pack_u32(bp, event->friend_number)
  ------------------
  |  Branch (135:15): [True: 22, False: 0]
  ------------------
  136|     22|           && bin_pack_bin(bp, event->invite_data, event->invite_data_length)
  ------------------
  |  Branch (136:15): [True: 22, False: 0]
  ------------------
  137|     22|           && bin_pack_bin(bp, event->group_name, event->group_name_length);
  ------------------
  |  Branch (137:15): [True: 22, False: 0]
  ------------------
  138|     22|}
tox_event_group_invite_new:
  164|     29|{
  165|     29|    Tox_Event_Group_Invite *const group_invite =
  166|     29|        (Tox_Event_Group_Invite *)mem_alloc(mem, sizeof(Tox_Event_Group_Invite));
  167|       |
  168|     29|    if (group_invite == nullptr) {
  ------------------
  |  |   63|     29|#define nullptr NULL
  ------------------
  |  Branch (168:9): [True: 1, False: 28]
  ------------------
  169|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  170|      1|    }
  171|       |
  172|     28|    tox_event_group_invite_construct(group_invite);
  173|     28|    return group_invite;
  174|     29|}
tox_event_group_invite_free:
  177|     29|{
  178|     29|    if (group_invite != nullptr) {
  ------------------
  |  |   63|     29|#define nullptr NULL
  ------------------
  |  Branch (178:9): [True: 28, False: 1]
  ------------------
  179|     28|        tox_event_group_invite_destruct(group_invite, mem);
  180|     28|    }
  181|     29|    mem_delete(mem, group_invite);
  182|     29|}
tox_event_group_invite_unpack:
  205|     29|{
  206|     29|    assert(event != nullptr);
  207|     29|    assert(*event == nullptr);
  208|     29|    *event = tox_event_group_invite_new(mem);
  209|       |
  210|     29|    if (*event == nullptr) {
  ------------------
  |  |   63|     29|#define nullptr NULL
  ------------------
  |  Branch (210:9): [True: 1, False: 28]
  ------------------
  211|      1|        return false;
  212|      1|    }
  213|       |
  214|     28|    return tox_event_group_invite_unpack_into(*event, bu);
  215|     29|}
group_invite.c:tox_event_group_invite_construct:
  120|     28|{
  121|     28|    *group_invite = (Tox_Event_Group_Invite) {
  122|     28|        0
  123|     28|    };
  124|     28|}
group_invite.c:tox_event_group_invite_destruct:
  126|     28|{
  127|     28|    free(group_invite->invite_data);
  128|     28|    free(group_invite->group_name);
  129|     28|}
group_invite.c:tox_event_group_invite_unpack_into:
  141|     28|{
  142|     28|    assert(event != nullptr);
  143|     28|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|     28|#define nullptr NULL
  ------------------
  |  Branch (143:9): [True: 2, False: 26]
  ------------------
  144|      2|        return false;
  145|      2|    }
  146|       |
  147|     26|    return bin_unpack_u32(bu, &event->friend_number)
  ------------------
  |  Branch (147:12): [True: 25, False: 1]
  ------------------
  148|     26|           && bin_unpack_bin(bu, &event->invite_data, &event->invite_data_length)
  ------------------
  |  Branch (148:15): [True: 24, False: 1]
  ------------------
  149|     26|           && bin_unpack_bin(bu, &event->group_name, &event->group_name_length);
  ------------------
  |  Branch (149:15): [True: 20, False: 4]
  ------------------
  150|     28|}

tox_event_group_join_fail_pack:
   66|     28|{
   67|     28|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (67:12): [True: 28, False: 0]
  ------------------
   68|     28|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (68:15): [True: 28, False: 0]
  ------------------
   69|     28|           && tox_group_join_fail_pack(event->fail_type, bp);
  ------------------
  |  Branch (69:15): [True: 28, False: 0]
  ------------------
   70|     28|}
tox_event_group_join_fail_new:
   95|     40|{
   96|     40|    Tox_Event_Group_Join_Fail *const group_join_fail =
   97|     40|        (Tox_Event_Group_Join_Fail *)mem_alloc(mem, sizeof(Tox_Event_Group_Join_Fail));
   98|       |
   99|     40|    if (group_join_fail == nullptr) {
  ------------------
  |  |   63|     40|#define nullptr NULL
  ------------------
  |  Branch (99:9): [True: 1, False: 39]
  ------------------
  100|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  101|      1|    }
  102|       |
  103|     39|    tox_event_group_join_fail_construct(group_join_fail);
  104|     39|    return group_join_fail;
  105|     40|}
tox_event_group_join_fail_free:
  108|     40|{
  109|     40|    if (group_join_fail != nullptr) {
  ------------------
  |  |   63|     40|#define nullptr NULL
  ------------------
  |  Branch (109:9): [True: 39, False: 1]
  ------------------
  110|     39|        tox_event_group_join_fail_destruct(group_join_fail, mem);
  111|     39|    }
  112|     40|    mem_delete(mem, group_join_fail);
  113|     40|}
tox_event_group_join_fail_unpack:
  136|     40|{
  137|     40|    assert(event != nullptr);
  138|     40|    assert(*event == nullptr);
  139|     40|    *event = tox_event_group_join_fail_new(mem);
  140|       |
  141|     40|    if (*event == nullptr) {
  ------------------
  |  |   63|     40|#define nullptr NULL
  ------------------
  |  Branch (141:9): [True: 1, False: 39]
  ------------------
  142|      1|        return false;
  143|      1|    }
  144|       |
  145|     39|    return tox_event_group_join_fail_unpack_into(*event, bu);
  146|     40|}
group_join_fail.c:tox_event_group_join_fail_construct:
   54|     39|{
   55|     39|    *group_join_fail = (Tox_Event_Group_Join_Fail) {
   56|     39|        0
   57|     39|    };
   58|     39|}
group_join_fail.c:tox_event_group_join_fail_destruct:
   60|     39|{
   61|     39|    return;
   62|     39|}
group_join_fail.c:tox_event_group_join_fail_unpack_into:
   73|     39|{
   74|     39|    assert(event != nullptr);
   75|     39|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     39|#define nullptr NULL
  ------------------
  |  Branch (75:9): [True: 2, False: 37]
  ------------------
   76|      2|        return false;
   77|      2|    }
   78|       |
   79|     37|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (79:12): [True: 36, False: 1]
  ------------------
   80|     37|           && tox_group_join_fail_unpack(&event->fail_type, bu);
  ------------------
  |  Branch (80:15): [True: 33, False: 3]
  ------------------
   81|     39|}

tox_event_group_message_pack:
  131|     20|{
  132|     20|    return bin_pack_array(bp, 5)
  ------------------
  |  Branch (132:12): [True: 20, False: 0]
  ------------------
  133|     20|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (133:15): [True: 20, False: 0]
  ------------------
  134|     20|           && bin_pack_u32(bp, event->peer_id)
  ------------------
  |  Branch (134:15): [True: 20, False: 0]
  ------------------
  135|     20|           && tox_message_type_pack(event->message_type, bp)
  ------------------
  |  Branch (135:15): [True: 20, False: 0]
  ------------------
  136|     20|           && bin_pack_bin(bp, event->message, event->message_length)
  ------------------
  |  Branch (136:15): [True: 20, False: 0]
  ------------------
  137|     20|           && bin_pack_u32(bp, event->message_id);
  ------------------
  |  Branch (137:15): [True: 20, False: 0]
  ------------------
  138|     20|}
tox_event_group_message_new:
  166|     38|{
  167|     38|    Tox_Event_Group_Message *const group_message =
  168|     38|        (Tox_Event_Group_Message *)mem_alloc(mem, sizeof(Tox_Event_Group_Message));
  169|       |
  170|     38|    if (group_message == nullptr) {
  ------------------
  |  |   63|     38|#define nullptr NULL
  ------------------
  |  Branch (170:9): [True: 1, False: 37]
  ------------------
  171|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  172|      1|    }
  173|       |
  174|     37|    tox_event_group_message_construct(group_message);
  175|     37|    return group_message;
  176|     38|}
tox_event_group_message_free:
  179|     38|{
  180|     38|    if (group_message != nullptr) {
  ------------------
  |  |   63|     38|#define nullptr NULL
  ------------------
  |  Branch (180:9): [True: 37, False: 1]
  ------------------
  181|     37|        tox_event_group_message_destruct(group_message, mem);
  182|     37|    }
  183|     38|    mem_delete(mem, group_message);
  184|     38|}
tox_event_group_message_unpack:
  207|     38|{
  208|     38|    assert(event != nullptr);
  209|     38|    assert(*event == nullptr);
  210|     38|    *event = tox_event_group_message_new(mem);
  211|       |
  212|     38|    if (*event == nullptr) {
  ------------------
  |  |   63|     38|#define nullptr NULL
  ------------------
  |  Branch (212:9): [True: 1, False: 37]
  ------------------
  213|      1|        return false;
  214|      1|    }
  215|       |
  216|     37|    return tox_event_group_message_unpack_into(*event, bu);
  217|     38|}
group_message.c:tox_event_group_message_construct:
  119|     37|{
  120|     37|    *group_message = (Tox_Event_Group_Message) {
  121|     37|        0
  122|     37|    };
  123|     37|}
group_message.c:tox_event_group_message_destruct:
  125|     37|{
  126|     37|    free(group_message->message);
  127|     37|}
group_message.c:tox_event_group_message_unpack_into:
  141|     37|{
  142|     37|    assert(event != nullptr);
  143|     37|    if (!bin_unpack_array_fixed(bu, 5, nullptr)) {
  ------------------
  |  |   63|     37|#define nullptr NULL
  ------------------
  |  Branch (143:9): [True: 3, False: 34]
  ------------------
  144|      3|        return false;
  145|      3|    }
  146|       |
  147|     34|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (147:12): [True: 33, False: 1]
  ------------------
  148|     34|           && bin_unpack_u32(bu, &event->peer_id)
  ------------------
  |  Branch (148:15): [True: 32, False: 1]
  ------------------
  149|     34|           && tox_message_type_unpack(&event->message_type, bu)
  ------------------
  |  Branch (149:15): [True: 30, False: 2]
  ------------------
  150|     34|           && bin_unpack_bin(bu, &event->message, &event->message_length)
  ------------------
  |  Branch (150:15): [True: 27, False: 3]
  ------------------
  151|     34|           && bin_unpack_u32(bu, &event->message_id);
  ------------------
  |  Branch (151:15): [True: 26, False: 1]
  ------------------
  152|     37|}

tox_event_group_moderation_pack:
   90|     28|{
   91|     28|    return bin_pack_array(bp, 4)
  ------------------
  |  Branch (91:12): [True: 28, False: 0]
  ------------------
   92|     28|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (92:15): [True: 28, False: 0]
  ------------------
   93|     28|           && bin_pack_u32(bp, event->source_peer_id)
  ------------------
  |  Branch (93:15): [True: 28, False: 0]
  ------------------
   94|     28|           && bin_pack_u32(bp, event->target_peer_id)
  ------------------
  |  Branch (94:15): [True: 28, False: 0]
  ------------------
   95|     28|           && tox_group_mod_event_pack(event->mod_type, bp);
  ------------------
  |  Branch (95:15): [True: 28, False: 0]
  ------------------
   96|     28|}
tox_event_group_moderation_new:
  123|     43|{
  124|     43|    Tox_Event_Group_Moderation *const group_moderation =
  125|     43|        (Tox_Event_Group_Moderation *)mem_alloc(mem, sizeof(Tox_Event_Group_Moderation));
  126|       |
  127|     43|    if (group_moderation == nullptr) {
  ------------------
  |  |   63|     43|#define nullptr NULL
  ------------------
  |  Branch (127:9): [True: 1, False: 42]
  ------------------
  128|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  129|      1|    }
  130|       |
  131|     42|    tox_event_group_moderation_construct(group_moderation);
  132|     42|    return group_moderation;
  133|     43|}
tox_event_group_moderation_free:
  136|     43|{
  137|     43|    if (group_moderation != nullptr) {
  ------------------
  |  |   63|     43|#define nullptr NULL
  ------------------
  |  Branch (137:9): [True: 42, False: 1]
  ------------------
  138|     42|        tox_event_group_moderation_destruct(group_moderation, mem);
  139|     42|    }
  140|     43|    mem_delete(mem, group_moderation);
  141|     43|}
tox_event_group_moderation_unpack:
  164|     43|{
  165|     43|    assert(event != nullptr);
  166|     43|    assert(*event == nullptr);
  167|     43|    *event = tox_event_group_moderation_new(mem);
  168|       |
  169|     43|    if (*event == nullptr) {
  ------------------
  |  |   63|     43|#define nullptr NULL
  ------------------
  |  Branch (169:9): [True: 1, False: 42]
  ------------------
  170|      1|        return false;
  171|      1|    }
  172|       |
  173|     42|    return tox_event_group_moderation_unpack_into(*event, bu);
  174|     43|}
group_moderation.c:tox_event_group_moderation_construct:
   78|     42|{
   79|     42|    *group_moderation = (Tox_Event_Group_Moderation) {
   80|     42|        0
   81|     42|    };
   82|     42|}
group_moderation.c:tox_event_group_moderation_destruct:
   84|     42|{
   85|     42|    return;
   86|     42|}
group_moderation.c:tox_event_group_moderation_unpack_into:
   99|     42|{
  100|     42|    assert(event != nullptr);
  101|     42|    if (!bin_unpack_array_fixed(bu, 4, nullptr)) {
  ------------------
  |  |   63|     42|#define nullptr NULL
  ------------------
  |  Branch (101:9): [True: 4, False: 38]
  ------------------
  102|      4|        return false;
  103|      4|    }
  104|       |
  105|     38|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (105:12): [True: 37, False: 1]
  ------------------
  106|     38|           && bin_unpack_u32(bu, &event->source_peer_id)
  ------------------
  |  Branch (106:15): [True: 36, False: 1]
  ------------------
  107|     38|           && bin_unpack_u32(bu, &event->target_peer_id)
  ------------------
  |  Branch (107:15): [True: 35, False: 1]
  ------------------
  108|     38|           && tox_group_mod_event_unpack(&event->mod_type, bu);
  ------------------
  |  Branch (108:15): [True: 29, False: 6]
  ------------------
  109|     42|}

tox_event_group_password_pack:
   93|     36|{
   94|     36|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (94:12): [True: 36, False: 0]
  ------------------
   95|     36|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (95:15): [True: 36, False: 0]
  ------------------
   96|     36|           && bin_pack_bin(bp, event->password, event->password_length);
  ------------------
  |  Branch (96:15): [True: 36, False: 0]
  ------------------
   97|     36|}
tox_event_group_password_new:
  122|     27|{
  123|     27|    Tox_Event_Group_Password *const group_password =
  124|     27|        (Tox_Event_Group_Password *)mem_alloc(mem, sizeof(Tox_Event_Group_Password));
  125|       |
  126|     27|    if (group_password == nullptr) {
  ------------------
  |  |   63|     27|#define nullptr NULL
  ------------------
  |  Branch (126:9): [True: 1, False: 26]
  ------------------
  127|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  128|      1|    }
  129|       |
  130|     26|    tox_event_group_password_construct(group_password);
  131|     26|    return group_password;
  132|     27|}
tox_event_group_password_free:
  135|     27|{
  136|     27|    if (group_password != nullptr) {
  ------------------
  |  |   63|     27|#define nullptr NULL
  ------------------
  |  Branch (136:9): [True: 26, False: 1]
  ------------------
  137|     26|        tox_event_group_password_destruct(group_password, mem);
  138|     26|    }
  139|     27|    mem_delete(mem, group_password);
  140|     27|}
tox_event_group_password_unpack:
  163|     27|{
  164|     27|    assert(event != nullptr);
  165|     27|    assert(*event == nullptr);
  166|     27|    *event = tox_event_group_password_new(mem);
  167|       |
  168|     27|    if (*event == nullptr) {
  ------------------
  |  |   63|     27|#define nullptr NULL
  ------------------
  |  Branch (168:9): [True: 1, False: 26]
  ------------------
  169|      1|        return false;
  170|      1|    }
  171|       |
  172|     26|    return tox_event_group_password_unpack_into(*event, bu);
  173|     27|}
group_password.c:tox_event_group_password_construct:
   81|     26|{
   82|     26|    *group_password = (Tox_Event_Group_Password) {
   83|     26|        0
   84|     26|    };
   85|     26|}
group_password.c:tox_event_group_password_destruct:
   87|     26|{
   88|     26|    free(group_password->password);
   89|     26|}
group_password.c:tox_event_group_password_unpack_into:
  100|     26|{
  101|     26|    assert(event != nullptr);
  102|     26|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     26|#define nullptr NULL
  ------------------
  |  Branch (102:9): [True: 1, False: 25]
  ------------------
  103|      1|        return false;
  104|      1|    }
  105|       |
  106|     25|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (106:12): [True: 24, False: 1]
  ------------------
  107|     25|           && bin_unpack_bin(bu, &event->password, &event->password_length);
  ------------------
  |  Branch (107:15): [True: 21, False: 3]
  ------------------
  108|     26|}

tox_event_group_peer_exit_pack:
  159|     28|{
  160|     28|    return bin_pack_array(bp, 5)
  ------------------
  |  Branch (160:12): [True: 28, False: 0]
  ------------------
  161|     28|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (161:15): [True: 28, False: 0]
  ------------------
  162|     28|           && bin_pack_u32(bp, event->peer_id)
  ------------------
  |  Branch (162:15): [True: 28, False: 0]
  ------------------
  163|     28|           && tox_group_exit_type_pack(event->exit_type, bp)
  ------------------
  |  Branch (163:15): [True: 28, False: 0]
  ------------------
  164|     28|           && bin_pack_bin(bp, event->name, event->name_length)
  ------------------
  |  Branch (164:15): [True: 28, False: 0]
  ------------------
  165|     28|           && bin_pack_bin(bp, event->part_message, event->part_message_length);
  ------------------
  |  Branch (165:15): [True: 28, False: 0]
  ------------------
  166|     28|}
tox_event_group_peer_exit_new:
  194|     61|{
  195|     61|    Tox_Event_Group_Peer_Exit *const group_peer_exit =
  196|     61|        (Tox_Event_Group_Peer_Exit *)mem_alloc(mem, sizeof(Tox_Event_Group_Peer_Exit));
  197|       |
  198|     61|    if (group_peer_exit == nullptr) {
  ------------------
  |  |   63|     61|#define nullptr NULL
  ------------------
  |  Branch (198:9): [True: 1, False: 60]
  ------------------
  199|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  200|      1|    }
  201|       |
  202|     60|    tox_event_group_peer_exit_construct(group_peer_exit);
  203|     60|    return group_peer_exit;
  204|     61|}
tox_event_group_peer_exit_free:
  207|     61|{
  208|     61|    if (group_peer_exit != nullptr) {
  ------------------
  |  |   63|     61|#define nullptr NULL
  ------------------
  |  Branch (208:9): [True: 60, False: 1]
  ------------------
  209|     60|        tox_event_group_peer_exit_destruct(group_peer_exit, mem);
  210|     60|    }
  211|     61|    mem_delete(mem, group_peer_exit);
  212|     61|}
tox_event_group_peer_exit_unpack:
  235|     61|{
  236|     61|    assert(event != nullptr);
  237|     61|    assert(*event == nullptr);
  238|     61|    *event = tox_event_group_peer_exit_new(mem);
  239|       |
  240|     61|    if (*event == nullptr) {
  ------------------
  |  |   63|     61|#define nullptr NULL
  ------------------
  |  Branch (240:9): [True: 1, False: 60]
  ------------------
  241|      1|        return false;
  242|      1|    }
  243|       |
  244|     60|    return tox_event_group_peer_exit_unpack_into(*event, bu);
  245|     61|}
group_peer_exit.c:tox_event_group_peer_exit_construct:
  146|     60|{
  147|     60|    *group_peer_exit = (Tox_Event_Group_Peer_Exit) {
  148|     60|        0
  149|     60|    };
  150|     60|}
group_peer_exit.c:tox_event_group_peer_exit_destruct:
  152|     60|{
  153|     60|    free(group_peer_exit->name);
  154|     60|    free(group_peer_exit->part_message);
  155|     60|}
group_peer_exit.c:tox_event_group_peer_exit_unpack_into:
  169|     60|{
  170|     60|    assert(event != nullptr);
  171|     60|    if (!bin_unpack_array_fixed(bu, 5, nullptr)) {
  ------------------
  |  |   63|     60|#define nullptr NULL
  ------------------
  |  Branch (171:9): [True: 3, False: 57]
  ------------------
  172|      3|        return false;
  173|      3|    }
  174|       |
  175|     57|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (175:12): [True: 56, False: 1]
  ------------------
  176|     57|           && bin_unpack_u32(bu, &event->peer_id)
  ------------------
  |  Branch (176:15): [True: 55, False: 1]
  ------------------
  177|     57|           && tox_group_exit_type_unpack(&event->exit_type, bu)
  ------------------
  |  Branch (177:15): [True: 53, False: 2]
  ------------------
  178|     57|           && bin_unpack_bin(bu, &event->name, &event->name_length)
  ------------------
  |  Branch (178:15): [True: 46, False: 7]
  ------------------
  179|     57|           && bin_unpack_bin(bu, &event->part_message, &event->part_message_length);
  ------------------
  |  Branch (179:15): [True: 40, False: 6]
  ------------------
  180|     60|}

tox_event_group_peer_join_pack:
   64|     58|{
   65|     58|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (65:12): [True: 58, False: 0]
  ------------------
   66|     58|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (66:15): [True: 58, False: 0]
  ------------------
   67|     58|           && bin_pack_u32(bp, event->peer_id);
  ------------------
  |  Branch (67:15): [True: 58, False: 0]
  ------------------
   68|     58|}
tox_event_group_peer_join_new:
   93|     47|{
   94|     47|    Tox_Event_Group_Peer_Join *const group_peer_join =
   95|     47|        (Tox_Event_Group_Peer_Join *)mem_alloc(mem, sizeof(Tox_Event_Group_Peer_Join));
   96|       |
   97|     47|    if (group_peer_join == nullptr) {
  ------------------
  |  |   63|     47|#define nullptr NULL
  ------------------
  |  Branch (97:9): [True: 1, False: 46]
  ------------------
   98|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
   99|      1|    }
  100|       |
  101|     46|    tox_event_group_peer_join_construct(group_peer_join);
  102|     46|    return group_peer_join;
  103|     47|}
tox_event_group_peer_join_free:
  106|     47|{
  107|     47|    if (group_peer_join != nullptr) {
  ------------------
  |  |   63|     47|#define nullptr NULL
  ------------------
  |  Branch (107:9): [True: 46, False: 1]
  ------------------
  108|     46|        tox_event_group_peer_join_destruct(group_peer_join, mem);
  109|     46|    }
  110|     47|    mem_delete(mem, group_peer_join);
  111|     47|}
tox_event_group_peer_join_unpack:
  134|     47|{
  135|     47|    assert(event != nullptr);
  136|     47|    assert(*event == nullptr);
  137|     47|    *event = tox_event_group_peer_join_new(mem);
  138|       |
  139|     47|    if (*event == nullptr) {
  ------------------
  |  |   63|     47|#define nullptr NULL
  ------------------
  |  Branch (139:9): [True: 1, False: 46]
  ------------------
  140|      1|        return false;
  141|      1|    }
  142|       |
  143|     46|    return tox_event_group_peer_join_unpack_into(*event, bu);
  144|     47|}
group_peer_join.c:tox_event_group_peer_join_construct:
   52|     46|{
   53|     46|    *group_peer_join = (Tox_Event_Group_Peer_Join) {
   54|     46|        0
   55|     46|    };
   56|     46|}
group_peer_join.c:tox_event_group_peer_join_destruct:
   58|     46|{
   59|     46|    return;
   60|     46|}
group_peer_join.c:tox_event_group_peer_join_unpack_into:
   71|     46|{
   72|     46|    assert(event != nullptr);
   73|     46|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     46|#define nullptr NULL
  ------------------
  |  Branch (73:9): [True: 2, False: 44]
  ------------------
   74|      2|        return false;
   75|      2|    }
   76|       |
   77|     44|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (77:12): [True: 43, False: 1]
  ------------------
   78|     44|           && bin_unpack_u32(bu, &event->peer_id);
  ------------------
  |  Branch (78:15): [True: 41, False: 2]
  ------------------
   79|     46|}

tox_event_group_peer_limit_pack:
   64|     22|{
   65|     22|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (65:12): [True: 22, False: 0]
  ------------------
   66|     22|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (66:15): [True: 22, False: 0]
  ------------------
   67|     22|           && bin_pack_u32(bp, event->peer_limit);
  ------------------
  |  Branch (67:15): [True: 22, False: 0]
  ------------------
   68|     22|}
tox_event_group_peer_limit_new:
   93|     14|{
   94|     14|    Tox_Event_Group_Peer_Limit *const group_peer_limit =
   95|     14|        (Tox_Event_Group_Peer_Limit *)mem_alloc(mem, sizeof(Tox_Event_Group_Peer_Limit));
   96|       |
   97|     14|    if (group_peer_limit == nullptr) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (97:9): [True: 1, False: 13]
  ------------------
   98|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
   99|      1|    }
  100|       |
  101|     13|    tox_event_group_peer_limit_construct(group_peer_limit);
  102|     13|    return group_peer_limit;
  103|     14|}
tox_event_group_peer_limit_free:
  106|     14|{
  107|     14|    if (group_peer_limit != nullptr) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (107:9): [True: 13, False: 1]
  ------------------
  108|     13|        tox_event_group_peer_limit_destruct(group_peer_limit, mem);
  109|     13|    }
  110|     14|    mem_delete(mem, group_peer_limit);
  111|     14|}
tox_event_group_peer_limit_unpack:
  134|     14|{
  135|     14|    assert(event != nullptr);
  136|     14|    assert(*event == nullptr);
  137|     14|    *event = tox_event_group_peer_limit_new(mem);
  138|       |
  139|     14|    if (*event == nullptr) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (139:9): [True: 1, False: 13]
  ------------------
  140|      1|        return false;
  141|      1|    }
  142|       |
  143|     13|    return tox_event_group_peer_limit_unpack_into(*event, bu);
  144|     14|}
group_peer_limit.c:tox_event_group_peer_limit_construct:
   52|     13|{
   53|     13|    *group_peer_limit = (Tox_Event_Group_Peer_Limit) {
   54|     13|        0
   55|     13|    };
   56|     13|}
group_peer_limit.c:tox_event_group_peer_limit_destruct:
   58|     13|{
   59|     13|    return;
   60|     13|}
group_peer_limit.c:tox_event_group_peer_limit_unpack_into:
   71|     13|{
   72|     13|    assert(event != nullptr);
   73|     13|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
  |  Branch (73:9): [True: 1, False: 12]
  ------------------
   74|      1|        return false;
   75|      1|    }
   76|       |
   77|     12|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (77:12): [True: 11, False: 1]
  ------------------
   78|     12|           && bin_unpack_u32(bu, &event->peer_limit);
  ------------------
  |  Branch (78:15): [True: 11, False: 0]
  ------------------
   79|     13|}

tox_event_group_peer_name_pack:
  105|     20|{
  106|     20|    return bin_pack_array(bp, 3)
  ------------------
  |  Branch (106:12): [True: 20, False: 0]
  ------------------
  107|     20|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (107:15): [True: 20, False: 0]
  ------------------
  108|     20|           && bin_pack_u32(bp, event->peer_id)
  ------------------
  |  Branch (108:15): [True: 20, False: 0]
  ------------------
  109|     20|           && bin_pack_bin(bp, event->name, event->name_length);
  ------------------
  |  Branch (109:15): [True: 20, False: 0]
  ------------------
  110|     20|}
tox_event_group_peer_name_new:
  136|     24|{
  137|     24|    Tox_Event_Group_Peer_Name *const group_peer_name =
  138|     24|        (Tox_Event_Group_Peer_Name *)mem_alloc(mem, sizeof(Tox_Event_Group_Peer_Name));
  139|       |
  140|     24|    if (group_peer_name == nullptr) {
  ------------------
  |  |   63|     24|#define nullptr NULL
  ------------------
  |  Branch (140:9): [True: 1, False: 23]
  ------------------
  141|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  142|      1|    }
  143|       |
  144|     23|    tox_event_group_peer_name_construct(group_peer_name);
  145|     23|    return group_peer_name;
  146|     24|}
tox_event_group_peer_name_free:
  149|     24|{
  150|     24|    if (group_peer_name != nullptr) {
  ------------------
  |  |   63|     24|#define nullptr NULL
  ------------------
  |  Branch (150:9): [True: 23, False: 1]
  ------------------
  151|     23|        tox_event_group_peer_name_destruct(group_peer_name, mem);
  152|     23|    }
  153|     24|    mem_delete(mem, group_peer_name);
  154|     24|}
tox_event_group_peer_name_unpack:
  177|     24|{
  178|     24|    assert(event != nullptr);
  179|     24|    assert(*event == nullptr);
  180|     24|    *event = tox_event_group_peer_name_new(mem);
  181|       |
  182|     24|    if (*event == nullptr) {
  ------------------
  |  |   63|     24|#define nullptr NULL
  ------------------
  |  Branch (182:9): [True: 1, False: 23]
  ------------------
  183|      1|        return false;
  184|      1|    }
  185|       |
  186|     23|    return tox_event_group_peer_name_unpack_into(*event, bu);
  187|     24|}
group_peer_name.c:tox_event_group_peer_name_construct:
   93|     23|{
   94|     23|    *group_peer_name = (Tox_Event_Group_Peer_Name) {
   95|     23|        0
   96|     23|    };
   97|     23|}
group_peer_name.c:tox_event_group_peer_name_destruct:
   99|     23|{
  100|     23|    free(group_peer_name->name);
  101|     23|}
group_peer_name.c:tox_event_group_peer_name_unpack_into:
  113|     23|{
  114|     23|    assert(event != nullptr);
  115|     23|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
  |  Branch (115:9): [True: 1, False: 22]
  ------------------
  116|      1|        return false;
  117|      1|    }
  118|       |
  119|     22|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (119:12): [True: 21, False: 1]
  ------------------
  120|     22|           && bin_unpack_u32(bu, &event->peer_id)
  ------------------
  |  Branch (120:15): [True: 20, False: 1]
  ------------------
  121|     22|           && bin_unpack_bin(bu, &event->name, &event->name_length);
  ------------------
  |  Branch (121:15): [True: 17, False: 3]
  ------------------
  122|     23|}

tox_event_group_peer_status_pack:
   78|     20|{
   79|     20|    return bin_pack_array(bp, 3)
  ------------------
  |  Branch (79:12): [True: 20, False: 0]
  ------------------
   80|     20|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (80:15): [True: 20, False: 0]
  ------------------
   81|     20|           && bin_pack_u32(bp, event->peer_id)
  ------------------
  |  Branch (81:15): [True: 20, False: 0]
  ------------------
   82|     20|           && tox_user_status_pack(event->status, bp);
  ------------------
  |  Branch (82:15): [True: 20, False: 0]
  ------------------
   83|     20|}
tox_event_group_peer_status_new:
  109|     23|{
  110|     23|    Tox_Event_Group_Peer_Status *const group_peer_status =
  111|     23|        (Tox_Event_Group_Peer_Status *)mem_alloc(mem, sizeof(Tox_Event_Group_Peer_Status));
  112|       |
  113|     23|    if (group_peer_status == nullptr) {
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
  |  Branch (113:9): [True: 1, False: 22]
  ------------------
  114|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  115|      1|    }
  116|       |
  117|     22|    tox_event_group_peer_status_construct(group_peer_status);
  118|     22|    return group_peer_status;
  119|     23|}
tox_event_group_peer_status_free:
  122|     23|{
  123|     23|    if (group_peer_status != nullptr) {
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
  |  Branch (123:9): [True: 22, False: 1]
  ------------------
  124|     22|        tox_event_group_peer_status_destruct(group_peer_status, mem);
  125|     22|    }
  126|     23|    mem_delete(mem, group_peer_status);
  127|     23|}
tox_event_group_peer_status_unpack:
  150|     23|{
  151|     23|    assert(event != nullptr);
  152|     23|    assert(*event == nullptr);
  153|     23|    *event = tox_event_group_peer_status_new(mem);
  154|       |
  155|     23|    if (*event == nullptr) {
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
  |  Branch (155:9): [True: 1, False: 22]
  ------------------
  156|      1|        return false;
  157|      1|    }
  158|       |
  159|     22|    return tox_event_group_peer_status_unpack_into(*event, bu);
  160|     23|}
group_peer_status.c:tox_event_group_peer_status_construct:
   66|     22|{
   67|     22|    *group_peer_status = (Tox_Event_Group_Peer_Status) {
   68|     22|        0
   69|     22|    };
   70|     22|}
group_peer_status.c:tox_event_group_peer_status_destruct:
   72|     22|{
   73|     22|    return;
   74|     22|}
group_peer_status.c:tox_event_group_peer_status_unpack_into:
   86|     22|{
   87|     22|    assert(event != nullptr);
   88|     22|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|     22|#define nullptr NULL
  ------------------
  |  Branch (88:9): [True: 3, False: 19]
  ------------------
   89|      3|        return false;
   90|      3|    }
   91|       |
   92|     19|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (92:12): [True: 18, False: 1]
  ------------------
   93|     19|           && bin_unpack_u32(bu, &event->peer_id)
  ------------------
  |  Branch (93:15): [True: 17, False: 1]
  ------------------
   94|     19|           && tox_user_status_unpack(&event->status, bu);
  ------------------
  |  Branch (94:15): [True: 15, False: 2]
  ------------------
   95|     22|}

tox_event_group_privacy_state_pack:
   66|     20|{
   67|     20|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (67:12): [True: 20, False: 0]
  ------------------
   68|     20|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (68:15): [True: 20, False: 0]
  ------------------
   69|     20|           && tox_group_privacy_state_pack(event->privacy_state, bp);
  ------------------
  |  Branch (69:15): [True: 20, False: 0]
  ------------------
   70|     20|}
tox_event_group_privacy_state_new:
   95|     26|{
   96|     26|    Tox_Event_Group_Privacy_State *const group_privacy_state =
   97|     26|        (Tox_Event_Group_Privacy_State *)mem_alloc(mem, sizeof(Tox_Event_Group_Privacy_State));
   98|       |
   99|     26|    if (group_privacy_state == nullptr) {
  ------------------
  |  |   63|     26|#define nullptr NULL
  ------------------
  |  Branch (99:9): [True: 1, False: 25]
  ------------------
  100|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  101|      1|    }
  102|       |
  103|     25|    tox_event_group_privacy_state_construct(group_privacy_state);
  104|     25|    return group_privacy_state;
  105|     26|}
tox_event_group_privacy_state_free:
  108|     26|{
  109|     26|    if (group_privacy_state != nullptr) {
  ------------------
  |  |   63|     26|#define nullptr NULL
  ------------------
  |  Branch (109:9): [True: 25, False: 1]
  ------------------
  110|     25|        tox_event_group_privacy_state_destruct(group_privacy_state, mem);
  111|     25|    }
  112|     26|    mem_delete(mem, group_privacy_state);
  113|     26|}
tox_event_group_privacy_state_unpack:
  136|     26|{
  137|     26|    assert(event != nullptr);
  138|     26|    assert(*event == nullptr);
  139|     26|    *event = tox_event_group_privacy_state_new(mem);
  140|       |
  141|     26|    if (*event == nullptr) {
  ------------------
  |  |   63|     26|#define nullptr NULL
  ------------------
  |  Branch (141:9): [True: 1, False: 25]
  ------------------
  142|      1|        return false;
  143|      1|    }
  144|       |
  145|     25|    return tox_event_group_privacy_state_unpack_into(*event, bu);
  146|     26|}
group_privacy_state.c:tox_event_group_privacy_state_construct:
   54|     25|{
   55|     25|    *group_privacy_state = (Tox_Event_Group_Privacy_State) {
   56|     25|        0
   57|     25|    };
   58|     25|}
group_privacy_state.c:tox_event_group_privacy_state_destruct:
   60|     25|{
   61|     25|    return;
   62|     25|}
group_privacy_state.c:tox_event_group_privacy_state_unpack_into:
   73|     25|{
   74|     25|    assert(event != nullptr);
   75|     25|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     25|#define nullptr NULL
  ------------------
  |  Branch (75:9): [True: 2, False: 23]
  ------------------
   76|      2|        return false;
   77|      2|    }
   78|       |
   79|     23|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (79:12): [True: 22, False: 1]
  ------------------
   80|     23|           && tox_group_privacy_state_unpack(&event->privacy_state, bu);
  ------------------
  |  Branch (80:15): [True: 20, False: 2]
  ------------------
   81|     25|}

tox_event_group_private_message_pack:
  131|     38|{
  132|     38|    return bin_pack_array(bp, 5)
  ------------------
  |  Branch (132:12): [True: 38, False: 0]
  ------------------
  133|     38|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (133:15): [True: 38, False: 0]
  ------------------
  134|     38|           && bin_pack_u32(bp, event->peer_id)
  ------------------
  |  Branch (134:15): [True: 38, False: 0]
  ------------------
  135|     38|           && tox_message_type_pack(event->message_type, bp)
  ------------------
  |  Branch (135:15): [True: 38, False: 0]
  ------------------
  136|     38|           && bin_pack_bin(bp, event->message, event->message_length)
  ------------------
  |  Branch (136:15): [True: 38, False: 0]
  ------------------
  137|     38|           && bin_pack_u32(bp, event->message_id);
  ------------------
  |  Branch (137:15): [True: 38, False: 0]
  ------------------
  138|     38|}
tox_event_group_private_message_new:
  166|     33|{
  167|     33|    Tox_Event_Group_Private_Message *const group_private_message =
  168|     33|        (Tox_Event_Group_Private_Message *)mem_alloc(mem, sizeof(Tox_Event_Group_Private_Message));
  169|       |
  170|     33|    if (group_private_message == nullptr) {
  ------------------
  |  |   63|     33|#define nullptr NULL
  ------------------
  |  Branch (170:9): [True: 1, False: 32]
  ------------------
  171|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  172|      1|    }
  173|       |
  174|     32|    tox_event_group_private_message_construct(group_private_message);
  175|     32|    return group_private_message;
  176|     33|}
tox_event_group_private_message_free:
  179|     33|{
  180|     33|    if (group_private_message != nullptr) {
  ------------------
  |  |   63|     33|#define nullptr NULL
  ------------------
  |  Branch (180:9): [True: 32, False: 1]
  ------------------
  181|     32|        tox_event_group_private_message_destruct(group_private_message, mem);
  182|     32|    }
  183|     33|    mem_delete(mem, group_private_message);
  184|     33|}
tox_event_group_private_message_unpack:
  207|     33|{
  208|     33|    assert(event != nullptr);
  209|     33|    assert(*event == nullptr);
  210|     33|    *event = tox_event_group_private_message_new(mem);
  211|       |
  212|     33|    if (*event == nullptr) {
  ------------------
  |  |   63|     33|#define nullptr NULL
  ------------------
  |  Branch (212:9): [True: 1, False: 32]
  ------------------
  213|      1|        return false;
  214|      1|    }
  215|       |
  216|     32|    return tox_event_group_private_message_unpack_into(*event, bu);
  217|     33|}
group_private_message.c:tox_event_group_private_message_construct:
  119|     32|{
  120|     32|    *group_private_message = (Tox_Event_Group_Private_Message) {
  121|     32|        0
  122|     32|    };
  123|     32|}
group_private_message.c:tox_event_group_private_message_destruct:
  125|     32|{
  126|     32|    free(group_private_message->message);
  127|     32|}
group_private_message.c:tox_event_group_private_message_unpack_into:
  141|     32|{
  142|     32|    assert(event != nullptr);
  143|     32|    if (!bin_unpack_array_fixed(bu, 5, nullptr)) {
  ------------------
  |  |   63|     32|#define nullptr NULL
  ------------------
  |  Branch (143:9): [True: 3, False: 29]
  ------------------
  144|      3|        return false;
  145|      3|    }
  146|       |
  147|     29|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (147:12): [True: 28, False: 1]
  ------------------
  148|     29|           && bin_unpack_u32(bu, &event->peer_id)
  ------------------
  |  Branch (148:15): [True: 27, False: 1]
  ------------------
  149|     29|           && tox_message_type_unpack(&event->message_type, bu)
  ------------------
  |  Branch (149:15): [True: 25, False: 2]
  ------------------
  150|     29|           && bin_unpack_bin(bu, &event->message, &event->message_length)
  ------------------
  |  Branch (150:15): [True: 24, False: 1]
  ------------------
  151|     29|           && bin_unpack_u32(bu, &event->message_id);
  ------------------
  |  Branch (151:15): [True: 23, False: 1]
  ------------------
  152|     32|}

tox_event_group_self_join_pack:
   52|     38|{
   53|     38|    return bin_pack_u32(bp, event->group_number);
   54|     38|}
tox_event_group_self_join_new:
   74|     50|{
   75|     50|    Tox_Event_Group_Self_Join *const group_self_join =
   76|     50|        (Tox_Event_Group_Self_Join *)mem_alloc(mem, sizeof(Tox_Event_Group_Self_Join));
   77|       |
   78|     50|    if (group_self_join == nullptr) {
  ------------------
  |  |   63|     50|#define nullptr NULL
  ------------------
  |  Branch (78:9): [True: 1, False: 49]
  ------------------
   79|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
   80|      1|    }
   81|       |
   82|     49|    tox_event_group_self_join_construct(group_self_join);
   83|     49|    return group_self_join;
   84|     50|}
tox_event_group_self_join_free:
   87|     50|{
   88|     50|    if (group_self_join != nullptr) {
  ------------------
  |  |   63|     50|#define nullptr NULL
  ------------------
  |  Branch (88:9): [True: 49, False: 1]
  ------------------
   89|     49|        tox_event_group_self_join_destruct(group_self_join, mem);
   90|     49|    }
   91|     50|    mem_delete(mem, group_self_join);
   92|     50|}
tox_event_group_self_join_unpack:
  115|     50|{
  116|     50|    assert(event != nullptr);
  117|     50|    assert(*event == nullptr);
  118|     50|    *event = tox_event_group_self_join_new(mem);
  119|       |
  120|     50|    if (*event == nullptr) {
  ------------------
  |  |   63|     50|#define nullptr NULL
  ------------------
  |  Branch (120:9): [True: 1, False: 49]
  ------------------
  121|      1|        return false;
  122|      1|    }
  123|       |
  124|     49|    return tox_event_group_self_join_unpack_into(*event, bu);
  125|     50|}
group_self_join.c:tox_event_group_self_join_construct:
   40|     49|{
   41|     49|    *group_self_join = (Tox_Event_Group_Self_Join) {
   42|     49|        0
   43|     49|    };
   44|     49|}
group_self_join.c:tox_event_group_self_join_destruct:
   46|     49|{
   47|     49|    return;
   48|     49|}
group_self_join.c:tox_event_group_self_join_unpack_into:
   57|     49|{
   58|     49|    assert(event != nullptr);
   59|     49|    return bin_unpack_u32(bu, &event->group_number);
   60|     49|}

tox_event_group_topic_pack:
  105|     20|{
  106|     20|    return bin_pack_array(bp, 3)
  ------------------
  |  Branch (106:12): [True: 20, False: 0]
  ------------------
  107|     20|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (107:15): [True: 20, False: 0]
  ------------------
  108|     20|           && bin_pack_u32(bp, event->peer_id)
  ------------------
  |  Branch (108:15): [True: 20, False: 0]
  ------------------
  109|     20|           && bin_pack_bin(bp, event->topic, event->topic_length);
  ------------------
  |  Branch (109:15): [True: 20, False: 0]
  ------------------
  110|     20|}
tox_event_group_topic_new:
  136|     22|{
  137|     22|    Tox_Event_Group_Topic *const group_topic =
  138|     22|        (Tox_Event_Group_Topic *)mem_alloc(mem, sizeof(Tox_Event_Group_Topic));
  139|       |
  140|     22|    if (group_topic == nullptr) {
  ------------------
  |  |   63|     22|#define nullptr NULL
  ------------------
  |  Branch (140:9): [True: 1, False: 21]
  ------------------
  141|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  142|      1|    }
  143|       |
  144|     21|    tox_event_group_topic_construct(group_topic);
  145|     21|    return group_topic;
  146|     22|}
tox_event_group_topic_free:
  149|     22|{
  150|     22|    if (group_topic != nullptr) {
  ------------------
  |  |   63|     22|#define nullptr NULL
  ------------------
  |  Branch (150:9): [True: 21, False: 1]
  ------------------
  151|     21|        tox_event_group_topic_destruct(group_topic, mem);
  152|     21|    }
  153|     22|    mem_delete(mem, group_topic);
  154|     22|}
tox_event_group_topic_unpack:
  177|     22|{
  178|     22|    assert(event != nullptr);
  179|     22|    assert(*event == nullptr);
  180|     22|    *event = tox_event_group_topic_new(mem);
  181|       |
  182|     22|    if (*event == nullptr) {
  ------------------
  |  |   63|     22|#define nullptr NULL
  ------------------
  |  Branch (182:9): [True: 1, False: 21]
  ------------------
  183|      1|        return false;
  184|      1|    }
  185|       |
  186|     21|    return tox_event_group_topic_unpack_into(*event, bu);
  187|     22|}
group_topic.c:tox_event_group_topic_construct:
   93|     21|{
   94|     21|    *group_topic = (Tox_Event_Group_Topic) {
   95|     21|        0
   96|     21|    };
   97|     21|}
group_topic.c:tox_event_group_topic_destruct:
   99|     21|{
  100|     21|    free(group_topic->topic);
  101|     21|}
group_topic.c:tox_event_group_topic_unpack_into:
  113|     21|{
  114|     21|    assert(event != nullptr);
  115|     21|    if (!bin_unpack_array_fixed(bu, 3, nullptr)) {
  ------------------
  |  |   63|     21|#define nullptr NULL
  ------------------
  |  Branch (115:9): [True: 1, False: 20]
  ------------------
  116|      1|        return false;
  117|      1|    }
  118|       |
  119|     20|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (119:12): [True: 19, False: 1]
  ------------------
  120|     20|           && bin_unpack_u32(bu, &event->peer_id)
  ------------------
  |  Branch (120:15): [True: 18, False: 1]
  ------------------
  121|     20|           && bin_unpack_bin(bu, &event->topic, &event->topic_length);
  ------------------
  |  Branch (121:15): [True: 15, False: 3]
  ------------------
  122|     21|}

tox_event_group_topic_lock_pack:
   66|     20|{
   67|     20|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (67:12): [True: 20, False: 0]
  ------------------
   68|     20|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (68:15): [True: 20, False: 0]
  ------------------
   69|     20|           && tox_group_topic_lock_pack(event->topic_lock, bp);
  ------------------
  |  Branch (69:15): [True: 20, False: 0]
  ------------------
   70|     20|}
tox_event_group_topic_lock_new:
   95|     26|{
   96|     26|    Tox_Event_Group_Topic_Lock *const group_topic_lock =
   97|     26|        (Tox_Event_Group_Topic_Lock *)mem_alloc(mem, sizeof(Tox_Event_Group_Topic_Lock));
   98|       |
   99|     26|    if (group_topic_lock == nullptr) {
  ------------------
  |  |   63|     26|#define nullptr NULL
  ------------------
  |  Branch (99:9): [True: 1, False: 25]
  ------------------
  100|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  101|      1|    }
  102|       |
  103|     25|    tox_event_group_topic_lock_construct(group_topic_lock);
  104|     25|    return group_topic_lock;
  105|     26|}
tox_event_group_topic_lock_free:
  108|     26|{
  109|     26|    if (group_topic_lock != nullptr) {
  ------------------
  |  |   63|     26|#define nullptr NULL
  ------------------
  |  Branch (109:9): [True: 25, False: 1]
  ------------------
  110|     25|        tox_event_group_topic_lock_destruct(group_topic_lock, mem);
  111|     25|    }
  112|     26|    mem_delete(mem, group_topic_lock);
  113|     26|}
tox_event_group_topic_lock_unpack:
  136|     26|{
  137|     26|    assert(event != nullptr);
  138|     26|    assert(*event == nullptr);
  139|     26|    *event = tox_event_group_topic_lock_new(mem);
  140|       |
  141|     26|    if (*event == nullptr) {
  ------------------
  |  |   63|     26|#define nullptr NULL
  ------------------
  |  Branch (141:9): [True: 1, False: 25]
  ------------------
  142|      1|        return false;
  143|      1|    }
  144|       |
  145|     25|    return tox_event_group_topic_lock_unpack_into(*event, bu);
  146|     26|}
group_topic_lock.c:tox_event_group_topic_lock_construct:
   54|     25|{
   55|     25|    *group_topic_lock = (Tox_Event_Group_Topic_Lock) {
   56|     25|        0
   57|     25|    };
   58|     25|}
group_topic_lock.c:tox_event_group_topic_lock_destruct:
   60|     25|{
   61|     25|    return;
   62|     25|}
group_topic_lock.c:tox_event_group_topic_lock_unpack_into:
   73|     25|{
   74|     25|    assert(event != nullptr);
   75|     25|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     25|#define nullptr NULL
  ------------------
  |  Branch (75:9): [True: 2, False: 23]
  ------------------
   76|      2|        return false;
   77|      2|    }
   78|       |
   79|     23|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (79:12): [True: 22, False: 1]
  ------------------
   80|     23|           && tox_group_topic_lock_unpack(&event->topic_lock, bu);
  ------------------
  |  Branch (80:15): [True: 20, False: 2]
  ------------------
   81|     25|}

tox_event_group_voice_state_pack:
   66|     36|{
   67|     36|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (67:12): [True: 36, False: 0]
  ------------------
   68|     36|           && bin_pack_u32(bp, event->group_number)
  ------------------
  |  Branch (68:15): [True: 36, False: 0]
  ------------------
   69|     36|           && tox_group_voice_state_pack(event->voice_state, bp);
  ------------------
  |  Branch (69:15): [True: 36, False: 0]
  ------------------
   70|     36|}
tox_event_group_voice_state_new:
   95|     41|{
   96|     41|    Tox_Event_Group_Voice_State *const group_voice_state =
   97|     41|        (Tox_Event_Group_Voice_State *)mem_alloc(mem, sizeof(Tox_Event_Group_Voice_State));
   98|       |
   99|     41|    if (group_voice_state == nullptr) {
  ------------------
  |  |   63|     41|#define nullptr NULL
  ------------------
  |  Branch (99:9): [True: 1, False: 40]
  ------------------
  100|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  101|      1|    }
  102|       |
  103|     40|    tox_event_group_voice_state_construct(group_voice_state);
  104|     40|    return group_voice_state;
  105|     41|}
tox_event_group_voice_state_free:
  108|     41|{
  109|     41|    if (group_voice_state != nullptr) {
  ------------------
  |  |   63|     41|#define nullptr NULL
  ------------------
  |  Branch (109:9): [True: 40, False: 1]
  ------------------
  110|     40|        tox_event_group_voice_state_destruct(group_voice_state, mem);
  111|     40|    }
  112|     41|    mem_delete(mem, group_voice_state);
  113|     41|}
tox_event_group_voice_state_unpack:
  136|     41|{
  137|     41|    assert(event != nullptr);
  138|     41|    assert(*event == nullptr);
  139|     41|    *event = tox_event_group_voice_state_new(mem);
  140|       |
  141|     41|    if (*event == nullptr) {
  ------------------
  |  |   63|     41|#define nullptr NULL
  ------------------
  |  Branch (141:9): [True: 1, False: 40]
  ------------------
  142|      1|        return false;
  143|      1|    }
  144|       |
  145|     40|    return tox_event_group_voice_state_unpack_into(*event, bu);
  146|     41|}
group_voice_state.c:tox_event_group_voice_state_construct:
   54|     40|{
   55|     40|    *group_voice_state = (Tox_Event_Group_Voice_State) {
   56|     40|        0
   57|     40|    };
   58|     40|}
group_voice_state.c:tox_event_group_voice_state_destruct:
   60|     40|{
   61|     40|    return;
   62|     40|}
group_voice_state.c:tox_event_group_voice_state_unpack_into:
   73|     40|{
   74|     40|    assert(event != nullptr);
   75|     40|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|     40|#define nullptr NULL
  ------------------
  |  Branch (75:9): [True: 3, False: 37]
  ------------------
   76|      3|        return false;
   77|      3|    }
   78|       |
   79|     37|    return bin_unpack_u32(bu, &event->group_number)
  ------------------
  |  Branch (79:12): [True: 36, False: 1]
  ------------------
   80|     37|           && tox_group_voice_state_unpack(&event->voice_state, bu);
  ------------------
  |  Branch (80:15): [True: 34, False: 2]
  ------------------
   81|     40|}

tox_event_self_connection_status_pack:
   54|    256|{
   55|    256|    return tox_connection_pack(event->connection_status, bp);
   56|    256|}
tox_event_self_connection_status_new:
   76|    183|{
   77|    183|    Tox_Event_Self_Connection_Status *const self_connection_status =
   78|    183|        (Tox_Event_Self_Connection_Status *)mem_alloc(mem, sizeof(Tox_Event_Self_Connection_Status));
   79|       |
   80|    183|    if (self_connection_status == nullptr) {
  ------------------
  |  |   63|    183|#define nullptr NULL
  ------------------
  |  Branch (80:9): [True: 1, False: 182]
  ------------------
   81|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
   82|      1|    }
   83|       |
   84|    182|    tox_event_self_connection_status_construct(self_connection_status);
   85|    182|    return self_connection_status;
   86|    183|}
tox_event_self_connection_status_free:
   89|    183|{
   90|    183|    if (self_connection_status != nullptr) {
  ------------------
  |  |   63|    183|#define nullptr NULL
  ------------------
  |  Branch (90:9): [True: 182, False: 1]
  ------------------
   91|    182|        tox_event_self_connection_status_destruct(self_connection_status, mem);
   92|    182|    }
   93|    183|    mem_delete(mem, self_connection_status);
   94|    183|}
tox_event_self_connection_status_unpack:
  117|    183|{
  118|    183|    assert(event != nullptr);
  119|    183|    assert(*event == nullptr);
  120|    183|    *event = tox_event_self_connection_status_new(mem);
  121|       |
  122|    183|    if (*event == nullptr) {
  ------------------
  |  |   63|    183|#define nullptr NULL
  ------------------
  |  Branch (122:9): [True: 1, False: 182]
  ------------------
  123|      1|        return false;
  124|      1|    }
  125|       |
  126|    182|    return tox_event_self_connection_status_unpack_into(*event, bu);
  127|    183|}
self_connection_status.c:tox_event_self_connection_status_construct:
   42|    182|{
   43|    182|    *self_connection_status = (Tox_Event_Self_Connection_Status) {
   44|    182|        TOX_CONNECTION_NONE
   45|    182|    };
   46|    182|}
self_connection_status.c:tox_event_self_connection_status_destruct:
   48|    182|{
   49|    182|    return;
   50|    182|}
self_connection_status.c:tox_event_self_connection_status_unpack_into:
   59|    182|{
   60|    182|    assert(event != nullptr);
   61|    182|    return tox_connection_unpack(&event->connection_status, bu);
   62|    182|}

mem_balloc:
   47|    494|{
   48|    494|    void *const ptr = mem->funcs->malloc(mem->obj, size);
   49|    494|    return ptr;
   50|    494|}
mem_alloc:
   59|  2.55k|{
   60|  2.55k|    void *const ptr = mem->funcs->calloc(mem->obj, 1, size);
   61|  2.55k|    return ptr;
   62|  2.55k|}
mem_vrealloc:
   77|    841|{
   78|    841|    const uint32_t bytes = nmemb * size;
   79|       |
   80|    841|    if (size != 0 && bytes / size != nmemb) {
  ------------------
  |  Branch (80:9): [True: 841, False: 0]
  |  Branch (80:22): [True: 0, False: 841]
  ------------------
   81|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   82|      0|    }
   83|       |
   84|    841|    void *const new_ptr = mem->funcs->realloc(mem->obj, ptr, bytes);
   85|    841|    return new_ptr;
   86|    841|}
mem_delete:
   89|  3.41k|{
   90|  3.41k|    mem->funcs->free(mem->obj, ptr);
   91|  3.41k|}

tox_dispatch_new:
   60|    805|{
   61|    805|    Tox_Dispatch *dispatch = (Tox_Dispatch *)calloc(1, sizeof(Tox_Dispatch));
   62|       |
   63|    805|    if (dispatch == nullptr) {
  ------------------
  |  |   63|    805|#define nullptr NULL
  ------------------
  |  Branch (63:9): [True: 0, False: 805]
  ------------------
   64|      0|        if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (64:13): [True: 0, False: 0]
  ------------------
   65|      0|            *error = TOX_ERR_DISPATCH_NEW_MALLOC;
   66|      0|        }
   67|       |
   68|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   69|      0|    }
   70|       |
   71|    805|    *dispatch = (Tox_Dispatch) {
   72|    805|        nullptr
  ------------------
  |  |   63|    805|#define nullptr NULL
  ------------------
   73|    805|    };
   74|       |
   75|    805|    if (error != nullptr) {
  ------------------
  |  |   63|    805|#define nullptr NULL
  ------------------
  |  Branch (75:9): [True: 0, False: 805]
  ------------------
   76|      0|        *error = TOX_ERR_DISPATCH_NEW_OK;
   77|      0|    }
   78|       |
   79|    805|    return dispatch;
   80|    805|}
tox_dispatch_free:
   83|    805|{
   84|    805|    free(dispatch);
   85|    805|}
tox_events_callback_conference_connected:
   89|    805|{
   90|    805|    dispatch->conference_connected_callback = callback;
   91|    805|}
tox_events_callback_conference_invite:
   94|    805|{
   95|    805|    dispatch->conference_invite_callback = callback;
   96|    805|}
tox_events_callback_conference_message:
   99|    805|{
  100|    805|    dispatch->conference_message_callback = callback;
  101|    805|}
tox_events_callback_conference_peer_list_changed:
  104|    805|{
  105|    805|    dispatch->conference_peer_list_changed_callback = callback;
  106|    805|}
tox_events_callback_conference_peer_name:
  109|    805|{
  110|    805|    dispatch->conference_peer_name_callback = callback;
  111|    805|}
tox_events_callback_conference_title:
  114|    805|{
  115|    805|    dispatch->conference_title_callback = callback;
  116|    805|}
tox_events_callback_file_chunk_request:
  119|    805|{
  120|    805|    dispatch->file_chunk_request_callback = callback;
  121|    805|}
tox_events_callback_file_recv:
  124|    805|{
  125|    805|    dispatch->file_recv_callback = callback;
  126|    805|}
tox_events_callback_file_recv_chunk:
  129|    805|{
  130|    805|    dispatch->file_recv_chunk_callback = callback;
  131|    805|}
tox_events_callback_file_recv_control:
  134|    805|{
  135|    805|    dispatch->file_recv_control_callback = callback;
  136|    805|}
tox_events_callback_friend_connection_status:
  139|    805|{
  140|    805|    dispatch->friend_connection_status_callback = callback;
  141|    805|}
tox_events_callback_friend_lossless_packet:
  144|    805|{
  145|    805|    dispatch->friend_lossless_packet_callback = callback;
  146|    805|}
tox_events_callback_friend_lossy_packet:
  149|    805|{
  150|    805|    dispatch->friend_lossy_packet_callback = callback;
  151|    805|}
tox_events_callback_friend_message:
  154|    805|{
  155|    805|    dispatch->friend_message_callback = callback;
  156|    805|}
tox_events_callback_friend_name:
  159|    805|{
  160|    805|    dispatch->friend_name_callback = callback;
  161|    805|}
tox_events_callback_friend_read_receipt:
  164|    805|{
  165|    805|    dispatch->friend_read_receipt_callback = callback;
  166|    805|}
tox_events_callback_friend_request:
  169|    805|{
  170|    805|    dispatch->friend_request_callback = callback;
  171|    805|}
tox_events_callback_friend_status:
  174|    805|{
  175|    805|    dispatch->friend_status_callback = callback;
  176|    805|}
tox_events_callback_friend_status_message:
  179|    805|{
  180|    805|    dispatch->friend_status_message_callback = callback;
  181|    805|}
tox_events_callback_friend_typing:
  184|    805|{
  185|    805|    dispatch->friend_typing_callback = callback;
  186|    805|}
tox_events_callback_self_connection_status:
  189|    805|{
  190|    805|    dispatch->self_connection_status_callback = callback;
  191|    805|}
tox_events_callback_group_peer_name:
  194|    805|{
  195|    805|    dispatch->group_peer_name_callback = callback;
  196|    805|}
tox_events_callback_group_peer_status:
  199|    805|{
  200|    805|    dispatch->group_peer_status_callback = callback;
  201|    805|}
tox_events_callback_group_topic:
  204|    805|{
  205|    805|    dispatch->group_topic_callback = callback;
  206|    805|}
tox_events_callback_group_privacy_state:
  209|    805|{
  210|    805|    dispatch->group_privacy_state_callback = callback;
  211|    805|}
tox_events_callback_group_voice_state:
  214|    805|{
  215|    805|    dispatch->group_voice_state_callback = callback;
  216|    805|}
tox_events_callback_group_topic_lock:
  219|    805|{
  220|    805|    dispatch->group_topic_lock_callback = callback;
  221|    805|}
tox_events_callback_group_peer_limit:
  224|    805|{
  225|    805|    dispatch->group_peer_limit_callback = callback;
  226|    805|}
tox_events_callback_group_password:
  229|    805|{
  230|    805|    dispatch->group_password_callback = callback;
  231|    805|}
tox_events_callback_group_message:
  234|    805|{
  235|    805|    dispatch->group_message_callback = callback;
  236|    805|}
tox_events_callback_group_private_message:
  239|    805|{
  240|    805|    dispatch->group_private_message_callback = callback;
  241|    805|}
tox_events_callback_group_custom_packet:
  244|    805|{
  245|    805|    dispatch->group_custom_packet_callback = callback;
  246|    805|}
tox_events_callback_group_custom_private_packet:
  249|    805|{
  250|    805|    dispatch->group_custom_private_packet_callback = callback;
  251|    805|}
tox_events_callback_group_invite:
  254|    805|{
  255|    805|    dispatch->group_invite_callback = callback;
  256|    805|}
tox_events_callback_group_peer_join:
  259|    805|{
  260|    805|    dispatch->group_peer_join_callback = callback;
  261|    805|}
tox_events_callback_group_peer_exit:
  264|    805|{
  265|    805|    dispatch->group_peer_exit_callback = callback;
  266|    805|}
tox_events_callback_group_self_join:
  269|    805|{
  270|    805|    dispatch->group_self_join_callback = callback;
  271|    805|}
tox_events_callback_group_join_fail:
  274|    805|{
  275|    805|    dispatch->group_join_fail_callback = callback;
  276|    805|}
tox_events_callback_group_moderation:
  279|    805|{
  280|    805|    dispatch->group_moderation_callback = callback;
  281|    805|}
tox_dispatch_invoke:
  618|    191|{
  619|    191|    const uint32_t size = tox_events_get_size(events);
  620|    966|    for (uint32_t i = 0; i < size; ++i) {
  ------------------
  |  Branch (620:26): [True: 775, False: 191]
  ------------------
  621|    775|        const Tox_Event *event = &events->events[i];
  622|    775|        tox_dispatch_invoke_event(dispatch, event, user_data);
  623|    775|    }
  624|    191|}
tox_dispatch.c:tox_dispatch_invoke_event:
  289|    775|{
  290|    775|    switch (event->type) {
  ------------------
  |  Branch (290:13): [True: 0, False: 775]
  ------------------
  291|     23|        case TOX_EVENT_CONFERENCE_CONNECTED: {
  ------------------
  |  Branch (291:9): [True: 23, False: 752]
  ------------------
  292|     23|            if (dispatch->conference_connected_callback != nullptr) {
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
  |  Branch (292:17): [True: 23, False: 0]
  ------------------
  293|     23|                dispatch->conference_connected_callback(event->data.conference_connected, user_data);
  294|     23|            }
  295|       |
  296|     23|            break;
  297|      0|        }
  298|       |
  299|     12|        case TOX_EVENT_CONFERENCE_INVITE: {
  ------------------
  |  Branch (299:9): [True: 12, False: 763]
  ------------------
  300|     12|            if (dispatch->conference_invite_callback != nullptr) {
  ------------------
  |  |   63|     12|#define nullptr NULL
  ------------------
  |  Branch (300:17): [True: 12, False: 0]
  ------------------
  301|     12|                dispatch->conference_invite_callback(event->data.conference_invite, user_data);
  302|     12|            }
  303|       |
  304|     12|            break;
  305|      0|        }
  306|       |
  307|     10|        case TOX_EVENT_CONFERENCE_MESSAGE: {
  ------------------
  |  Branch (307:9): [True: 10, False: 765]
  ------------------
  308|     10|            if (dispatch->conference_message_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (308:17): [True: 10, False: 0]
  ------------------
  309|     10|                dispatch->conference_message_callback(event->data.conference_message, user_data);
  310|     10|            }
  311|       |
  312|     10|            break;
  313|      0|        }
  314|       |
  315|     79|        case TOX_EVENT_CONFERENCE_PEER_LIST_CHANGED: {
  ------------------
  |  Branch (315:9): [True: 79, False: 696]
  ------------------
  316|     79|            if (dispatch->conference_peer_list_changed_callback != nullptr) {
  ------------------
  |  |   63|     79|#define nullptr NULL
  ------------------
  |  Branch (316:17): [True: 79, False: 0]
  ------------------
  317|     79|                dispatch->conference_peer_list_changed_callback(event->data.conference_peer_list_changed, user_data);
  318|     79|            }
  319|       |
  320|     79|            break;
  321|      0|        }
  322|       |
  323|     10|        case TOX_EVENT_CONFERENCE_PEER_NAME: {
  ------------------
  |  Branch (323:9): [True: 10, False: 765]
  ------------------
  324|     10|            if (dispatch->conference_peer_name_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (324:17): [True: 10, False: 0]
  ------------------
  325|     10|                dispatch->conference_peer_name_callback(event->data.conference_peer_name, user_data);
  326|     10|            }
  327|       |
  328|     10|            break;
  329|      0|        }
  330|       |
  331|     34|        case TOX_EVENT_CONFERENCE_TITLE: {
  ------------------
  |  Branch (331:9): [True: 34, False: 741]
  ------------------
  332|     34|            if (dispatch->conference_title_callback != nullptr) {
  ------------------
  |  |   63|     34|#define nullptr NULL
  ------------------
  |  Branch (332:17): [True: 34, False: 0]
  ------------------
  333|     34|                dispatch->conference_title_callback(event->data.conference_title, user_data);
  334|     34|            }
  335|       |
  336|     34|            break;
  337|      0|        }
  338|       |
  339|     55|        case TOX_EVENT_FILE_CHUNK_REQUEST: {
  ------------------
  |  Branch (339:9): [True: 55, False: 720]
  ------------------
  340|     55|            if (dispatch->file_chunk_request_callback != nullptr) {
  ------------------
  |  |   63|     55|#define nullptr NULL
  ------------------
  |  Branch (340:17): [True: 55, False: 0]
  ------------------
  341|     55|                dispatch->file_chunk_request_callback(event->data.file_chunk_request, user_data);
  342|     55|            }
  343|       |
  344|     55|            break;
  345|      0|        }
  346|       |
  347|     10|        case TOX_EVENT_FILE_RECV_CHUNK: {
  ------------------
  |  Branch (347:9): [True: 10, False: 765]
  ------------------
  348|     10|            if (dispatch->file_recv_chunk_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (348:17): [True: 10, False: 0]
  ------------------
  349|     10|                dispatch->file_recv_chunk_callback(event->data.file_recv_chunk, user_data);
  350|     10|            }
  351|       |
  352|     10|            break;
  353|      0|        }
  354|       |
  355|     13|        case TOX_EVENT_FILE_RECV_CONTROL: {
  ------------------
  |  Branch (355:9): [True: 13, False: 762]
  ------------------
  356|     13|            if (dispatch->file_recv_control_callback != nullptr) {
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
  |  Branch (356:17): [True: 13, False: 0]
  ------------------
  357|     13|                dispatch->file_recv_control_callback(event->data.file_recv_control, user_data);
  358|     13|            }
  359|       |
  360|     13|            break;
  361|      0|        }
  362|       |
  363|     23|        case TOX_EVENT_FILE_RECV: {
  ------------------
  |  Branch (363:9): [True: 23, False: 752]
  ------------------
  364|     23|            if (dispatch->file_recv_callback != nullptr) {
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
  |  Branch (364:17): [True: 23, False: 0]
  ------------------
  365|     23|                dispatch->file_recv_callback(event->data.file_recv, user_data);
  366|     23|            }
  367|       |
  368|     23|            break;
  369|      0|        }
  370|       |
  371|     20|        case TOX_EVENT_FRIEND_CONNECTION_STATUS: {
  ------------------
  |  Branch (371:9): [True: 20, False: 755]
  ------------------
  372|     20|            if (dispatch->friend_connection_status_callback != nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (372:17): [True: 20, False: 0]
  ------------------
  373|     20|                dispatch->friend_connection_status_callback(event->data.friend_connection_status, user_data);
  374|     20|            }
  375|       |
  376|     20|            break;
  377|      0|        }
  378|       |
  379|     10|        case TOX_EVENT_FRIEND_LOSSLESS_PACKET: {
  ------------------
  |  Branch (379:9): [True: 10, False: 765]
  ------------------
  380|     10|            if (dispatch->friend_lossless_packet_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (380:17): [True: 10, False: 0]
  ------------------
  381|     10|                dispatch->friend_lossless_packet_callback(event->data.friend_lossless_packet, user_data);
  382|     10|            }
  383|       |
  384|     10|            break;
  385|      0|        }
  386|       |
  387|     13|        case TOX_EVENT_FRIEND_LOSSY_PACKET: {
  ------------------
  |  Branch (387:9): [True: 13, False: 762]
  ------------------
  388|     13|            if (dispatch->friend_lossy_packet_callback != nullptr) {
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
  |  Branch (388:17): [True: 13, False: 0]
  ------------------
  389|     13|                dispatch->friend_lossy_packet_callback(event->data.friend_lossy_packet, user_data);
  390|     13|            }
  391|       |
  392|     13|            break;
  393|      0|        }
  394|       |
  395|     10|        case TOX_EVENT_FRIEND_MESSAGE: {
  ------------------
  |  Branch (395:9): [True: 10, False: 765]
  ------------------
  396|     10|            if (dispatch->friend_message_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (396:17): [True: 10, False: 0]
  ------------------
  397|     10|                dispatch->friend_message_callback(event->data.friend_message, user_data);
  398|     10|            }
  399|       |
  400|     10|            break;
  401|      0|        }
  402|       |
  403|     12|        case TOX_EVENT_FRIEND_NAME: {
  ------------------
  |  Branch (403:9): [True: 12, False: 763]
  ------------------
  404|     12|            if (dispatch->friend_name_callback != nullptr) {
  ------------------
  |  |   63|     12|#define nullptr NULL
  ------------------
  |  Branch (404:17): [True: 12, False: 0]
  ------------------
  405|     12|                dispatch->friend_name_callback(event->data.friend_name, user_data);
  406|     12|            }
  407|       |
  408|     12|            break;
  409|      0|        }
  410|       |
  411|     18|        case TOX_EVENT_FRIEND_READ_RECEIPT: {
  ------------------
  |  Branch (411:9): [True: 18, False: 757]
  ------------------
  412|     18|            if (dispatch->friend_read_receipt_callback != nullptr) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
  |  Branch (412:17): [True: 18, False: 0]
  ------------------
  413|     18|                dispatch->friend_read_receipt_callback(event->data.friend_read_receipt, user_data);
  414|     18|            }
  415|       |
  416|     18|            break;
  417|      0|        }
  418|       |
  419|     10|        case TOX_EVENT_FRIEND_REQUEST: {
  ------------------
  |  Branch (419:9): [True: 10, False: 765]
  ------------------
  420|     10|            if (dispatch->friend_request_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (420:17): [True: 10, False: 0]
  ------------------
  421|     10|                dispatch->friend_request_callback(event->data.friend_request, user_data);
  422|     10|            }
  423|       |
  424|     10|            break;
  425|      0|        }
  426|       |
  427|     10|        case TOX_EVENT_FRIEND_STATUS: {
  ------------------
  |  Branch (427:9): [True: 10, False: 765]
  ------------------
  428|     10|            if (dispatch->friend_status_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (428:17): [True: 10, False: 0]
  ------------------
  429|     10|                dispatch->friend_status_callback(event->data.friend_status, user_data);
  430|     10|            }
  431|       |
  432|     10|            break;
  433|      0|        }
  434|       |
  435|     10|        case TOX_EVENT_FRIEND_STATUS_MESSAGE: {
  ------------------
  |  Branch (435:9): [True: 10, False: 765]
  ------------------
  436|     10|            if (dispatch->friend_status_message_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (436:17): [True: 10, False: 0]
  ------------------
  437|     10|                dispatch->friend_status_message_callback(event->data.friend_status_message, user_data);
  438|     10|            }
  439|       |
  440|     10|            break;
  441|      0|        }
  442|       |
  443|     15|        case TOX_EVENT_FRIEND_TYPING: {
  ------------------
  |  Branch (443:9): [True: 15, False: 760]
  ------------------
  444|     15|            if (dispatch->friend_typing_callback != nullptr) {
  ------------------
  |  |   63|     15|#define nullptr NULL
  ------------------
  |  Branch (444:17): [True: 15, False: 0]
  ------------------
  445|     15|                dispatch->friend_typing_callback(event->data.friend_typing, user_data);
  446|     15|            }
  447|       |
  448|     15|            break;
  449|      0|        }
  450|       |
  451|    128|        case TOX_EVENT_SELF_CONNECTION_STATUS: {
  ------------------
  |  Branch (451:9): [True: 128, False: 647]
  ------------------
  452|    128|            if (dispatch->self_connection_status_callback != nullptr) {
  ------------------
  |  |   63|    128|#define nullptr NULL
  ------------------
  |  Branch (452:17): [True: 128, False: 0]
  ------------------
  453|    128|                dispatch->self_connection_status_callback(event->data.self_connection_status, user_data);
  454|    128|            }
  455|       |
  456|    128|            break;
  457|      0|        }
  458|       |
  459|     10|        case TOX_EVENT_GROUP_PEER_NAME: {
  ------------------
  |  Branch (459:9): [True: 10, False: 765]
  ------------------
  460|     10|            if (dispatch->group_peer_name_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (460:17): [True: 10, False: 0]
  ------------------
  461|     10|                dispatch->group_peer_name_callback(event->data.group_peer_name, user_data);
  462|     10|            }
  463|       |
  464|     10|            break;
  465|      0|        }
  466|       |
  467|     10|        case TOX_EVENT_GROUP_PEER_STATUS: {
  ------------------
  |  Branch (467:9): [True: 10, False: 765]
  ------------------
  468|     10|            if (dispatch->group_peer_status_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (468:17): [True: 10, False: 0]
  ------------------
  469|     10|                dispatch->group_peer_status_callback(event->data.group_peer_status, user_data);
  470|     10|            }
  471|       |
  472|     10|            break;
  473|      0|        }
  474|       |
  475|     10|        case TOX_EVENT_GROUP_TOPIC: {
  ------------------
  |  Branch (475:9): [True: 10, False: 765]
  ------------------
  476|     10|            if (dispatch->group_topic_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (476:17): [True: 10, False: 0]
  ------------------
  477|     10|                dispatch->group_topic_callback(event->data.group_topic, user_data);
  478|     10|            }
  479|       |
  480|     10|            break;
  481|      0|        }
  482|       |
  483|     10|        case TOX_EVENT_GROUP_PRIVACY_STATE: {
  ------------------
  |  Branch (483:9): [True: 10, False: 765]
  ------------------
  484|     10|            if (dispatch->group_privacy_state_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (484:17): [True: 10, False: 0]
  ------------------
  485|     10|                dispatch->group_privacy_state_callback(event->data.group_privacy_state, user_data);
  486|     10|            }
  487|       |
  488|     10|            break;
  489|      0|        }
  490|       |
  491|     18|        case TOX_EVENT_GROUP_VOICE_STATE: {
  ------------------
  |  Branch (491:9): [True: 18, False: 757]
  ------------------
  492|     18|            if (dispatch->group_voice_state_callback != nullptr) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
  |  Branch (492:17): [True: 18, False: 0]
  ------------------
  493|     18|                dispatch->group_voice_state_callback(event->data.group_voice_state, user_data);
  494|     18|            }
  495|       |
  496|     18|            break;
  497|      0|        }
  498|       |
  499|     10|        case TOX_EVENT_GROUP_TOPIC_LOCK: {
  ------------------
  |  Branch (499:9): [True: 10, False: 765]
  ------------------
  500|     10|            if (dispatch->group_topic_lock_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (500:17): [True: 10, False: 0]
  ------------------
  501|     10|                dispatch->group_topic_lock_callback(event->data.group_topic_lock, user_data);
  502|     10|            }
  503|       |
  504|     10|            break;
  505|      0|        }
  506|       |
  507|     11|        case TOX_EVENT_GROUP_PEER_LIMIT: {
  ------------------
  |  Branch (507:9): [True: 11, False: 764]
  ------------------
  508|     11|            if (dispatch->group_peer_limit_callback != nullptr) {
  ------------------
  |  |   63|     11|#define nullptr NULL
  ------------------
  |  Branch (508:17): [True: 11, False: 0]
  ------------------
  509|     11|                dispatch->group_peer_limit_callback(event->data.group_peer_limit, user_data);
  510|     11|            }
  511|       |
  512|     11|            break;
  513|      0|        }
  514|       |
  515|     18|        case TOX_EVENT_GROUP_PASSWORD: {
  ------------------
  |  Branch (515:9): [True: 18, False: 757]
  ------------------
  516|     18|            if (dispatch->group_password_callback != nullptr) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
  |  Branch (516:17): [True: 18, False: 0]
  ------------------
  517|     18|                dispatch->group_password_callback(event->data.group_password, user_data);
  518|     18|            }
  519|       |
  520|     18|            break;
  521|      0|        }
  522|       |
  523|     10|        case TOX_EVENT_GROUP_MESSAGE: {
  ------------------
  |  Branch (523:9): [True: 10, False: 765]
  ------------------
  524|     10|            if (dispatch->group_message_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (524:17): [True: 10, False: 0]
  ------------------
  525|     10|                dispatch->group_message_callback(event->data.group_message, user_data);
  526|     10|            }
  527|       |
  528|     10|            break;
  529|      0|        }
  530|       |
  531|     19|        case TOX_EVENT_GROUP_PRIVATE_MESSAGE: {
  ------------------
  |  Branch (531:9): [True: 19, False: 756]
  ------------------
  532|     19|            if (dispatch->group_private_message_callback != nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (532:17): [True: 19, False: 0]
  ------------------
  533|     19|                dispatch->group_private_message_callback(event->data.group_private_message, user_data);
  534|     19|            }
  535|       |
  536|     19|            break;
  537|      0|        }
  538|       |
  539|     10|        case TOX_EVENT_GROUP_CUSTOM_PACKET: {
  ------------------
  |  Branch (539:9): [True: 10, False: 765]
  ------------------
  540|     10|            if (dispatch->group_custom_packet_callback != nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (540:17): [True: 10, False: 0]
  ------------------
  541|     10|                dispatch->group_custom_packet_callback(event->data.group_custom_packet, user_data);
  542|     10|            }
  543|       |
  544|     10|            break;
  545|      0|        }
  546|       |
  547|     12|        case TOX_EVENT_GROUP_CUSTOM_PRIVATE_PACKET: {
  ------------------
  |  Branch (547:9): [True: 12, False: 763]
  ------------------
  548|     12|            if (dispatch->group_custom_private_packet_callback != nullptr) {
  ------------------
  |  |   63|     12|#define nullptr NULL
  ------------------
  |  Branch (548:17): [True: 12, False: 0]
  ------------------
  549|     12|                dispatch->group_custom_private_packet_callback(event->data.group_custom_private_packet, user_data);
  550|     12|            }
  551|       |
  552|     12|            break;
  553|      0|        }
  554|       |
  555|     11|        case TOX_EVENT_GROUP_INVITE: {
  ------------------
  |  Branch (555:9): [True: 11, False: 764]
  ------------------
  556|     11|            if (dispatch->group_invite_callback != nullptr) {
  ------------------
  |  |   63|     11|#define nullptr NULL
  ------------------
  |  Branch (556:17): [True: 11, False: 0]
  ------------------
  557|     11|                dispatch->group_invite_callback(event->data.group_invite, user_data);
  558|     11|            }
  559|       |
  560|     11|            break;
  561|      0|        }
  562|       |
  563|     29|        case TOX_EVENT_GROUP_PEER_JOIN: {
  ------------------
  |  Branch (563:9): [True: 29, False: 746]
  ------------------
  564|     29|            if (dispatch->group_peer_join_callback != nullptr) {
  ------------------
  |  |   63|     29|#define nullptr NULL
  ------------------
  |  Branch (564:17): [True: 29, False: 0]
  ------------------
  565|     29|                dispatch->group_peer_join_callback(event->data.group_peer_join, user_data);
  566|     29|            }
  567|       |
  568|     29|            break;
  569|      0|        }
  570|       |
  571|     14|        case TOX_EVENT_GROUP_PEER_EXIT: {
  ------------------
  |  Branch (571:9): [True: 14, False: 761]
  ------------------
  572|     14|            if (dispatch->group_peer_exit_callback != nullptr) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (572:17): [True: 14, False: 0]
  ------------------
  573|     14|                dispatch->group_peer_exit_callback(event->data.group_peer_exit, user_data);
  574|     14|            }
  575|       |
  576|     14|            break;
  577|      0|        }
  578|       |
  579|     19|        case TOX_EVENT_GROUP_SELF_JOIN: {
  ------------------
  |  Branch (579:9): [True: 19, False: 756]
  ------------------
  580|     19|            if (dispatch->group_self_join_callback != nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (580:17): [True: 19, False: 0]
  ------------------
  581|     19|                dispatch->group_self_join_callback(event->data.group_self_join, user_data);
  582|     19|            }
  583|       |
  584|     19|            break;
  585|      0|        }
  586|       |
  587|     14|        case TOX_EVENT_GROUP_JOIN_FAIL: {
  ------------------
  |  Branch (587:9): [True: 14, False: 761]
  ------------------
  588|     14|            if (dispatch->group_join_fail_callback != nullptr) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (588:17): [True: 14, False: 0]
  ------------------
  589|     14|                dispatch->group_join_fail_callback(event->data.group_join_fail, user_data);
  590|     14|            }
  591|       |
  592|     14|            break;
  593|      0|        }
  594|       |
  595|     14|        case TOX_EVENT_GROUP_MODERATION: {
  ------------------
  |  Branch (595:9): [True: 14, False: 761]
  ------------------
  596|     14|            if (dispatch->group_moderation_callback != nullptr) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (596:17): [True: 14, False: 0]
  ------------------
  597|     14|                dispatch->group_moderation_callback(event->data.group_moderation, user_data);
  598|     14|            }
  599|       |
  600|     14|            break;
  601|      0|        }
  602|       |
  603|      1|        case TOX_EVENT_DHT_NODES_RESPONSE: {
  ------------------
  |  Branch (603:9): [True: 1, False: 774]
  ------------------
  604|      1|            if (dispatch->dht_nodes_response_callback != nullptr) {
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  |  Branch (604:17): [True: 0, False: 1]
  ------------------
  605|      0|                dispatch->dht_nodes_response_callback(event->data.dht_nodes_response, user_data);
  606|      0|            }
  607|       |
  608|      1|            break;
  609|      0|        }
  610|       |
  611|      0|        case TOX_EVENT_INVALID: {
  ------------------
  |  Branch (611:9): [True: 0, False: 775]
  ------------------
  612|      0|            break;
  613|      0|        }
  614|    775|    }
  615|    775|}

tox_event_destruct:
  367|  1.85k|{
  368|  1.85k|    if (event == nullptr) {
  ------------------
  |  |   63|  1.85k|#define nullptr NULL
  ------------------
  |  Branch (368:9): [True: 0, False: 1.85k]
  ------------------
  369|      0|        return;
  370|      0|    }
  371|       |
  372|  1.85k|    switch (event->type) {
  ------------------
  |  Branch (372:13): [True: 0, False: 1.85k]
  ------------------
  373|     24|        case TOX_EVENT_CONFERENCE_CONNECTED: {
  ------------------
  |  Branch (373:9): [True: 24, False: 1.83k]
  ------------------
  374|     24|            tox_event_conference_connected_free(event->data.conference_connected, mem);
  375|     24|            break;
  376|      0|        }
  377|       |
  378|     27|        case TOX_EVENT_CONFERENCE_INVITE: {
  ------------------
  |  Branch (378:9): [True: 27, False: 1.82k]
  ------------------
  379|     27|            tox_event_conference_invite_free(event->data.conference_invite, mem);
  380|     27|            break;
  381|      0|        }
  382|       |
  383|     22|        case TOX_EVENT_CONFERENCE_MESSAGE: {
  ------------------
  |  Branch (383:9): [True: 22, False: 1.83k]
  ------------------
  384|     22|            tox_event_conference_message_free(event->data.conference_message, mem);
  385|     22|            break;
  386|      0|        }
  387|       |
  388|    114|        case TOX_EVENT_CONFERENCE_PEER_LIST_CHANGED: {
  ------------------
  |  Branch (388:9): [True: 114, False: 1.74k]
  ------------------
  389|    114|            tox_event_conference_peer_list_changed_free(event->data.conference_peer_list_changed, mem);
  390|    114|            break;
  391|      0|        }
  392|       |
  393|     19|        case TOX_EVENT_CONFERENCE_PEER_NAME: {
  ------------------
  |  Branch (393:9): [True: 19, False: 1.83k]
  ------------------
  394|     19|            tox_event_conference_peer_name_free(event->data.conference_peer_name, mem);
  395|     19|            break;
  396|      0|        }
  397|       |
  398|     60|        case TOX_EVENT_CONFERENCE_TITLE: {
  ------------------
  |  Branch (398:9): [True: 60, False: 1.79k]
  ------------------
  399|     60|            tox_event_conference_title_free(event->data.conference_title, mem);
  400|     60|            break;
  401|      0|        }
  402|       |
  403|    278|        case TOX_EVENT_FILE_CHUNK_REQUEST: {
  ------------------
  |  Branch (403:9): [True: 278, False: 1.57k]
  ------------------
  404|    278|            tox_event_file_chunk_request_free(event->data.file_chunk_request, mem);
  405|    278|            break;
  406|      0|        }
  407|       |
  408|     28|        case TOX_EVENT_FILE_RECV_CHUNK: {
  ------------------
  |  Branch (408:9): [True: 28, False: 1.82k]
  ------------------
  409|     28|            tox_event_file_recv_chunk_free(event->data.file_recv_chunk, mem);
  410|     28|            break;
  411|      0|        }
  412|       |
  413|     42|        case TOX_EVENT_FILE_RECV_CONTROL: {
  ------------------
  |  Branch (413:9): [True: 42, False: 1.81k]
  ------------------
  414|     42|            tox_event_file_recv_control_free(event->data.file_recv_control, mem);
  415|     42|            break;
  416|      0|        }
  417|       |
  418|     37|        case TOX_EVENT_FILE_RECV: {
  ------------------
  |  Branch (418:9): [True: 37, False: 1.81k]
  ------------------
  419|     37|            tox_event_file_recv_free(event->data.file_recv, mem);
  420|     37|            break;
  421|      0|        }
  422|       |
  423|     39|        case TOX_EVENT_FRIEND_CONNECTION_STATUS: {
  ------------------
  |  Branch (423:9): [True: 39, False: 1.81k]
  ------------------
  424|     39|            tox_event_friend_connection_status_free(event->data.friend_connection_status, mem);
  425|     39|            break;
  426|      0|        }
  427|       |
  428|     21|        case TOX_EVENT_FRIEND_LOSSLESS_PACKET: {
  ------------------
  |  Branch (428:9): [True: 21, False: 1.83k]
  ------------------
  429|     21|            tox_event_friend_lossless_packet_free(event->data.friend_lossless_packet, mem);
  430|     21|            break;
  431|      0|        }
  432|       |
  433|     27|        case TOX_EVENT_FRIEND_LOSSY_PACKET: {
  ------------------
  |  Branch (433:9): [True: 27, False: 1.82k]
  ------------------
  434|     27|            tox_event_friend_lossy_packet_free(event->data.friend_lossy_packet, mem);
  435|     27|            break;
  436|      0|        }
  437|       |
  438|     15|        case TOX_EVENT_FRIEND_MESSAGE: {
  ------------------
  |  Branch (438:9): [True: 15, False: 1.83k]
  ------------------
  439|     15|            tox_event_friend_message_free(event->data.friend_message, mem);
  440|     15|            break;
  441|      0|        }
  442|       |
  443|     28|        case TOX_EVENT_FRIEND_NAME: {
  ------------------
  |  Branch (443:9): [True: 28, False: 1.82k]
  ------------------
  444|     28|            tox_event_friend_name_free(event->data.friend_name, mem);
  445|     28|            break;
  446|      0|        }
  447|       |
  448|     34|        case TOX_EVENT_FRIEND_READ_RECEIPT: {
  ------------------
  |  Branch (448:9): [True: 34, False: 1.82k]
  ------------------
  449|     34|            tox_event_friend_read_receipt_free(event->data.friend_read_receipt, mem);
  450|     34|            break;
  451|      0|        }
  452|       |
  453|     39|        case TOX_EVENT_FRIEND_REQUEST: {
  ------------------
  |  Branch (453:9): [True: 39, False: 1.81k]
  ------------------
  454|     39|            tox_event_friend_request_free(event->data.friend_request, mem);
  455|     39|            break;
  456|      0|        }
  457|       |
  458|     29|        case TOX_EVENT_FRIEND_STATUS: {
  ------------------
  |  Branch (458:9): [True: 29, False: 1.82k]
  ------------------
  459|     29|            tox_event_friend_status_free(event->data.friend_status, mem);
  460|     29|            break;
  461|      0|        }
  462|       |
  463|     19|        case TOX_EVENT_FRIEND_STATUS_MESSAGE: {
  ------------------
  |  Branch (463:9): [True: 19, False: 1.83k]
  ------------------
  464|     19|            tox_event_friend_status_message_free(event->data.friend_status_message, mem);
  465|     19|            break;
  466|      0|        }
  467|       |
  468|     69|        case TOX_EVENT_FRIEND_TYPING: {
  ------------------
  |  Branch (468:9): [True: 69, False: 1.78k]
  ------------------
  469|     69|            tox_event_friend_typing_free(event->data.friend_typing, mem);
  470|     69|            break;
  471|      0|        }
  472|       |
  473|    183|        case TOX_EVENT_SELF_CONNECTION_STATUS: {
  ------------------
  |  Branch (473:9): [True: 183, False: 1.67k]
  ------------------
  474|    183|            tox_event_self_connection_status_free(event->data.self_connection_status, mem);
  475|    183|            break;
  476|      0|        }
  477|       |
  478|     24|        case TOX_EVENT_GROUP_PEER_NAME: {
  ------------------
  |  Branch (478:9): [True: 24, False: 1.83k]
  ------------------
  479|     24|            tox_event_group_peer_name_free(event->data.group_peer_name, mem);
  480|     24|            break;
  481|      0|        }
  482|       |
  483|     23|        case TOX_EVENT_GROUP_PEER_STATUS: {
  ------------------
  |  Branch (483:9): [True: 23, False: 1.83k]
  ------------------
  484|     23|            tox_event_group_peer_status_free(event->data.group_peer_status, mem);
  485|     23|            break;
  486|      0|        }
  487|       |
  488|     22|        case TOX_EVENT_GROUP_TOPIC: {
  ------------------
  |  Branch (488:9): [True: 22, False: 1.83k]
  ------------------
  489|     22|            tox_event_group_topic_free(event->data.group_topic, mem);
  490|     22|            break;
  491|      0|        }
  492|       |
  493|     26|        case TOX_EVENT_GROUP_PRIVACY_STATE: {
  ------------------
  |  Branch (493:9): [True: 26, False: 1.82k]
  ------------------
  494|     26|            tox_event_group_privacy_state_free(event->data.group_privacy_state, mem);
  495|     26|            break;
  496|      0|        }
  497|       |
  498|     41|        case TOX_EVENT_GROUP_VOICE_STATE: {
  ------------------
  |  Branch (498:9): [True: 41, False: 1.81k]
  ------------------
  499|     41|            tox_event_group_voice_state_free(event->data.group_voice_state, mem);
  500|     41|            break;
  501|      0|        }
  502|       |
  503|     26|        case TOX_EVENT_GROUP_TOPIC_LOCK: {
  ------------------
  |  Branch (503:9): [True: 26, False: 1.82k]
  ------------------
  504|     26|            tox_event_group_topic_lock_free(event->data.group_topic_lock, mem);
  505|     26|            break;
  506|      0|        }
  507|       |
  508|     14|        case TOX_EVENT_GROUP_PEER_LIMIT: {
  ------------------
  |  Branch (508:9): [True: 14, False: 1.84k]
  ------------------
  509|     14|            tox_event_group_peer_limit_free(event->data.group_peer_limit, mem);
  510|     14|            break;
  511|      0|        }
  512|       |
  513|     27|        case TOX_EVENT_GROUP_PASSWORD: {
  ------------------
  |  Branch (513:9): [True: 27, False: 1.82k]
  ------------------
  514|     27|            tox_event_group_password_free(event->data.group_password, mem);
  515|     27|            break;
  516|      0|        }
  517|       |
  518|     38|        case TOX_EVENT_GROUP_MESSAGE: {
  ------------------
  |  Branch (518:9): [True: 38, False: 1.81k]
  ------------------
  519|     38|            tox_event_group_message_free(event->data.group_message, mem);
  520|     38|            break;
  521|      0|        }
  522|       |
  523|     33|        case TOX_EVENT_GROUP_PRIVATE_MESSAGE: {
  ------------------
  |  Branch (523:9): [True: 33, False: 1.82k]
  ------------------
  524|     33|            tox_event_group_private_message_free(event->data.group_private_message, mem);
  525|     33|            break;
  526|      0|        }
  527|       |
  528|     15|        case TOX_EVENT_GROUP_CUSTOM_PACKET: {
  ------------------
  |  Branch (528:9): [True: 15, False: 1.83k]
  ------------------
  529|     15|            tox_event_group_custom_packet_free(event->data.group_custom_packet, mem);
  530|     15|            break;
  531|      0|        }
  532|       |
  533|     20|        case TOX_EVENT_GROUP_CUSTOM_PRIVATE_PACKET: {
  ------------------
  |  Branch (533:9): [True: 20, False: 1.83k]
  ------------------
  534|     20|            tox_event_group_custom_private_packet_free(event->data.group_custom_private_packet, mem);
  535|     20|            break;
  536|      0|        }
  537|       |
  538|     29|        case TOX_EVENT_GROUP_INVITE: {
  ------------------
  |  Branch (538:9): [True: 29, False: 1.82k]
  ------------------
  539|     29|            tox_event_group_invite_free(event->data.group_invite, mem);
  540|     29|            break;
  541|      0|        }
  542|       |
  543|     47|        case TOX_EVENT_GROUP_PEER_JOIN: {
  ------------------
  |  Branch (543:9): [True: 47, False: 1.80k]
  ------------------
  544|     47|            tox_event_group_peer_join_free(event->data.group_peer_join, mem);
  545|     47|            break;
  546|      0|        }
  547|       |
  548|     61|        case TOX_EVENT_GROUP_PEER_EXIT: {
  ------------------
  |  Branch (548:9): [True: 61, False: 1.79k]
  ------------------
  549|     61|            tox_event_group_peer_exit_free(event->data.group_peer_exit, mem);
  550|     61|            break;
  551|      0|        }
  552|       |
  553|     50|        case TOX_EVENT_GROUP_SELF_JOIN: {
  ------------------
  |  Branch (553:9): [True: 50, False: 1.80k]
  ------------------
  554|     50|            tox_event_group_self_join_free(event->data.group_self_join, mem);
  555|     50|            break;
  556|      0|        }
  557|       |
  558|     40|        case TOX_EVENT_GROUP_JOIN_FAIL: {
  ------------------
  |  Branch (558:9): [True: 40, False: 1.81k]
  ------------------
  559|     40|            tox_event_group_join_fail_free(event->data.group_join_fail, mem);
  560|     40|            break;
  561|      0|        }
  562|       |
  563|     43|        case TOX_EVENT_GROUP_MODERATION: {
  ------------------
  |  Branch (563:9): [True: 43, False: 1.81k]
  ------------------
  564|     43|            tox_event_group_moderation_free(event->data.group_moderation, mem);
  565|     43|            break;
  566|      0|        }
  567|       |
  568|     19|        case TOX_EVENT_DHT_NODES_RESPONSE: {
  ------------------
  |  Branch (568:9): [True: 19, False: 1.83k]
  ------------------
  569|     19|            tox_event_dht_nodes_response_free(event->data.dht_nodes_response, mem);
  570|     19|            break;
  571|      0|        }
  572|       |
  573|    102|        case TOX_EVENT_INVALID: {
  ------------------
  |  Branch (573:9): [True: 102, False: 1.75k]
  ------------------
  574|    102|            break;
  575|      0|        }
  576|  1.85k|    }
  577|       |
  578|  1.85k|    event->data.value = nullptr;
  ------------------
  |  |   63|  1.85k|#define nullptr NULL
  ------------------
  579|  1.85k|}
tox_event_pack:
  717|  1.55k|{
  718|  1.55k|    assert(event->type != TOX_EVENT_INVALID);
  719|       |
  720|  1.55k|    return bin_pack_array(bp, 2)
  ------------------
  |  Branch (720:12): [True: 1.55k, False: 0]
  ------------------
  721|  1.55k|           && tox_event_type_pack(event->type, bp)
  ------------------
  |  Branch (721:15): [True: 1.55k, False: 0]
  ------------------
  722|  1.55k|           && tox_event_data_pack(event->type, &event->data, bp);
  ------------------
  |  Branch (722:15): [True: 1.55k, False: 0]
  ------------------
  723|  1.55k|}
tox_event_unpack_into:
 1078|  1.85k|{
 1079|  1.85k|    return bin_unpack_array_fixed(bu, 2, nullptr)  //
  ------------------
  |  |   63|  1.85k|#define nullptr NULL
  ------------------
  |  Branch (1079:12): [True: 1.78k, False: 69]
  ------------------
 1080|  1.85k|           && tox_event_type_unpack(&event->type, bu)  //
  ------------------
  |  Branch (1080:15): [True: 1.75k, False: 32]
  ------------------
 1081|  1.85k|           && tox_event_data_unpack(event->type, &event->data, bu, mem);
  ------------------
  |  Branch (1081:15): [True: 1.30k, False: 446]
  ------------------
 1082|  1.85k|}
tox_event.c:tox_event_type_pack:
  582|  1.55k|{
  583|  1.55k|    return bin_pack_u32(bp, (uint32_t)type);
  584|  1.55k|}
tox_event.c:tox_event_data_pack:
  587|  1.55k|{
  588|  1.55k|    switch (type) {
  ------------------
  |  Branch (588:13): [True: 0, False: 1.55k]
  ------------------
  589|     46|        case TOX_EVENT_CONFERENCE_CONNECTED:
  ------------------
  |  Branch (589:9): [True: 46, False: 1.50k]
  ------------------
  590|     46|            return tox_event_conference_connected_pack(data->conference_connected, bp);
  591|       |
  592|     24|        case TOX_EVENT_CONFERENCE_INVITE:
  ------------------
  |  Branch (592:9): [True: 24, False: 1.52k]
  ------------------
  593|     24|            return tox_event_conference_invite_pack(data->conference_invite, bp);
  594|       |
  595|     20|        case TOX_EVENT_CONFERENCE_MESSAGE:
  ------------------
  |  Branch (595:9): [True: 20, False: 1.53k]
  ------------------
  596|     20|            return tox_event_conference_message_pack(data->conference_message, bp);
  597|       |
  598|    158|        case TOX_EVENT_CONFERENCE_PEER_LIST_CHANGED:
  ------------------
  |  Branch (598:9): [True: 158, False: 1.39k]
  ------------------
  599|    158|            return tox_event_conference_peer_list_changed_pack(data->conference_peer_list_changed, bp);
  600|       |
  601|     20|        case TOX_EVENT_CONFERENCE_PEER_NAME:
  ------------------
  |  Branch (601:9): [True: 20, False: 1.53k]
  ------------------
  602|     20|            return tox_event_conference_peer_name_pack(data->conference_peer_name, bp);
  603|       |
  604|     68|        case TOX_EVENT_CONFERENCE_TITLE:
  ------------------
  |  Branch (604:9): [True: 68, False: 1.48k]
  ------------------
  605|     68|            return tox_event_conference_title_pack(data->conference_title, bp);
  606|       |
  607|    110|        case TOX_EVENT_FILE_CHUNK_REQUEST:
  ------------------
  |  Branch (607:9): [True: 110, False: 1.44k]
  ------------------
  608|    110|            return tox_event_file_chunk_request_pack(data->file_chunk_request, bp);
  609|       |
  610|     20|        case TOX_EVENT_FILE_RECV_CHUNK:
  ------------------
  |  Branch (610:9): [True: 20, False: 1.53k]
  ------------------
  611|     20|            return tox_event_file_recv_chunk_pack(data->file_recv_chunk, bp);
  612|       |
  613|     26|        case TOX_EVENT_FILE_RECV_CONTROL:
  ------------------
  |  Branch (613:9): [True: 26, False: 1.52k]
  ------------------
  614|     26|            return tox_event_file_recv_control_pack(data->file_recv_control, bp);
  615|       |
  616|     46|        case TOX_EVENT_FILE_RECV:
  ------------------
  |  Branch (616:9): [True: 46, False: 1.50k]
  ------------------
  617|     46|            return tox_event_file_recv_pack(data->file_recv, bp);
  618|       |
  619|     40|        case TOX_EVENT_FRIEND_CONNECTION_STATUS:
  ------------------
  |  Branch (619:9): [True: 40, False: 1.51k]
  ------------------
  620|     40|            return tox_event_friend_connection_status_pack(data->friend_connection_status, bp);
  621|       |
  622|     20|        case TOX_EVENT_FRIEND_LOSSLESS_PACKET:
  ------------------
  |  Branch (622:9): [True: 20, False: 1.53k]
  ------------------
  623|     20|            return tox_event_friend_lossless_packet_pack(data->friend_lossless_packet, bp);
  624|       |
  625|     26|        case TOX_EVENT_FRIEND_LOSSY_PACKET:
  ------------------
  |  Branch (625:9): [True: 26, False: 1.52k]
  ------------------
  626|     26|            return tox_event_friend_lossy_packet_pack(data->friend_lossy_packet, bp);
  627|       |
  628|     20|        case TOX_EVENT_FRIEND_MESSAGE:
  ------------------
  |  Branch (628:9): [True: 20, False: 1.53k]
  ------------------
  629|     20|            return tox_event_friend_message_pack(data->friend_message, bp);
  630|       |
  631|     24|        case TOX_EVENT_FRIEND_NAME:
  ------------------
  |  Branch (631:9): [True: 24, False: 1.52k]
  ------------------
  632|     24|            return tox_event_friend_name_pack(data->friend_name, bp);
  633|       |
  634|     36|        case TOX_EVENT_FRIEND_READ_RECEIPT:
  ------------------
  |  Branch (634:9): [True: 36, False: 1.51k]
  ------------------
  635|     36|            return tox_event_friend_read_receipt_pack(data->friend_read_receipt, bp);
  636|       |
  637|     20|        case TOX_EVENT_FRIEND_REQUEST:
  ------------------
  |  Branch (637:9): [True: 20, False: 1.53k]
  ------------------
  638|     20|            return tox_event_friend_request_pack(data->friend_request, bp);
  639|       |
  640|     20|        case TOX_EVENT_FRIEND_STATUS:
  ------------------
  |  Branch (640:9): [True: 20, False: 1.53k]
  ------------------
  641|     20|            return tox_event_friend_status_pack(data->friend_status, bp);
  642|       |
  643|     20|        case TOX_EVENT_FRIEND_STATUS_MESSAGE:
  ------------------
  |  Branch (643:9): [True: 20, False: 1.53k]
  ------------------
  644|     20|            return tox_event_friend_status_message_pack(data->friend_status_message, bp);
  645|       |
  646|     30|        case TOX_EVENT_FRIEND_TYPING:
  ------------------
  |  Branch (646:9): [True: 30, False: 1.52k]
  ------------------
  647|     30|            return tox_event_friend_typing_pack(data->friend_typing, bp);
  648|       |
  649|    256|        case TOX_EVENT_SELF_CONNECTION_STATUS:
  ------------------
  |  Branch (649:9): [True: 256, False: 1.29k]
  ------------------
  650|    256|            return tox_event_self_connection_status_pack(data->self_connection_status, bp);
  651|       |
  652|     20|        case TOX_EVENT_GROUP_PEER_NAME:
  ------------------
  |  Branch (652:9): [True: 20, False: 1.53k]
  ------------------
  653|     20|            return tox_event_group_peer_name_pack(data->group_peer_name, bp);
  654|       |
  655|     20|        case TOX_EVENT_GROUP_PEER_STATUS:
  ------------------
  |  Branch (655:9): [True: 20, False: 1.53k]
  ------------------
  656|     20|            return tox_event_group_peer_status_pack(data->group_peer_status, bp);
  657|       |
  658|     20|        case TOX_EVENT_GROUP_TOPIC:
  ------------------
  |  Branch (658:9): [True: 20, False: 1.53k]
  ------------------
  659|     20|            return tox_event_group_topic_pack(data->group_topic, bp);
  660|       |
  661|     20|        case TOX_EVENT_GROUP_PRIVACY_STATE:
  ------------------
  |  Branch (661:9): [True: 20, False: 1.53k]
  ------------------
  662|     20|            return tox_event_group_privacy_state_pack(data->group_privacy_state, bp);
  663|       |
  664|     36|        case TOX_EVENT_GROUP_VOICE_STATE:
  ------------------
  |  Branch (664:9): [True: 36, False: 1.51k]
  ------------------
  665|     36|            return tox_event_group_voice_state_pack(data->group_voice_state, bp);
  666|       |
  667|     20|        case TOX_EVENT_GROUP_TOPIC_LOCK:
  ------------------
  |  Branch (667:9): [True: 20, False: 1.53k]
  ------------------
  668|     20|            return tox_event_group_topic_lock_pack(data->group_topic_lock, bp);
  669|       |
  670|     22|        case TOX_EVENT_GROUP_PEER_LIMIT:
  ------------------
  |  Branch (670:9): [True: 22, False: 1.52k]
  ------------------
  671|     22|            return tox_event_group_peer_limit_pack(data->group_peer_limit, bp);
  672|       |
  673|     36|        case TOX_EVENT_GROUP_PASSWORD:
  ------------------
  |  Branch (673:9): [True: 36, False: 1.51k]
  ------------------
  674|     36|            return tox_event_group_password_pack(data->group_password, bp);
  675|       |
  676|     20|        case TOX_EVENT_GROUP_MESSAGE:
  ------------------
  |  Branch (676:9): [True: 20, False: 1.53k]
  ------------------
  677|     20|            return tox_event_group_message_pack(data->group_message, bp);
  678|       |
  679|     38|        case TOX_EVENT_GROUP_PRIVATE_MESSAGE:
  ------------------
  |  Branch (679:9): [True: 38, False: 1.51k]
  ------------------
  680|     38|            return tox_event_group_private_message_pack(data->group_private_message, bp);
  681|       |
  682|     20|        case TOX_EVENT_GROUP_CUSTOM_PACKET:
  ------------------
  |  Branch (682:9): [True: 20, False: 1.53k]
  ------------------
  683|     20|            return tox_event_group_custom_packet_pack(data->group_custom_packet, bp);
  684|       |
  685|     24|        case TOX_EVENT_GROUP_CUSTOM_PRIVATE_PACKET:
  ------------------
  |  Branch (685:9): [True: 24, False: 1.52k]
  ------------------
  686|     24|            return tox_event_group_custom_private_packet_pack(data->group_custom_private_packet, bp);
  687|       |
  688|     22|        case TOX_EVENT_GROUP_INVITE:
  ------------------
  |  Branch (688:9): [True: 22, False: 1.52k]
  ------------------
  689|     22|            return tox_event_group_invite_pack(data->group_invite, bp);
  690|       |
  691|     58|        case TOX_EVENT_GROUP_PEER_JOIN:
  ------------------
  |  Branch (691:9): [True: 58, False: 1.49k]
  ------------------
  692|     58|            return tox_event_group_peer_join_pack(data->group_peer_join, bp);
  693|       |
  694|     28|        case TOX_EVENT_GROUP_PEER_EXIT:
  ------------------
  |  Branch (694:9): [True: 28, False: 1.52k]
  ------------------
  695|     28|            return tox_event_group_peer_exit_pack(data->group_peer_exit, bp);
  696|       |
  697|     38|        case TOX_EVENT_GROUP_SELF_JOIN:
  ------------------
  |  Branch (697:9): [True: 38, False: 1.51k]
  ------------------
  698|     38|            return tox_event_group_self_join_pack(data->group_self_join, bp);
  699|       |
  700|     28|        case TOX_EVENT_GROUP_JOIN_FAIL:
  ------------------
  |  Branch (700:9): [True: 28, False: 1.52k]
  ------------------
  701|     28|            return tox_event_group_join_fail_pack(data->group_join_fail, bp);
  702|       |
  703|     28|        case TOX_EVENT_GROUP_MODERATION:
  ------------------
  |  Branch (703:9): [True: 28, False: 1.52k]
  ------------------
  704|     28|            return tox_event_group_moderation_pack(data->group_moderation, bp);
  705|       |
  706|      2|        case TOX_EVENT_DHT_NODES_RESPONSE:
  ------------------
  |  Branch (706:9): [True: 2, False: 1.54k]
  ------------------
  707|      2|            return tox_event_dht_nodes_response_pack(data->dht_nodes_response, bp);
  708|       |
  709|      0|        case TOX_EVENT_INVALID:
  ------------------
  |  Branch (709:9): [True: 0, False: 1.55k]
  ------------------
  710|      0|            return false;
  711|  1.55k|    }
  712|       |
  713|      0|    return false;
  714|  1.55k|}
tox_event.c:tox_event_type_unpack:
  941|  1.78k|{
  942|  1.78k|    uint32_t u32;
  943|  1.78k|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (943:12): [True: 1.75k, False: 27]
  ------------------
  944|  1.78k|           && tox_event_type_from_int(u32, val);
  ------------------
  |  Branch (944:15): [True: 1.75k, False: 5]
  ------------------
  945|  1.78k|}
tox_event.c:tox_event_type_from_int:
  726|  1.75k|{
  727|  1.75k|    switch (value) {
  728|    183|        case TOX_EVENT_SELF_CONNECTION_STATUS: {
  ------------------
  |  Branch (728:9): [True: 183, False: 1.57k]
  ------------------
  729|    183|            *out_enum = TOX_EVENT_SELF_CONNECTION_STATUS;
  730|    183|            return true;
  731|      0|        }
  732|       |
  733|     39|        case TOX_EVENT_FRIEND_REQUEST: {
  ------------------
  |  Branch (733:9): [True: 39, False: 1.71k]
  ------------------
  734|     39|            *out_enum = TOX_EVENT_FRIEND_REQUEST;
  735|     39|            return true;
  736|      0|        }
  737|       |
  738|     39|        case TOX_EVENT_FRIEND_CONNECTION_STATUS: {
  ------------------
  |  Branch (738:9): [True: 39, False: 1.71k]
  ------------------
  739|     39|            *out_enum = TOX_EVENT_FRIEND_CONNECTION_STATUS;
  740|     39|            return true;
  741|      0|        }
  742|       |
  743|     27|        case TOX_EVENT_FRIEND_LOSSY_PACKET: {
  ------------------
  |  Branch (743:9): [True: 27, False: 1.73k]
  ------------------
  744|     27|            *out_enum = TOX_EVENT_FRIEND_LOSSY_PACKET;
  745|     27|            return true;
  746|      0|        }
  747|       |
  748|     21|        case TOX_EVENT_FRIEND_LOSSLESS_PACKET: {
  ------------------
  |  Branch (748:9): [True: 21, False: 1.73k]
  ------------------
  749|     21|            *out_enum = TOX_EVENT_FRIEND_LOSSLESS_PACKET;
  750|     21|            return true;
  751|      0|        }
  752|       |
  753|     28|        case TOX_EVENT_FRIEND_NAME: {
  ------------------
  |  Branch (753:9): [True: 28, False: 1.73k]
  ------------------
  754|     28|            *out_enum = TOX_EVENT_FRIEND_NAME;
  755|     28|            return true;
  756|      0|        }
  757|       |
  758|     29|        case TOX_EVENT_FRIEND_STATUS: {
  ------------------
  |  Branch (758:9): [True: 29, False: 1.72k]
  ------------------
  759|     29|            *out_enum = TOX_EVENT_FRIEND_STATUS;
  760|     29|            return true;
  761|      0|        }
  762|       |
  763|     19|        case TOX_EVENT_FRIEND_STATUS_MESSAGE: {
  ------------------
  |  Branch (763:9): [True: 19, False: 1.73k]
  ------------------
  764|     19|            *out_enum = TOX_EVENT_FRIEND_STATUS_MESSAGE;
  765|     19|            return true;
  766|      0|        }
  767|       |
  768|     15|        case TOX_EVENT_FRIEND_MESSAGE: {
  ------------------
  |  Branch (768:9): [True: 15, False: 1.74k]
  ------------------
  769|     15|            *out_enum = TOX_EVENT_FRIEND_MESSAGE;
  770|     15|            return true;
  771|      0|        }
  772|       |
  773|     34|        case TOX_EVENT_FRIEND_READ_RECEIPT: {
  ------------------
  |  Branch (773:9): [True: 34, False: 1.72k]
  ------------------
  774|     34|            *out_enum = TOX_EVENT_FRIEND_READ_RECEIPT;
  775|     34|            return true;
  776|      0|        }
  777|       |
  778|     69|        case TOX_EVENT_FRIEND_TYPING: {
  ------------------
  |  Branch (778:9): [True: 69, False: 1.68k]
  ------------------
  779|     69|            *out_enum = TOX_EVENT_FRIEND_TYPING;
  780|     69|            return true;
  781|      0|        }
  782|       |
  783|    278|        case TOX_EVENT_FILE_CHUNK_REQUEST: {
  ------------------
  |  Branch (783:9): [True: 278, False: 1.48k]
  ------------------
  784|    278|            *out_enum = TOX_EVENT_FILE_CHUNK_REQUEST;
  785|    278|            return true;
  786|      0|        }
  787|       |
  788|     37|        case TOX_EVENT_FILE_RECV: {
  ------------------
  |  Branch (788:9): [True: 37, False: 1.72k]
  ------------------
  789|     37|            *out_enum = TOX_EVENT_FILE_RECV;
  790|     37|            return true;
  791|      0|        }
  792|       |
  793|     28|        case TOX_EVENT_FILE_RECV_CHUNK: {
  ------------------
  |  Branch (793:9): [True: 28, False: 1.73k]
  ------------------
  794|     28|            *out_enum = TOX_EVENT_FILE_RECV_CHUNK;
  795|     28|            return true;
  796|      0|        }
  797|       |
  798|     42|        case TOX_EVENT_FILE_RECV_CONTROL: {
  ------------------
  |  Branch (798:9): [True: 42, False: 1.71k]
  ------------------
  799|     42|            *out_enum = TOX_EVENT_FILE_RECV_CONTROL;
  800|     42|            return true;
  801|      0|        }
  802|       |
  803|     27|        case TOX_EVENT_CONFERENCE_INVITE: {
  ------------------
  |  Branch (803:9): [True: 27, False: 1.73k]
  ------------------
  804|     27|            *out_enum = TOX_EVENT_CONFERENCE_INVITE;
  805|     27|            return true;
  806|      0|        }
  807|       |
  808|     24|        case TOX_EVENT_CONFERENCE_CONNECTED: {
  ------------------
  |  Branch (808:9): [True: 24, False: 1.73k]
  ------------------
  809|     24|            *out_enum = TOX_EVENT_CONFERENCE_CONNECTED;
  810|     24|            return true;
  811|      0|        }
  812|       |
  813|    114|        case TOX_EVENT_CONFERENCE_PEER_LIST_CHANGED: {
  ------------------
  |  Branch (813:9): [True: 114, False: 1.64k]
  ------------------
  814|    114|            *out_enum = TOX_EVENT_CONFERENCE_PEER_LIST_CHANGED;
  815|    114|            return true;
  816|      0|        }
  817|       |
  818|     19|        case TOX_EVENT_CONFERENCE_PEER_NAME: {
  ------------------
  |  Branch (818:9): [True: 19, False: 1.73k]
  ------------------
  819|     19|            *out_enum = TOX_EVENT_CONFERENCE_PEER_NAME;
  820|     19|            return true;
  821|      0|        }
  822|       |
  823|     60|        case TOX_EVENT_CONFERENCE_TITLE: {
  ------------------
  |  Branch (823:9): [True: 60, False: 1.69k]
  ------------------
  824|     60|            *out_enum = TOX_EVENT_CONFERENCE_TITLE;
  825|     60|            return true;
  826|      0|        }
  827|       |
  828|     22|        case TOX_EVENT_CONFERENCE_MESSAGE: {
  ------------------
  |  Branch (828:9): [True: 22, False: 1.73k]
  ------------------
  829|     22|            *out_enum = TOX_EVENT_CONFERENCE_MESSAGE;
  830|     22|            return true;
  831|      0|        }
  832|       |
  833|     24|        case TOX_EVENT_GROUP_PEER_NAME: {
  ------------------
  |  Branch (833:9): [True: 24, False: 1.73k]
  ------------------
  834|     24|            *out_enum = TOX_EVENT_GROUP_PEER_NAME;
  835|     24|            return true;
  836|      0|        }
  837|       |
  838|     23|        case TOX_EVENT_GROUP_PEER_STATUS: {
  ------------------
  |  Branch (838:9): [True: 23, False: 1.73k]
  ------------------
  839|     23|            *out_enum = TOX_EVENT_GROUP_PEER_STATUS;
  840|     23|            return true;
  841|      0|        }
  842|       |
  843|     22|        case TOX_EVENT_GROUP_TOPIC: {
  ------------------
  |  Branch (843:9): [True: 22, False: 1.73k]
  ------------------
  844|     22|            *out_enum = TOX_EVENT_GROUP_TOPIC;
  845|     22|            return true;
  846|      0|        }
  847|       |
  848|     26|        case TOX_EVENT_GROUP_PRIVACY_STATE: {
  ------------------
  |  Branch (848:9): [True: 26, False: 1.73k]
  ------------------
  849|     26|            *out_enum = TOX_EVENT_GROUP_PRIVACY_STATE;
  850|     26|            return true;
  851|      0|        }
  852|       |
  853|     41|        case TOX_EVENT_GROUP_VOICE_STATE: {
  ------------------
  |  Branch (853:9): [True: 41, False: 1.71k]
  ------------------
  854|     41|            *out_enum = TOX_EVENT_GROUP_VOICE_STATE;
  855|     41|            return true;
  856|      0|        }
  857|       |
  858|     26|        case TOX_EVENT_GROUP_TOPIC_LOCK: {
  ------------------
  |  Branch (858:9): [True: 26, False: 1.73k]
  ------------------
  859|     26|            *out_enum = TOX_EVENT_GROUP_TOPIC_LOCK;
  860|     26|            return true;
  861|      0|        }
  862|       |
  863|     14|        case TOX_EVENT_GROUP_PEER_LIMIT: {
  ------------------
  |  Branch (863:9): [True: 14, False: 1.74k]
  ------------------
  864|     14|            *out_enum = TOX_EVENT_GROUP_PEER_LIMIT;
  865|     14|            return true;
  866|      0|        }
  867|       |
  868|     27|        case TOX_EVENT_GROUP_PASSWORD: {
  ------------------
  |  Branch (868:9): [True: 27, False: 1.73k]
  ------------------
  869|     27|            *out_enum = TOX_EVENT_GROUP_PASSWORD;
  870|     27|            return true;
  871|      0|        }
  872|       |
  873|     38|        case TOX_EVENT_GROUP_MESSAGE: {
  ------------------
  |  Branch (873:9): [True: 38, False: 1.72k]
  ------------------
  874|     38|            *out_enum = TOX_EVENT_GROUP_MESSAGE;
  875|     38|            return true;
  876|      0|        }
  877|       |
  878|     33|        case TOX_EVENT_GROUP_PRIVATE_MESSAGE: {
  ------------------
  |  Branch (878:9): [True: 33, False: 1.72k]
  ------------------
  879|     33|            *out_enum = TOX_EVENT_GROUP_PRIVATE_MESSAGE;
  880|     33|            return true;
  881|      0|        }
  882|       |
  883|     15|        case TOX_EVENT_GROUP_CUSTOM_PACKET: {
  ------------------
  |  Branch (883:9): [True: 15, False: 1.74k]
  ------------------
  884|     15|            *out_enum = TOX_EVENT_GROUP_CUSTOM_PACKET;
  885|     15|            return true;
  886|      0|        }
  887|       |
  888|     20|        case TOX_EVENT_GROUP_CUSTOM_PRIVATE_PACKET: {
  ------------------
  |  Branch (888:9): [True: 20, False: 1.73k]
  ------------------
  889|     20|            *out_enum = TOX_EVENT_GROUP_CUSTOM_PRIVATE_PACKET;
  890|     20|            return true;
  891|      0|        }
  892|       |
  893|     29|        case TOX_EVENT_GROUP_INVITE: {
  ------------------
  |  Branch (893:9): [True: 29, False: 1.72k]
  ------------------
  894|     29|            *out_enum = TOX_EVENT_GROUP_INVITE;
  895|     29|            return true;
  896|      0|        }
  897|       |
  898|     47|        case TOX_EVENT_GROUP_PEER_JOIN: {
  ------------------
  |  Branch (898:9): [True: 47, False: 1.71k]
  ------------------
  899|     47|            *out_enum = TOX_EVENT_GROUP_PEER_JOIN;
  900|     47|            return true;
  901|      0|        }
  902|       |
  903|     61|        case TOX_EVENT_GROUP_PEER_EXIT: {
  ------------------
  |  Branch (903:9): [True: 61, False: 1.69k]
  ------------------
  904|     61|            *out_enum = TOX_EVENT_GROUP_PEER_EXIT;
  905|     61|            return true;
  906|      0|        }
  907|       |
  908|     50|        case TOX_EVENT_GROUP_SELF_JOIN: {
  ------------------
  |  Branch (908:9): [True: 50, False: 1.70k]
  ------------------
  909|     50|            *out_enum = TOX_EVENT_GROUP_SELF_JOIN;
  910|     50|            return true;
  911|      0|        }
  912|       |
  913|     40|        case TOX_EVENT_GROUP_JOIN_FAIL: {
  ------------------
  |  Branch (913:9): [True: 40, False: 1.71k]
  ------------------
  914|     40|            *out_enum = TOX_EVENT_GROUP_JOIN_FAIL;
  915|     40|            return true;
  916|      0|        }
  917|       |
  918|     43|        case TOX_EVENT_GROUP_MODERATION: {
  ------------------
  |  Branch (918:9): [True: 43, False: 1.71k]
  ------------------
  919|     43|            *out_enum = TOX_EVENT_GROUP_MODERATION;
  920|     43|            return true;
  921|      0|        }
  922|       |
  923|     19|        case TOX_EVENT_DHT_NODES_RESPONSE: {
  ------------------
  |  Branch (923:9): [True: 19, False: 1.73k]
  ------------------
  924|     19|            *out_enum = TOX_EVENT_DHT_NODES_RESPONSE;
  925|     19|            return true;
  926|      0|        }
  927|       |
  928|      1|        case TOX_EVENT_INVALID: {
  ------------------
  |  Branch (928:9): [True: 1, False: 1.75k]
  ------------------
  929|      1|            *out_enum = TOX_EVENT_INVALID;
  930|      1|            return true;
  931|      0|        }
  932|       |
  933|      5|        default: {
  ------------------
  |  Branch (933:9): [True: 5, False: 1.75k]
  ------------------
  934|      5|            *out_enum = TOX_EVENT_INVALID;
  935|      5|            return false;
  936|      0|        }
  937|  1.75k|    }
  938|  1.75k|}
tox_event.c:tox_event_data_unpack:
  948|  1.75k|{
  949|  1.75k|    switch (type) {
  ------------------
  |  Branch (949:13): [True: 0, False: 1.75k]
  ------------------
  950|     24|        case TOX_EVENT_CONFERENCE_CONNECTED:
  ------------------
  |  Branch (950:9): [True: 24, False: 1.72k]
  ------------------
  951|     24|            return tox_event_conference_connected_unpack(&data->conference_connected, bu, mem);
  952|       |
  953|     27|        case TOX_EVENT_CONFERENCE_INVITE:
  ------------------
  |  Branch (953:9): [True: 27, False: 1.72k]
  ------------------
  954|     27|            return tox_event_conference_invite_unpack(&data->conference_invite, bu, mem);
  955|       |
  956|     22|        case TOX_EVENT_CONFERENCE_MESSAGE:
  ------------------
  |  Branch (956:9): [True: 22, False: 1.73k]
  ------------------
  957|     22|            return tox_event_conference_message_unpack(&data->conference_message, bu, mem);
  958|       |
  959|    114|        case TOX_EVENT_CONFERENCE_PEER_LIST_CHANGED:
  ------------------
  |  Branch (959:9): [True: 114, False: 1.63k]
  ------------------
  960|    114|            return tox_event_conference_peer_list_changed_unpack(&data->conference_peer_list_changed, bu, mem);
  961|       |
  962|     19|        case TOX_EVENT_CONFERENCE_PEER_NAME:
  ------------------
  |  Branch (962:9): [True: 19, False: 1.73k]
  ------------------
  963|     19|            return tox_event_conference_peer_name_unpack(&data->conference_peer_name, bu, mem);
  964|       |
  965|     60|        case TOX_EVENT_CONFERENCE_TITLE:
  ------------------
  |  Branch (965:9): [True: 60, False: 1.69k]
  ------------------
  966|     60|            return tox_event_conference_title_unpack(&data->conference_title, bu, mem);
  967|       |
  968|    278|        case TOX_EVENT_FILE_CHUNK_REQUEST:
  ------------------
  |  Branch (968:9): [True: 278, False: 1.47k]
  ------------------
  969|    278|            return tox_event_file_chunk_request_unpack(&data->file_chunk_request, bu, mem);
  970|       |
  971|     28|        case TOX_EVENT_FILE_RECV_CHUNK:
  ------------------
  |  Branch (971:9): [True: 28, False: 1.72k]
  ------------------
  972|     28|            return tox_event_file_recv_chunk_unpack(&data->file_recv_chunk, bu, mem);
  973|       |
  974|     42|        case TOX_EVENT_FILE_RECV_CONTROL:
  ------------------
  |  Branch (974:9): [True: 42, False: 1.71k]
  ------------------
  975|     42|            return tox_event_file_recv_control_unpack(&data->file_recv_control, bu, mem);
  976|       |
  977|     37|        case TOX_EVENT_FILE_RECV:
  ------------------
  |  Branch (977:9): [True: 37, False: 1.71k]
  ------------------
  978|     37|            return tox_event_file_recv_unpack(&data->file_recv, bu, mem);
  979|       |
  980|     39|        case TOX_EVENT_FRIEND_CONNECTION_STATUS:
  ------------------
  |  Branch (980:9): [True: 39, False: 1.71k]
  ------------------
  981|     39|            return tox_event_friend_connection_status_unpack(&data->friend_connection_status, bu, mem);
  982|       |
  983|     21|        case TOX_EVENT_FRIEND_LOSSLESS_PACKET:
  ------------------
  |  Branch (983:9): [True: 21, False: 1.73k]
  ------------------
  984|     21|            return tox_event_friend_lossless_packet_unpack(&data->friend_lossless_packet, bu, mem);
  985|       |
  986|     27|        case TOX_EVENT_FRIEND_LOSSY_PACKET:
  ------------------
  |  Branch (986:9): [True: 27, False: 1.72k]
  ------------------
  987|     27|            return tox_event_friend_lossy_packet_unpack(&data->friend_lossy_packet, bu, mem);
  988|       |
  989|     15|        case TOX_EVENT_FRIEND_MESSAGE:
  ------------------
  |  Branch (989:9): [True: 15, False: 1.73k]
  ------------------
  990|     15|            return tox_event_friend_message_unpack(&data->friend_message, bu, mem);
  991|       |
  992|     28|        case TOX_EVENT_FRIEND_NAME:
  ------------------
  |  Branch (992:9): [True: 28, False: 1.72k]
  ------------------
  993|     28|            return tox_event_friend_name_unpack(&data->friend_name, bu, mem);
  994|       |
  995|     34|        case TOX_EVENT_FRIEND_READ_RECEIPT:
  ------------------
  |  Branch (995:9): [True: 34, False: 1.71k]
  ------------------
  996|     34|            return tox_event_friend_read_receipt_unpack(&data->friend_read_receipt, bu, mem);
  997|       |
  998|     39|        case TOX_EVENT_FRIEND_REQUEST:
  ------------------
  |  Branch (998:9): [True: 39, False: 1.71k]
  ------------------
  999|     39|            return tox_event_friend_request_unpack(&data->friend_request, bu, mem);
 1000|       |
 1001|     19|        case TOX_EVENT_FRIEND_STATUS_MESSAGE:
  ------------------
  |  Branch (1001:9): [True: 19, False: 1.73k]
  ------------------
 1002|     19|            return tox_event_friend_status_message_unpack(&data->friend_status_message, bu, mem);
 1003|       |
 1004|     29|        case TOX_EVENT_FRIEND_STATUS:
  ------------------
  |  Branch (1004:9): [True: 29, False: 1.72k]
  ------------------
 1005|     29|            return tox_event_friend_status_unpack(&data->friend_status, bu, mem);
 1006|       |
 1007|     69|        case TOX_EVENT_FRIEND_TYPING:
  ------------------
  |  Branch (1007:9): [True: 69, False: 1.68k]
  ------------------
 1008|     69|            return tox_event_friend_typing_unpack(&data->friend_typing, bu, mem);
 1009|       |
 1010|    183|        case TOX_EVENT_SELF_CONNECTION_STATUS:
  ------------------
  |  Branch (1010:9): [True: 183, False: 1.57k]
  ------------------
 1011|    183|            return tox_event_self_connection_status_unpack(&data->self_connection_status, bu, mem);
 1012|       |
 1013|     24|        case TOX_EVENT_GROUP_PEER_NAME:
  ------------------
  |  Branch (1013:9): [True: 24, False: 1.72k]
  ------------------
 1014|     24|            return tox_event_group_peer_name_unpack(&data->group_peer_name, bu, mem);
 1015|       |
 1016|     23|        case TOX_EVENT_GROUP_PEER_STATUS:
  ------------------
  |  Branch (1016:9): [True: 23, False: 1.73k]
  ------------------
 1017|     23|            return tox_event_group_peer_status_unpack(&data->group_peer_status, bu, mem);
 1018|       |
 1019|     22|        case TOX_EVENT_GROUP_TOPIC:
  ------------------
  |  Branch (1019:9): [True: 22, False: 1.73k]
  ------------------
 1020|     22|            return tox_event_group_topic_unpack(&data->group_topic, bu, mem);
 1021|       |
 1022|     26|        case TOX_EVENT_GROUP_PRIVACY_STATE:
  ------------------
  |  Branch (1022:9): [True: 26, False: 1.72k]
  ------------------
 1023|     26|            return tox_event_group_privacy_state_unpack(&data->group_privacy_state, bu, mem);
 1024|       |
 1025|     41|        case TOX_EVENT_GROUP_VOICE_STATE:
  ------------------
  |  Branch (1025:9): [True: 41, False: 1.71k]
  ------------------
 1026|     41|            return tox_event_group_voice_state_unpack(&data->group_voice_state, bu, mem);
 1027|       |
 1028|     26|        case TOX_EVENT_GROUP_TOPIC_LOCK:
  ------------------
  |  Branch (1028:9): [True: 26, False: 1.72k]
  ------------------
 1029|     26|            return tox_event_group_topic_lock_unpack(&data->group_topic_lock, bu, mem);
 1030|       |
 1031|     14|        case TOX_EVENT_GROUP_PEER_LIMIT:
  ------------------
  |  Branch (1031:9): [True: 14, False: 1.73k]
  ------------------
 1032|     14|            return tox_event_group_peer_limit_unpack(&data->group_peer_limit, bu, mem);
 1033|       |
 1034|     27|        case TOX_EVENT_GROUP_PASSWORD:
  ------------------
  |  Branch (1034:9): [True: 27, False: 1.72k]
  ------------------
 1035|     27|            return tox_event_group_password_unpack(&data->group_password, bu, mem);
 1036|       |
 1037|     38|        case TOX_EVENT_GROUP_MESSAGE:
  ------------------
  |  Branch (1037:9): [True: 38, False: 1.71k]
  ------------------
 1038|     38|            return tox_event_group_message_unpack(&data->group_message, bu, mem);
 1039|       |
 1040|     33|        case TOX_EVENT_GROUP_PRIVATE_MESSAGE:
  ------------------
  |  Branch (1040:9): [True: 33, False: 1.72k]
  ------------------
 1041|     33|            return tox_event_group_private_message_unpack(&data->group_private_message, bu, mem);
 1042|       |
 1043|     15|        case TOX_EVENT_GROUP_CUSTOM_PACKET:
  ------------------
  |  Branch (1043:9): [True: 15, False: 1.73k]
  ------------------
 1044|     15|            return tox_event_group_custom_packet_unpack(&data->group_custom_packet, bu, mem);
 1045|       |
 1046|     20|        case TOX_EVENT_GROUP_CUSTOM_PRIVATE_PACKET:
  ------------------
  |  Branch (1046:9): [True: 20, False: 1.73k]
  ------------------
 1047|     20|            return tox_event_group_custom_private_packet_unpack(&data->group_custom_private_packet, bu, mem);
 1048|       |
 1049|     29|        case TOX_EVENT_GROUP_INVITE:
  ------------------
  |  Branch (1049:9): [True: 29, False: 1.72k]
  ------------------
 1050|     29|            return tox_event_group_invite_unpack(&data->group_invite, bu, mem);
 1051|       |
 1052|     47|        case TOX_EVENT_GROUP_PEER_JOIN:
  ------------------
  |  Branch (1052:9): [True: 47, False: 1.70k]
  ------------------
 1053|     47|            return tox_event_group_peer_join_unpack(&data->group_peer_join, bu, mem);
 1054|       |
 1055|     61|        case TOX_EVENT_GROUP_PEER_EXIT:
  ------------------
  |  Branch (1055:9): [True: 61, False: 1.69k]
  ------------------
 1056|     61|            return tox_event_group_peer_exit_unpack(&data->group_peer_exit, bu, mem);
 1057|       |
 1058|     50|        case TOX_EVENT_GROUP_SELF_JOIN:
  ------------------
  |  Branch (1058:9): [True: 50, False: 1.70k]
  ------------------
 1059|     50|            return tox_event_group_self_join_unpack(&data->group_self_join, bu, mem);
 1060|       |
 1061|     40|        case TOX_EVENT_GROUP_JOIN_FAIL:
  ------------------
  |  Branch (1061:9): [True: 40, False: 1.71k]
  ------------------
 1062|     40|            return tox_event_group_join_fail_unpack(&data->group_join_fail, bu, mem);
 1063|       |
 1064|     43|        case TOX_EVENT_GROUP_MODERATION:
  ------------------
  |  Branch (1064:9): [True: 43, False: 1.71k]
  ------------------
 1065|     43|            return tox_event_group_moderation_unpack(&data->group_moderation, bu, mem);
 1066|       |
 1067|     19|        case TOX_EVENT_DHT_NODES_RESPONSE:
  ------------------
  |  Branch (1067:9): [True: 19, False: 1.73k]
  ------------------
 1068|     19|            return tox_event_dht_nodes_response_unpack(&data->dht_nodes_response, bu, mem);
 1069|       |
 1070|      1|        case TOX_EVENT_INVALID:
  ------------------
  |  Branch (1070:9): [True: 1, False: 1.75k]
  ------------------
 1071|      1|            return false;
 1072|  1.75k|    }
 1073|       |
 1074|      0|    return false;
 1075|  1.75k|}

tox_events_get_size:
   73|    764|{
   74|    764|    return events == nullptr ? 0 : events->events_size;
  ------------------
  |  |   63|    764|#define nullptr NULL
  ------------------
  |  Branch (74:12): [True: 0, False: 764]
  ------------------
   75|    764|}
tox_events_bytes_size:
  123|    191|{
  124|    191|    return bin_pack_obj_size(tox_events_pack_handler, events, nullptr);
  ------------------
  |  |   63|    191|#define nullptr NULL
  ------------------
  125|    191|}
tox_events_get_bytes:
  128|    191|{
  129|    191|    return bin_pack_obj(tox_events_pack_handler, events, nullptr, bytes, UINT32_MAX);
  ------------------
  |  |   63|    191|#define nullptr NULL
  ------------------
  130|    191|}
tox_events_load:
  160|    805|{
  161|    805|    Tox_Events *events = (Tox_Events *)mem_alloc(sys->mem, sizeof(Tox_Events));
  162|       |
  163|    805|    if (events == nullptr) {
  ------------------
  |  |   63|    805|#define nullptr NULL
  ------------------
  |  Branch (163:9): [True: 1, False: 804]
  ------------------
  164|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  165|      1|    }
  166|       |
  167|    804|    *events = (Tox_Events) {
  168|    804|        nullptr
  ------------------
  |  |   63|    804|#define nullptr NULL
  ------------------
  169|    804|    };
  170|    804|    events->mem = sys->mem;
  171|       |
  172|    804|    if (!bin_unpack_obj(sys->mem, tox_events_unpack_handler, events, bytes, bytes_size)) {
  ------------------
  |  Branch (172:9): [True: 613, False: 191]
  ------------------
  173|    613|        tox_events_free(events);
  174|    613|        return nullptr;
  ------------------
  |  |   63|    613|#define nullptr NULL
  ------------------
  175|    613|    }
  176|       |
  177|    191|    return events;
  178|    804|}
tox_events.c:tox_events_pack_handler:
  117|    382|{
  118|    382|    const Tox_Events *events = (const Tox_Events *)obj;
  119|    382|    return bin_pack_obj_array(bp, tox_event_pack_handler, tox_events_get_events(events), tox_events_get_size(events), logger);
  120|    382|}
tox_events.c:tox_event_pack_handler:
  110|  1.55k|{
  111|  1.55k|    const Tox_Event *events = (const Tox_Event *)arr;
  112|  1.55k|    assert(events != nullptr);
  113|  1.55k|    return tox_event_pack(&events[index], bp);
  114|  1.55k|}
tox_events.c:tox_events_get_events:
   78|    382|{
   79|    382|    return events == nullptr ? nullptr : events->events;
  ------------------
  |  |   63|    382|#define nullptr NULL
  ------------------
                  return events == nullptr ? nullptr : events->events;
  ------------------
  |  |   63|    382|#define nullptr NULL
  ------------------
  |  Branch (79:12): [True: 0, False: 382]
  ------------------
   80|    382|}
tox_events.c:tox_events_unpack_handler:
  133|    804|{
  134|    804|    Tox_Events *events = (Tox_Events *)obj;
  135|       |
  136|    804|    uint32_t size;
  137|    804|    if (!bin_unpack_array(bu, &size)) {
  ------------------
  |  Branch (137:9): [True: 65, False: 739]
  ------------------
  138|     65|        return false;
  139|     65|    }
  140|       |
  141|  2.04k|    for (uint32_t i = 0; i < size; ++i) {
  ------------------
  |  Branch (141:26): [True: 1.85k, False: 191]
  ------------------
  142|  1.85k|        Tox_Event event = {TOX_EVENT_INVALID};
  143|  1.85k|        if (!tox_event_unpack_into(&event, bu, events->mem)) {
  ------------------
  |  Branch (143:13): [True: 547, False: 1.30k]
  ------------------
  144|    547|            tox_event_destruct(&event, events->mem);
  145|    547|            return false;
  146|    547|        }
  147|       |
  148|  1.30k|        if (!tox_events_add(events, &event)) {
  ------------------
  |  Branch (148:13): [True: 1, False: 1.30k]
  ------------------
  149|      1|            tox_event_destruct(&event, events->mem);
  150|      1|            return false;
  151|      1|        }
  152|  1.30k|    }
  153|       |
  154|       |    // Invariant: if all adds worked, the events size must be the input array size.
  155|    191|    assert(tox_events_get_size(events) == size);
  156|    191|    return true;
  157|    191|}

LLVMFuzzerTestOneInput:
   91|    808|{
   92|    808|    TestUnpack(Fuzz_Data(data, size));
   93|    808|    return 0;
   94|    808|}
tox_events_fuzz_test.cc:_ZN12_GLOBAL__N_110TestUnpackE9Fuzz_Data:
   14|    808|{
   15|       |    // 2 bytes: size of the events data
   16|    808|    CONSUME_OR_RETURN(const uint8_t *events_size_bytes, data, sizeof(uint16_t));
  ------------------
  |  |  139|    808|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 1, False: 807]
  |  |  ------------------
  |  |  140|      1|        return;                              \
  |  |  141|      1|    }                                        \
  |  |  142|    808|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   17|    807|    uint16_t events_size;
   18|    807|    std::memcpy(&events_size, events_size_bytes, sizeof(uint16_t));
   19|       |
   20|       |    // events_size bytes: events data (max 64K)
   21|    807|    CONSUME_OR_RETURN(const uint8_t *events_data, data, events_size);
  ------------------
  |  |  139|    807|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 1, False: 806]
  |  |  ------------------
  |  |  140|      1|        return;                              \
  |  |  141|      1|    }                                        \
  |  |  142|    807|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   22|       |
   23|    806|    if (data.empty()) {
  ------------------
  |  Branch (23:9): [True: 1, False: 805]
  ------------------
   24|       |        // If there's no more input, no malloc failure paths can possibly be
   25|       |        // tested, so we ignore this input.
   26|      1|        return;
   27|      1|    }
   28|       |
   29|       |    // rest of the fuzz data is input for malloc
   30|    805|    Fuzz_System sys{data};
   31|       |
   32|    805|    Tox_Dispatch *dispatch = tox_dispatch_new(nullptr);
   33|    805|    assert(dispatch != nullptr);
   34|       |
   35|    805|    auto ignore = [](auto *event, void *user_data) {};
   36|    805|    tox_events_callback_conference_connected(dispatch, ignore);
   37|    805|    tox_events_callback_conference_invite(dispatch, ignore);
   38|    805|    tox_events_callback_conference_message(dispatch, ignore);
   39|    805|    tox_events_callback_conference_peer_list_changed(dispatch, ignore);
   40|    805|    tox_events_callback_conference_peer_name(dispatch, ignore);
   41|    805|    tox_events_callback_conference_title(dispatch, ignore);
   42|    805|    tox_events_callback_file_chunk_request(dispatch, ignore);
   43|    805|    tox_events_callback_file_recv(dispatch, ignore);
   44|    805|    tox_events_callback_file_recv_chunk(dispatch, ignore);
   45|    805|    tox_events_callback_file_recv_control(dispatch, ignore);
   46|    805|    tox_events_callback_friend_connection_status(dispatch, ignore);
   47|    805|    tox_events_callback_friend_lossless_packet(dispatch, ignore);
   48|    805|    tox_events_callback_friend_lossy_packet(dispatch, ignore);
   49|    805|    tox_events_callback_friend_message(dispatch, ignore);
   50|    805|    tox_events_callback_friend_name(dispatch, ignore);
   51|    805|    tox_events_callback_friend_read_receipt(dispatch, ignore);
   52|    805|    tox_events_callback_friend_request(dispatch, ignore);
   53|    805|    tox_events_callback_friend_status(dispatch, ignore);
   54|    805|    tox_events_callback_friend_status_message(dispatch, ignore);
   55|    805|    tox_events_callback_friend_typing(dispatch, ignore);
   56|    805|    tox_events_callback_self_connection_status(dispatch, ignore);
   57|    805|    tox_events_callback_group_peer_name(dispatch, ignore);
   58|    805|    tox_events_callback_group_peer_status(dispatch, ignore);
   59|    805|    tox_events_callback_group_topic(dispatch, ignore);
   60|    805|    tox_events_callback_group_privacy_state(dispatch, ignore);
   61|    805|    tox_events_callback_group_voice_state(dispatch, ignore);
   62|    805|    tox_events_callback_group_topic_lock(dispatch, ignore);
   63|    805|    tox_events_callback_group_peer_limit(dispatch, ignore);
   64|    805|    tox_events_callback_group_password(dispatch, ignore);
   65|    805|    tox_events_callback_group_message(dispatch, ignore);
   66|    805|    tox_events_callback_group_private_message(dispatch, ignore);
   67|    805|    tox_events_callback_group_custom_packet(dispatch, ignore);
   68|    805|    tox_events_callback_group_custom_private_packet(dispatch, ignore);
   69|    805|    tox_events_callback_group_invite(dispatch, ignore);
   70|    805|    tox_events_callback_group_peer_join(dispatch, ignore);
   71|    805|    tox_events_callback_group_peer_exit(dispatch, ignore);
   72|    805|    tox_events_callback_group_self_join(dispatch, ignore);
   73|    805|    tox_events_callback_group_join_fail(dispatch, ignore);
   74|    805|    tox_events_callback_group_moderation(dispatch, ignore);
   75|       |
   76|    805|    Tox_Events *events = tox_events_load(sys.sys.get(), events_data, events_size);
   77|    805|    if (events) {
  ------------------
  |  Branch (77:9): [True: 191, False: 614]
  ------------------
   78|    191|        std::vector<uint8_t> packed(tox_events_bytes_size(events));
   79|    191|        tox_events_get_bytes(events, packed.data());
   80|       |
   81|    191|        tox_dispatch_invoke(dispatch, events, nullptr);
   82|    191|    }
   83|    805|    tox_events_free(events);
   84|    805|    tox_dispatch_free(dispatch);
   85|    805|}
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK30Tox_Event_Conference_ConnectedEEDaPT_Pv:
   35|     23|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK27Tox_Event_Conference_InviteEEDaPT_Pv:
   35|     12|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK28Tox_Event_Conference_MessageEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK38Tox_Event_Conference_Peer_List_ChangedEEDaPT_Pv:
   35|     79|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK30Tox_Event_Conference_Peer_NameEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK26Tox_Event_Conference_TitleEEDaPT_Pv:
   35|     34|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK28Tox_Event_File_Chunk_RequestEEDaPT_Pv:
   35|     55|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK19Tox_Event_File_RecvEEDaPT_Pv:
   35|     23|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK25Tox_Event_File_Recv_ChunkEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK27Tox_Event_File_Recv_ControlEEDaPT_Pv:
   35|     13|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK34Tox_Event_Friend_Connection_StatusEEDaPT_Pv:
   35|     20|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK32Tox_Event_Friend_Lossless_PacketEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK29Tox_Event_Friend_Lossy_PacketEEDaPT_Pv:
   35|     13|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK24Tox_Event_Friend_MessageEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK21Tox_Event_Friend_NameEEDaPT_Pv:
   35|     12|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK29Tox_Event_Friend_Read_ReceiptEEDaPT_Pv:
   35|     18|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK24Tox_Event_Friend_RequestEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK23Tox_Event_Friend_StatusEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK31Tox_Event_Friend_Status_MessageEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK23Tox_Event_Friend_TypingEEDaPT_Pv:
   35|     15|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK32Tox_Event_Self_Connection_StatusEEDaPT_Pv:
   35|    128|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK25Tox_Event_Group_Peer_NameEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK27Tox_Event_Group_Peer_StatusEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK21Tox_Event_Group_TopicEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK29Tox_Event_Group_Privacy_StateEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK27Tox_Event_Group_Voice_StateEEDaPT_Pv:
   35|     18|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK26Tox_Event_Group_Topic_LockEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK26Tox_Event_Group_Peer_LimitEEDaPT_Pv:
   35|     11|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK24Tox_Event_Group_PasswordEEDaPT_Pv:
   35|     18|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK23Tox_Event_Group_MessageEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK31Tox_Event_Group_Private_MessageEEDaPT_Pv:
   35|     19|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK29Tox_Event_Group_Custom_PacketEEDaPT_Pv:
   35|     10|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK37Tox_Event_Group_Custom_Private_PacketEEDaPT_Pv:
   35|     12|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK22Tox_Event_Group_InviteEEDaPT_Pv:
   35|     11|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK25Tox_Event_Group_Peer_JoinEEDaPT_Pv:
   35|     29|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK25Tox_Event_Group_Peer_ExitEEDaPT_Pv:
   35|     14|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK25Tox_Event_Group_Self_JoinEEDaPT_Pv:
   35|     19|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK25Tox_Event_Group_Join_FailEEDaPT_Pv:
   35|     14|    auto ignore = [](auto *event, void *user_data) {};
tox_events_fuzz_test.cc:_ZZN12_GLOBAL__N_110TestUnpackE9Fuzz_DataENK3$_0clIK26Tox_Event_Group_ModerationEEDaPT_Pv:
   35|     14|    auto ignore = [](auto *event, void *user_data) {};

tox_conference_type_pack:
   13|     24|{
   14|     24|    return bin_pack_u32(bp, (uint32_t)val);
   15|     24|}
tox_connection_pack:
   17|    296|{
   18|    296|    return bin_pack_u32(bp, (uint32_t)val);
   19|    296|}
tox_file_control_pack:
   21|     26|{
   22|     26|    return bin_pack_u32(bp, (uint32_t)val);
   23|     26|}
tox_message_type_pack:
   25|     98|{
   26|     98|    return bin_pack_u32(bp, (uint32_t)val);
   27|     98|}
tox_user_status_pack:
   29|     40|{
   30|     40|    return bin_pack_u32(bp, (uint32_t)val);
   31|     40|}
tox_group_privacy_state_pack:
   33|     20|{
   34|     20|    return bin_pack_u32(bp, (uint32_t)val);
   35|     20|}
tox_group_voice_state_pack:
   37|     36|{
   38|     36|    return bin_pack_u32(bp, (uint32_t)val);
   39|     36|}
tox_group_topic_lock_pack:
   41|     20|{
   42|     20|    return bin_pack_u32(bp, (uint32_t)val);
   43|     20|}
tox_group_join_fail_pack:
   45|     28|{
   46|     28|    return bin_pack_u32(bp, (uint32_t)val);
   47|     28|}
tox_group_mod_event_pack:
   49|     28|{
   50|     28|    return bin_pack_u32(bp, (uint32_t)val);
   51|     28|}
tox_group_exit_type_pack:
   53|     28|{
   54|     28|    return bin_pack_u32(bp, (uint32_t)val);
   55|     28|}

tox_conference_type_unpack:
   33|     24|{
   34|     24|    uint32_t u32;
   35|     24|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (35:12): [True: 23, False: 1]
  ------------------
   36|     24|           && tox_conference_type_from_int(u32, val);
  ------------------
  |  Branch (36:15): [True: 22, False: 1]
  ------------------
   37|     24|}
tox_connection_unpack:
   65|    217|{
   66|    217|    uint32_t u32;
   67|    217|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (67:12): [True: 214, False: 3]
  ------------------
   68|    217|           && tox_connection_from_int(u32, val);
  ------------------
  |  Branch (68:15): [True: 213, False: 1]
  ------------------
   69|    217|}
tox_file_control_unpack:
   97|     34|{
   98|     34|    uint32_t u32;
   99|     34|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (99:12): [True: 32, False: 2]
  ------------------
  100|     34|           && tox_file_control_from_int(u32, val);
  ------------------
  |  Branch (100:15): [True: 31, False: 1]
  ------------------
  101|     34|}
tox_message_type_unpack:
  124|     89|{
  125|     89|    uint32_t u32;
  126|     89|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (126:12): [True: 83, False: 6]
  ------------------
  127|     89|           && tox_message_type_from_int(u32, val);
  ------------------
  |  Branch (127:15): [True: 80, False: 3]
  ------------------
  128|     89|}
tox_user_status_unpack:
  156|     41|{
  157|     41|    uint32_t u32;
  158|     41|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (158:12): [True: 37, False: 4]
  ------------------
  159|     41|           && tox_user_status_from_int(u32, val);
  ------------------
  |  Branch (159:15): [True: 36, False: 1]
  ------------------
  160|     41|}
tox_group_privacy_state_unpack:
  180|     22|{
  181|     22|    uint32_t u32;
  182|     22|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (182:12): [True: 21, False: 1]
  ------------------
  183|     22|           && tox_group_privacy_state_from_int(u32, val);
  ------------------
  |  Branch (183:15): [True: 20, False: 1]
  ------------------
  184|     22|}
tox_group_voice_state_unpack:
  207|     36|{
  208|     36|    uint32_t u32;
  209|     36|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (209:12): [True: 35, False: 1]
  ------------------
  210|     36|           && tox_group_voice_state_from_int(u32, val);
  ------------------
  |  Branch (210:15): [True: 34, False: 1]
  ------------------
  211|     36|}
tox_group_topic_lock_unpack:
  231|     22|{
  232|     22|    uint32_t u32;
  233|     22|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (233:12): [True: 21, False: 1]
  ------------------
  234|     22|           && tox_group_topic_lock_from_int(u32, val);
  ------------------
  |  Branch (234:15): [True: 20, False: 1]
  ------------------
  235|     22|}
tox_group_join_fail_unpack:
  259|     36|{
  260|     36|    uint32_t u32;
  261|     36|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (261:12): [True: 35, False: 1]
  ------------------
  262|     36|           && tox_group_join_fail_from_int(u32, val);
  ------------------
  |  Branch (262:15): [True: 33, False: 2]
  ------------------
  263|     36|}
tox_group_mod_event_unpack:
  291|     35|{
  292|     35|    uint32_t u32;
  293|     35|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (293:12): [True: 31, False: 4]
  ------------------
  294|     35|           && tox_group_mod_event_from_int(u32, val);
  ------------------
  |  Branch (294:15): [True: 29, False: 2]
  ------------------
  295|     35|}
tox_group_exit_type_unpack:
  331|     55|{
  332|     55|    uint32_t u32;
  333|     55|    return bin_unpack_u32(bu, &u32)
  ------------------
  |  Branch (333:12): [True: 54, False: 1]
  ------------------
  334|     55|           && tox_group_exit_type_from_int(u32, val);
  ------------------
  |  Branch (334:15): [True: 53, False: 1]
  ------------------
  335|     55|}
tox_unpack.c:tox_conference_type_from_int:
   14|     23|{
   15|     23|    switch (value) {
   16|     12|        case TOX_CONFERENCE_TYPE_TEXT: {
  ------------------
  |  Branch (16:9): [True: 12, False: 11]
  ------------------
   17|     12|            *out_enum = TOX_CONFERENCE_TYPE_TEXT;
   18|     12|            return true;
   19|      0|        }
   20|       |
   21|     10|        case TOX_CONFERENCE_TYPE_AV: {
  ------------------
  |  Branch (21:9): [True: 10, False: 13]
  ------------------
   22|     10|            *out_enum = TOX_CONFERENCE_TYPE_AV;
   23|     10|            return true;
   24|      0|        }
   25|       |
   26|      1|        default: {
  ------------------
  |  Branch (26:9): [True: 1, False: 22]
  ------------------
   27|      1|            *out_enum = TOX_CONFERENCE_TYPE_TEXT;
   28|      1|            return false;
   29|      0|        }
   30|     23|    }
   31|     23|}
tox_unpack.c:tox_connection_from_int:
   40|    214|{
   41|    214|    switch (value) {
   42|    129|        case TOX_CONNECTION_NONE: {
  ------------------
  |  Branch (42:9): [True: 129, False: 85]
  ------------------
   43|    129|            *out_enum = TOX_CONNECTION_NONE;
   44|    129|            return true;
   45|      0|        }
   46|       |
   47|     57|        case TOX_CONNECTION_TCP: {
  ------------------
  |  Branch (47:9): [True: 57, False: 157]
  ------------------
   48|     57|            *out_enum = TOX_CONNECTION_TCP;
   49|     57|            return true;
   50|      0|        }
   51|       |
   52|     27|        case TOX_CONNECTION_UDP: {
  ------------------
  |  Branch (52:9): [True: 27, False: 187]
  ------------------
   53|     27|            *out_enum = TOX_CONNECTION_UDP;
   54|     27|            return true;
   55|      0|        }
   56|       |
   57|      1|        default: {
  ------------------
  |  Branch (57:9): [True: 1, False: 213]
  ------------------
   58|      1|            *out_enum = TOX_CONNECTION_NONE;
   59|      1|            return false;
   60|      0|        }
   61|    214|    }
   62|    214|}
tox_unpack.c:tox_file_control_from_int:
   72|     32|{
   73|     32|    switch (value) {
   74|     11|        case TOX_FILE_CONTROL_RESUME: {
  ------------------
  |  Branch (74:9): [True: 11, False: 21]
  ------------------
   75|     11|            *out_enum = TOX_FILE_CONTROL_RESUME;
   76|     11|            return true;
   77|      0|        }
   78|       |
   79|     10|        case TOX_FILE_CONTROL_PAUSE: {
  ------------------
  |  Branch (79:9): [True: 10, False: 22]
  ------------------
   80|     10|            *out_enum = TOX_FILE_CONTROL_PAUSE;
   81|     10|            return true;
   82|      0|        }
   83|       |
   84|     10|        case TOX_FILE_CONTROL_CANCEL: {
  ------------------
  |  Branch (84:9): [True: 10, False: 22]
  ------------------
   85|     10|            *out_enum = TOX_FILE_CONTROL_CANCEL;
   86|     10|            return true;
   87|      0|        }
   88|       |
   89|      1|        default: {
  ------------------
  |  Branch (89:9): [True: 1, False: 31]
  ------------------
   90|      1|            *out_enum = TOX_FILE_CONTROL_RESUME;
   91|      1|            return false;
   92|      0|        }
   93|     32|    }
   94|     32|}
tox_unpack.c:tox_message_type_from_int:
  104|     83|{
  105|     83|    switch (value) {
  106|     28|        case TOX_MESSAGE_TYPE_NORMAL: {
  ------------------
  |  Branch (106:9): [True: 28, False: 55]
  ------------------
  107|     28|            *out_enum = TOX_MESSAGE_TYPE_NORMAL;
  108|     28|            return true;
  109|      0|        }
  110|       |
  111|     52|        case TOX_MESSAGE_TYPE_ACTION: {
  ------------------
  |  Branch (111:9): [True: 52, False: 31]
  ------------------
  112|     52|            *out_enum = TOX_MESSAGE_TYPE_ACTION;
  113|     52|            return true;
  114|      0|        }
  115|       |
  116|      3|        default: {
  ------------------
  |  Branch (116:9): [True: 3, False: 80]
  ------------------
  117|      3|            *out_enum = TOX_MESSAGE_TYPE_NORMAL;
  118|      3|            return false;
  119|      0|        }
  120|     83|    }
  121|     83|}
tox_unpack.c:tox_user_status_from_int:
  131|     37|{
  132|     37|    switch (value) {
  133|     13|        case TOX_USER_STATUS_NONE: {
  ------------------
  |  Branch (133:9): [True: 13, False: 24]
  ------------------
  134|     13|            *out_enum = TOX_USER_STATUS_NONE;
  135|     13|            return true;
  136|      0|        }
  137|       |
  138|     12|        case TOX_USER_STATUS_AWAY: {
  ------------------
  |  Branch (138:9): [True: 12, False: 25]
  ------------------
  139|     12|            *out_enum = TOX_USER_STATUS_AWAY;
  140|     12|            return true;
  141|      0|        }
  142|       |
  143|     11|        case TOX_USER_STATUS_BUSY: {
  ------------------
  |  Branch (143:9): [True: 11, False: 26]
  ------------------
  144|     11|            *out_enum = TOX_USER_STATUS_BUSY;
  145|     11|            return true;
  146|      0|        }
  147|       |
  148|      1|        default: {
  ------------------
  |  Branch (148:9): [True: 1, False: 36]
  ------------------
  149|      1|            *out_enum = TOX_USER_STATUS_NONE;
  150|      1|            return false;
  151|      0|        }
  152|     37|    }
  153|     37|}
tox_unpack.c:tox_group_privacy_state_from_int:
  163|     21|{
  164|     21|    switch (value) {
  165|     10|        case TOX_GROUP_PRIVACY_STATE_PUBLIC: {
  ------------------
  |  Branch (165:9): [True: 10, False: 11]
  ------------------
  166|     10|            *out_enum = TOX_GROUP_PRIVACY_STATE_PUBLIC;
  167|     10|            return true;
  168|      0|        }
  169|     10|        case TOX_GROUP_PRIVACY_STATE_PRIVATE: {
  ------------------
  |  Branch (169:9): [True: 10, False: 11]
  ------------------
  170|     10|            *out_enum = TOX_GROUP_PRIVACY_STATE_PRIVATE;
  171|     10|            return true;
  172|      0|        }
  173|      1|        default: {
  ------------------
  |  Branch (173:9): [True: 1, False: 20]
  ------------------
  174|      1|            *out_enum = TOX_GROUP_PRIVACY_STATE_PUBLIC;
  175|      1|            return false;
  176|      0|        }
  177|     21|    }
  178|     21|}
tox_unpack.c:tox_group_voice_state_from_int:
  186|     35|{
  187|     35|    switch (value) {
  188|     10|        case TOX_GROUP_VOICE_STATE_ALL: {
  ------------------
  |  Branch (188:9): [True: 10, False: 25]
  ------------------
  189|     10|            *out_enum = TOX_GROUP_VOICE_STATE_ALL;
  190|     10|            return true;
  191|      0|        }
  192|     21|        case TOX_GROUP_VOICE_STATE_MODERATOR: {
  ------------------
  |  Branch (192:9): [True: 21, False: 14]
  ------------------
  193|     21|            *out_enum = TOX_GROUP_VOICE_STATE_MODERATOR;
  194|     21|            return true;
  195|      0|        }
  196|      3|        case TOX_GROUP_VOICE_STATE_FOUNDER: {
  ------------------
  |  Branch (196:9): [True: 3, False: 32]
  ------------------
  197|      3|            *out_enum = TOX_GROUP_VOICE_STATE_FOUNDER;
  198|      3|            return true;
  199|      0|        }
  200|      1|        default: {
  ------------------
  |  Branch (200:9): [True: 1, False: 34]
  ------------------
  201|      1|            *out_enum = TOX_GROUP_VOICE_STATE_ALL;
  202|      1|            return false;
  203|      0|        }
  204|     35|    }
  205|     35|}
tox_unpack.c:tox_group_topic_lock_from_int:
  214|     21|{
  215|     21|    switch (value) {
  216|     10|        case TOX_GROUP_TOPIC_LOCK_ENABLED: {
  ------------------
  |  Branch (216:9): [True: 10, False: 11]
  ------------------
  217|     10|            *out_enum = TOX_GROUP_TOPIC_LOCK_ENABLED;
  218|     10|            return true;
  219|      0|        }
  220|     10|        case TOX_GROUP_TOPIC_LOCK_DISABLED: {
  ------------------
  |  Branch (220:9): [True: 10, False: 11]
  ------------------
  221|     10|            *out_enum = TOX_GROUP_TOPIC_LOCK_DISABLED;
  222|     10|            return true;
  223|      0|        }
  224|      1|        default: {
  ------------------
  |  Branch (224:9): [True: 1, False: 20]
  ------------------
  225|      1|            *out_enum = TOX_GROUP_TOPIC_LOCK_ENABLED;
  226|      1|            return false;
  227|      0|        }
  228|     21|    }
  229|     21|}
tox_unpack.c:tox_group_join_fail_from_int:
  238|     35|{
  239|     35|    switch (value) {
  240|     13|        case TOX_GROUP_JOIN_FAIL_PEER_LIMIT: {
  ------------------
  |  Branch (240:9): [True: 13, False: 22]
  ------------------
  241|     13|            *out_enum = TOX_GROUP_JOIN_FAIL_PEER_LIMIT;
  242|     13|            return true;
  243|      0|        }
  244|     10|        case TOX_GROUP_JOIN_FAIL_INVALID_PASSWORD: {
  ------------------
  |  Branch (244:9): [True: 10, False: 25]
  ------------------
  245|     10|            *out_enum = TOX_GROUP_JOIN_FAIL_INVALID_PASSWORD;
  246|     10|            return true;
  247|      0|        }
  248|     10|        case TOX_GROUP_JOIN_FAIL_UNKNOWN: {
  ------------------
  |  Branch (248:9): [True: 10, False: 25]
  ------------------
  249|     10|            *out_enum = TOX_GROUP_JOIN_FAIL_UNKNOWN;
  250|     10|            return true;
  251|      0|        }
  252|      2|        default: {
  ------------------
  |  Branch (252:9): [True: 2, False: 33]
  ------------------
  253|      2|            *out_enum = TOX_GROUP_JOIN_FAIL_PEER_LIMIT;
  254|      2|            return false;
  255|      0|        }
  256|     35|    }
  257|     35|}
tox_unpack.c:tox_group_mod_event_from_int:
  266|     31|{
  267|     31|    switch (value) {
  268|      6|        case TOX_GROUP_MOD_EVENT_KICK: {
  ------------------
  |  Branch (268:9): [True: 6, False: 25]
  ------------------
  269|      6|            *out_enum = TOX_GROUP_MOD_EVENT_KICK;
  270|      6|            return true;
  271|      0|        }
  272|      3|        case TOX_GROUP_MOD_EVENT_OBSERVER: {
  ------------------
  |  Branch (272:9): [True: 3, False: 28]
  ------------------
  273|      3|            *out_enum = TOX_GROUP_MOD_EVENT_OBSERVER;
  274|      3|            return true;
  275|      0|        }
  276|     10|        case TOX_GROUP_MOD_EVENT_USER: {
  ------------------
  |  Branch (276:9): [True: 10, False: 21]
  ------------------
  277|     10|            *out_enum = TOX_GROUP_MOD_EVENT_USER;
  278|     10|            return true;
  279|      0|        }
  280|     10|        case TOX_GROUP_MOD_EVENT_MODERATOR: {
  ------------------
  |  Branch (280:9): [True: 10, False: 21]
  ------------------
  281|     10|            *out_enum = TOX_GROUP_MOD_EVENT_MODERATOR;
  282|     10|            return true;
  283|      0|        }
  284|      2|        default: {
  ------------------
  |  Branch (284:9): [True: 2, False: 29]
  ------------------
  285|      2|            *out_enum = TOX_GROUP_MOD_EVENT_KICK;
  286|      2|            return false;
  287|      0|        }
  288|     31|    }
  289|     31|}
tox_unpack.c:tox_group_exit_type_from_int:
  298|     54|{
  299|     54|    switch (value) {
  300|     10|        case TOX_GROUP_EXIT_TYPE_QUIT: {
  ------------------
  |  Branch (300:9): [True: 10, False: 44]
  ------------------
  301|     10|            *out_enum = TOX_GROUP_EXIT_TYPE_QUIT;
  302|     10|            return true;
  303|      0|        }
  304|     22|        case TOX_GROUP_EXIT_TYPE_TIMEOUT: {
  ------------------
  |  Branch (304:9): [True: 22, False: 32]
  ------------------
  305|     22|            *out_enum = TOX_GROUP_EXIT_TYPE_TIMEOUT;
  306|     22|            return true;
  307|      0|        }
  308|      3|        case TOX_GROUP_EXIT_TYPE_DISCONNECTED: {
  ------------------
  |  Branch (308:9): [True: 3, False: 51]
  ------------------
  309|      3|            *out_enum = TOX_GROUP_EXIT_TYPE_DISCONNECTED;
  310|      3|            return true;
  311|      0|        }
  312|     12|        case TOX_GROUP_EXIT_TYPE_SELF_DISCONNECTED: {
  ------------------
  |  Branch (312:9): [True: 12, False: 42]
  ------------------
  313|     12|            *out_enum = TOX_GROUP_EXIT_TYPE_SELF_DISCONNECTED;
  314|     12|            return true;
  315|      0|        }
  316|      3|        case TOX_GROUP_EXIT_TYPE_KICK: {
  ------------------
  |  Branch (316:9): [True: 3, False: 51]
  ------------------
  317|      3|            *out_enum = TOX_GROUP_EXIT_TYPE_KICK;
  318|      3|            return true;
  319|      0|        }
  320|      3|        case TOX_GROUP_EXIT_TYPE_SYNC_ERROR: {
  ------------------
  |  Branch (320:9): [True: 3, False: 51]
  ------------------
  321|      3|            *out_enum = TOX_GROUP_EXIT_TYPE_SYNC_ERROR;
  322|      3|            return true;
  323|      0|        }
  324|      1|        default: {
  ------------------
  |  Branch (324:9): [True: 1, False: 53]
  ------------------
  325|      1|            *out_enum = TOX_GROUP_EXIT_TYPE_QUIT;
  326|      1|            return false;
  327|      0|        }
  328|     54|    }
  329|     54|}

