_ZNK9Fuzz_Data4sizeEv:
   69|    123|    std::size_t size() const { return size_; }
_ZN9Fuzz_Data7consumeEPKcm:
   75|     50|    {
   76|     50|        const uint8_t *val = data_;
   77|     50|        if (FUZZ_DEBUG) {
  ------------------
  |  Branch (77:13): [Folded - Ignored]
  ------------------
   78|      0|            if (pos() == TRACE_TRAP) {
  ------------------
  |  Branch (78:17): [True: 0, False: 0]
  ------------------
   79|      0|                __asm__("int $3");
   80|      0|            }
   81|      0|            if (count == 1) {
  ------------------
  |  Branch (81:17): [True: 0, False: 0]
  ------------------
   82|      0|                std::printf("consume@%zu(%s): %d (0x%02x)\n", pos(), func, val[0], val[0]);
   83|      0|            } else if (count != 0) {
  ------------------
  |  Branch (83:24): [True: 0, False: 0]
  ------------------
   84|      0|                std::printf("consume@%zu(%s): %02x..%02x[%zu]\n", pos(), func, val[0],
   85|      0|                    val[count - 1], count);
   86|      0|            }
   87|      0|        }
   88|     50|        data_ += count;
   89|     50|        size_ -= count;
   90|     50|        return val;
   91|     50|    }
_ZNK9Fuzz_Data4dataEv:
   71|     37|    const uint8_t *data() const { return data_; }
_ZN9Fuzz_Data8consume1EPKc:
   68|     74|    Consumer consume1(const char *func) { return Consumer{func, *this}; }
_ZN9Fuzz_Data8ConsumercvbEv:
   46|     33|        {
   47|       |            // Special case because memcpy causes UB for bool (which can't be
   48|       |            // anything other than 0 or 1).
   49|     33|            const bool val = fd.data_[0];
   50|     33|            if (FUZZ_DEBUG) {
  ------------------
  |  Branch (50:17): [Folded - Ignored]
  ------------------
   51|      0|                std::printf("consume@%zu(%s): bool %s\n", fd.pos(), func, val ? "true" : "false");
  ------------------
  |  Branch (51:75): [True: 0, False: 0]
  ------------------
   52|      0|            }
   53|     33|            ++fd.data_;
   54|     33|            --fd.size_;
   55|     33|            return val;
   56|     33|        }
DHT_fuzz_test.cc:_Z18fuzz_select_targetIJXadL_ZN12_GLOBAL__N_117TestHandleRequestER9Fuzz_DataEEXadL_ZNS0_15TestUnpackNodesES2_EEEEvPKhm:
  183|     41|{
  184|     41|    Fuzz_Data input{data, size};
  185|       |
  186|     41|    CONSUME1_OR_RETURN(const uint8_t, selector, input);
  ------------------
  |  |  105|     41|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 0, False: 41]
  |  |  ------------------
  |  |  106|      0|        return;                               \
  |  |  107|      0|    }                                         \
  |  |  108|     41|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
  187|     41|    return Fuzz_Target_Selector<Args...>::select(selector, input);
  188|     41|}
_ZN9Fuzz_DataC2EPKhm:
   32|     41|        : data_(input_data)
   33|     41|        , base_(input_data)
   34|     41|        , size_(input_size)
   35|     41|    {
   36|     41|    }
_ZN9Fuzz_Data8ConsumercvT_IhEEv:
   60|     41|        {
   61|     41|            const uint8_t *bytes = fd.consume(func, sizeof(T));
   62|     41|            T val;
   63|     41|            std::memcpy(&val, bytes, sizeof(T));
   64|     41|            return val;
   65|     41|        }
DHT_fuzz_test.cc:_ZN20Fuzz_Target_SelectorIJXadL_ZN12_GLOBAL__N_117TestHandleRequestER9Fuzz_DataEEXadL_ZNS0_15TestUnpackNodesES2_EEEE6selectEhS2_:
  164|     41|    {
  165|     41|        if (selector == sizeof...(Args)) {
  ------------------
  |  Branch (165:13): [True: 6, False: 35]
  ------------------
  166|      6|            return Arg(input);
  167|      6|        }
  168|     35|        return Fuzz_Target_Selector<Args...>::select(selector, input);
  169|     41|    }
DHT_fuzz_test.cc:_ZN20Fuzz_Target_SelectorIJXadL_ZN12_GLOBAL__N_115TestUnpackNodesER9Fuzz_DataEEEE6selectEhS2_:
  164|     35|    {
  165|     35|        if (selector == sizeof...(Args)) {
  ------------------
  |  Branch (165:13): [True: 34, False: 1]
  ------------------
  166|     34|            return Arg(input);
  167|     34|        }
  168|      1|        return Fuzz_Target_Selector<Args...>::select(selector, input);
  169|     35|    }
_ZN20Fuzz_Target_SelectorIJEE6selectEhR9Fuzz_Data:
  175|      1|    {
  176|       |        // The selector selected no function, so we do nothing and rely on the
  177|       |        // fuzzer to come up with a better selector.
  178|      1|    }

cmp_init:
  837|     34|                                         cmp_writer *write) {
  838|     34|  ctx->error = CMP_ERROR_NONE;
  839|     34|  ctx->buf = buf;
  840|     34|  ctx->read = read;
  841|     34|  ctx->skip = skip;
  842|     34|  ctx->write = write;
  843|     34|}

handle_request:
  316|      4|{
  317|      4|    if (self_public_key == nullptr || public_key == nullptr || data == nullptr || request_id == nullptr
  ------------------
  |  |   63|      8|#define nullptr NULL
  ------------------
                  if (self_public_key == nullptr || public_key == nullptr || data == nullptr || request_id == nullptr
  ------------------
  |  |   63|      8|#define nullptr NULL
  ------------------
                  if (self_public_key == nullptr || public_key == nullptr || data == nullptr || request_id == nullptr
  ------------------
  |  |   63|      8|#define nullptr NULL
  ------------------
                  if (self_public_key == nullptr || public_key == nullptr || data == nullptr || request_id == nullptr
  ------------------
  |  |   63|      8|#define nullptr NULL
  ------------------
  |  Branch (317:9): [True: 0, False: 4]
  |  Branch (317:39): [True: 0, False: 4]
  |  Branch (317:64): [True: 0, False: 4]
  |  Branch (317:83): [True: 0, False: 4]
  ------------------
  318|      4|            || packet == nullptr) {
  ------------------
  |  |   63|      4|#define nullptr NULL
  ------------------
  |  Branch (318:16): [True: 0, False: 4]
  ------------------
  319|      0|        return -1;
  320|      0|    }
  321|       |
  322|      4|    if (packet_length <= CRYPTO_SIZE + CRYPTO_MAC_SIZE || packet_length > MAX_CRYPTO_REQUEST_SIZE) {
  ------------------
  |  |  279|      4|#define CRYPTO_SIZE (1 + CRYPTO_PUBLIC_KEY_SIZE * 2 + CRYPTO_NONCE_SIZE)
  |  |  ------------------
  |  |  |  |   43|      4|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  |  |               #define CRYPTO_SIZE (1 + CRYPTO_PUBLIC_KEY_SIZE * 2 + CRYPTO_NONCE_SIZE)
  |  |  ------------------
  |  |  |  |   69|      4|#define CRYPTO_NONCE_SIZE              24
  |  |  ------------------
  ------------------
                  if (packet_length <= CRYPTO_SIZE + CRYPTO_MAC_SIZE || packet_length > MAX_CRYPTO_REQUEST_SIZE) {
  ------------------
  |  |   64|      8|#define CRYPTO_MAC_SIZE                16
  ------------------
                  if (packet_length <= CRYPTO_SIZE + CRYPTO_MAC_SIZE || packet_length > MAX_CRYPTO_REQUEST_SIZE) {
  ------------------
  |  |   64|      3|#define MAX_CRYPTO_REQUEST_SIZE 1024
  ------------------
  |  Branch (322:9): [True: 1, False: 3]
  |  Branch (322:59): [True: 1, False: 2]
  ------------------
  323|      2|        return -1;
  324|      2|    }
  325|       |
  326|      2|    if (!pk_equal(packet + 1, self_public_key)) {
  ------------------
  |  Branch (326:9): [True: 1, False: 1]
  ------------------
  327|      1|        return -1;
  328|      1|    }
  329|       |
  330|      1|    memcpy(public_key, packet + 1 + CRYPTO_PUBLIC_KEY_SIZE, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      1|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
                  memcpy(public_key, packet + 1 + CRYPTO_PUBLIC_KEY_SIZE, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      1|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  331|      1|    const uint8_t *const nonce = packet + 1 + CRYPTO_PUBLIC_KEY_SIZE * 2;
  ------------------
  |  |   43|      1|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  332|      1|    uint8_t temp[MAX_CRYPTO_REQUEST_SIZE];
  333|      1|    int32_t len1 = decrypt_data(mem, public_key, self_secret_key, nonce,
  334|      1|                                packet + CRYPTO_SIZE, packet_length - CRYPTO_SIZE, temp);
  ------------------
  |  |  279|      1|#define CRYPTO_SIZE (1 + CRYPTO_PUBLIC_KEY_SIZE * 2 + CRYPTO_NONCE_SIZE)
  |  |  ------------------
  |  |  |  |   43|      1|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  |  |               #define CRYPTO_SIZE (1 + CRYPTO_PUBLIC_KEY_SIZE * 2 + CRYPTO_NONCE_SIZE)
  |  |  ------------------
  |  |  |  |   69|      1|#define CRYPTO_NONCE_SIZE              24
  |  |  ------------------
  ------------------
                                              packet + CRYPTO_SIZE, packet_length - CRYPTO_SIZE, temp);
  ------------------
  |  |  279|      1|#define CRYPTO_SIZE (1 + CRYPTO_PUBLIC_KEY_SIZE * 2 + CRYPTO_NONCE_SIZE)
  |  |  ------------------
  |  |  |  |   43|      1|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  |  |               #define CRYPTO_SIZE (1 + CRYPTO_PUBLIC_KEY_SIZE * 2 + CRYPTO_NONCE_SIZE)
  |  |  ------------------
  |  |  |  |   69|      1|#define CRYPTO_NONCE_SIZE              24
  |  |  ------------------
  ------------------
  335|       |
  336|      1|    if (len1 == -1 || len1 == 0) {
  ------------------
  |  Branch (336:9): [True: 0, False: 1]
  |  Branch (336:23): [True: 0, False: 1]
  ------------------
  337|      0|        crypto_memzero(temp, MAX_CRYPTO_REQUEST_SIZE);
  ------------------
  |  |   64|      0|#define MAX_CRYPTO_REQUEST_SIZE 1024
  ------------------
  338|      0|        return -1;
  339|      0|    }
  340|       |
  341|      1|    assert(len1 == packet_length - CRYPTO_SIZE - CRYPTO_MAC_SIZE);
  342|       |    // Because coverity can't figure out this equation:
  343|      1|    assert(len1 <= MAX_CRYPTO_REQUEST_SIZE - CRYPTO_SIZE - CRYPTO_MAC_SIZE);
  344|       |
  345|      1|    request_id[0] = temp[0];
  346|      1|    --len1;
  347|      1|    memcpy(data, temp + 1, len1);
  348|      1|    crypto_memzero(temp, MAX_CRYPTO_REQUEST_SIZE);
  ------------------
  |  |   64|      1|#define MAX_CRYPTO_REQUEST_SIZE 1024
  ------------------
  349|      1|    return len1;
  350|      1|}
pack_nodes:
  413|     17|{
  414|     17|    const uint32_t size = bin_pack_obj_array_b_size(bin_pack_node_handler, nodes, number, logger);
  415|     17|    if (!bin_pack_obj_array_b(bin_pack_node_handler, nodes, number, logger, data, length)) {
  ------------------
  |  Branch (415:9): [True: 0, False: 17]
  ------------------
  416|      0|        return -1;
  417|      0|    }
  418|     17|    return size;
  419|     17|}
unpack_nodes:
  423|     50|{
  424|     50|    uint32_t num = 0;
  425|     50|    uint32_t len_processed = 0;
  426|       |
  427|    138|    while (num < max_num_nodes && len_processed < length) {
  ------------------
  |  Branch (427:12): [True: 136, False: 2]
  |  Branch (427:35): [True: 116, False: 20]
  ------------------
  428|    116|        const int ipp_size = unpack_ip_port(&nodes[num].ip_port, data + len_processed, length - len_processed, tcp_enabled);
  429|       |
  430|    116|        if (ipp_size == -1) {
  ------------------
  |  Branch (430:13): [True: 20, False: 96]
  ------------------
  431|     20|            break;
  432|     20|        }
  433|       |
  434|     96|        len_processed += ipp_size;
  435|       |
  436|     96|        if (len_processed + CRYPTO_PUBLIC_KEY_SIZE > length) {
  ------------------
  |  |   43|     96|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  |  Branch (436:13): [True: 8, False: 88]
  ------------------
  437|      8|            return -1;
  438|      8|        }
  439|       |
  440|     88|        memcpy(nodes[num].public_key, data + len_processed, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|     88|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  441|     88|        len_processed += CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|     88|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  442|     88|        ++num;
  443|       |
  444|     88|#ifndef NDEBUG
  445|     88|        const uint32_t increment = ipp_size + CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|     88|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  446|     88|        assert(increment == PACKED_NODE_SIZE_IP4 || increment == PACKED_NODE_SIZE_IP6);
  447|     88|#endif /* NDEBUG */
  448|     88|    }
  449|       |
  450|     42|    if (num == 0 && max_num_nodes > 0 && length > 0) {
  ------------------
  |  Branch (450:9): [True: 8, False: 34]
  |  Branch (450:21): [True: 8, False: 0]
  |  Branch (450:42): [True: 7, False: 1]
  ------------------
  451|      7|        return -1;
  452|      7|    }
  453|       |
  454|     35|    if (processed_data_len != nullptr) {
  ------------------
  |  |   63|     35|#define nullptr NULL
  ------------------
  |  Branch (454:9): [True: 35, False: 0]
  ------------------
  455|     35|        *processed_data_len = len_processed;
  456|     35|    }
  457|       |
  458|     35|    return num;
  459|     42|}
DHT.c:bin_pack_node_handler:
  406|     76|{
  407|     76|    const Node_format *nodes = (const Node_format *)arr;
  408|     76|    return bin_pack_ip_port(bp, logger, &nodes[index].ip_port)
  ------------------
  |  Branch (408:12): [True: 76, False: 0]
  ------------------
  409|     76|           && bin_pack_bin_b(bp, nodes[index].public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|     76|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  |  Branch (409:15): [True: 76, False: 0]
  ------------------
  410|     76|}

LLVMFuzzerTestOneInput:
   65|     41|{
   66|     41|    fuzz_select_target<TestHandleRequest, TestUnpackNodes>(data, size);
   67|     41|    return 0;
   68|     41|}
DHT_fuzz_test.cc:_ZN12_GLOBAL__N_117TestHandleRequestER9Fuzz_Data:
   14|      6|{
   15|      6|    const Test_Memory mem;
   16|       |
   17|      6|    CONSUME_OR_RETURN(const uint8_t *self_public_key, input, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |  139|      6|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 1, False: 5]
  |  |  ------------------
  |  |  140|      1|        return;                              \
  |  |  141|      1|    }                                        \
  |  |  142|      6|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   18|      5|    CONSUME_OR_RETURN(const uint8_t *self_secret_key, input, CRYPTO_SECRET_KEY_SIZE);
  ------------------
  |  |  139|      5|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 1, False: 4]
  |  |  ------------------
  |  |  140|      1|        return;                              \
  |  |  141|      1|    }                                        \
  |  |  142|      5|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   19|       |
   20|      4|    uint8_t public_key[CRYPTO_PUBLIC_KEY_SIZE];
   21|      4|    uint8_t request[MAX_CRYPTO_REQUEST_SIZE];
   22|      4|    uint8_t request_id;
   23|      4|    handle_request(mem, self_public_key, self_secret_key, public_key, request, &request_id,
   24|      4|        input.data(), input.size());
   25|      4|}
DHT_fuzz_test.cc:_ZN12_GLOBAL__N_115TestUnpackNodesER9Fuzz_Data:
   28|     34|{
   29|     34|    CONSUME1_OR_RETURN(const bool, tcp_enabled, input);
  ------------------
  |  |  105|     34|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 1, False: 33]
  |  |  ------------------
  |  |  106|      1|        return;                               \
  |  |  107|      1|    }                                         \
  |  |  108|     34|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   30|       |
   31|     33|    const uint16_t node_count = 5;
   32|     33|    Node_format nodes[node_count];
   33|     33|    uint16_t processed_data_len;
   34|     33|    const int packed_count = unpack_nodes(
   35|     33|        nodes, node_count, &processed_data_len, input.data(), input.size(), tcp_enabled);
   36|     33|    if (packed_count > 0) {
  ------------------
  |  Branch (36:9): [True: 17, False: 16]
  ------------------
   37|     17|        const Memory *mem = os_memory();
   38|     17|        Logger *logger = logger_new(mem);
   39|     17|        std::vector<uint8_t> packed(packed_count * PACKED_NODE_SIZE_IP6);
  ------------------
  |  |   72|     17|#define PACKED_NODE_SIZE_IP6 (1 + SIZE_IP6 + sizeof(uint16_t) + CRYPTO_PUBLIC_KEY_SIZE)
  |  |  ------------------
  |  |  |  |  186|     17|#define SIZE_IP6 16
  |  |  ------------------
  |  |               #define PACKED_NODE_SIZE_IP6 (1 + SIZE_IP6 + sizeof(uint16_t) + CRYPTO_PUBLIC_KEY_SIZE)
  |  |  ------------------
  |  |  |  |   43|     17|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
   40|     17|        const int packed_size
   41|     17|            = pack_nodes(logger, packed.data(), packed.size(), nodes, packed_count);
   42|     17|        LOGGER_ASSERT(logger, packed_size == processed_data_len,
  ------------------
  |  |   89|     17|    do {                                           \
  |  |   90|     17|        if (!(cond)) {                             \
  |  |  ------------------
  |  |  |  Branch (90:13): [True: 0, False: 17]
  |  |  ------------------
  |  |   91|      0|            LOGGER_ERROR(log, "Assertion failed"); \
  |  |  ------------------
  |  |  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   92|      0|            LOGGER_FATAL(log, __VA_ARGS__);        \
  |  |  ------------------
  |  |  |  |   83|      0|    do {                                \
  |  |  |  |   84|      0|        LOGGER_ERROR(log, __VA_ARGS__); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   85|      0|        logger_abort();                 \
  |  |  |  |   86|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (86:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   93|      0|        }                                          \
  |  |   94|     17|    } while (0)
  |  |  ------------------
  |  |  |  Branch (94:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
   43|     17|            "packed size (%d) != unpacked size (%d)", packed_size, processed_data_len);
   44|     17|        logger_kill(logger);
   45|       |
   46|       |        // Check that packed nodes can be unpacked again and result in the
   47|       |        // original unpacked nodes.
   48|     17|        Node_format nodes2[node_count];
   49|     17|        uint16_t processed_data_len2;
   50|     17|        const int packed_count2 = unpack_nodes(
   51|     17|            nodes2, node_count, &processed_data_len2, packed.data(), packed.size(), tcp_enabled);
   52|     17|        (void)packed_count2;
   53|       |#if 0
   54|       |        assert(processed_data_len2 == processed_data_len);
   55|       |        assert(packed_count2 == packed_count);
   56|       |#endif
   57|     17|        assert(memcmp(nodes, nodes2, sizeof(Node_format) * packed_count) == 0);
   58|     17|    }
   59|     33|}

bin_pack_obj_array_b_size:
   81|     17|{
   82|     17|    Bin_Pack bp;
   83|     17|    bin_pack_init(&bp, nullptr, 0);
  ------------------
  |  |   63|     17|#define nullptr NULL
  ------------------
   84|     17|    if (arr == nullptr) {
  ------------------
  |  |   63|     17|#define nullptr NULL
  ------------------
  |  Branch (84:9): [True: 0, False: 17]
  ------------------
   85|      0|        assert(arr_size == 0);
   86|      0|    }
   87|     55|    for (uint32_t i = 0; i < arr_size; ++i) {
  ------------------
  |  Branch (87:26): [True: 38, False: 17]
  ------------------
   88|     38|        if (!callback(arr, i, logger, &bp)) {
  ------------------
  |  Branch (88:13): [True: 0, False: 38]
  ------------------
   89|      0|            return UINT32_MAX;
   90|      0|        }
   91|     38|    }
   92|     17|    return bp.bytes_pos;
   93|     17|}
bin_pack_obj_array_b:
   96|     17|{
   97|     17|    Bin_Pack bp;
   98|     17|    bin_pack_init(&bp, buf, buf_size);
   99|     17|    if (arr == nullptr) {
  ------------------
  |  |   63|     17|#define nullptr NULL
  ------------------
  |  Branch (99:9): [True: 0, False: 17]
  ------------------
  100|      0|        assert(arr_size == 0);
  101|      0|    }
  102|     55|    for (uint32_t i = 0; i < arr_size; ++i) {
  ------------------
  |  Branch (102:26): [True: 38, False: 17]
  ------------------
  103|     38|        if (!callback(arr, i, logger, &bp)) {
  ------------------
  |  Branch (103:13): [True: 0, False: 38]
  ------------------
  104|      0|            return false;
  105|      0|        }
  106|     38|    }
  107|     17|    return true;
  108|     17|}
bin_pack_u08_b:
  176|    228|{
  177|    228|    return bp->ctx.write(&bp->ctx, &val, 1) == 1;
  178|    228|}
bin_pack_u16_b:
  181|     76|{
  182|     76|    return bin_pack_u08_b(bp, (val >> 8) & 0xff)
  ------------------
  |  Branch (182:12): [True: 76, False: 0]
  ------------------
  183|     76|           && bin_pack_u08_b(bp, val & 0xff);
  ------------------
  |  Branch (183:15): [True: 76, False: 0]
  ------------------
  184|     76|}
bin_pack_bin_b:
  199|    152|{
  200|    152|    return bp->ctx.write(&bp->ctx, data, length) == length;
  201|    152|}
bin_pack.c:bin_pack_init:
   56|     34|{
   57|     34|    bp->bytes = buf;
   58|     34|    bp->bytes_size = buf_size;
   59|     34|    bp->bytes_pos = 0;
   60|     34|    cmp_init(&bp->ctx, bp, null_reader, null_skipper, buf_writer);
   61|     34|}
bin_pack.c:buf_writer:
   35|    380|{
   36|    380|    const uint8_t *bytes = (const uint8_t *)data;
   37|    380|    Bin_Pack *bp = (Bin_Pack *)ctx->buf;
   38|    380|    assert(bp != nullptr);
   39|    380|    const uint32_t new_pos = bp->bytes_pos + count;
   40|    380|    if (new_pos < bp->bytes_pos) {
  ------------------
  |  Branch (40:9): [True: 0, False: 380]
  ------------------
   41|       |        // 32 bit overflow.
   42|      0|        return 0;
   43|      0|    }
   44|    380|    if (bp->bytes != nullptr) {
  ------------------
  |  |   63|    380|#define nullptr NULL
  ------------------
  |  Branch (44:9): [True: 190, False: 190]
  ------------------
   45|    190|        if (new_pos > bp->bytes_size) {
  ------------------
  |  Branch (45:13): [True: 0, False: 190]
  ------------------
   46|       |            // Buffer too small.
   47|      0|            return 0;
   48|      0|        }
   49|    190|        memcpy(&bp->bytes[bp->bytes_pos], bytes, count);
   50|    190|    }
   51|    380|    bp->bytes_pos += count;
   52|    380|    return count;
   53|    380|}

crypto_memzero:
  114|      2|{
  115|      2|#if defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  116|      2|    memzero((uint8_t *)data, length);
  117|       |#else
  118|       |    sodium_memzero(data, length);
  119|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  120|      2|}
pk_equal:
  143|      2|{
  144|      2|#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
  145|       |    // Hope that this is better for the fuzzer
  146|      2|    return memcmp(pk1, pk2, CRYPTO_PUBLIC_KEY_SIZE) == 0;
  ------------------
  |  |   43|      2|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  147|       |#else
  148|       |    return crypto_verify_32(pk1, pk2) == 0;
  149|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  150|      2|}
encrypt_precompute:
  233|      1|{
  234|      1|#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
  235|      1|    memcpy(shared_key, public_key, CRYPTO_SHARED_KEY_SIZE);
  ------------------
  |  |   53|      1|#define CRYPTO_SHARED_KEY_SIZE         32
  ------------------
  236|      1|    return 0;
  237|       |#else
  238|       |    return crypto_box_beforenm(shared_key, public_key, secret_key);
  239|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  240|      1|}
decrypt_data_symmetric:
  300|      1|{
  301|      1|    if (length <= crypto_box_BOXZEROBYTES || shared_key == nullptr || nonce == nullptr || encrypted == nullptr
  ------------------
  |  |   63|      2|#define nullptr NULL
  ------------------
                  if (length <= crypto_box_BOXZEROBYTES || shared_key == nullptr || nonce == nullptr || encrypted == nullptr
  ------------------
  |  |   63|      2|#define nullptr NULL
  ------------------
                  if (length <= crypto_box_BOXZEROBYTES || shared_key == nullptr || nonce == nullptr || encrypted == nullptr
  ------------------
  |  |   63|      2|#define nullptr NULL
  ------------------
  |  Branch (301:9): [True: 0, False: 1]
  |  Branch (301:46): [True: 0, False: 1]
  |  Branch (301:71): [True: 0, False: 1]
  |  Branch (301:91): [True: 0, False: 1]
  ------------------
  302|      1|            || plain == nullptr) {
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  |  Branch (302:16): [True: 0, False: 1]
  ------------------
  303|      0|        return -1;
  304|      0|    }
  305|       |
  306|      1|#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
  307|      1|    assert(length >= crypto_box_MACBYTES);
  308|      1|    memcpy(plain, encrypted, length - crypto_box_MACBYTES);  // Don't encrypt anything
  309|       |#else
  310|       |
  311|       |    const size_t size_temp_plain = length + crypto_box_ZEROBYTES;
  312|       |    const size_t size_temp_encrypted = length + crypto_box_BOXZEROBYTES;
  313|       |
  314|       |    uint8_t *temp_plain = crypto_malloc(mem, size_temp_plain);
  315|       |    uint8_t *temp_encrypted = crypto_malloc(mem, size_temp_encrypted);
  316|       |
  317|       |    if (temp_plain == nullptr || temp_encrypted == nullptr) {
  318|       |        crypto_free(mem, temp_plain, size_temp_plain);
  319|       |        crypto_free(mem, temp_encrypted, size_temp_encrypted);
  320|       |        return -1;
  321|       |    }
  322|       |
  323|       |    // crypto_box_open_afternm requires the entire range of the output array be
  324|       |    // initialised with something. It doesn't matter what it's initialised with,
  325|       |    // so we'll pick 0x00.
  326|       |    memzero(temp_plain, size_temp_plain);
  327|       |
  328|       |    memzero(temp_encrypted, crypto_box_BOXZEROBYTES);
  329|       |    // Pad the message with 16 0 bytes.
  330|       |    memcpy(temp_encrypted + crypto_box_BOXZEROBYTES, encrypted, length);
  331|       |
  332|       |    if (crypto_box_open_afternm(temp_plain, temp_encrypted, length + crypto_box_BOXZEROBYTES, nonce,
  333|       |                                shared_key) != 0) {
  334|       |        crypto_free(mem, temp_plain, size_temp_plain);
  335|       |        crypto_free(mem, temp_encrypted, size_temp_encrypted);
  336|       |        return -1;
  337|       |    }
  338|       |
  339|       |    memcpy(plain, temp_plain + crypto_box_ZEROBYTES, length - crypto_box_MACBYTES);
  340|       |
  341|       |    crypto_free(mem, temp_plain, size_temp_plain);
  342|       |    crypto_free(mem, temp_encrypted, size_temp_encrypted);
  343|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  344|      1|    assert(length > crypto_box_MACBYTES);
  345|      1|    assert(length < INT32_MAX);
  346|      1|    return (int32_t)(length - crypto_box_MACBYTES);
  347|      1|}
decrypt_data:
  371|      1|{
  372|      1|    if (public_key == nullptr || secret_key == nullptr) {
  ------------------
  |  |   63|      2|#define nullptr NULL
  ------------------
                  if (public_key == nullptr || secret_key == nullptr) {
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  |  Branch (372:9): [True: 0, False: 1]
  |  Branch (372:34): [True: 0, False: 1]
  ------------------
  373|      0|        return -1;
  374|      0|    }
  375|       |
  376|      1|    uint8_t k[crypto_box_BEFORENMBYTES];
  377|      1|    encrypt_precompute(public_key, secret_key, k);
  378|      1|    const int ret = decrypt_data_symmetric(mem, k, nonce, encrypted, length, plain);
  379|      1|    crypto_memzero(k, sizeof(k));
  380|      1|    return ret;
  381|      1|}

logger_new:
   33|     17|{
   34|     17|    Logger *log = (Logger *)mem_alloc(mem, sizeof(Logger));
   35|       |
   36|     17|    if (log == nullptr) {
  ------------------
  |  |   63|     17|#define nullptr NULL
  ------------------
  |  Branch (36:9): [True: 0, False: 17]
  ------------------
   37|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   38|      0|    }
   39|       |
   40|     17|    log->mem = mem;
   41|       |
   42|     17|    return log;
   43|     17|}
logger_kill:
   46|     17|{
   47|     17|    if (log == nullptr) {
  ------------------
  |  |   63|     17|#define nullptr NULL
  ------------------
  |  Branch (47:9): [True: 0, False: 17]
  ------------------
   48|      0|        return;
   49|      0|    }
   50|       |
   51|     17|    mem_delete(log->mem, log);
   52|     17|}

os_memory:
   42|     23|{
   43|     23|    return &os_memory_obj;
   44|     23|}
mem_alloc:
   59|     17|{
   60|     17|    void *const ptr = mem->funcs->calloc(mem->obj, 1, size);
   61|     17|    return ptr;
   62|     17|}
mem_delete:
   89|     17|{
   90|     17|    mem->funcs->free(mem->obj, ptr);
   91|     17|}
mem.c:sys_calloc:
   19|     17|{
   20|     17|    return calloc(nmemb, size);
   21|     17|}
mem.c:sys_free:
   29|     17|{
   30|     17|    free(ptr);
   31|     17|}

_ZN12Memory_ClassD2Ev:
   15|      6|Memory_Class::~Memory_Class() = default;

_ZN12Memory_ClassC2Ev:
   15|      6|        : self{&vtable, this}
   16|      6|    {
   17|      6|    }
_ZNK12Memory_ClasscvPK6MemoryEv:
   11|      4|    operator Memory const *() const { return &self; }

net_family_ipv4:
  384|     33|{
  385|     33|    return family_ipv4;
  386|     33|}
net_family_ipv6:
  389|     23|{
  390|     23|    return family_ipv6;
  391|     23|}
net_family_tcp_ipv4:
  404|     29|{
  405|     29|    return family_tcp_ipv4;
  406|     29|}
net_family_tcp_ipv6:
  409|     18|{
  410|     18|    return family_tcp_ipv6;
  411|     18|}
net_family_is_ipv4:
  429|     76|{
  430|     76|    return family.value == family_ipv4.value;
  431|     76|}
net_family_is_ipv6:
  434|     30|{
  435|     30|    return family.value == family_ipv6.value;
  436|     30|}
net_family_is_tcp_ipv4:
  449|     48|{
  450|     48|    return family.value == family_tcp_ipv4.value;
  451|     48|}
net_family_is_tcp_ipv6:
  454|     14|{
  455|     14|    return family.value == family_tcp_ipv6.value;
  456|     14|}
ipport_reset:
 1598|    103|{
 1599|    103|    if (ipport == nullptr) {
  ------------------
  |  |   63|    103|#define nullptr NULL
  ------------------
  |  Branch (1599:9): [True: 0, False: 103]
  ------------------
 1600|      0|        return;
 1601|      0|    }
 1602|       |
 1603|    103|    *ipport = empty_ip_port;
 1604|    103|}
bin_pack_ip_port:
 1691|     76|{
 1692|     76|    bool is_ipv4;
 1693|     76|    uint8_t family;
 1694|       |
 1695|     76|    if (net_family_is_ipv4(ip_port->ip.family)) {
  ------------------
  |  Branch (1695:9): [True: 28, False: 48]
  ------------------
 1696|       |        // TODO(irungentoo): use functions to convert endianness
 1697|     28|        is_ipv4 = true;
 1698|     28|        family = TOX_AF_INET;
  ------------------
  |  |  168|     28|#define TOX_AF_INET 2
  ------------------
 1699|     48|    } else if (net_family_is_tcp_ipv4(ip_port->ip.family)) {
  ------------------
  |  Branch (1699:16): [True: 18, False: 30]
  ------------------
 1700|     18|        is_ipv4 = true;
 1701|     18|        family = TOX_TCP_INET;
  ------------------
  |  |  170|     18|#define TOX_TCP_INET 130
  ------------------
 1702|     30|    } else if (net_family_is_ipv6(ip_port->ip.family)) {
  ------------------
  |  Branch (1702:16): [True: 16, False: 14]
  ------------------
 1703|     16|        is_ipv4 = false;
 1704|     16|        family = TOX_AF_INET6;
  ------------------
  |  |  169|     16|#define TOX_AF_INET6 10
  ------------------
 1705|     16|    } else if (net_family_is_tcp_ipv6(ip_port->ip.family)) {
  ------------------
  |  Branch (1705:16): [True: 14, False: 0]
  ------------------
 1706|     14|        is_ipv4 = false;
 1707|     14|        family = TOX_TCP_INET6;
  ------------------
  |  |  171|     14|#define TOX_TCP_INET6 138
  ------------------
 1708|     14|    } else {
 1709|      0|        Ip_Ntoa ip_str;
 1710|       |        // TODO(iphydf): Find out why we're trying to pack invalid IPs, stop
 1711|       |        // doing that, and turn this into an error.
 1712|      0|        LOGGER_TRACE(logger, "cannot pack invalid IP: %s", net_ip_ntoa(&ip_port->ip, &ip_str));
  ------------------
  |  |   76|      0|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1713|      0|        return false;
 1714|      0|    }
 1715|       |
 1716|     76|    return bin_pack_u08_b(bp, family)
  ------------------
  |  Branch (1716:12): [True: 76, False: 0]
  ------------------
 1717|     76|           && bin_pack_ip(bp, &ip_port->ip, is_ipv4)
  ------------------
  |  Branch (1717:15): [True: 76, False: 0]
  ------------------
 1718|     76|           && bin_pack_u16_b(bp, net_ntohs(ip_port->port));
  ------------------
  |  Branch (1718:15): [True: 76, False: 0]
  ------------------
 1719|     76|}
unpack_ip_port:
 1744|    116|{
 1745|    116|    if (data == nullptr) {
  ------------------
  |  |   63|    116|#define nullptr NULL
  ------------------
  |  Branch (1745:9): [True: 0, False: 116]
  ------------------
 1746|      0|        return -1;
 1747|      0|    }
 1748|       |
 1749|    116|    bool is_ipv4;
 1750|    116|    Family host_family;
 1751|       |
 1752|    116|    if (data[0] == TOX_AF_INET) {
  ------------------
  |  |  168|    116|#define TOX_AF_INET 2
  ------------------
  |  Branch (1752:9): [True: 33, False: 83]
  ------------------
 1753|     33|        is_ipv4 = true;
 1754|     33|        host_family = net_family_ipv4();
 1755|     83|    } else if (data[0] == TOX_TCP_INET) {
  ------------------
  |  |  170|     83|#define TOX_TCP_INET 130
  ------------------
  |  Branch (1755:16): [True: 30, False: 53]
  ------------------
 1756|     30|        if (!tcp_enabled) {
  ------------------
  |  Branch (1756:13): [True: 1, False: 29]
  ------------------
 1757|      1|            return -1;
 1758|      1|        }
 1759|       |
 1760|     29|        is_ipv4 = true;
 1761|     29|        host_family = net_family_tcp_ipv4();
 1762|     53|    } else if (data[0] == TOX_AF_INET6) {
  ------------------
  |  |  169|     53|#define TOX_AF_INET6 10
  ------------------
  |  Branch (1762:16): [True: 23, False: 30]
  ------------------
 1763|     23|        is_ipv4 = false;
 1764|     23|        host_family = net_family_ipv6();
 1765|     30|    } else if (data[0] == TOX_TCP_INET6) {
  ------------------
  |  |  171|     30|#define TOX_TCP_INET6 138
  ------------------
  |  Branch (1765:16): [True: 19, False: 11]
  ------------------
 1766|     19|        if (!tcp_enabled) {
  ------------------
  |  Branch (1766:13): [True: 1, False: 18]
  ------------------
 1767|      1|            return -1;
 1768|      1|        }
 1769|       |
 1770|     18|        is_ipv4 = false;
 1771|     18|        host_family = net_family_tcp_ipv6();
 1772|     18|    } else {
 1773|     11|        return -1;
 1774|     11|    }
 1775|       |
 1776|    103|    ipport_reset(ip_port);
 1777|       |
 1778|    103|    if (is_ipv4) {
  ------------------
  |  Branch (1778:9): [True: 62, False: 41]
  ------------------
 1779|     62|        const uint32_t size = 1 + SIZE_IP4 + sizeof(uint16_t);
  ------------------
  |  |  185|     62|#define SIZE_IP4 4
  ------------------
 1780|       |
 1781|     62|        if (size > length) {
  ------------------
  |  Branch (1781:13): [True: 4, False: 58]
  ------------------
 1782|      4|            return -1;
 1783|      4|        }
 1784|       |
 1785|     58|        ip_port->ip.family = host_family;
 1786|     58|        memcpy(ip_port->ip.ip.v4.uint8, data + 1, SIZE_IP4);
  ------------------
  |  |  185|     58|#define SIZE_IP4 4
  ------------------
 1787|     58|        memcpy(&ip_port->port, data + 1 + SIZE_IP4, sizeof(uint16_t));
  ------------------
  |  |  185|     58|#define SIZE_IP4 4
  ------------------
 1788|     58|        return size;
 1789|     62|    } else {
 1790|     41|        const uint32_t size = 1 + SIZE_IP6 + sizeof(uint16_t);
  ------------------
  |  |  186|     41|#define SIZE_IP6 16
  ------------------
 1791|       |
 1792|     41|        if (size > length) {
  ------------------
  |  Branch (1792:13): [True: 3, False: 38]
  ------------------
 1793|      3|            return -1;
 1794|      3|        }
 1795|       |
 1796|     38|        ip_port->ip.family = host_family;
 1797|     38|        memcpy(ip_port->ip.ip.v6.uint8, data + 1, SIZE_IP6);
  ------------------
  |  |  186|     38|#define SIZE_IP6 16
  ------------------
 1798|     38|        memcpy(&ip_port->port, data + 1 + SIZE_IP6, sizeof(uint16_t));
  ------------------
  |  |  186|     38|#define SIZE_IP6 16
  ------------------
 1799|     38|        return size;
 1800|     41|    }
 1801|    103|}
net_ntohs:
 2238|     76|{
 2239|     76|    return ntohs(hostshort);
 2240|     76|}
network.c:bin_pack_ip:
 1678|     76|{
 1679|     76|    if (is_ipv4) {
  ------------------
  |  Branch (1679:9): [True: 46, False: 30]
  ------------------
 1680|     46|        return bin_pack_bin_b(bp, ip->ip.v4.uint8, SIZE_IP4);
  ------------------
  |  |  185|     46|#define SIZE_IP4 4
  ------------------
 1681|     46|    } else {
 1682|     30|        return bin_pack_bin_b(bp, ip->ip.v6.uint8, SIZE_IP6);
  ------------------
  |  |  186|     30|#define SIZE_IP6 16
  ------------------
 1683|     30|    }
 1684|     76|}

_Z16require_not_nullIK6MemoryEPT_PKciS3_:
   73|      6|{
   74|      6|    if (ptr == nullptr) {
  ------------------
  |  Branch (74:9): [True: 0, False: 6]
  ------------------
   75|      0|        std::fprintf(stderr, "unexpected null pointer at %s:%d\n", file, line);
   76|      0|        std::exit(7);
   77|      0|    }
   78|      6|    return ptr;
   79|      6|}

memzero:
   99|      2|{
  100|      2|    if (data == nullptr || data_size == 0) {
  ------------------
  |  |   63|      4|#define nullptr NULL
  ------------------
  |  Branch (100:9): [True: 0, False: 2]
  |  Branch (100:28): [True: 0, False: 2]
  ------------------
  101|      0|        return;
  102|      0|    }
  103|       |
  104|      2|    memset(data, 0, data_size);
  105|      2|}

