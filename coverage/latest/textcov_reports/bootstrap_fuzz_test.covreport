LLVMFuzzerTestOneInput:
  189|     27|{
  190|     27|    Fuzz_Data input{data, size};
  191|     27|    TestBootstrap(input);
  192|     27|    return 0;  // Non-zero return values are reserved for future use.
  193|     27|}
bootstrap_fuzz_test.cc:_ZN12_GLOBAL__N_113TestBootstrapER9Fuzz_Data:
   99|     27|{
  100|       |    // Null system for regularly working memory allocations needed in
  101|       |    // tox_events_equal.
  102|     27|    Null_System null_sys;
  103|     27|    Fuzz_System sys(input);
  104|       |
  105|     27|    Ptr<Tox_Options> opts(tox_options_new(nullptr), tox_options_free);
  106|     27|    assert(opts != nullptr);
  107|       |
  108|     27|    tox_options_set_log_callback(opts.get(),
  109|     27|        [](Tox *tox, Tox_Log_Level level, const char *file, uint32_t line, const char *func,
  110|     27|            const char *message, void *user_data) {
  111|       |            // Log to stdout.
  112|     27|            if (Fuzz_Data::FUZZ_DEBUG) {
  113|     27|                std::printf("[tox1] %c %s:%u(%s): %s\n", tox_log_level_name(level), file, line,
  114|     27|                    func, message);
  115|     27|            }
  116|     27|        });
  117|       |
  118|     27|    CONSUME1_OR_RETURN(const uint8_t, proxy_type, input);
  ------------------
  |  |  105|     27|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 0, False: 27]
  |  |  ------------------
  |  |  106|      0|        return;                               \
  |  |  107|      0|    }                                         \
  |  |  108|     27|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
  119|     27|    if (proxy_type == 0) {
  ------------------
  |  Branch (119:9): [True: 8, False: 19]
  ------------------
  120|      8|        tox_options_set_proxy_type(opts.get(), TOX_PROXY_TYPE_NONE);
  121|     19|    } else if (proxy_type == 1) {
  ------------------
  |  Branch (121:16): [True: 9, False: 10]
  ------------------
  122|      9|        tox_options_set_proxy_type(opts.get(), TOX_PROXY_TYPE_SOCKS5);
  123|      9|        tox_options_set_proxy_host(opts.get(), "127.0.0.1");
  124|      9|        tox_options_set_proxy_port(opts.get(), 8080);
  125|     10|    } else if (proxy_type == 2) {
  ------------------
  |  Branch (125:16): [True: 5, False: 5]
  ------------------
  126|      5|        tox_options_set_proxy_type(opts.get(), TOX_PROXY_TYPE_HTTP);
  127|      5|        tox_options_set_proxy_host(opts.get(), "127.0.0.1");
  128|      5|        tox_options_set_proxy_port(opts.get(), 8080);
  129|      5|    }
  130|       |
  131|     27|    CONSUME1_OR_RETURN(const uint8_t, tcp_relay_enabled, input);
  ------------------
  |  |  105|     27|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 4, False: 23]
  |  |  ------------------
  |  |  106|      4|        return;                               \
  |  |  107|      4|    }                                         \
  |  |  108|     27|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
  132|     23|    if (tcp_relay_enabled >= (UINT8_MAX / 2)) {
  ------------------
  |  Branch (132:9): [True: 10, False: 13]
  ------------------
  133|     10|        tox_options_set_tcp_port(opts.get(), 33445);
  134|     10|    }
  135|       |
  136|     23|    Tox_Options_Testing tox_options_testing;
  137|     23|    tox_options_testing.operating_system = sys.sys.get();
  138|       |
  139|     23|    Tox_Err_New error_new;
  140|     23|    Tox_Err_New_Testing error_new_testing;
  141|     23|    Tox *tox = tox_new_testing(opts.get(), &error_new, &tox_options_testing, &error_new_testing);
  142|       |
  143|     23|    if (tox == nullptr) {
  ------------------
  |  Branch (143:9): [True: 23, False: 0]
  ------------------
  144|       |        // It might fail, because some I/O happens in tox_new, and the fuzzer
  145|       |        // might do things that make that I/O fail.
  146|     23|        return;
  147|     23|    }
  148|       |
  149|      0|    assert(error_new == TOX_ERR_NEW_OK);
  150|      0|    assert(error_new_testing == TOX_ERR_NEW_TESTING_OK);
  151|       |
  152|      0|    uint8_t pub_key[TOX_PUBLIC_KEY_SIZE] = {0};
  153|       |
  154|       |    // These may fail, but that's ok. We ignore their return values.
  155|      0|    tox_bootstrap(tox, "127.0.0.2", 33446, pub_key, nullptr);
  156|      0|    tox_add_tcp_relay(tox, "127.0.0.2", 33446, pub_key, nullptr);
  157|       |
  158|      0|    tox_events_init(tox);
  159|       |
  160|      0|    Tox_Dispatch *dispatch = tox_dispatch_new(nullptr);
  161|      0|    assert(dispatch != nullptr);
  162|      0|    setup_callbacks(dispatch);
  163|       |
  164|      0|    size_t input_size = input.size();
  165|      0|    while (!input.empty()) {
  ------------------
  |  Branch (165:12): [True: 0, False: 0]
  ------------------
  166|      0|        Tox_Err_Events_Iterate error_iterate;
  167|      0|        Tox_Events *events = tox_events_iterate(tox, true, &error_iterate);
  168|      0|        assert(tox_events_equal(null_sys.sys.get(), events, events));
  169|      0|        tox_dispatch_invoke(dispatch, events, tox);
  170|      0|        tox_events_free(events);
  171|       |        // Move the clock forward a decent amount so all the time-based checks
  172|       |        // trigger more quickly.
  173|      0|        sys.clock += 200;
  174|       |
  175|       |        // If no input was consumed, something went wrong.
  176|      0|        assert(input_size != input.size());
  177|       |
  178|      0|        input_size = input.size();
  179|      0|    }
  180|       |
  181|      0|    tox_dispatch_free(dispatch);
  182|      0|    tox_kill(tox);
  183|      0|}
bootstrap_fuzz_test.cc:_ZZN12_GLOBAL__N_113TestBootstrapER9Fuzz_DataENK3$_0clEP3Tox13Tox_Log_LevelPKcjS7_S7_Pv:
  110|     25|            const char *message, void *user_data) {
  111|       |            // Log to stdout.
  112|     25|            if (Fuzz_Data::FUZZ_DEBUG) {
  ------------------
  |  Branch (112:17): [Folded - Ignored]
  ------------------
  113|      0|                std::printf("[tox1] %c %s:%u(%s): %s\n", tox_log_level_name(level), file, line,
  114|      0|                    func, message);
  115|      0|            }
  116|     25|        });

fuzz_support.cc:_ZZN6detail15func_conversionIPFPvP11Fuzz_SystemjjEXadL_ZN3$_18__invokeES3_jjEEEcvPFT_T0_DpT1_EIS1_S1_JjjEEEvENKUlS1_DpT_E_clIJjjEEEDaS1_SG_:
   31|    253|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFPvP11Fuzz_SystemjjEXadL_ZN3$_18__invokeES3_jjEEE13static_casterIS1_EcvT_IS3_EEv:
   22|    253|        {
   23|    253|            return static_cast<To>(obj);
   24|    253|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFPvP11Fuzz_SystemS1_jEXadL_ZN3$_28__invokeES3_S1_jEEEcvPFT_T0_DpT1_EIS1_S1_JS1_jEEEvENKUlS1_DpT_E_clIJS1_jEEEDaS1_SG_:
   31|      9|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFPvP11Fuzz_SystemS1_jEXadL_ZN3$_28__invokeES3_S1_jEEE13static_casterIS1_EcvT_IS3_EEv:
   22|      9|        {
   23|      9|            return static_cast<To>(obj);
   24|      9|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFvP11Fuzz_SystemPvEXadL_ZN3$_38__invokeES2_S3_EEEcvPFT_T0_DpT1_EIvS3_JS3_EEEvENKUlS3_DpT_E_clIJS3_EEEDaS3_SG_:
   31|    284|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFvP11Fuzz_SystemPvEXadL_ZN3$_38__invokeES2_S3_EEE13static_casterIS3_EcvT_IS2_EEv:
   22|    284|        {
   23|    284|            return static_cast<To>(obj);
   24|    284|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketEXadL_ZN3$_48__invokeES2_S3_EEEcvPFT_T0_DpT1_EIiPvJS3_EEEvENKUlSF_DpT_E_clIJS3_EEEDaSF_SH_:
   31|      5|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketEXadL_ZN3$_48__invokeES2_S3_EEE13static_casterIPvEcvT_IS2_EEv:
   22|      5|        {
   23|      5|            return static_cast<To>(obj);
   24|      5|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketPK12Network_AddrEXadL_ZN3$_68__invokeES2_S3_S6_EEEcvPFT_T0_DpT1_EIiPvJS3_S6_EEEvENKUlSI_DpT_E_clIJS3_S6_EEEDaSI_SK_:
   31|      5|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketPK12Network_AddrEXadL_ZN3$_68__invokeES2_S3_S6_EEE13static_casterIPvEcvT_IS2_EEv:
   22|      5|        {
   23|      5|            return static_cast<To>(obj);
   24|      5|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPF6SocketP11Fuzz_SystemiiiEXadL_ZN4$_148__invokeES3_iiiEEEcvPFT_T0_DpT1_EIS1_PvJiiiEEEvENKUlSF_DpT_E_clIJiiiEEEDaSF_SH_:
   31|      5|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPF6SocketP11Fuzz_SystemiiiEXadL_ZN4$_148__invokeES3_iiiEEE13static_casterIPvEcvT_IS3_EEv:
   22|      5|        {
   23|      5|            return static_cast<To>(obj);
   24|      5|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketbEXadL_ZN4$_158__invokeES2_S3_bEEEcvPFT_T0_DpT1_EIiPvJS3_bEEEvENKUlSF_DpT_E_clIJS3_bEEEDaSF_SH_:
   31|      5|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketbEXadL_ZN4$_158__invokeES2_S3_bEEE13static_casterIPvEcvT_IS2_EEv:
   22|      5|        {
   23|      5|            return static_cast<To>(obj);
   24|      5|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketiiPvPmEXadL_ZN4$_168__invokeES2_S3_iiS4_S5_EEEcvPFT_T0_DpT1_EIiS4_JS3_iiS4_S5_EEEvENKUlS4_DpT_E_clIJS3_iiS4_S5_EEEDaS4_SI_:
   31|      5|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketiiPvPmEXadL_ZN4$_168__invokeES2_S3_iiS4_S5_EEE13static_casterIS4_EcvT_IS2_EEv:
   22|      5|        {
   23|      5|            return static_cast<To>(obj);
   24|      5|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketiiPKvmEXadL_ZN4$_178__invokeES2_S3_iiS5_mEEEcvPFT_T0_DpT1_EIiPvJS3_iiS5_mEEEvENKUlSH_DpT_E_clIJS3_iiS5_mEEEDaSH_SJ_:
   31|     20|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketiiPKvmEXadL_ZN4$_178__invokeES2_S3_iiS5_mEEE13static_casterIPvEcvT_IS2_EEv:
   22|     20|        {
   23|     20|            return static_cast<To>(obj);
   24|     20|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFvP11Fuzz_SystemPhmEXadL_ZN4$_188__invokeES2_S3_mEEEcvPFT_T0_DpT1_EIvPvJS3_mEEEvENKUlSF_DpT_E_clIJS3_mEEEDaSF_SH_:
   31|     37|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFvP11Fuzz_SystemPhmEXadL_ZN4$_188__invokeES2_S3_mEEE13static_casterIPvEcvT_IS2_EEv:
   22|     37|        {
   23|     37|            return static_cast<To>(obj);
   24|     37|        }

_ZN6SystemC2ENSt3__110unique_ptrI10Tox_SystemNS0_14default_deleteIS2_EEEENS1_I6MemoryNS3_IS6_EEEENS1_I7NetworkNS3_IS9_EEEENS1_I6RandomNS3_ISC_EEEE:
   38|     54|    : sys(std::move(in_sys))
   39|     54|    , mem(std::move(in_mem))
   40|     54|    , ns(std::move(in_ns))
   41|     54|    , rng(std::move(in_rng))
   42|     54|{
   43|     54|}
_ZN6SystemD2Ev:
   46|     54|System::~System() { }
_ZN11Fuzz_SystemC2ER9Fuzz_Data:
  232|     27|    : System{
  233|     27|        std::make_unique<Tox_System>(),
  234|     27|        std::make_unique<Memory>(Memory{&fuzz_memory_funcs, this}),
  235|     27|        std::make_unique<Network>(Network{&fuzz_network_funcs, this}),
  236|     27|        std::make_unique<Random>(Random{&fuzz_random_funcs, this}),
  237|     27|    }
  238|     27|    , data(input)
  239|     27|{
  240|     27|    sys->mono_time_callback = [](void *self) { return static_cast<Fuzz_System *>(self)->clock; };
  241|     27|    sys->mono_time_user_data = this;
  242|     27|    sys->mem = mem.get();
  243|     27|    sys->ns = ns.get();
  244|     27|    sys->rng = rng.get();
  245|     27|}
_ZN11Null_SystemC2Ev:
  321|     27|    : System{
  322|     27|        std::make_unique<Tox_System>(),
  323|     27|        std::make_unique<Memory>(Memory{&null_memory_funcs, this}),
  324|     27|        std::make_unique<Network>(Network{&null_network_funcs, this}),
  325|     27|        std::make_unique<Random>(Random{&null_random_funcs, this}),
  326|     27|    }
  327|     27|{
  328|     27|    sys->mono_time_callback = [](void *self) { return static_cast<Null_System *>(self)->clock; };
  329|     27|    sys->mono_time_user_data = this;
  330|     27|    sys->mem = mem.get();
  331|     27|    sys->ns = ns.get();
  332|     27|    sys->rng = rng.get();
  333|     27|}
fuzz_support.cc:_ZL12report_allocPKcS0_mPv:
   79|    248|{
   80|    248|    if (Fuzz_Data::FUZZ_DEBUG) {
  ------------------
  |  Branch (80:9): [Folded - Ignored]
  ------------------
   81|      0|        printf("%s: %s(%zu): %s\n", name, func, size, ptr == nullptr ? "false" : "true");
  ------------------
  |  Branch (81:55): [True: 0, False: 0]
  ------------------
   82|      0|    }
   83|    248|    return ptr;
   84|    248|}
fuzz_support.cc:_ZNK3$_1clEP11Fuzz_Systemjj:
  103|    253|    ![](Fuzz_System *self, uint32_t nmemb, uint32_t size) {
  104|    253|        return alloc_common<decltype(std::calloc), std::calloc>(
  105|    253|            "calloc", nmemb * size, self->data, nmemb, size);
  106|    253|    },
fuzz_support.cc:_ZL12alloc_commonIDoFPvmmETnT_XadL_Z6callocEEJjjEES0_PKcmR9Fuzz_DataDpT1_:
   88|    253|{
   89|    253|    CONSUME1_OR_RETURN_VAL(
  ------------------
  |  |  122|    253|    if (INPUT.size() < sizeof(TYPE)) {                 \
  |  |  ------------------
  |  |  |  Branch (122:9): [True: 120, False: 133]
  |  |  ------------------
  |  |  123|    120|        return VAL;                                    \
  |  |  124|    120|    }                                                  \
  |  |  125|    253|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   90|    133|        const bool, want_alloc, data, report_alloc("tox1", func, size, Func(args...)));
   91|    133|    if (!want_alloc) {
  ------------------
  |  Branch (91:9): [True: 14, False: 119]
  ------------------
   92|     14|        return nullptr;
   93|     14|    }
   94|    119|    return report_alloc("tox1", func, size, Func(args...));
   95|    133|}
fuzz_support.cc:_ZNK3$_2clEP11Fuzz_SystemPvj:
  108|      9|    ![](Fuzz_System *self, void *ptr, uint32_t size) {
  109|      9|        return alloc_common<decltype(std::realloc), std::realloc>(
  110|      9|            "realloc", size, self->data, ptr, size);
  111|      9|    },
fuzz_support.cc:_ZL12alloc_commonIDoFPvS0_mETnT_XadL_Z7reallocEEJS0_jEES0_PKcmR9Fuzz_DataDpT1_:
   88|      9|{
   89|      9|    CONSUME1_OR_RETURN_VAL(
  ------------------
  |  |  122|      9|    if (INPUT.size() < sizeof(TYPE)) {                 \
  |  |  ------------------
  |  |  |  Branch (122:9): [True: 9, False: 0]
  |  |  ------------------
  |  |  123|      9|        return VAL;                                    \
  |  |  124|      9|    }                                                  \
  |  |  125|      9|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   90|      0|        const bool, want_alloc, data, report_alloc("tox1", func, size, Func(args...)));
   91|      0|    if (!want_alloc) {
  ------------------
  |  Branch (91:9): [True: 0, False: 0]
  ------------------
   92|      0|        return nullptr;
   93|      0|    }
   94|      0|    return report_alloc("tox1", func, size, Func(args...));
   95|      0|}
fuzz_support.cc:_ZNK3$_3clEP11Fuzz_SystemPv:
  113|    284|    ![](Fuzz_System *self, void *ptr) { std::free(ptr); },
fuzz_support.cc:_ZNK3$_4clEP11Fuzz_System6Socket:
  117|      5|    /* .close = */ ![](Fuzz_System *self, Socket sock) { return 0; },
fuzz_support.cc:_ZNK3$_6clEP11Fuzz_System6SocketPK12Network_Addr:
  119|      5|    /* .bind = */ ![](Fuzz_System *self, Socket sock, const Network_Addr *addr) { return 0; },
fuzz_support.cc:_ZNK4$_14clEP11Fuzz_Systemiii:
  162|      5|    /* .socket = */ ![](Fuzz_System *self, int domain, int type, int proto) { return Socket{42}; },
fuzz_support.cc:_ZNK4$_15clEP11Fuzz_System6Socketb:
  163|      5|    /* .socket_nonblock = */ ![](Fuzz_System *self, Socket sock, bool nonblock) { return 0; },
fuzz_support.cc:_ZNK4$_16clEP11Fuzz_System6SocketiiPvPm:
  165|      5|    ![](Fuzz_System *self, Socket sock, int level, int optname, void *optval, size_t *optlen) {
  166|      5|        std::memset(optval, 0, *optlen);
  167|      5|        return 0;
  168|      5|    },
fuzz_support.cc:_ZNK4$_17clEP11Fuzz_System6SocketiiPKvm:
  170|     20|    ![](Fuzz_System *self, Socket sock, int level, int optname, const void *optval, size_t optlen) {
  171|     20|        return 0;
  172|     20|    },
fuzz_support.cc:_ZNK4$_18clEP11Fuzz_SystemPhm:
  177|     37|    ![](Fuzz_System *self, uint8_t *bytes, size_t length) {
  178|       |        // Initialize the buffer with zeros in case there's no randomness left.
  179|     37|        std::fill_n(bytes, length, 0);
  180|       |
  181|       |        // For integers, we copy bytes directly, because we want to control the
  182|       |        // exact values.
  183|     37|        if (length == sizeof(uint8_t) || length == sizeof(uint16_t) || length == sizeof(uint32_t)
  ------------------
  |  Branch (183:13): [True: 0, False: 37]
  |  Branch (183:42): [True: 0, False: 37]
  |  Branch (183:72): [True: 0, False: 37]
  ------------------
  184|     37|            || length == sizeof(uint64_t)) {
  ------------------
  |  Branch (184:16): [True: 9, False: 28]
  ------------------
  185|      9|            CONSUME_OR_RETURN(const uint8_t *data, self->data, length);
  ------------------
  |  |  139|      9|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 9, False: 0]
  |  |  ------------------
  |  |  140|      9|        return;                              \
  |  |  141|      9|    }                                        \
  |  |  142|      9|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
  186|      0|            std::copy(data, data + length, bytes);
  187|      0|            if (Fuzz_Data::FUZZ_DEBUG) {
  ------------------
  |  Branch (187:17): [Folded - Ignored]
  ------------------
  188|      0|                if (length == 1) {
  ------------------
  |  Branch (188:21): [True: 0, False: 0]
  ------------------
  189|      0|                    std::printf("rng: %d (0x%02x)\n", bytes[0], bytes[0]);
  190|      0|                } else {
  191|      0|                    std::printf("rng: %02x..%02x[%zu]\n", bytes[0], bytes[length - 1], length);
  192|      0|                }
  193|      0|            }
  194|      0|            return;
  195|      9|        }
  196|       |
  197|       |        // For nonces and keys, we fill the buffer with the same 1-2 bytes
  198|       |        // repeated. We only need these to be different enough to not often be
  199|       |        // the same.
  200|     28|        assert(length == 24 || length == 32);
  201|       |        // We must cover the case of having only 1 byte left in the input. In
  202|       |        // that case, we will use the same byte for all the bytes in the output.
  203|     28|        const size_t chunk_size = std::max(self->data.size(), static_cast<std::size_t>(2));
  204|     28|        CONSUME_OR_RETURN(const uint8_t *chunk, self->data, chunk_size);
  ------------------
  |  |  139|     28|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 26, False: 2]
  |  |  ------------------
  |  |  140|     26|        return;                              \
  |  |  141|     26|    }                                        \
  |  |  142|     28|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
  205|      2|        if (chunk_size == 2) {
  ------------------
  |  Branch (205:13): [True: 1, False: 1]
  ------------------
  206|      1|            std::fill_n(bytes, length / 2, chunk[0]);
  207|      1|            std::fill_n(bytes + length / 2, length / 2, chunk[1]);
  208|      1|        } else {
  209|      1|            std::fill_n(bytes, length, chunk[0]);
  210|      1|        }
  211|      2|        if (Fuzz_Data::FUZZ_DEBUG) {
  ------------------
  |  Branch (211:13): [Folded - Ignored]
  ------------------
  212|      0|            if (length == 1) {
  ------------------
  |  Branch (212:17): [True: 0, False: 0]
  ------------------
  213|      0|                std::printf("rng: %d (0x%02x)\n", bytes[0], bytes[0]);
  214|      0|            } else {
  215|      0|                std::printf("rng: %02x..%02x[%zu]\n", bytes[0], bytes[length - 1], length);
  216|      0|            }
  217|      0|        }
  218|      2|    },
fuzz_support.cc:_ZZN11Fuzz_SystemC1ER9Fuzz_DataENK3$_0clEPv:
  240|     20|    sys->mono_time_callback = [](void *self) { return static_cast<Fuzz_System *>(self)->clock; };

_ZN9Fuzz_DataC2EPKhm:
   32|     27|        : data_(input_data)
   33|     27|        , base_(input_data)
   34|     27|        , size_(input_size)
   35|     27|    {
   36|     27|    }
_ZNK9Fuzz_Data4sizeEv:
   69|    381|    std::size_t size() const { return size_; }
_ZN9Fuzz_Data8consume1EPKc:
   68|    183|    Consumer consume1(const char *func) { return Consumer{func, *this}; }
_ZN9Fuzz_Data8ConsumercvT_IhEEv:
   60|     50|        {
   61|     50|            const uint8_t *bytes = fd.consume(func, sizeof(T));
   62|     50|            T val;
   63|     50|            std::memcpy(&val, bytes, sizeof(T));
   64|     50|            return val;
   65|     50|        }
_ZN9Fuzz_Data7consumeEPKcm:
   75|     52|    {
   76|     52|        const uint8_t *val = data_;
   77|     52|        if (FUZZ_DEBUG) {
  ------------------
  |  Branch (77:13): [Folded - Ignored]
  ------------------
   78|      0|            if (pos() == TRACE_TRAP) {
  ------------------
  |  Branch (78:17): [True: 0, False: 0]
  ------------------
   79|      0|                __asm__("int $3");
   80|      0|            }
   81|      0|            if (count == 1) {
  ------------------
  |  Branch (81:17): [True: 0, False: 0]
  ------------------
   82|      0|                std::printf("consume@%zu(%s): %d (0x%02x)\n", pos(), func, val[0], val[0]);
   83|      0|            } else if (count != 0) {
  ------------------
  |  Branch (83:24): [True: 0, False: 0]
  ------------------
   84|      0|                std::printf("consume@%zu(%s): %02x..%02x[%zu]\n", pos(), func, val[0],
   85|      0|                    val[count - 1], count);
   86|      0|            }
   87|      0|        }
   88|     52|        data_ += count;
   89|     52|        size_ -= count;
   90|     52|        return val;
   91|     52|    }
_ZN9Fuzz_Data8ConsumercvbEv:
   46|    133|        {
   47|       |            // Special case because memcpy causes UB for bool (which can't be
   48|       |            // anything other than 0 or 1).
   49|    133|            const bool val = fd.data_[0];
   50|    133|            if (FUZZ_DEBUG) {
  ------------------
  |  Branch (50:17): [Folded - Ignored]
  ------------------
   51|      0|                std::printf("consume@%zu(%s): bool %s\n", fd.pos(), func, val ? "true" : "false");
  ------------------
  |  Branch (51:75): [True: 0, False: 0]
  ------------------
   52|      0|            }
   53|    133|            ++fd.data_;
   54|    133|            --fd.size_;
   55|    133|            return val;
   56|    133|        }

dht_get_net:
  165|     40|{
  166|     40|    return dht->net;
  167|     40|}
get_close_nodes:
  733|      9|{
  734|      9|    return get_somewhat_close_nodes(
  735|      9|               dht->cur_time, public_key, nodes_list,
  736|      9|               sa_family, dht->close_clientlist,
  737|      9|               dht->friends_list, dht->num_friends,
  738|      9|               is_lan, want_announce);
  739|      9|}
dht_addfriend:
 1571|     18|{
 1572|     18|    const uint32_t friend_num = index_of_friend_pk(dht->friends_list, dht->num_friends, public_key);
 1573|       |
 1574|     18|    if (friend_num != UINT32_MAX) { /* Is friend already in DHT? */
  ------------------
  |  Branch (1574:9): [True: 9, False: 9]
  ------------------
 1575|      9|        DHT_Friend *const dht_friend = &dht->friends_list[friend_num];
 1576|      9|        const uint32_t tmp_lock_token = dht_friend_lock(dht_friend, ip_callback, data, number);
 1577|       |
 1578|      9|        if (tmp_lock_token == 0) {
  ------------------
  |  Branch (1578:13): [True: 0, False: 9]
  ------------------
 1579|      0|            return -1;
 1580|      0|        }
 1581|       |
 1582|      9|        return 0;
 1583|      9|    }
 1584|       |
 1585|      9|    DHT_Friend *const temp = (DHT_Friend *)mem_vrealloc(dht->mem, dht->friends_list, dht->num_friends + 1, sizeof(DHT_Friend));
 1586|       |
 1587|      9|    if (temp == nullptr) {
  ------------------
  |  |   63|      9|#define nullptr NULL
  ------------------
  |  Branch (1587:9): [True: 0, False: 9]
  ------------------
 1588|      0|        return -1;
 1589|      0|    }
 1590|       |
 1591|      9|    dht->friends_list = temp;
 1592|      9|    DHT_Friend *const dht_friend = &dht->friends_list[dht->num_friends];
 1593|      9|    *dht_friend = empty_dht_friend;
 1594|      9|    memcpy(dht_friend->public_key, public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      9|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 1595|       |
 1596|      9|    dht_friend->nat.nat_ping_id = random_u64(dht->rng);
 1597|      9|    ++dht->num_friends;
 1598|       |
 1599|      9|    *lock_token = dht_friend_lock(dht_friend, ip_callback, data, number);
 1600|      9|    assert(*lock_token != 0); // Friend was newly allocated
 1601|       |
 1602|      9|    dht_friend->num_to_bootstrap = get_close_nodes(dht, dht_friend->public_key, dht_friend->to_bootstrap, net_family_unspec(),
 1603|      9|                                   true, false);
 1604|       |
 1605|      9|    return 0;
 1606|      9|}
cryptopacket_registerhandler:
 2412|     23|{
 2413|     23|    dht->cryptopackethandlers[byte].function = cb;
 2414|     23|    dht->cryptopackethandlers[byte].object = object;
 2415|     23|}
new_dht:
 2489|     14|{
 2490|     14|    if (net == nullptr) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (2490:9): [True: 0, False: 14]
  ------------------
 2491|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2492|      0|    }
 2493|       |
 2494|     14|    DHT *const dht = (DHT *)mem_alloc(mem, sizeof(DHT));
 2495|       |
 2496|     14|    if (dht == nullptr) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (2496:9): [True: 1, False: 13]
  ------------------
 2497|      1|        LOGGER_ERROR(log, "failed to allocate DHT struct (%lu bytes)", (unsigned long)sizeof(DHT));
  ------------------
  |  |   80|      1|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      1|    do {                                                                         \
  |  |  |  |   70|      1|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      2|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      1|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      1|        }                                                                        \
  |  |  |  |   73|      1|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2498|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
 2499|      1|    }
 2500|       |
 2501|     13|    dht->ns = ns;
 2502|     13|    dht->mono_time = mono_time;
 2503|     13|    dht->cur_time = mono_time_get(mono_time);
 2504|     13|    dht->log = log;
 2505|     13|    dht->net = net;
 2506|     13|    dht->rng = rng;
 2507|     13|    dht->mem = mem;
 2508|       |
 2509|     13|    dht->hole_punching_enabled = hole_punching_enabled;
 2510|     13|    dht->lan_discovery_enabled = lan_discovery_enabled;
 2511|       |
 2512|     13|    dht->ping = ping_new(mem, mono_time, rng, dht);
 2513|       |
 2514|     13|    if (dht->ping == nullptr) {
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
  |  Branch (2514:9): [True: 3, False: 10]
  ------------------
 2515|      3|        LOGGER_ERROR(log, "failed to initialise ping");
  ------------------
  |  |   80|      3|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      3|    do {                                                                         \
  |  |  |  |   70|      3|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      6|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      3|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      3|        }                                                                        \
  |  |  |  |   73|      3|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2516|      3|        kill_dht(dht);
 2517|      3|        return nullptr;
  ------------------
  |  |   63|      3|#define nullptr NULL
  ------------------
 2518|      3|    }
 2519|       |
 2520|     10|    networking_registerhandler(dht->net, NET_PACKET_NODES_REQUEST, &handle_nodes_request, dht);
 2521|     10|    networking_registerhandler(dht->net, NET_PACKET_NODES_RESPONSE, &handle_nodes_response, dht);
 2522|     10|    networking_registerhandler(dht->net, NET_PACKET_CRYPTO, &cryptopacket_handle, dht);
 2523|     10|    networking_registerhandler(dht->net, NET_PACKET_LAN_DISCOVERY, &handle_lan_discovery, dht);
 2524|     10|    cryptopacket_registerhandler(dht, CRYPTO_PACKET_NAT_PING, &handle_nat_ping, dht);
  ------------------
  |  |   68|     10|#define CRYPTO_PACKET_NAT_PING      254 // NAT ping crypto packet ID.
  ------------------
 2525|       |
 2526|     10|#ifdef CHECK_ANNOUNCE_NODE
 2527|     10|    networking_registerhandler(dht->net, NET_PACKET_DATA_SEARCH_RESPONSE, &handle_data_search_response, dht);
 2528|     10|#endif /* CHECK_ANNOUNCE_NODE */
 2529|       |
 2530|     10|    crypto_new_keypair(rng, dht->self_public_key, dht->self_secret_key);
 2531|       |
 2532|     10|    dht->shared_keys_recv = shared_key_cache_new(log, mono_time, mem, dht->self_secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   57|     10|#define KEYS_TIMEOUT 600
  ------------------
                  dht->shared_keys_recv = shared_key_cache_new(log, mono_time, mem, dht->self_secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   56|     10|#define MAX_KEYS_PER_SLOT 4
  ------------------
 2533|     10|    dht->shared_keys_sent = shared_key_cache_new(log, mono_time, mem, dht->self_secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   57|     10|#define KEYS_TIMEOUT 600
  ------------------
                  dht->shared_keys_sent = shared_key_cache_new(log, mono_time, mem, dht->self_secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   56|     10|#define MAX_KEYS_PER_SLOT 4
  ------------------
 2534|       |
 2535|     10|    if (dht->shared_keys_recv == nullptr || dht->shared_keys_sent == nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
                  if (dht->shared_keys_recv == nullptr || dht->shared_keys_sent == nullptr) {
  ------------------
  |  |   63|      9|#define nullptr NULL
  ------------------
  |  Branch (2535:9): [True: 1, False: 9]
  |  Branch (2535:45): [True: 0, False: 9]
  ------------------
 2536|      1|        LOGGER_ERROR(log, "failed to initialise shared key cache");
  ------------------
  |  |   80|      1|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      1|    do {                                                                         \
  |  |  |  |   70|      1|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      2|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      1|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      1|        }                                                                        \
  |  |  |  |   73|      1|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2537|      1|        kill_dht(dht);
 2538|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
 2539|      1|    }
 2540|       |
 2541|      9|    dht->dht_ping_array = ping_array_new(mem, DHT_PING_ARRAY_SIZE, PING_TIMEOUT);
  ------------------
  |  |   46|      9|#define DHT_PING_ARRAY_SIZE 512
  ------------------
                  dht->dht_ping_array = ping_array_new(mem, DHT_PING_ARRAY_SIZE, PING_TIMEOUT);
  ------------------
  |  |   43|      9|#define PING_TIMEOUT 5
  ------------------
 2542|       |
 2543|      9|    if (dht->dht_ping_array == nullptr) {
  ------------------
  |  |   63|      9|#define nullptr NULL
  ------------------
  |  Branch (2543:9): [True: 0, False: 9]
  ------------------
 2544|      0|        LOGGER_ERROR(log, "failed to initialise ping array");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2545|      0|        kill_dht(dht);
 2546|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2547|      0|    }
 2548|       |
 2549|     27|    for (uint32_t i = 0; i < DHT_FAKE_FRIEND_NUMBER; ++i) {
  ------------------
  |  |   61|     27|#define DHT_FAKE_FRIEND_NUMBER 2
  ------------------
  |  Branch (2549:26): [True: 18, False: 9]
  ------------------
 2550|     18|        uint8_t random_public_key_bytes[CRYPTO_PUBLIC_KEY_SIZE];
 2551|     18|        uint8_t random_secret_key_bytes[CRYPTO_SECRET_KEY_SIZE];
 2552|       |
 2553|     18|        crypto_new_keypair(rng, random_public_key_bytes, random_secret_key_bytes);
 2554|       |
 2555|     18|        uint32_t token; // We don't intend to delete these ever, but need to pass the token
 2556|     18|        if (dht_addfriend(dht, random_public_key_bytes, nullptr, nullptr, 0, &token) != 0) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
                      if (dht_addfriend(dht, random_public_key_bytes, nullptr, nullptr, 0, &token) != 0) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
  |  Branch (2556:13): [True: 0, False: 18]
  ------------------
 2557|      0|            LOGGER_ERROR(log, "failed to add initial random seed DHT friends");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2558|      0|            kill_dht(dht);
 2559|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2560|      0|        }
 2561|     18|    }
 2562|       |
 2563|      9|    if (dht->num_friends != DHT_FAKE_FRIEND_NUMBER) {
  ------------------
  |  |   61|      9|#define DHT_FAKE_FRIEND_NUMBER 2
  ------------------
  |  Branch (2563:9): [True: 9, False: 0]
  ------------------
 2564|      9|        LOGGER_ERROR(log, "the RNG provided seems to be broken: it generated the same keypair twice");
  ------------------
  |  |   80|      9|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      9|    do {                                                                         \
  |  |  |  |   70|      9|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     18|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      9|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      9|        }                                                                        \
  |  |  |  |   73|      9|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2565|      9|        kill_dht(dht);
 2566|      9|        return nullptr;
  ------------------
  |  |   63|      9|#define nullptr NULL
  ------------------
 2567|      9|    }
 2568|       |
 2569|      0|    return dht;
 2570|      9|}
kill_dht:
 2594|     13|{
 2595|     13|    if (dht == nullptr) {
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
  |  Branch (2595:9): [True: 0, False: 13]
  ------------------
 2596|      0|        return;
 2597|      0|    }
 2598|       |
 2599|     13|    networking_registerhandler(dht->net, NET_PACKET_NODES_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht->net, NET_PACKET_NODES_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
 2600|     13|    networking_registerhandler(dht->net, NET_PACKET_NODES_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht->net, NET_PACKET_NODES_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
 2601|     13|    networking_registerhandler(dht->net, NET_PACKET_CRYPTO, nullptr, nullptr);
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht->net, NET_PACKET_CRYPTO, nullptr, nullptr);
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
 2602|     13|    networking_registerhandler(dht->net, NET_PACKET_LAN_DISCOVERY, nullptr, nullptr);
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht->net, NET_PACKET_LAN_DISCOVERY, nullptr, nullptr);
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
 2603|     13|    cryptopacket_registerhandler(dht, CRYPTO_PACKET_NAT_PING, nullptr, nullptr);
  ------------------
  |  |   68|     13|#define CRYPTO_PACKET_NAT_PING      254 // NAT ping crypto packet ID.
  ------------------
                  cryptopacket_registerhandler(dht, CRYPTO_PACKET_NAT_PING, nullptr, nullptr);
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
                  cryptopacket_registerhandler(dht, CRYPTO_PACKET_NAT_PING, nullptr, nullptr);
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
 2604|       |
 2605|     13|    shared_key_cache_free(dht->shared_keys_recv);
 2606|     13|    shared_key_cache_free(dht->shared_keys_sent);
 2607|     13|    ping_array_kill(dht->dht_ping_array);
 2608|     13|    ping_kill(dht->mem, dht->ping);
 2609|     13|    mem_delete(dht->mem, dht->friends_list);
 2610|     13|    mem_delete(dht->mem, dht->loaded_nodes_list);
 2611|     13|    crypto_memzero(dht->self_secret_key, sizeof(dht->self_secret_key));
 2612|     13|    mem_delete(dht->mem, dht);
 2613|     13|}
DHT.c:get_somewhat_close_nodes:
  704|      9|{
  705|     45|    for (uint16_t i = 0; i < MAX_SENT_NODES; ++i) {
  ------------------
  |  |   40|     45|#define MAX_SENT_NODES 4
  ------------------
  |  Branch (705:26): [True: 36, False: 9]
  ------------------
  706|     36|        nodes_list[i] = empty_node_format;
  707|     36|    }
  708|       |
  709|      9|    uint32_t num_nodes = 0;
  710|      9|    get_close_nodes_inner(
  711|      9|        cur_time, public_key,
  712|      9|        nodes_list, &num_nodes,
  713|      9|        sa_family, close_clientlist, LCLIENT_LIST,
  ------------------
  |  |   35|      9|#define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  ------------------
  |  |  |  |   32|      9|#define LCLIENT_LENGTH 128
  |  |  ------------------
  |  |               #define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  ------------------
  |  |  |  |   31|      9|#define LCLIENT_NODES MAX_FRIEND_CLIENTS
  |  |  |  |  ------------------
  |  |  |  |  |  |   29|      9|#define MAX_FRIEND_CLIENTS 8
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  714|      9|        is_lan, want_announce);
  715|       |
  716|     18|    for (uint16_t i = 0; i < friends_list_size; ++i) {
  ------------------
  |  Branch (716:26): [True: 9, False: 9]
  ------------------
  717|      9|        const DHT_Friend *dht_friend = &friends_list[i];
  718|       |
  719|      9|        get_close_nodes_inner(
  720|      9|            cur_time, public_key,
  721|      9|            nodes_list, &num_nodes,
  722|      9|            sa_family, dht_friend->client_list, MAX_FRIEND_CLIENTS,
  ------------------
  |  |   29|      9|#define MAX_FRIEND_CLIENTS 8
  ------------------
  723|      9|            is_lan, want_announce);
  724|      9|    }
  725|       |
  726|      9|    return num_nodes;
  727|      9|}
DHT.c:get_close_nodes_inner:
  637|     18|{
  638|     18|    if (!net_family_is_ipv4(sa_family) && !net_family_is_ipv6(sa_family) && !net_family_is_unspec(sa_family)) {
  ------------------
  |  Branch (638:9): [True: 18, False: 0]
  |  Branch (638:43): [True: 18, False: 0]
  |  Branch (638:77): [True: 0, False: 18]
  ------------------
  639|      0|        return;
  640|      0|    }
  641|       |
  642|     18|    uint32_t num_nodes = *num_nodes_ptr;
  643|       |
  644|  9.30k|    for (uint32_t i = 0; i < client_list_length; ++i) {
  ------------------
  |  Branch (644:26): [True: 9.28k, False: 18]
  ------------------
  645|  9.28k|        const Client_data *const client = &client_list[i];
  646|       |
  647|       |        /* node already in list? */
  648|  9.28k|        if (index_of_node_pk(nodes_list, MAX_SENT_NODES, client->public_key) != UINT32_MAX) {
  ------------------
  |  |   40|  9.28k|#define MAX_SENT_NODES 4
  ------------------
  |  Branch (648:13): [True: 9.28k, False: 0]
  ------------------
  649|  9.28k|            continue;
  650|  9.28k|        }
  651|       |
  652|      0|        const IPPTsPng *ipptp;
  653|       |
  654|      0|        if (net_family_is_ipv4(sa_family)) {
  ------------------
  |  Branch (654:13): [True: 0, False: 0]
  ------------------
  655|      0|            ipptp = &client->assoc4;
  656|      0|        } else if (net_family_is_ipv6(sa_family)) {
  ------------------
  |  Branch (656:20): [True: 0, False: 0]
  ------------------
  657|      0|            ipptp = &client->assoc6;
  658|      0|        } else if (client->assoc4.timestamp >= client->assoc6.timestamp) {
  ------------------
  |  Branch (658:20): [True: 0, False: 0]
  ------------------
  659|      0|            ipptp = &client->assoc4;
  660|      0|        } else {
  661|      0|            ipptp = &client->assoc6;
  662|      0|        }
  663|       |
  664|       |        /* node not in a good condition? */
  665|      0|        if (assoc_timeout(cur_time, ipptp)) {
  ------------------
  |  Branch (665:13): [True: 0, False: 0]
  ------------------
  666|      0|            continue;
  667|      0|        }
  668|       |
  669|       |        /* don't send LAN ips to non LAN peers */
  670|      0|        if (ip_is_lan(&ipptp->ip_port.ip) && !is_lan) {
  ------------------
  |  Branch (670:13): [True: 0, False: 0]
  |  Branch (670:46): [True: 0, False: 0]
  ------------------
  671|      0|            continue;
  672|      0|        }
  673|       |
  674|      0|#ifdef CHECK_ANNOUNCE_NODE
  675|       |
  676|      0|        if (want_announce && !client->announce_node) {
  ------------------
  |  Branch (676:13): [True: 0, False: 0]
  |  Branch (676:30): [True: 0, False: 0]
  ------------------
  677|      0|            continue;
  678|      0|        }
  679|       |
  680|      0|#endif /* CHECK_ANNOUNCE_NODE */
  681|       |
  682|      0|        if (num_nodes < MAX_SENT_NODES) {
  ------------------
  |  |   40|      0|#define MAX_SENT_NODES 4
  ------------------
  |  Branch (682:13): [True: 0, False: 0]
  ------------------
  683|      0|            memcpy(nodes_list[num_nodes].public_key, client->public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      0|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  684|      0|            nodes_list[num_nodes].ip_port = ipptp->ip_port;
  685|      0|            ++num_nodes;
  686|      0|        } else {
  687|       |            // TODO(zugz): this could be made significantly more efficient by
  688|       |            // using a version of add_to_list which works with a sorted list.
  689|      0|            add_to_list(nodes_list, MAX_SENT_NODES, client->public_key, &ipptp->ip_port, public_key);
  ------------------
  |  |   40|      0|#define MAX_SENT_NODES 4
  ------------------
  690|      0|        }
  691|      0|    }
  692|       |
  693|     18|    *num_nodes_ptr = num_nodes;
  694|     18|}
DHT.c:index_of_node_pk:
  490|  9.28k|{
  491|  9.28k|    assert(size == 0 || array != nullptr);
  492|  9.28k|    for (uint32_t i = 0; i < size; ++i) {
  ------------------
  |  Branch (492:26): [True: 9.28k, False: 0]
  ------------------
  493|  9.28k|        if (pk_equal(array[i].public_key, pk)) {
  ------------------
  |  Branch (493:13): [True: 9.28k, False: 0]
  ------------------
  494|  9.28k|            return i;
  495|  9.28k|        }
  496|  9.28k|    }
  497|       |
  498|      0|    return UINT32_MAX;
  499|  9.28k|}
DHT.c:index_of_friend_pk:
  478|     18|{
  479|     18|    assert(size == 0 || array != nullptr);
  480|     18|    for (uint32_t i = 0; i < size; ++i) {
  ------------------
  |  Branch (480:26): [True: 9, False: 9]
  ------------------
  481|      9|        if (pk_equal(array[i].public_key, pk)) {
  ------------------
  |  Branch (481:13): [True: 9, False: 0]
  ------------------
  482|      9|            return i;
  483|      9|        }
  484|      9|    }
  485|       |
  486|      9|    return UINT32_MAX;
  487|     18|}
DHT.c:dht_friend_lock:
 1517|     18|{
 1518|       |    // find first free slot
 1519|     18|    uint8_t lock_num;
 1520|     18|    uint32_t lock_token = 0;
 1521|     27|    for (lock_num = 0; lock_num < DHT_FRIEND_MAX_LOCKS; ++lock_num) {
  ------------------
  |  |   53|     27|#define DHT_FRIEND_MAX_LOCKS 32
  ------------------
  |  Branch (1521:24): [True: 27, False: 0]
  ------------------
 1522|     27|        lock_token = UINT32_C(1) << lock_num;
 1523|     27|        if ((dht_friend->lock_flags & lock_token) == 0) {
  ------------------
  |  Branch (1523:13): [True: 18, False: 9]
  ------------------
 1524|     18|            break;
 1525|     18|        }
 1526|     27|    }
 1527|       |
 1528|       |    // One of the conditions would be enough, but static analyzers don't get that
 1529|     18|    if (lock_token == 0 || lock_num == DHT_FRIEND_MAX_LOCKS) {
  ------------------
  |  |   53|     18|#define DHT_FRIEND_MAX_LOCKS 32
  ------------------
  |  Branch (1529:9): [True: 0, False: 18]
  |  Branch (1529:28): [True: 0, False: 18]
  ------------------
 1530|      0|        return 0;
 1531|      0|    }
 1532|       |
 1533|       |    // Claim that slot
 1534|     18|    dht_friend->lock_flags |= lock_token;
 1535|       |
 1536|     18|    dht_friend->callbacks[lock_num].ip_callback = ip_callback;
 1537|     18|    dht_friend->callbacks[lock_num].data = data;
 1538|     18|    dht_friend->callbacks[lock_num].number = number;
 1539|       |
 1540|     18|    return lock_token;
 1541|     18|}

new_messenger:
 3358|     20|{
 3359|     20|    if (options == nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (3359:9): [True: 0, False: 20]
  ------------------
 3360|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3361|      0|    }
 3362|       |
 3363|     20|    if (error != nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (3363:9): [True: 20, False: 0]
  ------------------
 3364|     20|        *error = MESSENGER_ERROR_OTHER;
 3365|     20|    }
 3366|       |
 3367|     20|    Messenger *m = (Messenger *)mem_alloc(mem, sizeof(Messenger));
 3368|       |
 3369|     20|    if (m == nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (3369:9): [True: 1, False: 19]
  ------------------
 3370|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
 3371|      1|    }
 3372|       |
 3373|     19|    m->mono_time = mono_time;
 3374|     19|    m->mem = mem;
 3375|     19|    m->rng = rng;
 3376|     19|    m->ns = ns;
 3377|       |
 3378|     19|    m->fr = friendreq_new(mem);
 3379|       |
 3380|     19|    if (m->fr == nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (3380:9): [True: 1, False: 18]
  ------------------
 3381|      1|        mem_delete(mem, m);
 3382|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
 3383|      1|    }
 3384|       |
 3385|     18|    m->log = logger_new(mem);
 3386|       |
 3387|     18|    if (m->log == nullptr) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
  |  Branch (3387:9): [True: 1, False: 17]
  ------------------
 3388|      1|        friendreq_kill(m->fr);
 3389|      1|        mem_delete(mem, m);
 3390|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
 3391|      1|    }
 3392|       |
 3393|     17|    logger_callback_log(m->log, options->log_callback, options->log_context, options->log_user_data);
 3394|       |
 3395|     17|    unsigned int net_err = 0;
 3396|       |
 3397|     17|    if (!options->udp_disabled && options->proxy_info.proxy_type != TCP_PROXY_NONE) {
  ------------------
  |  Branch (3397:9): [True: 17, False: 0]
  |  Branch (3397:35): [True: 10, False: 7]
  ------------------
 3398|       |        // We don't currently support UDP over proxy.
 3399|     10|        LOGGER_INFO(m->log, "UDP enabled and proxy set: disabling UDP");
  ------------------
  |  |   78|     10|#define LOGGER_INFO(log, ...)    LOGGER_WRITE(log, LOGGER_LEVEL_INFO, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     10|    do {                                                                         \
  |  |  |  |   70|     10|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     20|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     10|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     10|        }                                                                        \
  |  |  |  |   73|     10|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3400|     10|        options->udp_disabled = true;
 3401|     10|    }
 3402|       |
 3403|     17|    if (options->udp_disabled) {
  ------------------
  |  Branch (3403:9): [True: 10, False: 7]
  ------------------
 3404|     10|        m->net = new_networking_no_udp(m->log, m->mem, m->ns);
 3405|     10|    } else {
 3406|      7|        IP ip;
 3407|      7|        ip_init(&ip, options->ipv6enabled);
 3408|      7|        m->net = new_networking_ex(m->log, m->mem, m->ns, &ip, options->port_range[0], options->port_range[1], &net_err);
 3409|      7|    }
 3410|       |
 3411|     17|    if (m->net == nullptr) {
  ------------------
  |  |   63|     17|#define nullptr NULL
  ------------------
  |  Branch (3411:9): [True: 3, False: 14]
  ------------------
 3412|      3|        friendreq_kill(m->fr);
 3413|       |
 3414|      3|        if (error != nullptr && net_err == 1) {
  ------------------
  |  |   63|      6|#define nullptr NULL
  ------------------
  |  Branch (3414:13): [True: 3, False: 0]
  |  Branch (3414:33): [True: 0, False: 3]
  ------------------
 3415|      0|            LOGGER_WARNING(m->log, "network initialisation failed (no ports available)");
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3416|      0|            *error = MESSENGER_ERROR_PORT;
 3417|      0|        }
 3418|       |
 3419|      3|        logger_kill(m->log);
 3420|      3|        mem_delete(mem, m);
 3421|      3|        return nullptr;
  ------------------
  |  |   63|      3|#define nullptr NULL
  ------------------
 3422|      3|    }
 3423|       |
 3424|     14|    m->dht = new_dht(m->log, m->mem, m->rng, m->ns, m->mono_time, m->net, options->hole_punching_enabled, options->local_discovery_enabled);
 3425|       |
 3426|     14|    if (m->dht == nullptr) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (3426:9): [True: 14, False: 0]
  ------------------
 3427|     14|        kill_networking(m->net);
 3428|     14|        friendreq_kill(m->fr);
 3429|     14|        logger_kill(m->log);
 3430|     14|        mem_delete(mem, m);
 3431|     14|        return nullptr;
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
 3432|     14|    }
 3433|       |
 3434|      0|    m->tcp_np = netprof_new(m->log, mem);
 3435|       |
 3436|      0|    if (m->tcp_np == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (3436:9): [True: 0, False: 0]
  ------------------
 3437|      0|        LOGGER_WARNING(m->log, "TCP netprof initialisation failed");
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3438|      0|        kill_dht(m->dht);
 3439|      0|        kill_networking(m->net);
 3440|      0|        friendreq_kill(m->fr);
 3441|      0|        logger_kill(m->log);
 3442|      0|        mem_delete(mem, m);
 3443|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3444|      0|    }
 3445|       |
 3446|      0|    m->net_crypto = new_net_crypto(m->log, m->mem, m->rng, m->ns, m->mono_time, m->dht, &options->proxy_info, m->tcp_np);
 3447|       |
 3448|      0|    if (m->net_crypto == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (3448:9): [True: 0, False: 0]
  ------------------
 3449|      0|        LOGGER_WARNING(m->log, "net_crypto initialisation failed");
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3450|       |
 3451|      0|        netprof_kill(mem, m->tcp_np);
 3452|      0|        kill_dht(m->dht);
 3453|      0|        kill_networking(m->net);
 3454|      0|        friendreq_kill(m->fr);
 3455|      0|        logger_kill(m->log);
 3456|      0|        mem_delete(mem, m);
 3457|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3458|      0|    }
 3459|       |
 3460|      0|    m->group_announce = new_gca_list(m->mem);
 3461|       |
 3462|      0|    if (m->group_announce == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (3462:9): [True: 0, False: 0]
  ------------------
 3463|      0|        LOGGER_WARNING(m->log, "DHT group chats initialisation failed");
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3464|       |
 3465|      0|        kill_net_crypto(m->net_crypto);
 3466|      0|        netprof_kill(mem, m->tcp_np);
 3467|      0|        kill_dht(m->dht);
 3468|      0|        kill_networking(m->net);
 3469|      0|        friendreq_kill(m->fr);
 3470|      0|        logger_kill(m->log);
 3471|      0|        mem_delete(mem, m);
 3472|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3473|      0|    }
 3474|       |
 3475|      0|    if (options->dht_announcements_enabled) {
  ------------------
  |  Branch (3475:9): [True: 0, False: 0]
  ------------------
 3476|      0|        m->forwarding = new_forwarding(m->log, m->mem, m->rng, m->mono_time, m->dht);
 3477|      0|        if (m->forwarding != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (3477:13): [True: 0, False: 0]
  ------------------
 3478|      0|            m->announce = new_announcements(m->log, m->mem, m->rng, m->mono_time, m->forwarding);
 3479|      0|        } else {
 3480|      0|            m->announce = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3481|      0|        }
 3482|      0|    } else {
 3483|      0|        m->forwarding = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3484|      0|        m->announce = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3485|      0|    }
 3486|       |
 3487|      0|    m->onion = new_onion(m->log, m->mem, m->mono_time, m->rng, m->dht);
 3488|      0|    m->onion_a = new_onion_announce(m->log, m->mem, m->rng, m->mono_time, m->dht);
 3489|      0|    m->onion_c = new_onion_client(m->log, m->mem, m->rng, m->mono_time, m->net_crypto);
 3490|      0|    if (m->onion_c != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (3490:9): [True: 0, False: 0]
  ------------------
 3491|      0|        m->fr_c = new_friend_connections(m->log, m->mem, m->mono_time, m->ns, m->onion_c, options->local_discovery_enabled);
 3492|      0|    }
 3493|       |
 3494|      0|    if ((options->dht_announcements_enabled && (m->forwarding == nullptr || m->announce == nullptr)) ||
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
                  if ((options->dht_announcements_enabled && (m->forwarding == nullptr || m->announce == nullptr)) ||
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (3494:10): [True: 0, False: 0]
  |  Branch (3494:49): [True: 0, False: 0]
  |  Branch (3494:77): [True: 0, False: 0]
  ------------------
 3495|      0|            m->onion == nullptr || m->onion_a == nullptr || m->onion_c == nullptr || m->fr_c == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
                          m->onion == nullptr || m->onion_a == nullptr || m->onion_c == nullptr || m->fr_c == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
                          m->onion == nullptr || m->onion_a == nullptr || m->onion_c == nullptr || m->fr_c == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
                          m->onion == nullptr || m->onion_a == nullptr || m->onion_c == nullptr || m->fr_c == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (3495:13): [True: 0, False: 0]
  |  Branch (3495:36): [True: 0, False: 0]
  |  Branch (3495:61): [True: 0, False: 0]
  |  Branch (3495:86): [True: 0, False: 0]
  ------------------
 3496|      0|        LOGGER_WARNING(m->log, "onion initialisation failed");
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|       |
 3498|      0|        kill_onion(m->onion);
 3499|      0|        kill_onion_announce(m->onion_a);
 3500|      0|        kill_onion_client(m->onion_c);
 3501|      0|        kill_gca(m->group_announce);
 3502|      0|        kill_friend_connections(m->fr_c);
 3503|      0|        kill_announcements(m->announce);
 3504|      0|        kill_forwarding(m->forwarding);
 3505|      0|        kill_net_crypto(m->net_crypto);
 3506|      0|        netprof_kill(mem, m->tcp_np);
 3507|      0|        kill_dht(m->dht);
 3508|      0|        kill_networking(m->net);
 3509|      0|        friendreq_kill(m->fr);
 3510|      0|        logger_kill(m->log);
 3511|      0|        mem_delete(mem, m);
 3512|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3513|      0|    }
 3514|       |
 3515|      0|    gca_onion_init(m->group_announce, m->onion_a);
 3516|       |
 3517|      0|    m->group_handler = new_dht_groupchats(m);
 3518|       |
 3519|      0|    if (m->group_handler == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (3519:9): [True: 0, False: 0]
  ------------------
 3520|      0|        LOGGER_WARNING(m->log, "conferences initialisation failed");
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3521|       |
 3522|      0|        kill_onion(m->onion);
 3523|      0|        kill_onion_announce(m->onion_a);
 3524|      0|        kill_onion_client(m->onion_c);
 3525|      0|        kill_gca(m->group_announce);
 3526|      0|        kill_friend_connections(m->fr_c);
 3527|      0|        kill_announcements(m->announce);
 3528|      0|        kill_forwarding(m->forwarding);
 3529|      0|        kill_net_crypto(m->net_crypto);
 3530|      0|        netprof_kill(mem, m->tcp_np);
 3531|      0|        kill_dht(m->dht);
 3532|      0|        kill_networking(m->net);
 3533|      0|        friendreq_kill(m->fr);
 3534|      0|        logger_kill(m->log);
 3535|      0|        mem_delete(mem, m);
 3536|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3537|      0|    }
 3538|       |
 3539|      0|    if (options->tcp_server_port != 0) {
  ------------------
  |  Branch (3539:9): [True: 0, False: 0]
  ------------------
 3540|      0|        m->tcp_server = new_tcp_server(m->log, m->mem, m->rng, m->ns, options->ipv6enabled, 1,
 3541|      0|                                       &options->tcp_server_port, dht_get_self_secret_key(m->dht),
 3542|      0|                                       m->onion, m->forwarding);
 3543|       |
 3544|      0|        if (m->tcp_server == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (3544:13): [True: 0, False: 0]
  ------------------
 3545|      0|            LOGGER_WARNING(m->log, "TCP server initialisation failed");
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3546|       |
 3547|      0|            kill_onion(m->onion);
 3548|      0|            kill_onion_announce(m->onion_a);
 3549|      0|            kill_dht_groupchats(m->group_handler);
 3550|      0|            kill_friend_connections(m->fr_c);
 3551|      0|            kill_onion_client(m->onion_c);
 3552|      0|            kill_gca(m->group_announce);
 3553|      0|            kill_announcements(m->announce);
 3554|      0|            kill_forwarding(m->forwarding);
 3555|      0|            kill_net_crypto(m->net_crypto);
 3556|      0|            netprof_kill(mem, m->tcp_np);
 3557|      0|            kill_dht(m->dht);
 3558|      0|            kill_networking(m->net);
 3559|      0|            friendreq_kill(m->fr);
 3560|      0|            logger_kill(m->log);
 3561|      0|            mem_delete(mem, m);
 3562|       |
 3563|      0|            if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (3563:17): [True: 0, False: 0]
  ------------------
 3564|      0|                *error = MESSENGER_ERROR_TCP_SERVER;
 3565|      0|            }
 3566|       |
 3567|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3568|      0|        }
 3569|      0|    }
 3570|       |
 3571|      0|    m->options = *options;
 3572|      0|    friendreq_init(m->fr, m->fr_c);
 3573|      0|    set_nospam(m->fr, random_u32(m->rng));
 3574|      0|    set_filter_function(m->fr, &friend_already_added, m);
 3575|       |
 3576|      0|    m->lastdump = 0;
 3577|      0|    m->is_receiving_file = 0;
 3578|       |
 3579|      0|    m_register_default_plugins(m);
 3580|      0|    callback_friendrequest(m->fr, m_handle_friend_request, m);
 3581|       |
 3582|      0|    if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (3582:9): [True: 0, False: 0]
  ------------------
 3583|      0|        *error = MESSENGER_ERROR_NONE;
 3584|      0|    }
 3585|       |
 3586|      0|    return m;
 3587|      0|}

crypto_memzero:
  114|     32|{
  115|     32|#if defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  116|     32|    memzero((uint8_t *)data, length);
  117|       |#else
  118|       |    sodium_memzero(data, length);
  119|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  120|     32|}
crypto_memlock:
  123|     19|{
  124|     19|#if defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  125|     19|    return false;
  126|       |#else
  127|       |
  128|       |    return sodium_mlock(data, length) == 0;
  129|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  130|     19|}
crypto_memunlock:
  133|     19|{
  134|     19|#if defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  135|     19|    return false;
  136|       |#else
  137|       |
  138|       |    return sodium_munlock(data, length) == 0;
  139|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  140|     19|}
pk_equal:
  143|  9.29k|{
  144|  9.29k|#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
  145|       |    // Hope that this is better for the fuzzer
  146|  9.29k|    return memcmp(pk1, pk2, CRYPTO_PUBLIC_KEY_SIZE) == 0;
  ------------------
  |  |   43|  9.29k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  147|       |#else
  148|       |    return crypto_verify_32(pk1, pk2) == 0;
  149|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  150|  9.29k|}
random_u64:
  199|      9|{
  200|      9|    uint64_t randnum;
  201|      9|    random_bytes(rng, (uint8_t *)&randnum, sizeof(randnum));
  202|      9|    return randnum;
  203|      9|}
crypto_new_keypair:
  437|     28|{
  438|     28|    random_bytes(rng, secret_key, CRYPTO_SECRET_KEY_SIZE);
  ------------------
  |  |   48|     28|#define CRYPTO_SECRET_KEY_SIZE         32
  ------------------
  439|     28|    memzero(public_key, CRYPTO_PUBLIC_KEY_SIZE);  // Make MSAN happy
  ------------------
  |  |   43|     28|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  440|     28|    crypto_derive_public_key(public_key, secret_key);
  441|     28|    return 0;
  442|     28|}
crypto_derive_public_key:
  446|     28|{
  447|     28|    crypto_scalarmult_curve25519_base(public_key, secret_key);
  448|     28|}
os_random:
  514|     23|{
  515|     23|#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
  516|     23|    if ((true)) {
  ------------------
  |  Branch (516:9): [Folded - Ignored]
  ------------------
  517|     23|        return nullptr;
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
  518|     23|    }
  519|      0|#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  520|       |    // It is safe to call this function more than once and from different
  521|       |    // threads -- subsequent calls won't have any effects.
  522|      0|    if (sodium_init() == -1) {
  ------------------
  |  Branch (522:9): [True: 0, False: 0]
  ------------------
  523|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  524|      0|    }
  525|      0|    return &os_random_obj;
  526|      0|}
random_bytes:
  529|     37|{
  530|     37|    rng->funcs->random_bytes(rng->obj, bytes, length);
  531|     37|}

friendreq_new:
  170|     19|{
  171|     19|    Friend_Requests *fr = (Friend_Requests *)mem_alloc(mem, sizeof(Friend_Requests));
  172|       |
  173|     19|    if (fr == nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (173:9): [True: 1, False: 18]
  ------------------
  174|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  175|      1|    }
  176|       |
  177|     18|    fr->mem = mem;
  178|       |
  179|     18|    return fr;
  180|     19|}
friendreq_kill:
  183|     18|{
  184|     18|    if (fr == nullptr) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
  |  Branch (184:9): [True: 0, False: 18]
  ------------------
  185|      0|        return;
  186|      0|    }
  187|       |
  188|     18|    mem_delete(fr->mem, fr);
  189|     18|}

logger_new:
   33|     18|{
   34|     18|    Logger *log = (Logger *)mem_alloc(mem, sizeof(Logger));
   35|       |
   36|     18|    if (log == nullptr) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
  |  Branch (36:9): [True: 1, False: 17]
  ------------------
   37|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
   38|      1|    }
   39|       |
   40|     17|    log->mem = mem;
   41|       |
   42|     17|    return log;
   43|     18|}
logger_kill:
   46|     17|{
   47|     17|    if (log == nullptr) {
  ------------------
  |  |   63|     17|#define nullptr NULL
  ------------------
  |  Branch (47:9): [True: 0, False: 17]
  ------------------
   48|      0|        return;
   49|      0|    }
   50|       |
   51|     17|    mem_delete(log->mem, log);
   52|     17|}
logger_callback_log:
   55|     17|{
   56|     17|    assert(log != nullptr);
   57|     17|    log->callback = function;
   58|     17|    log->context  = context;
   59|     17|    log->userdata = userdata;
   60|     17|}
logger_write:
   64|     25|{
   65|     25|    if (log == nullptr) {
  ------------------
  |  |   63|     25|#define nullptr NULL
  ------------------
  |  Branch (65:9): [True: 0, False: 25]
  ------------------
   66|      0|        return;
   67|      0|    }
   68|       |
   69|     25|    if (log->callback == nullptr) {
  ------------------
  |  |   63|     25|#define nullptr NULL
  ------------------
  |  Branch (69:9): [True: 0, False: 25]
  ------------------
   70|      0|        return;
   71|      0|    }
   72|       |
   73|       |    // Only pass the file name, not the entire file path, for privacy reasons.
   74|       |    // The full path may contain PII of the person compiling toxcore (their
   75|       |    // username and directory layout).
   76|     25|    const char *filename = strrchr(file, '/');
   77|     25|    file = filename != nullptr ? filename + 1 : file;
  ------------------
  |  |   63|     25|#define nullptr NULL
  ------------------
  |  Branch (77:12): [True: 25, False: 0]
  ------------------
   78|       |#if defined(_WIN32) || defined(__CYGWIN__)
   79|       |    // On Windows, the path separator *may* be a backslash, so we look for that
   80|       |    // one too.
   81|       |    const char *windows_filename = strrchr(file, '\\');
   82|       |    file = windows_filename != nullptr ? windows_filename + 1 : file;
   83|       |#endif /* WIN32 */
   84|       |
   85|       |    // Format message
   86|     25|    char msg[1024];
   87|     25|    va_list args;
   88|     25|    va_start(args, format);
   89|     25|    vsnprintf(msg, sizeof(msg), format, args);
   90|     25|    va_end(args);
   91|       |
   92|     25|    log->callback(log->context, level, file, line, func, msg, log->userdata);
   93|     25|}

os_memory:
   42|     23|{
   43|     23|    return &os_memory_obj;
   44|     23|}
mem_alloc:
   59|    214|{
   60|    214|    void *const ptr = mem->funcs->calloc(mem->obj, 1, size);
   61|    214|    return ptr;
   62|    214|}
mem_valloc:
   65|     39|{
   66|     39|    const uint32_t bytes = nmemb * size;
   67|       |
   68|     39|    if (size != 0 && bytes / size != nmemb) {
  ------------------
  |  Branch (68:9): [True: 39, False: 0]
  |  Branch (68:22): [True: 0, False: 39]
  ------------------
   69|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   70|      0|    }
   71|       |
   72|     39|    void *const ptr = mem->funcs->calloc(mem->obj, nmemb, size);
   73|     39|    return ptr;
   74|     39|}
mem_vrealloc:
   77|      9|{
   78|      9|    const uint32_t bytes = nmemb * size;
   79|       |
   80|      9|    if (size != 0 && bytes / size != nmemb) {
  ------------------
  |  Branch (80:9): [True: 9, False: 0]
  |  Branch (80:22): [True: 0, False: 9]
  ------------------
   81|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   82|      0|    }
   83|       |
   84|      9|    void *const new_ptr = mem->funcs->realloc(mem->obj, ptr, bytes);
   85|      9|    return new_ptr;
   86|      9|}
mem_delete:
   89|    284|{
   90|    284|    mem->funcs->free(mem->obj, ptr);
   91|    284|}

mono_time_new:
  111|     22|{
  112|     22|    Mono_Time *mono_time = (Mono_Time *)mem_alloc(mem, sizeof(Mono_Time));
  113|       |
  114|     22|    if (mono_time == nullptr) {
  ------------------
  |  |   63|     22|#define nullptr NULL
  ------------------
  |  Branch (114:9): [True: 1, False: 21]
  ------------------
  115|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  116|      1|    }
  117|       |
  118|     21|#ifndef ESP_PLATFORM
  119|     21|    pthread_rwlock_t *rwlock = (pthread_rwlock_t *)mem_alloc(mem, sizeof(pthread_rwlock_t));
  120|       |
  121|     21|    if (rwlock == nullptr) {
  ------------------
  |  |   63|     21|#define nullptr NULL
  ------------------
  |  Branch (121:9): [True: 1, False: 20]
  ------------------
  122|      1|        mem_delete(mem, mono_time);
  123|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  124|      1|    }
  125|       |
  126|     20|    if (pthread_rwlock_init(rwlock, nullptr) != 0) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (126:9): [True: 0, False: 20]
  ------------------
  127|      0|        mem_delete(mem, rwlock);
  128|      0|        mem_delete(mem, mono_time);
  129|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  130|      0|    }
  131|       |
  132|     20|    mono_time->time_update_lock = rwlock;
  133|     20|#endif /* ESP_PLATFORM */
  134|       |
  135|     20|    mono_time_set_current_time_callback(mono_time, current_time_callback, user_data);
  136|       |
  137|     20|    mono_time->cur_time = 0;
  138|     20|#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
  139|       |    // Maximum reproducibility. Never return time = 0.
  140|     20|    mono_time->base_time = 1000000000;
  141|       |#else
  142|       |    // Never return time = 0 in case time() returns 0 (e.g. on microcontrollers
  143|       |    // without battery-powered RTC or ones where NTP didn't initialise it yet).
  144|       |    mono_time->base_time = max_u64(1, (uint64_t)time(nullptr)) * UINT64_C(1000) - current_time_monotonic(mono_time);
  145|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  146|       |
  147|     20|    mono_time_update(mono_time);
  148|       |
  149|     20|    return mono_time;
  150|     20|}
mono_time_free:
  153|     20|{
  154|     20|    if (mono_time == nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (154:9): [True: 0, False: 20]
  ------------------
  155|      0|        return;
  156|      0|    }
  157|     20|#ifndef ESP_PLATFORM
  158|     20|    pthread_rwlock_destroy(mono_time->time_update_lock);
  159|     20|    mem_delete(mem, mono_time->time_update_lock);
  160|     20|#endif /* ESP_PLATFORM */
  161|     20|    mem_delete(mem, mono_time);
  162|     20|}
mono_time_update:
  165|     20|{
  166|     20|    const uint64_t cur_time =
  167|     20|        mono_time->base_time + mono_time->current_time_callback(mono_time->user_data);
  168|       |
  169|     20|#ifndef ESP_PLATFORM
  170|     20|    pthread_rwlock_wrlock(mono_time->time_update_lock);
  171|     20|#endif /* ESP_PLATFORM */
  172|     20|    mono_time->cur_time = cur_time;
  173|     20|#ifndef ESP_PLATFORM
  174|     20|    pthread_rwlock_unlock(mono_time->time_update_lock);
  175|     20|#endif /* ESP_PLATFORM */
  176|     20|}
mono_time_get_ms:
  179|     33|{
  180|       |#if !defined(ESP_PLATFORM) && !defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  181|       |    // Fuzzing is only single thread for now, no locking needed */
  182|       |    pthread_rwlock_rdlock(mono_time->time_update_lock);
  183|       |#endif /* !ESP_PLATFORM */
  184|     33|    const uint64_t cur_time = mono_time->cur_time;
  185|       |#if !defined(ESP_PLATFORM) && !defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  186|       |    pthread_rwlock_unlock(mono_time->time_update_lock);
  187|       |#endif /* !ESP_PLATFORM */
  188|     33|    return cur_time;
  189|     33|}
mono_time_get:
  192|     33|{
  193|     33|    return mono_time_get_ms(mono_time) / UINT64_C(1000);
  194|     33|}
mono_time_set_current_time_callback:
  203|     20|{
  204|     20|    if (current_time_callback == nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (204:9): [True: 0, False: 20]
  ------------------
  205|      0|        mono_time->current_time_callback = current_time_monotonic_default;
  206|      0|        mono_time->user_data = mono_time;
  207|     20|    } else {
  208|     20|        mono_time->current_time_callback = current_time_callback;
  209|     20|        mono_time->user_data = user_data;
  210|     20|    }
  211|     20|}

netprof_new:
  139|      6|{
  140|      6|    Net_Profile *np = (Net_Profile *)mem_alloc(mem, sizeof(Net_Profile));
  141|       |
  142|      6|    if (np == nullptr) {
  ------------------
  |  |   63|      6|#define nullptr NULL
  ------------------
  |  Branch (142:9): [True: 1, False: 5]
  ------------------
  143|      1|        LOGGER_ERROR(log, "failed to allocate memory for net profiler");
  ------------------
  |  |   80|      1|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      1|    do {                                                                         \
  |  |  |  |   70|      1|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      2|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      1|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      1|        }                                                                        \
  |  |  |  |   73|      1|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  144|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  145|      1|    }
  146|       |
  147|      5|    return np;
  148|      6|}
netprof_kill:
  151|     14|{
  152|     14|    if (net_profile != nullptr) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (152:9): [True: 5, False: 9]
  ------------------
  153|      5|        mem_delete(mem, net_profile);
  154|      5|    }
  155|     14|}

net_socket_from_native:
  368|      5|{
  369|      5|    const Socket res = {(force Socket_Value)sock};
  370|      5|    return res;
  371|      5|}
net_invalid_socket:
  374|      5|{
  375|      5|    return net_socket_from_native(INVALID_SOCKET);
  ------------------
  |  |  359|      5|#define INVALID_SOCKET (-1)
  ------------------
  376|      5|}
net_family_unspec:
  379|     20|{
  380|     20|    return family_unspec;
  381|     20|}
net_family_ipv4:
  384|     11|{
  385|     11|    return family_ipv4;
  386|     11|}
net_family_ipv6:
  389|     18|{
  390|     18|    return family_ipv6;
  391|     18|}
net_family_is_unspec:
  424|     32|{
  425|     32|    return family.value == family_unspec.value;
  426|     32|}
net_family_is_ipv4:
  429|     30|{
  430|     30|    return family.value == family_ipv4.value;
  431|     30|}
net_family_is_ipv6:
  434|     35|{
  435|     35|    return family.value == family_ipv6.value;
  436|     35|}
sock_valid:
  469|      5|{
  470|      5|    const Socket invalid_socket = net_invalid_socket();
  471|      5|    return sock.value != invalid_socket.value;
  472|      5|}
os_network:
  681|     23|{
  682|     23|#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
  683|     23|    if ((true)) {
  ------------------
  |  Branch (683:9): [Folded - Ignored]
  ------------------
  684|     23|        return nullptr;
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
  685|     23|    }
  686|      0|#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  687|       |#ifdef OS_WIN32
  688|       |    WSADATA wsaData;
  689|       |
  690|       |    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != NO_ERROR) {
  691|       |        return nullptr;
  692|       |    }
  693|       |#endif /* OS_WIN32 */
  694|      0|    return &os_network_obj;
  695|     23|}
kill_sock:
  929|      5|{
  930|      5|    ns->funcs->close(ns->obj, sock);
  931|      5|}
set_socket_nonblock:
  934|      5|{
  935|      5|    return ns->funcs->socket_nonblock(ns->obj, sock, true) == 0;
  936|      5|}
set_socket_nosigpipe:
  939|      5|{
  940|       |#if defined(__APPLE__)
  941|       |    int set = 1;
  942|       |    return net_setsockopt(ns, sock, SOL_SOCKET, SO_NOSIGPIPE, &set, sizeof(int)) == 0;
  943|       |#else
  944|      5|    return true;
  945|      5|#endif /* __APPLE__ */
  946|      5|}
set_socket_dualstack:
  959|      5|{
  960|      5|    int ipv6only = 0;
  961|      5|    size_t optsize = sizeof(ipv6only);
  962|      5|    const int res = net_getsockopt(ns, sock, IPPROTO_IPV6, IPV6_V6ONLY, &ipv6only, &optsize);
  963|       |
  964|      5|    if ((res == 0) && (ipv6only == 0)) {
  ------------------
  |  Branch (964:9): [True: 5, False: 0]
  |  Branch (964:23): [True: 5, False: 0]
  ------------------
  965|      5|        return true;
  966|      5|    }
  967|       |
  968|      0|    ipv6only = 0;
  969|      0|    return net_setsockopt(ns, sock, IPPROTO_IPV6, IPV6_V6ONLY, &ipv6only, sizeof(ipv6only)) == 0;
  970|      5|}
networking_registerhandler:
 1160|    142|{
 1161|    142|    net->packethandlers[byte].function = cb;
 1162|    142|    net->packethandlers[byte].object = object;
 1163|    142|}
new_networking_ex:
 1209|      7|{
 1210|       |    /* If both from and to are 0, use default port range
 1211|       |     * If one is 0 and the other is non-0, use the non-0 value as only port
 1212|       |     * If from > to, swap
 1213|       |     */
 1214|      7|    if (port_from == 0 && port_to == 0) {
  ------------------
  |  Branch (1214:9): [True: 7, False: 0]
  |  Branch (1214:27): [True: 7, False: 0]
  ------------------
 1215|      7|        port_from = TOX_PORTRANGE_FROM;
  ------------------
  |  |  162|      7|#define TOX_PORTRANGE_FROM 33445
  ------------------
 1216|      7|        port_to = TOX_PORTRANGE_TO;
  ------------------
  |  |  163|      7|#define TOX_PORTRANGE_TO   33545
  ------------------
 1217|      7|    } else if (port_from == 0 && port_to != 0) {
  ------------------
  |  Branch (1217:16): [True: 0, False: 0]
  |  Branch (1217:34): [True: 0, False: 0]
  ------------------
 1218|      0|        port_from = port_to;
 1219|      0|    } else if (port_from != 0 && port_to == 0) {
  ------------------
  |  Branch (1219:16): [True: 0, False: 0]
  |  Branch (1219:34): [True: 0, False: 0]
  ------------------
 1220|      0|        port_to = port_from;
 1221|      0|    } else if (port_from > port_to) {
  ------------------
  |  Branch (1221:16): [True: 0, False: 0]
  ------------------
 1222|      0|        const uint16_t temp_port = port_from;
 1223|      0|        port_from = port_to;
 1224|      0|        port_to = temp_port;
 1225|      0|    }
 1226|       |
 1227|      7|    if (error != nullptr) {
  ------------------
  |  |   63|      7|#define nullptr NULL
  ------------------
  |  Branch (1227:9): [True: 7, False: 0]
  ------------------
 1228|      7|        *error = 2;
 1229|      7|    }
 1230|       |
 1231|       |    /* maybe check for invalid IPs like 224+.x.y.z? if there is any IP set ever */
 1232|      7|    if (!net_family_is_ipv4(ip->family) && !net_family_is_ipv6(ip->family)) {
  ------------------
  |  Branch (1232:9): [True: 7, False: 0]
  |  Branch (1232:44): [True: 0, False: 7]
  ------------------
 1233|      0|        LOGGER_ERROR(log, "invalid address family: %u", ip->family.value);
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1234|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1235|      0|    }
 1236|       |
 1237|      7|    Networking_Core *temp = (Networking_Core *)mem_alloc(mem, sizeof(Networking_Core));
 1238|       |
 1239|      7|    if (temp == nullptr) {
  ------------------
  |  |   63|      7|#define nullptr NULL
  ------------------
  |  Branch (1239:9): [True: 1, False: 6]
  ------------------
 1240|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
 1241|      1|    }
 1242|       |
 1243|      6|    Net_Profile *np = netprof_new(log, mem);
 1244|       |
 1245|      6|    if (np == nullptr) {
  ------------------
  |  |   63|      6|#define nullptr NULL
  ------------------
  |  Branch (1245:9): [True: 1, False: 5]
  ------------------
 1246|      1|        free(temp);
 1247|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
 1248|      1|    }
 1249|       |
 1250|      5|    temp->udp_net_profile = np;
 1251|      5|    temp->ns = ns;
 1252|      5|    temp->log = log;
 1253|      5|    temp->mem = mem;
 1254|      5|    temp->family = ip->family;
 1255|      5|    temp->port = 0;
 1256|       |
 1257|       |    /* Initialize our socket. */
 1258|       |    /* add log message what we're creating */
 1259|      5|    temp->sock = net_socket(ns, temp->family, TOX_SOCK_DGRAM, TOX_PROTO_UDP);
  ------------------
  |  |  174|      5|#define TOX_SOCK_DGRAM 2
  ------------------
                  temp->sock = net_socket(ns, temp->family, TOX_SOCK_DGRAM, TOX_PROTO_UDP);
  ------------------
  |  |  177|      5|#define TOX_PROTO_UDP 2
  ------------------
 1260|       |
 1261|       |    /* Check for socket error. */
 1262|      5|    if (!sock_valid(temp->sock)) {
  ------------------
  |  Branch (1262:9): [True: 0, False: 5]
  ------------------
 1263|      0|        const int neterror = net_error();
 1264|      0|        Net_Strerror error_str;
 1265|      0|        LOGGER_ERROR(log, "failed to get a socket?! %d, %s", neterror, net_strerror(neterror, &error_str));
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1266|      0|        netprof_kill(mem, temp->udp_net_profile);
 1267|      0|        mem_delete(mem, temp);
 1268|       |
 1269|      0|        if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1269:13): [True: 0, False: 0]
  ------------------
 1270|      0|            *error = 1;
 1271|      0|        }
 1272|       |
 1273|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1274|      0|    }
 1275|       |
 1276|       |    /* Functions to increase the size of the send and receive UDP buffers.
 1277|       |     */
 1278|      5|    int n = 1024 * 1024 * 2;
 1279|       |
 1280|      5|    if (net_setsockopt(ns, temp->sock, SOL_SOCKET, SO_RCVBUF, &n, sizeof(n)) != 0) {
  ------------------
  |  Branch (1280:9): [True: 0, False: 5]
  ------------------
 1281|      0|        LOGGER_WARNING(log, "failed to set socket option %d", SO_RCVBUF);
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1282|      0|    }
 1283|       |
 1284|      5|    if (net_setsockopt(ns, temp->sock, SOL_SOCKET, SO_SNDBUF, &n, sizeof(n)) != 0) {
  ------------------
  |  Branch (1284:9): [True: 0, False: 5]
  ------------------
 1285|      0|        LOGGER_WARNING(log, "failed to set socket option %d", SO_SNDBUF);
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1286|      0|    }
 1287|       |
 1288|       |    /* Enable broadcast on socket */
 1289|      5|    int broadcast = 1;
 1290|       |
 1291|      5|    if (net_setsockopt(ns, temp->sock, SOL_SOCKET, SO_BROADCAST, &broadcast, sizeof(broadcast)) != 0) {
  ------------------
  |  Branch (1291:9): [True: 0, False: 5]
  ------------------
 1292|      0|        LOGGER_ERROR(log, "failed to set socket option %d", SO_BROADCAST);
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1293|      0|    }
 1294|       |
 1295|       |    /* iOS UDP sockets are weird and apparently can SIGPIPE */
 1296|      5|    if (!set_socket_nosigpipe(ns, temp->sock)) {
  ------------------
  |  Branch (1296:9): [True: 0, False: 5]
  ------------------
 1297|      0|        kill_networking(temp);
 1298|       |
 1299|      0|        if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1299:13): [True: 0, False: 0]
  ------------------
 1300|      0|            *error = 1;
 1301|      0|        }
 1302|       |
 1303|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1304|      0|    }
 1305|       |
 1306|       |    /* Set socket nonblocking. */
 1307|      5|    if (!set_socket_nonblock(ns, temp->sock)) {
  ------------------
  |  Branch (1307:9): [True: 0, False: 5]
  ------------------
 1308|      0|        kill_networking(temp);
 1309|       |
 1310|      0|        if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1310:13): [True: 0, False: 0]
  ------------------
 1311|      0|            *error = 1;
 1312|      0|        }
 1313|       |
 1314|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1315|      0|    }
 1316|       |
 1317|       |    /* Bind our socket to port PORT and the given IP address (usually 0.0.0.0 or ::) */
 1318|      5|    uint16_t *portptr = nullptr;
  ------------------
  |  |   63|      5|#define nullptr NULL
  ------------------
 1319|      5|    Network_Addr addr = {{0}};
 1320|       |
 1321|      5|    if (net_family_is_ipv4(temp->family)) {
  ------------------
  |  Branch (1321:9): [True: 0, False: 5]
  ------------------
 1322|      0|        struct sockaddr_in *addr4 = (struct sockaddr_in *)&addr.addr;
 1323|       |
 1324|      0|        addr.size = sizeof(struct sockaddr_in);
 1325|      0|        addr4->sin_family = AF_INET;
 1326|      0|        addr4->sin_port = 0;
 1327|      0|        fill_addr4(&ip->ip.v4, &addr4->sin_addr);
 1328|       |
 1329|      0|        portptr = &addr4->sin_port;
 1330|      5|    } else if (net_family_is_ipv6(temp->family)) {
  ------------------
  |  Branch (1330:16): [True: 5, False: 0]
  ------------------
 1331|      5|        struct sockaddr_in6 *addr6 = (struct sockaddr_in6 *)&addr.addr;
 1332|       |
 1333|      5|        addr.size = sizeof(struct sockaddr_in6);
 1334|      5|        addr6->sin6_family = AF_INET6;
 1335|      5|        addr6->sin6_port = 0;
 1336|      5|        fill_addr6(&ip->ip.v6, &addr6->sin6_addr);
 1337|       |
 1338|      5|        addr6->sin6_flowinfo = 0;
 1339|      5|        addr6->sin6_scope_id = 0;
 1340|       |
 1341|      5|        portptr = &addr6->sin6_port;
 1342|      5|    } else {
 1343|      0|        mem_delete(mem, temp);
 1344|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1345|      0|    }
 1346|       |
 1347|      5|    if (net_family_is_ipv6(ip->family)) {
  ------------------
  |  Branch (1347:9): [True: 5, False: 0]
  ------------------
 1348|      5|        const bool is_dualstack = set_socket_dualstack(ns, temp->sock);
 1349|       |
 1350|      5|        if (is_dualstack) {
  ------------------
  |  Branch (1350:13): [True: 5, False: 0]
  ------------------
 1351|      5|            LOGGER_TRACE(log, "Dual-stack socket: enabled");
  ------------------
  |  |   76|      5|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      5|    do {                                                                         \
  |  |  |  |   70|      5|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     10|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      5|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1352|      5|        } else {
 1353|      0|            LOGGER_ERROR(log, "Dual-stack socket failed to enable, won't be able to receive from/send to IPv4 addresses");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1354|      0|        }
 1355|       |
 1356|      5|#ifndef ESP_PLATFORM
 1357|       |        /* multicast local nodes */
 1358|      5|        struct ipv6_mreq mreq = {{{{0}}}};
 1359|      5|        mreq.ipv6mr_multiaddr.s6_addr[0] = 0xFF;
 1360|      5|        mreq.ipv6mr_multiaddr.s6_addr[1] = 0x02;
 1361|      5|        mreq.ipv6mr_multiaddr.s6_addr[15] = 0x01;
 1362|      5|        mreq.ipv6mr_interface = 0;
 1363|       |
 1364|      5|        const int res = net_setsockopt(ns, temp->sock, IPPROTO_IPV6, IPV6_ADD_MEMBERSHIP, &mreq, sizeof(mreq));
 1365|       |
 1366|      5|        const int neterror = net_error();
 1367|      5|        Net_Strerror error_str;
 1368|       |
 1369|      5|        if (res < 0) {
  ------------------
  |  Branch (1369:13): [True: 0, False: 5]
  ------------------
 1370|      0|            LOGGER_INFO(log, "Failed to activate local multicast membership in FF02::1. (%d, %s)", neterror, net_strerror(neterror, &error_str));
  ------------------
  |  |   78|      0|#define LOGGER_INFO(log, ...)    LOGGER_WRITE(log, LOGGER_LEVEL_INFO, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1371|      5|        } else {
 1372|      5|            LOGGER_TRACE(log, "Local multicast group joined successfully. (%d, %s)", neterror, net_strerror(neterror, &error_str));
  ------------------
  |  |   76|      5|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      5|    do {                                                                         \
  |  |  |  |   70|      5|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     10|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      5|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1373|      5|        }
 1374|      5|#endif /* ESP_PLATFORM */
 1375|      5|    }
 1376|       |
 1377|       |    /* A hanging program or a different user might block the standard port.
 1378|       |     * As long as it isn't a parameter coming from the commandline,
 1379|       |     * try a few ports after it, to see if we can find a "free" one.
 1380|       |     *
 1381|       |     * If we go on without binding, the first sendto() automatically binds to
 1382|       |     * a free port chosen by the system (i.e. anything from 1024 to 65535).
 1383|       |     *
 1384|       |     * Returning NULL after bind fails has both advantages and disadvantages:
 1385|       |     * advantage:
 1386|       |     *   we can rely on getting the port in the range 33445..33450, which
 1387|       |     *   enables us to tell joe user to open their firewall to a small range
 1388|       |     *
 1389|       |     * disadvantage:
 1390|       |     *   some clients might not test return of tox_new(), blindly assuming that
 1391|       |     *   it worked ok (which it did previously without a successful bind)
 1392|       |     */
 1393|      5|    uint16_t port_to_try = port_from;
 1394|      5|    *portptr = net_htons(port_to_try);
 1395|       |
 1396|      5|    for (uint16_t tries = port_from; tries <= port_to; ++tries) {
  ------------------
  |  Branch (1396:38): [True: 5, False: 0]
  ------------------
 1397|      5|        const int res = net_bind(ns, temp->sock, &addr);
 1398|       |
 1399|      5|        if (res == 0) {
  ------------------
  |  Branch (1399:13): [True: 5, False: 0]
  ------------------
 1400|      5|            temp->port = *portptr;
 1401|       |
 1402|      5|            Ip_Ntoa ip_str;
 1403|      5|            LOGGER_DEBUG(log, "Bound successfully to %s:%u", net_ip_ntoa(ip, &ip_str),
  ------------------
  |  |   77|      5|#define LOGGER_DEBUG(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_DEBUG, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      5|    do {                                                                         \
  |  |  |  |   70|      5|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     10|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      5|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1404|      5|                         net_ntohs(temp->port));
 1405|       |
 1406|       |            /* errno isn't reset on success, only set on failure, the failed
 1407|       |             * binds with parallel clients yield a -EPERM to the outside if
 1408|       |             * errno isn't cleared here */
 1409|      5|            if (tries > 0) {
  ------------------
  |  Branch (1409:17): [True: 5, False: 0]
  ------------------
 1410|      5|                errno = 0;
 1411|      5|            }
 1412|       |
 1413|      5|            if (error != nullptr) {
  ------------------
  |  |   63|      5|#define nullptr NULL
  ------------------
  |  Branch (1413:17): [True: 5, False: 0]
  ------------------
 1414|      5|                *error = 0;
 1415|      5|            }
 1416|       |
 1417|      5|            return temp;
 1418|      5|        }
 1419|       |
 1420|      0|        ++port_to_try;
 1421|       |
 1422|      0|        if (port_to_try > port_to) {
  ------------------
  |  Branch (1422:13): [True: 0, False: 0]
  ------------------
 1423|      0|            port_to_try = port_from;
 1424|      0|        }
 1425|       |
 1426|      0|        *portptr = net_htons(port_to_try);
 1427|      0|    }
 1428|       |
 1429|      0|    Ip_Ntoa ip_str;
 1430|      0|    const int neterror = net_error();
 1431|      0|    Net_Strerror error_str;
 1432|      0|    LOGGER_ERROR(log, "failed to bind socket: %d, %s IP: %s port_from: %u port_to: %u",
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1433|      0|                 neterror, net_strerror(neterror, &error_str), net_ip_ntoa(ip, &ip_str), port_from, port_to);
 1434|      0|    kill_networking(temp);
 1435|       |
 1436|      0|    if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1436:9): [True: 0, False: 0]
  ------------------
 1437|      0|        *error = 1;
 1438|      0|    }
 1439|       |
 1440|      0|    return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1441|      5|}
new_networking_no_udp:
 1444|     10|{
 1445|       |    /* this is the easiest way to completely disable UDP without changing too much code. */
 1446|     10|    Networking_Core *net = (Networking_Core *)mem_alloc(mem, sizeof(Networking_Core));
 1447|       |
 1448|     10|    if (net == nullptr) {
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  |  Branch (1448:9): [True: 1, False: 9]
  ------------------
 1449|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
 1450|      1|    }
 1451|       |
 1452|      9|    net->ns = ns;
 1453|      9|    net->log = log;
 1454|      9|    net->mem = mem;
 1455|       |
 1456|      9|    return net;
 1457|     10|}
kill_networking:
 1461|     14|{
 1462|     14|    if (net == nullptr) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (1462:9): [True: 0, False: 14]
  ------------------
 1463|      0|        return;
 1464|      0|    }
 1465|       |
 1466|     14|    if (!net_family_is_unspec(net->family)) {
  ------------------
  |  Branch (1466:9): [True: 5, False: 9]
  ------------------
 1467|       |        /* Socket is initialized, so we close it. */
 1468|      5|        kill_sock(net->ns, net->sock);
 1469|      5|    }
 1470|       |
 1471|     14|    netprof_kill(net->mem, net->udp_net_profile);
 1472|     14|    mem_delete(net->mem, net);
 1473|     14|}
ip_reset:
 1586|     18|{
 1587|     18|    if (ip == nullptr) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
  |  Branch (1587:9): [True: 0, False: 18]
  ------------------
 1588|      0|        return;
 1589|      0|    }
 1590|       |
 1591|     18|    *ip = empty_ip;
 1592|     18|}
ip_init:
 1608|     18|{
 1609|     18|    if (ip == nullptr) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
  |  Branch (1609:9): [True: 0, False: 18]
  ------------------
 1610|      0|        return;
 1611|      0|    }
 1612|       |
 1613|     18|    ip_reset(ip);
 1614|     18|    ip->family = ipv6enabled ? net_family_ipv6() : net_family_ipv4();
  ------------------
  |  Branch (1614:18): [True: 18, False: 0]
  ------------------
 1615|     18|}
addr_parse_ip:
 1853|     11|{
 1854|     11|    if (address == nullptr || to == nullptr) {
  ------------------
  |  |   63|     22|#define nullptr NULL
  ------------------
                  if (address == nullptr || to == nullptr) {
  ------------------
  |  |   63|     11|#define nullptr NULL
  ------------------
  |  Branch (1854:9): [True: 0, False: 11]
  |  Branch (1854:31): [True: 0, False: 11]
  ------------------
 1855|      0|        return false;
 1856|      0|    }
 1857|       |
 1858|     11|    struct in_addr addr4;
 1859|       |
 1860|     11|    if (inet_pton4(address, &addr4) == 1) {
  ------------------
  |  Branch (1860:9): [True: 11, False: 0]
  ------------------
 1861|     11|        to->family = net_family_ipv4();
 1862|     11|        get_ip4(&to->ip.v4, &addr4);
 1863|     11|        return true;
 1864|     11|    }
 1865|       |
 1866|      0|    struct in6_addr addr6;
 1867|       |
 1868|      0|    if (inet_pton6(address, &addr6) == 1) {
  ------------------
  |  Branch (1868:9): [True: 0, False: 0]
  ------------------
 1869|      0|        to->family = net_family_ipv6();
 1870|      0|        get_ip6(&to->ip.v6, &addr6);
 1871|      0|        return true;
 1872|      0|    }
 1873|       |
 1874|      0|    return false;
 1875|      0|}
addr_resolve_or_parse_ip:
 1988|     11|{
 1989|     11|    if (dns_enabled && addr_resolve(ns, mem, address, to, extra)) {
  ------------------
  |  Branch (1989:9): [True: 11, False: 0]
  |  Branch (1989:24): [True: 0, False: 11]
  ------------------
 1990|      0|        return true;
 1991|      0|    }
 1992|       |
 1993|     11|    return addr_parse_ip(address, to);
 1994|     11|}
net_socket:
 2209|      5|{
 2210|      5|    const int platform_domain = make_family(domain);
 2211|      5|    const int platform_type = make_socktype(type);
 2212|      5|    const int platform_prot = make_proto(protocol);
 2213|      5|    return ns->funcs->socket(ns->obj, platform_domain, platform_type, platform_prot);
 2214|      5|}
net_htons:
 2228|     16|{
 2229|     16|    return htons(hostshort);
 2230|     16|}
net_error:
 2313|      5|{
 2314|       |#ifdef OS_WIN32
 2315|       |    return WSAGetLastError();
 2316|       |#else
 2317|      5|    return errno;
 2318|      5|#endif /* OS_WIN32 */
 2319|      5|}
network.c:net_setsockopt:
  708|     20|{
  709|     20|    return ns->funcs->setsockopt(ns->obj, sock, level, optname, optval, optlen);
  710|     20|}
network.c:net_getsockopt:
  713|      5|{
  714|      5|    return ns->funcs->getsockopt(ns->obj, sock, level, optname, optval, optlen);
  715|      5|}
network.c:fill_addr6:
  321|      5|{
  322|      5|    memcpy(addr->s6_addr, ip->uint8, sizeof(ip->uint8));
  323|      5|}
network.c:net_bind:
  918|      5|{
  919|      5|    return ns->funcs->bind(ns->obj, sock, addr);
  920|      5|}
network.c:make_family:
  256|      5|{
  257|      5|    switch (tox_family.value) {
  258|      0|        case TOX_AF_INET:
  ------------------
  |  |  168|      0|#define TOX_AF_INET 2
  ------------------
  |  Branch (258:9): [True: 0, False: 5]
  ------------------
  259|      0|        case TCP_INET:
  ------------------
  |  |  181|      0|#define TCP_INET (TOX_AF_INET6 + 2)
  |  |  ------------------
  |  |  |  |  169|      0|#define TOX_AF_INET6 10
  |  |  ------------------
  ------------------
  |  Branch (259:9): [True: 0, False: 5]
  ------------------
  260|      0|            return AF_INET;
  261|       |
  262|      5|        case TOX_AF_INET6:
  ------------------
  |  |  169|      5|#define TOX_AF_INET6 10
  ------------------
  |  Branch (262:9): [True: 5, False: 0]
  ------------------
  263|      5|        case TCP_INET6:
  ------------------
  |  |  182|      5|#define TCP_INET6 (TOX_AF_INET6 + 3)
  |  |  ------------------
  |  |  |  |  169|      5|#define TOX_AF_INET6 10
  |  |  ------------------
  ------------------
  |  Branch (263:9): [True: 0, False: 5]
  ------------------
  264|      5|            return AF_INET6;
  265|       |
  266|      0|        case TOX_AF_UNSPEC:
  ------------------
  |  |  167|      0|#define TOX_AF_UNSPEC 0
  ------------------
  |  Branch (266:9): [True: 0, False: 5]
  ------------------
  267|      0|            return AF_UNSPEC;
  268|       |
  269|      0|        default:
  ------------------
  |  Branch (269:9): [True: 0, False: 5]
  ------------------
  270|      0|            return tox_family.value;
  271|      5|    }
  272|      5|}
network.c:inet_pton4:
  132|     11|{
  133|     11|    return inet_pton(AF_INET, addr_string, addrbuf);
  134|     11|}
network.c:get_ip4:
  302|     11|{
  303|     11|    static_assert(sizeof(result->uint32) == sizeof(addr->s_addr),
  304|     11|                  "Tox and operating system don't agree on size of IPv4 addresses");
  305|     11|    result->uint32 = addr->s_addr;
  306|     11|}
network.c:addr_resolve:
 1899|     11|{
 1900|     11|#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
 1901|     11|    if ((true)) {
  ------------------
  |  Branch (1901:9): [Folded - Ignored]
  ------------------
 1902|     11|        return false;
 1903|     11|    }
 1904|      0|#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
 1905|       |
 1906|      0|    if (address == nullptr || to == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
                  if (address == nullptr || to == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1906:9): [True: 0, False: 0]
  |  Branch (1906:31): [True: 0, False: 0]
  ------------------
 1907|      0|        return false;
 1908|      0|    }
 1909|       |
 1910|      0|    const Family tox_family = to->family;
 1911|      0|    const int family = make_family(tox_family);
 1912|       |
 1913|      0|    Network_Addr *addrs = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1914|      0|    const int rc = ns->funcs->getaddrinfo(ns->obj, mem, address, family, 0, &addrs);
 1915|       |
 1916|       |    // Lookup failed / empty.
 1917|      0|    if (rc <= 0) {
  ------------------
  |  Branch (1917:9): [True: 0, False: 0]
  ------------------
 1918|      0|        return false;
 1919|      0|    }
 1920|       |
 1921|      0|    assert(addrs != nullptr);
 1922|       |
 1923|      0|    IP ip4;
 1924|      0|    ip_init(&ip4, false); // ipv6enabled = false
 1925|      0|    IP ip6;
 1926|      0|    ip_init(&ip6, true); // ipv6enabled = true
 1927|       |
 1928|      0|    int result = 0;
 1929|      0|    bool done = false;
 1930|       |
 1931|      0|    for (int i = 0; i < rc && !done; ++i) {
  ------------------
  |  Branch (1931:21): [True: 0, False: 0]
  |  Branch (1931:31): [True: 0, False: 0]
  ------------------
 1932|      0|        switch (addrs[i].addr.ss_family) {
  ------------------
  |  Branch (1932:17): [True: 0, False: 0]
  ------------------
 1933|      0|            case AF_INET: {
  ------------------
  |  Branch (1933:13): [True: 0, False: 0]
  ------------------
 1934|      0|                if (addrs[i].addr.ss_family == family) { /* AF_INET requested, done */
  ------------------
  |  Branch (1934:21): [True: 0, False: 0]
  ------------------
 1935|      0|                    const struct sockaddr_in *addr = (const struct sockaddr_in *)(const void *)&addrs[i].addr;
 1936|      0|                    get_ip4(&to->ip.v4, &addr->sin_addr);
 1937|      0|                    result = TOX_ADDR_RESOLVE_INET;
  ------------------
  |  | 1878|      0|#define TOX_ADDR_RESOLVE_INET  1
  ------------------
 1938|      0|                    done = true;
 1939|      0|                } else if ((result & TOX_ADDR_RESOLVE_INET) == 0) { /* AF_UNSPEC requested, store away */
  ------------------
  |  | 1878|      0|#define TOX_ADDR_RESOLVE_INET  1
  ------------------
  |  Branch (1939:28): [True: 0, False: 0]
  ------------------
 1940|      0|                    const struct sockaddr_in *addr = (const struct sockaddr_in *)(const void *)&addrs[i].addr;
 1941|      0|                    get_ip4(&ip4.ip.v4, &addr->sin_addr);
 1942|      0|                    result |= TOX_ADDR_RESOLVE_INET;
  ------------------
  |  | 1878|      0|#define TOX_ADDR_RESOLVE_INET  1
  ------------------
 1943|      0|                }
 1944|       |
 1945|      0|                break; /* switch */
 1946|      0|            }
 1947|       |
 1948|      0|            case AF_INET6: {
  ------------------
  |  Branch (1948:13): [True: 0, False: 0]
  ------------------
 1949|      0|                if (addrs[i].addr.ss_family == family) { /* AF_INET6 requested, done */
  ------------------
  |  Branch (1949:21): [True: 0, False: 0]
  ------------------
 1950|      0|                    if (addrs[i].size == sizeof(struct sockaddr_in6)) {
  ------------------
  |  Branch (1950:25): [True: 0, False: 0]
  ------------------
 1951|      0|                        const struct sockaddr_in6 *addr = (const struct sockaddr_in6 *)(void *)&addrs[i].addr;
 1952|      0|                        get_ip6(&to->ip.v6, &addr->sin6_addr);
 1953|      0|                        result = TOX_ADDR_RESOLVE_INET6;
  ------------------
  |  | 1879|      0|#define TOX_ADDR_RESOLVE_INET6 2
  ------------------
 1954|      0|                        done = true;
 1955|      0|                    }
 1956|      0|                } else if ((result & TOX_ADDR_RESOLVE_INET6) == 0) { /* AF_UNSPEC requested, store away */
  ------------------
  |  | 1879|      0|#define TOX_ADDR_RESOLVE_INET6 2
  ------------------
  |  Branch (1956:28): [True: 0, False: 0]
  ------------------
 1957|      0|                    if (addrs[i].size == sizeof(struct sockaddr_in6)) {
  ------------------
  |  Branch (1957:25): [True: 0, False: 0]
  ------------------
 1958|      0|                        const struct sockaddr_in6 *addr = (const struct sockaddr_in6 *)(void *)&addrs[i].addr;
 1959|      0|                        get_ip6(&ip6.ip.v6, &addr->sin6_addr);
 1960|      0|                        result |= TOX_ADDR_RESOLVE_INET6;
  ------------------
  |  | 1879|      0|#define TOX_ADDR_RESOLVE_INET6 2
  ------------------
 1961|      0|                    }
 1962|      0|                }
 1963|       |
 1964|      0|                break; /* switch */
 1965|      0|            }
 1966|      0|        }
 1967|      0|    }
 1968|       |
 1969|      0|    if (family == AF_UNSPEC) {
  ------------------
  |  Branch (1969:9): [True: 0, False: 0]
  ------------------
 1970|      0|        if ((result & TOX_ADDR_RESOLVE_INET6) != 0) {
  ------------------
  |  | 1879|      0|#define TOX_ADDR_RESOLVE_INET6 2
  ------------------
  |  Branch (1970:13): [True: 0, False: 0]
  ------------------
 1971|      0|            ip_copy(to, &ip6);
 1972|       |
 1973|      0|            if ((result & TOX_ADDR_RESOLVE_INET) != 0 && (extra != nullptr)) {
  ------------------
  |  | 1878|      0|#define TOX_ADDR_RESOLVE_INET  1
  ------------------
                          if ((result & TOX_ADDR_RESOLVE_INET) != 0 && (extra != nullptr)) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1973:17): [True: 0, False: 0]
  |  Branch (1973:58): [True: 0, False: 0]
  ------------------
 1974|      0|                ip_copy(extra, &ip4);
 1975|      0|            }
 1976|      0|        } else if ((result & TOX_ADDR_RESOLVE_INET) != 0) {
  ------------------
  |  | 1878|      0|#define TOX_ADDR_RESOLVE_INET  1
  ------------------
  |  Branch (1976:20): [True: 0, False: 0]
  ------------------
 1977|      0|            ip_copy(to, &ip4);
 1978|      0|        } else {
 1979|      0|            result = 0;
 1980|      0|        }
 1981|      0|    }
 1982|       |
 1983|      0|    ns->funcs->freeaddrinfo(ns->obj, mem, addrs);
 1984|      0|    return result != 0;
 1985|      0|}
network.c:make_socktype:
  242|      5|{
  243|      5|    switch (type) {
  244|      0|        case TOX_SOCK_STREAM:
  ------------------
  |  |  173|      0|#define TOX_SOCK_STREAM 1
  ------------------
  |  Branch (244:9): [True: 0, False: 5]
  ------------------
  245|      0|            return SOCK_STREAM;
  246|       |
  247|      5|        case TOX_SOCK_DGRAM:
  ------------------
  |  |  174|      5|#define TOX_SOCK_DGRAM 2
  ------------------
  |  Branch (247:9): [True: 5, False: 0]
  ------------------
  248|      5|            return SOCK_DGRAM;
  249|       |
  250|      0|        default:
  ------------------
  |  Branch (250:9): [True: 0, False: 5]
  ------------------
  251|      0|            return type;
  252|      5|    }
  253|      5|}
network.c:make_proto:
  228|      5|{
  229|      5|    switch (proto) {
  230|      0|        case TOX_PROTO_TCP:
  ------------------
  |  |  176|      0|#define TOX_PROTO_TCP 1
  ------------------
  |  Branch (230:9): [True: 0, False: 5]
  ------------------
  231|      0|            return IPPROTO_TCP;
  232|       |
  233|      5|        case TOX_PROTO_UDP:
  ------------------
  |  |  177|      5|#define TOX_PROTO_UDP 2
  ------------------
  |  Branch (233:9): [True: 5, False: 0]
  ------------------
  234|      5|            return IPPROTO_UDP;
  235|       |
  236|      0|        default:
  ------------------
  |  Branch (236:9): [True: 0, False: 5]
  ------------------
  237|      0|            return proto;
  238|      5|    }
  239|      5|}

ping_new:
  328|     13|{
  329|     13|    Ping *ping = (Ping *)mem_alloc(mem, sizeof(Ping));
  330|       |
  331|     13|    if (ping == nullptr) {
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
  |  Branch (331:9): [True: 1, False: 12]
  ------------------
  332|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  333|      1|    }
  334|       |
  335|     12|    ping->ping_array = ping_array_new(mem, PING_NUM_MAX, PING_TIMEOUT);
  ------------------
  |  |   23|     12|#define PING_NUM_MAX 512
  ------------------
                  ping->ping_array = ping_array_new(mem, PING_NUM_MAX, PING_TIMEOUT);
  ------------------
  |  |   43|     12|#define PING_TIMEOUT 5
  ------------------
  336|       |
  337|     12|    if (ping->ping_array == nullptr) {
  ------------------
  |  |   63|     12|#define nullptr NULL
  ------------------
  |  Branch (337:9): [True: 2, False: 10]
  ------------------
  338|      2|        mem_delete(mem, ping);
  339|      2|        return nullptr;
  ------------------
  |  |   63|      2|#define nullptr NULL
  ------------------
  340|      2|    }
  341|       |
  342|     10|    ping->mono_time = mono_time;
  343|     10|    ping->rng = rng;
  344|     10|    ping->mem = mem;
  345|     10|    ping->dht = dht;
  346|     10|    networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_REQUEST, &handle_ping_request, dht);
  347|     10|    networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_RESPONSE, &handle_ping_response, dht);
  348|       |
  349|     10|    return ping;
  350|     12|}
ping_kill:
  353|     13|{
  354|     13|    if (ping == nullptr) {
  ------------------
  |  |   63|     13|#define nullptr NULL
  ------------------
  |  Branch (354:9): [True: 3, False: 10]
  ------------------
  355|      3|        return;
  356|      3|    }
  357|       |
  358|     10|    networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  359|     10|    networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|     10|#define nullptr NULL
  ------------------
  360|     10|    ping_array_kill(ping->ping_array);
  361|       |
  362|     10|    mem_delete(mem, ping);
  363|     10|}

ping_array_new:
   37|     21|{
   38|     21|    if (size == 0 || timeout == 0) {
  ------------------
  |  Branch (38:9): [True: 0, False: 21]
  |  Branch (38:22): [True: 0, False: 21]
  ------------------
   39|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   40|      0|    }
   41|       |
   42|     21|    if ((size & (size - 1)) != 0) {
  ------------------
  |  Branch (42:9): [True: 0, False: 21]
  ------------------
   43|       |        // Not a power of 2.
   44|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   45|      0|    }
   46|       |
   47|     21|    Ping_Array *const empty_array = (Ping_Array *)mem_alloc(mem, sizeof(Ping_Array));
   48|       |
   49|     21|    if (empty_array == nullptr) {
  ------------------
  |  |   63|     21|#define nullptr NULL
  ------------------
  |  Branch (49:9): [True: 1, False: 20]
  ------------------
   50|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
   51|      1|    }
   52|       |
   53|     20|    Ping_Array_Entry *entries = (Ping_Array_Entry *)mem_valloc(mem, size, sizeof(Ping_Array_Entry));
   54|       |
   55|     20|    if (entries == nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (55:9): [True: 1, False: 19]
  ------------------
   56|      1|        mem_delete(mem, empty_array);
   57|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
   58|      1|    }
   59|       |
   60|     19|    empty_array->mem = mem;
   61|     19|    empty_array->entries = entries;
   62|     19|    empty_array->last_deleted = 0;
   63|     19|    empty_array->last_added = 0;
   64|     19|    empty_array->total_size = size;
   65|     19|    empty_array->timeout = timeout;
   66|     19|    return empty_array;
   67|     20|}
ping_array_kill:
   77|     23|{
   78|     23|    if (array == nullptr) {
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
  |  Branch (78:9): [True: 4, False: 19]
  ------------------
   79|      4|        return;
   80|      4|    }
   81|       |
   82|     19|    while (array->last_deleted != array->last_added) {
  ------------------
  |  Branch (82:12): [True: 0, False: 19]
  ------------------
   83|      0|        const uint32_t index = array->last_deleted % array->total_size;
   84|      0|        clear_entry(array, index);
   85|      0|        ++array->last_deleted;
   86|      0|    }
   87|       |
   88|     19|    mem_delete(array->mem, array->entries);
   89|     19|    mem_delete(array->mem, array);
   90|     19|}

shared_key_cache_new:
   50|     20|{
   51|     20|    if (mono_time == nullptr || self_secret_key == nullptr || timeout == 0 || keys_per_slot == 0) {
  ------------------
  |  |   63|     40|#define nullptr NULL
  ------------------
                  if (mono_time == nullptr || self_secret_key == nullptr || timeout == 0 || keys_per_slot == 0) {
  ------------------
  |  |   63|     40|#define nullptr NULL
  ------------------
  |  Branch (51:9): [True: 0, False: 20]
  |  Branch (51:33): [True: 0, False: 20]
  |  Branch (51:63): [True: 0, False: 20]
  |  Branch (51:79): [True: 0, False: 20]
  ------------------
   52|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   53|      0|    }
   54|       |
   55|       |    // Time must not be zero, since we use that as special value for empty slots
   56|     20|    if (mono_time_get(mono_time) == 0) {
  ------------------
  |  Branch (56:9): [True: 0, False: 20]
  ------------------
   57|       |        // Fail loudly in debug environments
   58|      0|        LOGGER_FATAL(log, "time must not be zero (mono_time not initialised?)");
  ------------------
  |  |   83|      0|    do {                                \
  |  |   84|      0|        LOGGER_ERROR(log, __VA_ARGS__); \
  |  |  ------------------
  |  |  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   85|      0|        logger_abort();                 \
  |  |   86|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (86:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
   59|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   60|      0|    }
   61|       |
   62|     20|    Shared_Key_Cache *res = (Shared_Key_Cache *)mem_alloc(mem, sizeof(Shared_Key_Cache));
   63|     20|    if (res == nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (63:9): [True: 1, False: 19]
  ------------------
   64|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
   65|      1|    }
   66|       |
   67|     19|    res->self_secret_key = self_secret_key;
   68|     19|    res->mono_time = mono_time;
   69|     19|    res->mem = mem;
   70|     19|    res->log = log;
   71|     19|    res->keys_per_slot = keys_per_slot;
   72|       |
   73|       |    // We take one byte from the public key for each bucket and store keys_per_slot elements there
   74|     19|    const size_t cache_size = 256 * keys_per_slot;
   75|     19|    Shared_Key *keys = (Shared_Key *)mem_valloc(mem, cache_size, sizeof(Shared_Key));
   76|       |
   77|     19|    if (keys == nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (77:9): [True: 0, False: 19]
  ------------------
   78|      0|        mem_delete(mem, res);
   79|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   80|      0|    }
   81|       |
   82|     19|    crypto_memlock(keys, cache_size * sizeof(Shared_Key));
   83|       |
   84|     19|    res->keys = keys;
   85|       |
   86|     19|    return res;
   87|     19|}
shared_key_cache_free:
   90|     26|{
   91|     26|    if (cache == nullptr) {
  ------------------
  |  |   63|     26|#define nullptr NULL
  ------------------
  |  Branch (91:9): [True: 7, False: 19]
  ------------------
   92|      7|        return;
   93|      7|    }
   94|       |
   95|     19|    const size_t cache_size = 256 * cache->keys_per_slot;
   96|       |    // Don't leave key material in memory
   97|     19|    crypto_memzero(cache->keys, cache_size * sizeof(Shared_Key));
   98|     19|    crypto_memunlock(cache->keys, cache_size * sizeof(Shared_Key));
   99|     19|    mem_delete(cache->mem, cache->keys);
  100|     19|    mem_delete(cache->mem, cache);
  101|     19|}

tox_new_testing:
  951|     23|{
  952|     23|    if (testing == nullptr) {
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
  |  Branch (952:9): [True: 0, False: 23]
  ------------------
  953|      0|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_NULL);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  954|      0|        SET_ERROR_PARAMETER(testing_error, TOX_ERR_NEW_TESTING_NULL);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  955|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  956|      0|    }
  957|       |
  958|     23|    if (testing->operating_system == nullptr) {
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
  |  Branch (958:9): [True: 0, False: 23]
  ------------------
  959|      0|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_NULL);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  960|      0|        SET_ERROR_PARAMETER(testing_error, TOX_ERR_NEW_TESTING_NULL);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  961|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  962|      0|    }
  963|       |
  964|     23|    const Tox_System *sys = testing->operating_system;
  965|       |
  966|     23|    if (sys->rng == nullptr || sys->ns == nullptr || sys->mem == nullptr) {
  ------------------
  |  |   63|     46|#define nullptr NULL
  ------------------
                  if (sys->rng == nullptr || sys->ns == nullptr || sys->mem == nullptr) {
  ------------------
  |  |   63|     46|#define nullptr NULL
  ------------------
                  if (sys->rng == nullptr || sys->ns == nullptr || sys->mem == nullptr) {
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
  |  Branch (966:9): [True: 0, False: 23]
  |  Branch (966:32): [True: 0, False: 23]
  |  Branch (966:54): [True: 0, False: 23]
  ------------------
  967|      0|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_NULL);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  968|      0|        SET_ERROR_PARAMETER(testing_error, TOX_ERR_NEW_TESTING_NULL);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  969|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  970|      0|    }
  971|       |
  972|     23|    SET_ERROR_PARAMETER(testing_error, TOX_ERR_NEW_TESTING_OK);
  ------------------
  |  |   44|     23|    do {                              \
  |  |   45|     23|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|     46|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 23, False: 0]
  |  |  ------------------
  |  |   46|     23|            *param = x;               \
  |  |   47|     23|        }                             \
  |  |   48|     23|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  973|     23|    return tox_new_system(options, error, sys);
  974|     23|}
tox.c:tox_new_system:
  637|     23|{
  638|     23|    struct Tox_Options *default_options = nullptr;
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
  639|     23|    if (options == nullptr) {
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
  |  Branch (639:9): [True: 0, False: 23]
  ------------------
  640|      0|        Tox_Err_Options_New err;
  641|      0|        default_options = tox_options_new(&err);
  642|       |
  643|      0|        switch (err) {
  ------------------
  |  Branch (643:17): [True: 0, False: 0]
  ------------------
  644|      0|            case TOX_ERR_OPTIONS_NEW_OK: {
  ------------------
  |  Branch (644:13): [True: 0, False: 0]
  ------------------
  645|      0|                assert(default_options != nullptr);
  646|      0|                break;
  647|      0|            }
  648|       |
  649|      0|            case TOX_ERR_OPTIONS_NEW_MALLOC: {
  ------------------
  |  Branch (649:13): [True: 0, False: 0]
  ------------------
  650|      0|                SET_ERROR_PARAMETER(error, TOX_ERR_NEW_MALLOC);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  651|      0|                return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  652|      0|            }
  653|      0|        }
  654|      0|    }
  655|       |
  656|     23|    const struct Tox_Options *const opts = options != nullptr ? options : default_options;
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
  |  Branch (656:44): [True: 23, False: 0]
  ------------------
  657|     23|    assert(opts != nullptr);
  658|       |
  659|     23|    const Tox_System default_system = tox_default_system();
  660|       |
  661|     23|    if (sys == nullptr) {
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
  |  Branch (661:9): [True: 0, False: 23]
  ------------------
  662|      0|        sys = &default_system;
  663|      0|    }
  664|       |
  665|     23|    if (sys->rng == nullptr || sys->ns == nullptr || sys->mem == nullptr) {
  ------------------
  |  |   63|     46|#define nullptr NULL
  ------------------
                  if (sys->rng == nullptr || sys->ns == nullptr || sys->mem == nullptr) {
  ------------------
  |  |   63|     46|#define nullptr NULL
  ------------------
                  if (sys->rng == nullptr || sys->ns == nullptr || sys->mem == nullptr) {
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
  |  Branch (665:9): [True: 0, False: 23]
  |  Branch (665:32): [True: 0, False: 23]
  |  Branch (665:54): [True: 0, False: 23]
  ------------------
  666|       |        // TODO(iphydf): Not quite right, but similar.
  667|      0|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_MALLOC);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  668|      0|        tox_options_free(default_options);
  669|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  670|      0|    }
  671|       |
  672|     23|    Messenger_Options m_options = {false};
  673|       |
  674|     23|    m_options.dns_enabled = !tox_options_get_experimental_disable_dns(opts);
  675|       |
  676|     23|    bool load_savedata_sk = false;
  677|     23|    bool load_savedata_tox = false;
  678|       |
  679|     23|    if (tox_options_get_savedata_type(opts) != TOX_SAVEDATA_TYPE_NONE) {
  ------------------
  |  Branch (679:9): [True: 0, False: 23]
  ------------------
  680|      0|        if (tox_options_get_savedata_data(opts) == nullptr || tox_options_get_savedata_length(opts) == 0) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (680:13): [True: 0, False: 0]
  |  Branch (680:63): [True: 0, False: 0]
  ------------------
  681|      0|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_LOAD_BAD_FORMAT);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  682|      0|            tox_options_free(default_options);
  683|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  684|      0|        }
  685|      0|    }
  686|       |
  687|     23|    if (tox_options_get_savedata_type(opts) == TOX_SAVEDATA_TYPE_SECRET_KEY) {
  ------------------
  |  Branch (687:9): [True: 0, False: 23]
  ------------------
  688|      0|        if (tox_options_get_savedata_length(opts) != TOX_SECRET_KEY_SIZE) {
  ------------------
  |  |  219|      0|#define TOX_SECRET_KEY_SIZE            32
  ------------------
  |  Branch (688:13): [True: 0, False: 0]
  ------------------
  689|      0|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_LOAD_BAD_FORMAT);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  690|      0|            tox_options_free(default_options);
  691|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  692|      0|        }
  693|       |
  694|      0|        load_savedata_sk = true;
  695|     23|    } else if (tox_options_get_savedata_type(opts) == TOX_SAVEDATA_TYPE_TOX_SAVE) {
  ------------------
  |  Branch (695:16): [True: 0, False: 23]
  ------------------
  696|      0|        if (tox_options_get_savedata_length(opts) < TOX_ENC_SAVE_MAGIC_LENGTH) {
  ------------------
  |  |   10|      0|#define TOX_ENC_SAVE_MAGIC_LENGTH 8
  ------------------
  |  Branch (696:13): [True: 0, False: 0]
  ------------------
  697|      0|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_LOAD_BAD_FORMAT);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  698|      0|            tox_options_free(default_options);
  699|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  700|      0|        }
  701|       |
  702|      0|        if (memcmp(tox_options_get_savedata_data(opts), TOX_ENC_SAVE_MAGIC_NUMBER, TOX_ENC_SAVE_MAGIC_LENGTH) == 0) {
  ------------------
  |  |    9|      0|#define TOX_ENC_SAVE_MAGIC_NUMBER ((const uint8_t *)"toxEsave")
  ------------------
                      if (memcmp(tox_options_get_savedata_data(opts), TOX_ENC_SAVE_MAGIC_NUMBER, TOX_ENC_SAVE_MAGIC_LENGTH) == 0) {
  ------------------
  |  |   10|      0|#define TOX_ENC_SAVE_MAGIC_LENGTH 8
  ------------------
  |  Branch (702:13): [True: 0, False: 0]
  ------------------
  703|      0|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_LOAD_ENCRYPTED);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  704|      0|            tox_options_free(default_options);
  705|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  706|      0|        }
  707|       |
  708|      0|        load_savedata_tox = true;
  709|      0|    }
  710|       |
  711|     23|    m_options.ipv6enabled = tox_options_get_ipv6_enabled(opts);
  712|     23|    m_options.udp_disabled = !tox_options_get_udp_enabled(opts);
  713|     23|    m_options.port_range[0] = tox_options_get_start_port(opts);
  714|     23|    m_options.port_range[1] = tox_options_get_end_port(opts);
  715|     23|    m_options.tcp_server_port = tox_options_get_tcp_port(opts);
  716|     23|    m_options.hole_punching_enabled = tox_options_get_hole_punching_enabled(opts);
  717|     23|    m_options.local_discovery_enabled = tox_options_get_local_discovery_enabled(opts);
  718|     23|    m_options.dht_announcements_enabled = tox_options_get_dht_announcements_enabled(opts);
  719|     23|    m_options.groups_persistence_enabled = tox_options_get_experimental_groups_persistence(opts);
  720|       |
  721|     23|    if (m_options.udp_disabled) {
  ------------------
  |  Branch (721:9): [True: 0, False: 23]
  ------------------
  722|      0|        m_options.local_discovery_enabled = false;
  723|      0|    }
  724|       |
  725|     23|    Tox *tox = (Tox *)mem_alloc(sys->mem, sizeof(Tox));
  726|       |
  727|     23|    if (tox == nullptr) {
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
  |  Branch (727:9): [True: 1, False: 22]
  ------------------
  728|      1|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_MALLOC);
  ------------------
  |  |   44|      1|    do {                              \
  |  |   45|      1|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      2|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 1, False: 0]
  |  |  ------------------
  |  |   46|      1|            *param = x;               \
  |  |   47|      1|        }                             \
  |  |   48|      1|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  729|      1|        tox_options_free(default_options);
  730|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  731|      1|    }
  732|       |
  733|     22|    tox->log_callback = tox_options_get_log_callback(opts);
  734|     22|    m_options.log_callback = tox_log_handler;
  735|     22|    m_options.log_context = tox;
  736|     22|    m_options.log_user_data = tox_options_get_log_user_data(opts);
  737|       |
  738|     22|    switch (tox_options_get_proxy_type(opts)) {
  739|      4|        case TOX_PROXY_TYPE_HTTP: {
  ------------------
  |  Branch (739:9): [True: 4, False: 18]
  ------------------
  740|      4|            m_options.proxy_info.proxy_type = TCP_PROXY_HTTP;
  741|      4|            break;
  742|      0|        }
  743|       |
  744|      7|        case TOX_PROXY_TYPE_SOCKS5: {
  ------------------
  |  Branch (744:9): [True: 7, False: 15]
  ------------------
  745|      7|            m_options.proxy_info.proxy_type = TCP_PROXY_SOCKS5;
  746|      7|            break;
  747|      0|        }
  748|       |
  749|     11|        case TOX_PROXY_TYPE_NONE: {
  ------------------
  |  Branch (749:9): [True: 11, False: 11]
  ------------------
  750|     11|            m_options.proxy_info.proxy_type = TCP_PROXY_NONE;
  751|     11|            break;
  752|      0|        }
  753|       |
  754|      0|        default: {
  ------------------
  |  Branch (754:9): [True: 0, False: 22]
  ------------------
  755|      0|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_PROXY_BAD_TYPE);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  756|      0|            mem_delete(sys->mem, tox);
  757|      0|            tox_options_free(default_options);
  758|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  759|      0|        }
  760|     22|    }
  761|       |
  762|     22|    tox->sys = *sys;
  763|       |
  764|     22|    if (m_options.proxy_info.proxy_type != TCP_PROXY_NONE) {
  ------------------
  |  Branch (764:9): [True: 11, False: 11]
  ------------------
  765|     11|        if (tox_options_get_proxy_port(opts) == 0) {
  ------------------
  |  Branch (765:13): [True: 0, False: 11]
  ------------------
  766|      0|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_PROXY_BAD_PORT);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  767|      0|            mem_delete(sys->mem, tox);
  768|      0|            tox_options_free(default_options);
  769|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  770|      0|        }
  771|       |
  772|     11|        ip_init(&m_options.proxy_info.ip_port.ip, m_options.ipv6enabled);
  773|       |
  774|     11|        if (m_options.ipv6enabled) {
  ------------------
  |  Branch (774:13): [True: 11, False: 0]
  ------------------
  775|     11|            m_options.proxy_info.ip_port.ip.family = net_family_unspec();
  776|     11|        }
  777|       |
  778|     11|        const char *const proxy_host = tox_options_get_proxy_host(opts);
  779|     11|        const bool dns_enabled = !tox_options_get_experimental_disable_dns(opts);
  780|       |
  781|     11|        if (proxy_host == nullptr
  ------------------
  |  |   63|     22|#define nullptr NULL
  ------------------
  |  Branch (781:13): [True: 0, False: 11]
  ------------------
  782|     11|                || !addr_resolve_or_parse_ip(tox->sys.ns, tox->sys.mem, proxy_host, &m_options.proxy_info.ip_port.ip, nullptr, dns_enabled)) {
  ------------------
  |  |   63|     11|#define nullptr NULL
  ------------------
  |  Branch (782:20): [True: 0, False: 11]
  ------------------
  783|      0|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_PROXY_BAD_HOST);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  784|       |            // TODO(irungentoo): TOX_ERR_NEW_PROXY_NOT_FOUND if domain.
  785|      0|            mem_delete(sys->mem, tox);
  786|      0|            tox_options_free(default_options);
  787|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  788|      0|        }
  789|       |
  790|     11|        m_options.proxy_info.ip_port.port = net_htons(tox_options_get_proxy_port(opts));
  791|     11|    }
  792|       |
  793|     22|    tox->mono_time = mono_time_new(tox->sys.mem, sys->mono_time_callback, sys->mono_time_user_data);
  794|       |
  795|     22|    if (tox->mono_time == nullptr) {
  ------------------
  |  |   63|     22|#define nullptr NULL
  ------------------
  |  Branch (795:9): [True: 2, False: 20]
  ------------------
  796|      2|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_MALLOC);
  ------------------
  |  |   44|      2|    do {                              \
  |  |   45|      2|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      4|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 2, False: 0]
  |  |  ------------------
  |  |   46|      2|            *param = x;               \
  |  |   47|      2|        }                             \
  |  |   48|      2|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  797|      2|        mem_delete(sys->mem, tox);
  798|      2|        tox_options_free(default_options);
  799|      2|        return nullptr;
  ------------------
  |  |   63|      2|#define nullptr NULL
  ------------------
  800|      2|    }
  801|       |
  802|     20|    if (tox_options_get_experimental_thread_safety(opts)) {
  ------------------
  |  Branch (802:9): [True: 0, False: 20]
  ------------------
  803|      0|        pthread_mutex_t *mutex = (pthread_mutex_t *)mem_alloc(sys->mem, sizeof(pthread_mutex_t));
  804|       |
  805|      0|        if (mutex == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (805:13): [True: 0, False: 0]
  ------------------
  806|      0|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_MALLOC);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  807|      0|            mem_delete(sys->mem, tox);
  808|      0|            tox_options_free(default_options);
  809|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  810|      0|        }
  811|       |
  812|      0|        pthread_mutex_init(mutex, nullptr);
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  813|       |
  814|      0|        tox->mutex = mutex;
  815|     20|    } else {
  816|     20|        tox->mutex = nullptr;
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  817|     20|    }
  818|       |
  819|     20|    tox_lock(tox);
  820|       |
  821|     20|    Messenger_Error m_error;
  822|     20|    tox->m = new_messenger(tox->mono_time, tox->sys.mem, tox->sys.rng, tox->sys.ns, &m_options, &m_error);
  823|       |
  824|     20|    if (tox->m == nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (824:9): [True: 20, False: 0]
  ------------------
  825|     20|        switch (m_error) {
  ------------------
  |  Branch (825:17): [True: 0, False: 20]
  ------------------
  826|      0|            case MESSENGER_ERROR_PORT:
  ------------------
  |  Branch (826:13): [True: 0, False: 20]
  ------------------
  827|      0|            case MESSENGER_ERROR_TCP_SERVER: {
  ------------------
  |  Branch (827:13): [True: 0, False: 20]
  ------------------
  828|      0|                SET_ERROR_PARAMETER(error, TOX_ERR_NEW_PORT_ALLOC);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  829|      0|                break;
  830|      0|            }
  831|     20|            case MESSENGER_ERROR_OTHER:
  ------------------
  |  Branch (831:13): [True: 20, False: 0]
  ------------------
  832|     20|            case MESSENGER_ERROR_NONE: {
  ------------------
  |  Branch (832:13): [True: 0, False: 20]
  ------------------
  833|     20|                SET_ERROR_PARAMETER(error, TOX_ERR_NEW_MALLOC);
  ------------------
  |  |   44|     20|    do {                              \
  |  |   45|     20|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|     40|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 20, False: 0]
  |  |  ------------------
  |  |   46|     20|            *param = x;               \
  |  |   47|     20|        }                             \
  |  |   48|     20|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  834|     20|                break;
  835|     20|            }
  836|     20|        }
  837|       |
  838|     20|        mono_time_free(tox->sys.mem, tox->mono_time);
  839|     20|        tox_unlock(tox);
  840|       |
  841|     20|        if (tox->mutex != nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (841:13): [True: 0, False: 20]
  ------------------
  842|      0|            pthread_mutex_destroy(tox->mutex);
  843|      0|        }
  844|       |
  845|     20|        mem_delete(sys->mem, tox->mutex);
  846|     20|        mem_delete(sys->mem, tox);
  847|     20|        tox_options_free(default_options);
  848|     20|        return nullptr;
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  849|     20|    }
  850|       |
  851|      0|    tox->m->conferences_object = new_groupchats(tox->mono_time, sys->mem, tox->m);
  852|       |
  853|      0|    if (tox->m->conferences_object == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (853:9): [True: 0, False: 0]
  ------------------
  854|      0|        kill_messenger(tox->m);
  855|       |
  856|      0|        mono_time_free(tox->sys.mem, tox->mono_time);
  857|      0|        tox_unlock(tox);
  858|       |
  859|      0|        if (tox->mutex != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (859:13): [True: 0, False: 0]
  ------------------
  860|      0|            pthread_mutex_destroy(tox->mutex);
  861|      0|        }
  862|       |
  863|      0|        mem_delete(sys->mem, tox->mutex);
  864|      0|        mem_delete(sys->mem, tox);
  865|       |
  866|      0|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_MALLOC);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  867|      0|        tox_options_free(default_options);
  868|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  869|      0|    }
  870|       |
  871|      0|    if (load_savedata_tox
  ------------------
  |  Branch (871:9): [True: 0, False: 0]
  ------------------
  872|      0|            && tox_load(tox, tox_options_get_savedata_data(opts), tox_options_get_savedata_length(opts)) == -1) {
  ------------------
  |  Branch (872:16): [True: 0, False: 0]
  ------------------
  873|      0|        kill_groupchats(tox->m->conferences_object);
  874|      0|        kill_messenger(tox->m);
  875|       |
  876|      0|        mono_time_free(tox->sys.mem, tox->mono_time);
  877|      0|        tox_unlock(tox);
  878|       |
  879|      0|        if (tox->mutex != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (879:13): [True: 0, False: 0]
  ------------------
  880|      0|            pthread_mutex_destroy(tox->mutex);
  881|      0|        }
  882|       |
  883|      0|        mem_delete(sys->mem, tox->mutex);
  884|      0|        mem_delete(sys->mem, tox);
  885|       |
  886|      0|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_LOAD_BAD_FORMAT);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  887|      0|        tox_options_free(default_options);
  888|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  889|      0|    }
  890|       |
  891|      0|    if (load_savedata_sk) {
  ------------------
  |  Branch (891:9): [True: 0, False: 0]
  ------------------
  892|      0|        load_secret_key(tox->m->net_crypto, tox_options_get_savedata_data(opts));
  893|      0|    }
  894|       |
  895|      0|    m_callback_namechange(tox->m, tox_friend_name_handler);
  896|      0|    m_callback_core_connection(tox->m, tox_self_connection_status_handler);
  897|      0|    m_callback_statusmessage(tox->m, tox_friend_status_message_handler);
  898|      0|    m_callback_userstatus(tox->m, tox_friend_status_handler);
  899|      0|    m_callback_connectionstatus(tox->m, tox_friend_connection_status_handler);
  900|      0|    m_callback_typingchange(tox->m, tox_friend_typing_handler);
  901|      0|    m_callback_read_receipt(tox->m, tox_friend_read_receipt_handler);
  902|      0|    m_callback_friendrequest(tox->m, tox_friend_request_handler);
  903|      0|    m_callback_friendmessage(tox->m, tox_friend_message_handler);
  904|      0|    callback_file_control(tox->m, tox_file_recv_control_handler);
  905|      0|    callback_file_reqchunk(tox->m, tox_file_chunk_request_handler);
  906|      0|    callback_file_sendrequest(tox->m, tox_file_recv_handler);
  907|      0|    callback_file_data(tox->m, tox_file_recv_chunk_handler);
  908|      0|    dht_callback_nodes_response(tox->m->dht, tox_dht_nodes_response_handler);
  909|      0|    g_callback_group_invite(tox->m->conferences_object, tox_conference_invite_handler);
  910|      0|    g_callback_group_connected(tox->m->conferences_object, tox_conference_connected_handler);
  911|      0|    g_callback_group_message(tox->m->conferences_object, tox_conference_message_handler);
  912|      0|    g_callback_group_title(tox->m->conferences_object, tox_conference_title_handler);
  913|      0|    g_callback_peer_name(tox->m->conferences_object, tox_conference_peer_name_handler);
  914|      0|    g_callback_peer_list_changed(tox->m->conferences_object, tox_conference_peer_list_changed_handler);
  915|      0|    custom_lossy_packet_registerhandler(tox->m, tox_friend_lossy_packet_handler);
  916|      0|    custom_lossless_packet_registerhandler(tox->m, tox_friend_lossless_packet_handler);
  917|       |
  918|      0|    m_callback_group_invite(tox->m, tox_group_invite_handler);
  919|      0|    gc_callback_message(tox->m, tox_group_message_handler);
  920|      0|    gc_callback_private_message(tox->m, tox_group_private_message_handler);
  921|      0|    gc_callback_custom_packet(tox->m, tox_group_custom_packet_handler);
  922|      0|    gc_callback_custom_private_packet(tox->m, tox_group_custom_private_packet_handler);
  923|      0|    gc_callback_moderation(tox->m, tox_group_moderation_handler);
  924|      0|    gc_callback_nick_change(tox->m, tox_group_peer_name_handler);
  925|      0|    gc_callback_status_change(tox->m, tox_group_peer_status_handler);
  926|      0|    gc_callback_topic_change(tox->m, tox_group_topic_handler);
  927|      0|    gc_callback_peer_limit(tox->m, tox_group_peer_limit_handler);
  928|      0|    gc_callback_privacy_state(tox->m, tox_group_privacy_state_handler);
  929|      0|    gc_callback_topic_lock(tox->m, tox_group_topic_lock_handler);
  930|      0|    gc_callback_password(tox->m, tox_group_password_handler);
  931|      0|    gc_callback_peer_join(tox->m, tox_group_peer_join_handler);
  932|      0|    gc_callback_peer_exit(tox->m, tox_group_peer_exit_handler);
  933|      0|    gc_callback_self_join(tox->m, tox_group_self_join_handler);
  934|      0|    gc_callback_rejected(tox->m, tox_group_join_fail_handler);
  935|      0|    gc_callback_voice_state(tox->m, tox_group_voice_state_handler);
  936|       |
  937|      0|    tox_unlock(tox);
  938|       |
  939|      0|    SET_ERROR_PARAMETER(error, TOX_ERR_NEW_OK);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  940|       |
  941|      0|    tox_options_free(default_options);
  942|      0|    return tox;
  943|      0|}
tox.c:tox_log_handler:
   85|     25|{
   86|     25|    Tox *tox = (Tox *)context;
   87|     25|    assert(tox != nullptr);
   88|       |
   89|     25|    if (tox->log_callback != nullptr) {
  ------------------
  |  |   63|     25|#define nullptr NULL
  ------------------
  |  Branch (89:9): [True: 25, False: 0]
  ------------------
   90|     25|        tox->log_callback(tox, (Tox_Log_Level)level, file, line, func, message, userdata);
   91|     25|    }
   92|     25|}

tox_options_get_ipv6_enabled:
   22|     23|{
   23|     23|    return options->ipv6_enabled;
   24|     23|}
tox_options_set_ipv6_enabled:
   26|     27|{
   27|     27|    options->ipv6_enabled = ipv6_enabled;
   28|     27|}
tox_options_get_udp_enabled:
   30|     23|{
   31|     23|    return options->udp_enabled;
   32|     23|}
tox_options_set_udp_enabled:
   34|     27|{
   35|     27|    options->udp_enabled = udp_enabled;
   36|     27|}
tox_options_get_proxy_type:
   38|     22|{
   39|     22|    return options->proxy_type;
   40|     22|}
tox_options_set_proxy_type:
   42|     49|{
   43|     49|    options->proxy_type = proxy_type;
   44|     49|}
tox_options_get_proxy_host:
   46|     11|{
   47|     11|    return options->proxy_host;
   48|     11|}
tox_options_set_proxy_host:
   50|     68|{
   51|     68|    if (!options->experimental_owned_data) {
  ------------------
  |  Branch (51:9): [True: 68, False: 0]
  ------------------
   52|     68|        options->proxy_host = proxy_host;
   53|     68|        return true;
   54|     68|    }
   55|       |
   56|      0|    if (options->owned_proxy_host != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (56:9): [True: 0, False: 0]
  ------------------
   57|      0|        free(options->owned_proxy_host);
   58|      0|        options->owned_proxy_host = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   59|      0|    }
   60|      0|    if (proxy_host == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (60:9): [True: 0, False: 0]
  ------------------
   61|      0|        options->proxy_host = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   62|      0|        return true;
   63|      0|    }
   64|       |
   65|      0|    const size_t proxy_host_length = strlen(proxy_host) + 1;
   66|      0|    char *owned_ptr = (char *)malloc(proxy_host_length);
   67|      0|    if (owned_ptr == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (67:9): [True: 0, False: 0]
  ------------------
   68|      0|        options->proxy_host = proxy_host;
   69|      0|        options->owned_proxy_host = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   70|      0|        return false;
   71|      0|    }
   72|       |
   73|      0|    memcpy(owned_ptr, proxy_host, proxy_host_length);
   74|      0|    options->proxy_host = owned_ptr;
   75|      0|    options->owned_proxy_host = owned_ptr;
   76|      0|    return true;
   77|      0|}
tox_options_get_proxy_port:
   79|     22|{
   80|     22|    return options->proxy_port;
   81|     22|}
tox_options_set_proxy_port:
   83|     14|{
   84|     14|    options->proxy_port = proxy_port;
   85|     14|}
tox_options_get_start_port:
   87|     23|{
   88|     23|    return options->start_port;
   89|     23|}
tox_options_get_end_port:
   95|     23|{
   96|     23|    return options->end_port;
   97|     23|}
tox_options_get_tcp_port:
  103|     23|{
  104|     23|    return options->tcp_port;
  105|     23|}
tox_options_set_tcp_port:
  107|     10|{
  108|     10|    options->tcp_port = tcp_port;
  109|     10|}
tox_options_get_hole_punching_enabled:
  111|     23|{
  112|     23|    return options->hole_punching_enabled;
  113|     23|}
tox_options_set_hole_punching_enabled:
  115|     27|{
  116|     27|    options->hole_punching_enabled = hole_punching_enabled;
  117|     27|}
tox_options_get_savedata_type:
  119|     69|{
  120|     69|    return options->savedata_type;
  121|     69|}
tox_options_get_log_callback:
  135|     22|{
  136|     22|    return options->log_callback;
  137|     22|}
tox_options_set_log_callback:
  139|     27|{
  140|     27|    options->log_callback = log_callback;
  141|     27|}
tox_options_get_log_user_data:
  143|     22|{
  144|     22|    return options->log_user_data;
  145|     22|}
tox_options_get_local_discovery_enabled:
  151|     23|{
  152|     23|    return options->local_discovery_enabled;
  153|     23|}
tox_options_set_local_discovery_enabled:
  155|     27|{
  156|     27|    options->local_discovery_enabled = local_discovery_enabled;
  157|     27|}
tox_options_get_dht_announcements_enabled:
  159|     23|{
  160|     23|    return options->dht_announcements_enabled;
  161|     23|}
tox_options_set_dht_announcements_enabled:
  163|     27|{
  164|     27|    options->dht_announcements_enabled = dht_announcements_enabled;
  165|     27|}
tox_options_get_experimental_thread_safety:
  167|     20|{
  168|     20|    return options->experimental_thread_safety;
  169|     20|}
tox_options_set_experimental_thread_safety:
  172|     27|{
  173|     27|    options->experimental_thread_safety = experimental_thread_safety;
  174|     27|}
tox_options_get_experimental_groups_persistence:
  176|     23|{
  177|     23|    return options->experimental_groups_persistence;
  178|     23|}
tox_options_set_experimental_groups_persistence:
  181|     27|{
  182|     27|    options->experimental_groups_persistence = experimental_groups_persistence;
  183|     27|}
tox_options_get_experimental_disable_dns:
  185|     34|{
  186|     34|    return options->experimental_disable_dns;
  187|     34|}
tox_options_set_experimental_disable_dns:
  189|     27|{
  190|     27|    options->experimental_disable_dns = experimental_disable_dns;
  191|     27|}
tox_options_set_experimental_owned_data:
  198|     27|{
  199|     27|    options->experimental_owned_data = experimental_owned_data;
  200|     27|}
tox_options_set_savedata_data:
  208|     54|{
  209|     54|    if (!options->experimental_owned_data) {
  ------------------
  |  Branch (209:9): [True: 54, False: 0]
  ------------------
  210|     54|        options->savedata_data = savedata_data;
  211|     54|        options->savedata_length = length;
  212|     54|        return true;
  213|     54|    }
  214|       |
  215|      0|    if (options->owned_savedata_data != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (215:9): [True: 0, False: 0]
  ------------------
  216|      0|        free(options->owned_savedata_data);
  217|      0|        options->owned_savedata_data = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  218|      0|    }
  219|      0|    if (savedata_data == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (219:9): [True: 0, False: 0]
  ------------------
  220|      0|        options->savedata_data = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  221|      0|        options->savedata_length = 0;
  222|      0|        return true;
  223|      0|    }
  224|       |
  225|      0|    uint8_t *owned_ptr = (uint8_t *)malloc(length);
  226|      0|    if (owned_ptr == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (226:9): [True: 0, False: 0]
  ------------------
  227|      0|        options->savedata_data = savedata_data;
  228|      0|        options->savedata_length = length;
  229|      0|        options->owned_savedata_data = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  230|      0|        return false;
  231|      0|    }
  232|       |
  233|      0|    memcpy(owned_ptr, savedata_data, length);
  234|      0|    options->savedata_data = owned_ptr;
  235|      0|    options->savedata_length = length;
  236|      0|    options->owned_savedata_data = owned_ptr;
  237|      0|    return true;
  238|      0|}
tox_options_default:
  241|     27|{
  242|     27|    if (options != nullptr) {
  ------------------
  |  |   63|     27|#define nullptr NULL
  ------------------
  |  Branch (242:9): [True: 27, False: 0]
  ------------------
  243|       |        // Free any owned data.
  244|     27|        tox_options_set_proxy_host(options, nullptr);
  ------------------
  |  |   63|     27|#define nullptr NULL
  ------------------
  245|     27|        tox_options_set_savedata_data(options, nullptr, 0);
  ------------------
  |  |   63|     27|#define nullptr NULL
  ------------------
  246|       |
  247|       |        // Set the rest to default values.
  248|     27|        const Tox_Options default_options = {false};
  249|     27|        *options = default_options;
  250|     27|        tox_options_set_ipv6_enabled(options, true);
  251|     27|        tox_options_set_udp_enabled(options, true);
  252|     27|        tox_options_set_proxy_type(options, TOX_PROXY_TYPE_NONE);
  253|     27|        tox_options_set_hole_punching_enabled(options, true);
  254|     27|        tox_options_set_local_discovery_enabled(options, true);
  255|     27|        tox_options_set_dht_announcements_enabled(options, true);
  256|     27|        tox_options_set_experimental_thread_safety(options, false);
  257|     27|        tox_options_set_experimental_groups_persistence(options, false);
  258|     27|        tox_options_set_experimental_disable_dns(options, false);
  259|     27|        tox_options_set_experimental_owned_data(options, false);
  260|     27|    }
  261|     27|}
tox_options_new:
  264|     27|{
  265|     27|    Tox_Options *options = (Tox_Options *)calloc(1, sizeof(Tox_Options));
  266|       |
  267|     27|    if (options != nullptr) {
  ------------------
  |  |   63|     27|#define nullptr NULL
  ------------------
  |  Branch (267:9): [True: 27, False: 0]
  ------------------
  268|     27|        tox_options_default(options);
  269|     27|        SET_ERROR_PARAMETER(error, TOX_ERR_OPTIONS_NEW_OK);
  ------------------
  |  |   14|     27|    do {                              \
  |  |   15|     27|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|     54|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (15:13): [True: 0, False: 27]
  |  |  ------------------
  |  |   16|      0|            *param = x;               \
  |  |   17|      0|        }                             \
  |  |   18|     27|    } while (0)
  |  |  ------------------
  |  |  |  Branch (18:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  270|     27|        return options;
  271|     27|    }
  272|       |
  273|      0|    SET_ERROR_PARAMETER(error, TOX_ERR_OPTIONS_NEW_MALLOC);
  ------------------
  |  |   14|      0|    do {                              \
  |  |   15|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (15:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   16|      0|            *param = x;               \
  |  |   17|      0|        }                             \
  |  |   18|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (18:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  274|      0|    return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  275|     27|}
tox_options_free:
  278|     50|{
  279|     50|    if (options != nullptr) {
  ------------------
  |  |   63|     50|#define nullptr NULL
  ------------------
  |  Branch (279:9): [True: 27, False: 23]
  ------------------
  280|       |        // Free any owned data.
  281|     27|        tox_options_set_proxy_host(options, nullptr);
  ------------------
  |  |   63|     27|#define nullptr NULL
  ------------------
  282|     27|        tox_options_set_savedata_data(options, nullptr, 0);
  ------------------
  |  |   63|     27|#define nullptr NULL
  ------------------
  283|     27|        free(options);
  284|     27|    }
  285|     50|}

tox_default_system:
   36|     23|{
   37|     23|    const Tox_System sys = {
   38|     23|        nullptr,  // mono_time_callback
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
   39|     23|        nullptr,  // mono_time_user_data
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
   40|     23|        os_random(),
   41|     23|        os_network(),
   42|     23|        os_memory(),
   43|     23|    };
   44|     23|    return sys;
   45|     23|}
tox_lock:
   48|     20|{
   49|     20|    if (tox->mutex != nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (49:9): [True: 0, False: 20]
  ------------------
   50|      0|        pthread_mutex_lock(tox->mutex);
   51|      0|    }
   52|     20|}
tox_unlock:
   55|     20|{
   56|     20|    if (tox->mutex != nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (56:9): [True: 0, False: 20]
  ------------------
   57|      0|        pthread_mutex_unlock(tox->mutex);
   58|      0|    }
   59|     20|}

memzero:
   99|     60|{
  100|     60|    if (data == nullptr || data_size == 0) {
  ------------------
  |  |   63|    120|#define nullptr NULL
  ------------------
  |  Branch (100:9): [True: 0, False: 60]
  |  Branch (100:28): [True: 0, False: 60]
  ------------------
  101|      0|        return;
  102|      0|    }
  103|       |
  104|     60|    memset(data, 0, data_size);
  105|     60|}

