_ZNK9Fuzz_Data4sizeEv:
   69|     97|    std::size_t size() const { return size_; }
_ZN9Fuzz_Data8consume1EPKc:
   68|     59|    Consumer consume1(const char *func) { return Consumer{func, *this}; }
_ZN9Fuzz_Data8ConsumercvT_ItEEv:
   60|     20|        {
   61|     20|            const uint8_t *bytes = fd.consume(func, sizeof(T));
   62|     20|            T val;
   63|     20|            std::memcpy(&val, bytes, sizeof(T));
   64|     20|            return val;
   65|     20|        }
_ZN9Fuzz_Data7consumeEPKcm:
   75|     60|    {
   76|     60|        const uint8_t *val = data_;
   77|     60|        if (FUZZ_DEBUG) {
  ------------------
  |  Branch (77:13): [Folded - Ignored]
  ------------------
   78|      0|            if (pos() == TRACE_TRAP) {
  ------------------
  |  Branch (78:17): [True: 0, False: 0]
  ------------------
   79|      0|                __asm__("int $3");
   80|      0|            }
   81|      0|            if (count == 1) {
  ------------------
  |  Branch (81:17): [True: 0, False: 0]
  ------------------
   82|      0|                std::printf("consume@%zu(%s): %d (0x%02x)\n", pos(), func, val[0], val[0]);
   83|      0|            } else if (count != 0) {
  ------------------
  |  Branch (83:24): [True: 0, False: 0]
  ------------------
   84|      0|                std::printf("consume@%zu(%s): %02x..%02x[%zu]\n", pos(), func, val[0],
   85|      0|                    val[count - 1], count);
   86|      0|            }
   87|      0|        }
   88|     60|        data_ += count;
   89|     60|        size_ -= count;
   90|     60|        return val;
   91|     60|    }
_ZNK9Fuzz_Data4dataEv:
   71|     35|    const uint8_t *data() const { return data_; }
group_moderation_fuzz_test.cc:_Z18fuzz_select_targetIJXadL_ZN12_GLOBAL__N_117TestModListUnpackER9Fuzz_DataEEXadL_ZNS0_23TestSanctionsListUnpackES2_EEXadL_ZNS0_23TestSanctionCredsUnpackES2_EEEEvPKhm:
  183|     39|{
  184|     39|    Fuzz_Data input{data, size};
  185|       |
  186|     39|    CONSUME1_OR_RETURN(const uint8_t, selector, input);
  ------------------
  |  |  105|     39|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 0, False: 39]
  |  |  ------------------
  |  |  106|      0|        return;                               \
  |  |  107|      0|    }                                         \
  |  |  108|     39|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
  187|     39|    return Fuzz_Target_Selector<Args...>::select(selector, input);
  188|     39|}
_ZN9Fuzz_DataC2EPKhm:
   32|     39|        : data_(input_data)
   33|     39|        , base_(input_data)
   34|     39|        , size_(input_size)
   35|     39|    {
   36|     39|    }
_ZN9Fuzz_Data8ConsumercvT_IhEEv:
   60|     39|        {
   61|     39|            const uint8_t *bytes = fd.consume(func, sizeof(T));
   62|     39|            T val;
   63|     39|            std::memcpy(&val, bytes, sizeof(T));
   64|     39|            return val;
   65|     39|        }
group_moderation_fuzz_test.cc:_ZN20Fuzz_Target_SelectorIJXadL_ZN12_GLOBAL__N_117TestModListUnpackER9Fuzz_DataEEXadL_ZNS0_23TestSanctionsListUnpackES2_EEXadL_ZNS0_23TestSanctionCredsUnpackES2_EEEE6selectEhS2_:
  164|     39|    {
  165|     39|        if (selector == sizeof...(Args)) {
  ------------------
  |  Branch (165:13): [True: 21, False: 18]
  ------------------
  166|     21|            return Arg(input);
  167|     21|        }
  168|     18|        return Fuzz_Target_Selector<Args...>::select(selector, input);
  169|     39|    }
group_moderation_fuzz_test.cc:_ZN20Fuzz_Target_SelectorIJXadL_ZN12_GLOBAL__N_123TestSanctionsListUnpackER9Fuzz_DataEEXadL_ZNS0_23TestSanctionCredsUnpackES2_EEEE6selectEhS2_:
  164|     18|    {
  165|     18|        if (selector == sizeof...(Args)) {
  ------------------
  |  Branch (165:13): [True: 15, False: 3]
  ------------------
  166|     15|            return Arg(input);
  167|     15|        }
  168|      3|        return Fuzz_Target_Selector<Args...>::select(selector, input);
  169|     18|    }
group_moderation_fuzz_test.cc:_ZN20Fuzz_Target_SelectorIJXadL_ZN12_GLOBAL__N_123TestSanctionCredsUnpackER9Fuzz_DataEEEE6selectEhS2_:
  164|      3|    {
  165|      3|        if (selector == sizeof...(Args)) {
  ------------------
  |  Branch (165:13): [True: 2, False: 1]
  ------------------
  166|      2|            return Arg(input);
  167|      2|        }
  168|      1|        return Fuzz_Target_Selector<Args...>::select(selector, input);
  169|      3|    }
_ZN20Fuzz_Target_SelectorIJEE6selectEhR9Fuzz_Data:
  175|      1|    {
  176|       |        // The selector selected no function, so we do nothing and rely on the
  177|       |        // fuzzer to come up with a better selector.
  178|      1|    }

mod_list_unpack:
   43|     20|{
   44|     20|    if (length < num_mods * MOD_LIST_ENTRY_SIZE) {
  ------------------
  |  |   27|     20|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|     20|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|     20|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (44:9): [True: 1, False: 19]
  ------------------
   45|      1|        return -1;
   46|      1|    }
   47|       |
   48|     19|    mod_list_cleanup(moderation);
   49|       |
   50|     19|    if (num_mods == 0) {
  ------------------
  |  Branch (50:9): [True: 1, False: 18]
  ------------------
   51|      1|        return 0;
   52|      1|    }
   53|       |
   54|     18|    uint8_t **tmp_list = (uint8_t **)mem_valloc(moderation->mem, num_mods, sizeof(uint8_t *));
   55|       |
   56|     18|    if (tmp_list == nullptr) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
  |  Branch (56:9): [True: 0, False: 18]
  ------------------
   57|      0|        return -1;
   58|      0|    }
   59|       |
   60|     18|    uint16_t unpacked_len = 0;
   61|       |
   62|    422|    for (uint16_t i = 0; i < num_mods; ++i) {
  ------------------
  |  Branch (62:26): [True: 404, False: 18]
  ------------------
   63|    404|        uint8_t *entry = (uint8_t *)mem_balloc(moderation->mem, MOD_LIST_ENTRY_SIZE);
  ------------------
  |  |   27|    404|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|    404|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|    404|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   64|       |
   65|    404|        if (entry == nullptr) {
  ------------------
  |  |   63|    404|#define nullptr NULL
  ------------------
  |  Branch (65:13): [True: 0, False: 404]
  ------------------
   66|      0|            free_uint8_t_pointer_array(moderation->mem, tmp_list, i);
   67|      0|            return -1;
   68|      0|        }
   69|       |
   70|    404|        memcpy(entry, &data[i * MOD_LIST_ENTRY_SIZE], MOD_LIST_ENTRY_SIZE);
  ------------------
  |  |   27|    404|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|    404|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|    404|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                      memcpy(entry, &data[i * MOD_LIST_ENTRY_SIZE], MOD_LIST_ENTRY_SIZE);
  ------------------
  |  |   27|    404|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|    404|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|    404|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   71|    404|        tmp_list[i] = entry;
   72|       |
   73|    404|        unpacked_len += MOD_LIST_ENTRY_SIZE;
  ------------------
  |  |   27|    404|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|    404|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|    404|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   74|    404|    }
   75|       |
   76|     18|    moderation->mod_list = tmp_list;
   77|     18|    moderation->num_mods = num_mods;
   78|       |
   79|     18|    return unpacked_len;
   80|     18|}
mod_list_cleanup:
  229|     39|{
  230|     39|    free_uint8_t_pointer_array(moderation->mem, moderation->mod_list, moderation->num_mods);
  231|     39|    moderation->num_mods = 0;
  232|     39|    moderation->mod_list = nullptr;
  ------------------
  |  |   63|     39|#define nullptr NULL
  ------------------
  233|     39|}
sanctions_creds_unpack:
  318|      2|{
  319|      2|    uint16_t len_processed = 0;
  320|       |
  321|      2|    net_unpack_u32(&data[len_processed], &creds->version);
  322|      2|    len_processed += sizeof(uint32_t);
  323|      2|    memcpy(creds->hash, &data[len_processed], MOD_SANCTION_HASH_SIZE);
  ------------------
  |  |   28|      2|#define MOD_SANCTION_HASH_SIZE CRYPTO_SHA256_SIZE
  |  |  ------------------
  |  |  |  |   74|      2|#define CRYPTO_SHA256_SIZE             32
  |  |  ------------------
  ------------------
  324|      2|    len_processed += MOD_SANCTION_HASH_SIZE;
  ------------------
  |  |   28|      2|#define MOD_SANCTION_HASH_SIZE CRYPTO_SHA256_SIZE
  |  |  ------------------
  |  |  |  |   74|      2|#define CRYPTO_SHA256_SIZE             32
  |  |  ------------------
  ------------------
  325|      2|    net_unpack_u16(&data[len_processed], &creds->checksum);
  326|      2|    len_processed += sizeof(uint16_t);
  327|      2|    memcpy(creds->sig_pk, &data[len_processed], SIG_PUBLIC_KEY_SIZE);
  ------------------
  |  |  132|      2|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   33|      2|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  ------------------
  ------------------
  328|      2|    len_processed += SIG_PUBLIC_KEY_SIZE;
  ------------------
  |  |  132|      2|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   33|      2|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  ------------------
  ------------------
  329|      2|    memcpy(creds->sig, &data[len_processed], SIGNATURE_SIZE);
  ------------------
  |  |   27|      2|#define SIGNATURE_SIZE CRYPTO_SIGNATURE_SIZE
  |  |  ------------------
  |  |  |  |   28|      2|#define CRYPTO_SIGNATURE_SIZE          64
  |  |  ------------------
  ------------------
  330|      2|    len_processed += SIGNATURE_SIZE;
  ------------------
  |  |   27|      2|#define SIGNATURE_SIZE CRYPTO_SIGNATURE_SIZE
  |  |  ------------------
  |  |  |  |   28|      2|#define CRYPTO_SIGNATURE_SIZE          64
  |  |  ------------------
  ------------------
  331|       |
  332|      2|    return len_processed;
  333|      2|}
sanctions_list_unpack:
  337|     15|{
  338|     15|    uint16_t num = 0;
  339|     15|    uint16_t len_processed = 0;
  340|       |
  341|     64|    while (num < max_sanctions && num < MOD_MAX_NUM_SANCTIONS && len_processed < length) {
  ------------------
  |  |   52|    126|#define MOD_MAX_NUM_SANCTIONS        (MOD_MAX_NUM_SANCTIONS_LIMIT / 12)
  |  |  ------------------
  |  |  |  |   49|     62|#define MOD_MAX_NUM_SANCTIONS_LIMIT  (((MAX_PACKET_SIZE_NO_HEADERS - (MOD_SANCTIONS_CREDS_SIZE)) / (MOD_SANCTION_PACKED_SIZE)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   40|     62|#define MAX_PACKET_SIZE_NO_HEADERS 49900
  |  |  |  |  ------------------
  |  |  |  |               #define MOD_MAX_NUM_SANCTIONS_LIMIT  (((MAX_PACKET_SIZE_NO_HEADERS - (MOD_SANCTIONS_CREDS_SIZE)) / (MOD_SANCTION_PACKED_SIZE)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|     62|#define MOD_SANCTIONS_CREDS_SIZE (sizeof(uint32_t) + MOD_SANCTION_HASH_SIZE + sizeof(uint16_t) +\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|     62|#define MOD_SANCTION_HASH_SIZE CRYPTO_SHA256_SIZE
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   74|     62|#define CRYPTO_SHA256_SIZE             32
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |   34|     62|                                       SIG_PUBLIC_KEY_SIZE + SIGNATURE_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  132|     62|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   33|     62|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                                                      SIG_PUBLIC_KEY_SIZE + SIGNATURE_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|     62|#define SIGNATURE_SIZE CRYPTO_SIGNATURE_SIZE
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   28|     62|#define CRYPTO_SIGNATURE_SIZE          64
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MOD_MAX_NUM_SANCTIONS_LIMIT  (((MAX_PACKET_SIZE_NO_HEADERS - (MOD_SANCTIONS_CREDS_SIZE)) / (MOD_SANCTION_PACKED_SIZE)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|     62|#define MOD_SANCTION_PACKED_SIZE (SIG_PUBLIC_KEY_SIZE + TIME_STAMP_SIZE + 1 + ENC_PUBLIC_KEY_SIZE + SIGNATURE_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  132|     62|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   33|     62|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define MOD_SANCTION_PACKED_SIZE (SIG_PUBLIC_KEY_SIZE + TIME_STAMP_SIZE + 1 + ENC_PUBLIC_KEY_SIZE + SIGNATURE_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   30|     62|#define TIME_STAMP_SIZE sizeof(uint64_t)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define MOD_SANCTION_PACKED_SIZE (SIG_PUBLIC_KEY_SIZE + TIME_STAMP_SIZE + 1 + ENC_PUBLIC_KEY_SIZE + SIGNATURE_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  122|     62|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   43|     62|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define MOD_SANCTION_PACKED_SIZE (SIG_PUBLIC_KEY_SIZE + TIME_STAMP_SIZE + 1 + ENC_PUBLIC_KEY_SIZE + SIGNATURE_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|     62|#define SIGNATURE_SIZE CRYPTO_SIGNATURE_SIZE
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   28|     62|#define CRYPTO_SIGNATURE_SIZE          64
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (341:12): [True: 62, False: 2]
  |  Branch (341:35): [True: 62, False: 0]
  |  Branch (341:66): [True: 57, False: 5]
  ------------------
  342|     57|        if (len_processed + sizeof(uint8_t) + SIG_PUBLIC_KEY_SIZE + TIME_STAMP_SIZE > length) {
  ------------------
  |  |  132|     57|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   33|     57|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  ------------------
  ------------------
                      if (len_processed + sizeof(uint8_t) + SIG_PUBLIC_KEY_SIZE + TIME_STAMP_SIZE > length) {
  ------------------
  |  |   30|     57|#define TIME_STAMP_SIZE sizeof(uint64_t)
  ------------------
  |  Branch (342:13): [True: 1, False: 56]
  ------------------
  343|      1|            return -1;
  344|      1|        }
  345|       |
  346|     56|        memcpy(&sanctions[num].type, &data[len_processed], sizeof(uint8_t));
  347|     56|        len_processed += sizeof(uint8_t);
  348|     56|        memcpy(sanctions[num].setter_public_sig_key, &data[len_processed], SIG_PUBLIC_KEY_SIZE);
  ------------------
  |  |  132|     56|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   33|     56|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  ------------------
  ------------------
  349|     56|        len_processed += SIG_PUBLIC_KEY_SIZE;
  ------------------
  |  |  132|     56|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   33|     56|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  ------------------
  ------------------
  350|     56|        net_unpack_u64(&data[len_processed], &sanctions[num].time_set);
  351|     56|        len_processed += TIME_STAMP_SIZE;
  ------------------
  |  |   30|     56|#define TIME_STAMP_SIZE sizeof(uint64_t)
  ------------------
  352|       |
  353|     56|        if (sanctions[num].type == SA_OBSERVER) {
  ------------------
  |  Branch (353:13): [True: 52, False: 4]
  ------------------
  354|     52|            if (len_processed + ENC_PUBLIC_KEY_SIZE > length) {
  ------------------
  |  |  122|     52|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|     52|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  |  Branch (354:17): [True: 2, False: 50]
  ------------------
  355|      2|                return -1;
  356|      2|            }
  357|       |
  358|     50|            memcpy(sanctions[num].target_public_enc_key, &data[len_processed], ENC_PUBLIC_KEY_SIZE);
  ------------------
  |  |  122|     50|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|     50|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  359|     50|            len_processed += ENC_PUBLIC_KEY_SIZE;
  ------------------
  |  |  122|     50|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|     50|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  360|     50|        } else {
  361|      4|            return -1;
  362|      4|        }
  363|       |
  364|     50|        if (len_processed + SIGNATURE_SIZE > length) {
  ------------------
  |  |   27|     50|#define SIGNATURE_SIZE CRYPTO_SIGNATURE_SIZE
  |  |  ------------------
  |  |  |  |   28|     50|#define CRYPTO_SIGNATURE_SIZE          64
  |  |  ------------------
  ------------------
  |  Branch (364:13): [True: 1, False: 49]
  ------------------
  365|      1|            return -1;
  366|      1|        }
  367|       |
  368|     49|        memcpy(sanctions[num].signature, &data[len_processed], SIGNATURE_SIZE);
  ------------------
  |  |   27|     49|#define SIGNATURE_SIZE CRYPTO_SIGNATURE_SIZE
  |  |  ------------------
  |  |  |  |   28|     49|#define CRYPTO_SIGNATURE_SIZE          64
  |  |  ------------------
  ------------------
  369|     49|        len_processed += SIGNATURE_SIZE;
  ------------------
  |  |   27|     49|#define SIGNATURE_SIZE CRYPTO_SIGNATURE_SIZE
  |  |  ------------------
  |  |  |  |   28|     49|#define CRYPTO_SIGNATURE_SIZE          64
  |  |  ------------------
  ------------------
  370|       |
  371|     49|        ++num;
  372|     49|    }
  373|       |
  374|      7|    if (length <= len_processed || length - len_processed < MOD_SANCTIONS_CREDS_SIZE) {
  ------------------
  |  |   33|      2|#define MOD_SANCTIONS_CREDS_SIZE (sizeof(uint32_t) + MOD_SANCTION_HASH_SIZE + sizeof(uint16_t) +\
  |  |  ------------------
  |  |  |  |   28|      2|#define MOD_SANCTION_HASH_SIZE CRYPTO_SHA256_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   74|      2|#define CRYPTO_SHA256_SIZE             32
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   34|      2|                                       SIG_PUBLIC_KEY_SIZE + SIGNATURE_SIZE)
  |  |  ------------------
  |  |  |  |  132|      2|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|      2|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                                                      SIG_PUBLIC_KEY_SIZE + SIGNATURE_SIZE)
  |  |  ------------------
  |  |  |  |   27|      2|#define SIGNATURE_SIZE CRYPTO_SIGNATURE_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|      2|#define CRYPTO_SIGNATURE_SIZE          64
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (374:9): [True: 5, False: 2]
  |  Branch (374:36): [True: 1, False: 1]
  ------------------
  375|      6|        if (length != len_processed) {
  ------------------
  |  Branch (375:13): [True: 1, False: 5]
  ------------------
  376|      1|            return -1;
  377|      1|        }
  378|       |
  379|      5|        if (processed_data_len != nullptr) {
  ------------------
  |  |   63|      5|#define nullptr NULL
  ------------------
  |  Branch (379:13): [True: 5, False: 0]
  ------------------
  380|      5|            *processed_data_len = len_processed;
  381|      5|        }
  382|       |
  383|      5|        return num;
  384|      6|    }
  385|       |
  386|      1|    const uint16_t creds_len = sanctions_creds_unpack(creds, &data[len_processed]);
  387|       |
  388|      1|    if (creds_len != MOD_SANCTIONS_CREDS_SIZE) {
  ------------------
  |  |   33|      1|#define MOD_SANCTIONS_CREDS_SIZE (sizeof(uint32_t) + MOD_SANCTION_HASH_SIZE + sizeof(uint16_t) +\
  |  |  ------------------
  |  |  |  |   28|      1|#define MOD_SANCTION_HASH_SIZE CRYPTO_SHA256_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   74|      1|#define CRYPTO_SHA256_SIZE             32
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   34|      1|                                       SIG_PUBLIC_KEY_SIZE + SIGNATURE_SIZE)
  |  |  ------------------
  |  |  |  |  132|      1|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|      1|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                                                      SIG_PUBLIC_KEY_SIZE + SIGNATURE_SIZE)
  |  |  ------------------
  |  |  |  |   27|      1|#define SIGNATURE_SIZE CRYPTO_SIGNATURE_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|      1|#define CRYPTO_SIGNATURE_SIZE          64
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (388:9): [True: 0, False: 1]
  ------------------
  389|      0|        return -1;
  390|      0|    }
  391|       |
  392|      1|    if (processed_data_len != nullptr) {
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  |  Branch (392:9): [True: 1, False: 0]
  ------------------
  393|      1|        *processed_data_len = len_processed + creds_len;
  394|      1|    }
  395|       |
  396|      1|    return num;
  397|      1|}

LLVMFuzzerTestOneInput:
   36|     39|{
   37|     39|    fuzz_select_target<TestModListUnpack, TestSanctionsListUnpack, TestSanctionCredsUnpack>(
   38|     39|        data, size);
   39|     39|    return 0;
   40|     39|}
group_moderation_fuzz_test.cc:_ZN12_GLOBAL__N_117TestModListUnpackER9Fuzz_Data:
    9|     21|{
   10|     21|    CONSUME1_OR_RETURN(const uint16_t, num_mods, input);
  ------------------
  |  |  105|     21|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 1, False: 20]
  |  |  ------------------
  |  |  106|      1|        return;                               \
  |  |  107|      1|    }                                         \
  |  |  108|     21|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   11|     20|    Test_Memory mem;
   12|     20|    Moderation mods{mem};
   13|     20|    mod_list_unpack(&mods, input.data(), input.size(), num_mods);
   14|     20|    mod_list_cleanup(&mods);
   15|     20|}
group_moderation_fuzz_test.cc:_ZN12_GLOBAL__N_123TestSanctionsListUnpackER9Fuzz_Data:
   18|     15|{
   19|     15|    Mod_Sanction sanctions[10];
   20|     15|    Mod_Sanction_Creds creds;
   21|     15|    uint16_t processed_data_len;
   22|     15|    sanctions_list_unpack(sanctions, &creds, 10, input.data(), input.size(), &processed_data_len);
   23|     15|}
group_moderation_fuzz_test.cc:_ZN12_GLOBAL__N_123TestSanctionCredsUnpackER9Fuzz_Data:
   26|      2|{
   27|      2|    CONSUME_OR_RETURN(const uint8_t *data, input, MOD_SANCTIONS_CREDS_SIZE);
  ------------------
  |  |  139|      2|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 1, False: 1]
  |  |  ------------------
  |  |  140|      1|        return;                              \
  |  |  141|      1|    }                                        \
  |  |  142|      2|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   28|      1|    Mod_Sanction_Creds creds;
   29|      1|    sanctions_creds_unpack(&creds, data);
   30|      1|}

os_memory:
   46|     20|{
   47|     20|    return &os_memory_obj;
   48|     20|}
mem_balloc:
   51|    404|{
   52|    404|    void *const ptr = mem->funcs->malloc(mem->obj, size);
   53|    404|    return ptr;
   54|    404|}
mem_valloc:
   69|     18|{
   70|     18|    const uint32_t bytes = nmemb * size;
   71|       |
   72|     18|    if (size != 0 && bytes / size != nmemb) {
  ------------------
  |  Branch (72:9): [True: 18, False: 0]
  |  Branch (72:22): [True: 0, False: 18]
  ------------------
   73|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   74|      0|    }
   75|       |
   76|     18|    void *const ptr = mem->funcs->calloc(mem->obj, nmemb, size);
   77|     18|    return ptr;
   78|     18|}
mem_delete:
   93|    422|{
   94|    422|    mem->funcs->free(mem->obj, ptr);
   95|    422|}
mem.c:sys_malloc:
   15|    404|{
   16|    404|    return malloc(size);
   17|    404|}
mem.c:sys_calloc:
   21|     18|{
   22|     18|    return calloc(nmemb, size);
   23|     18|}
mem.c:sys_free:
   33|    422|{
   34|    422|    free(ptr);
   35|    422|}

_ZN12Memory_ClassD2Ev:
   15|     20|Memory_Class::~Memory_Class() = default;
_ZN11Test_Memory6mallocEPvj:
   17|    404|void *Test_Memory::malloc(void *obj, uint32_t size) { return mem->funcs->malloc(mem->obj, size); }
_ZN11Test_Memory6callocEPvjj:
   20|     18|{
   21|     18|    return mem->funcs->calloc(mem->obj, nmemb, size);
   22|     18|}
_ZN11Test_Memory4freeEPvS0_:
   29|    422|void Test_Memory::free(void *obj, void *ptr) { return mem->funcs->free(mem->obj, ptr); }

_ZN12Memory_ClassC2Ev:
   15|     20|        : self{&vtable, this}
   16|     20|    {
   17|     20|    }
_ZNK12Memory_ClasscvPK6MemoryEv:
   11|     20|    operator Memory const *() const { return &self; }

net_unpack_u16:
 2321|    230|{
 2322|    230|    const uint8_t hi = bytes[0];
 2323|    230|    const uint8_t lo = bytes[1];
 2324|    230|    *v = ((uint16_t)hi << 8) | lo;
 2325|    230|    return sizeof(*v);
 2326|    230|}
net_unpack_u32:
 2329|    114|{
 2330|    114|    const uint8_t *p = bytes;
 2331|    114|    uint16_t hi;
 2332|    114|    uint16_t lo;
 2333|    114|    p += net_unpack_u16(p, &hi);
 2334|    114|    p += net_unpack_u16(p, &lo);
 2335|    114|    *v = ((uint32_t)hi << 16) | lo;
 2336|    114|    return p - bytes;
 2337|    114|}
net_unpack_u64:
 2340|     56|{
 2341|     56|    const uint8_t *p = bytes;
 2342|     56|    uint32_t hi;
 2343|     56|    uint32_t lo;
 2344|     56|    p += net_unpack_u32(p, &hi);
 2345|     56|    p += net_unpack_u32(p, &lo);
 2346|     56|    *v = ((uint64_t)hi << 32) | lo;
 2347|     56|    return p - bytes;
 2348|     56|}

_Z16require_not_nullIK6MemoryEPT_PKciS3_:
   73|     20|{
   74|     20|    if (ptr == nullptr) {
  ------------------
  |  Branch (74:9): [True: 0, False: 20]
  ------------------
   75|      0|        std::fprintf(stderr, "unexpected null pointer at %s:%d\n", file, line);
   76|      0|        std::exit(7);
   77|      0|    }
   78|     20|    return ptr;
   79|     20|}
_ZN6MethodIFPvS0_jE12Memory_ClassE6invokeIXadL_ZNS2_6mallocES0_jEEEES0_S0_j:
   31|    404|    {
   32|    404|        return (static_cast<Class *>(self)->*M)(self, args...);
   33|    404|    }
_ZN6MethodIFPvS0_jjE12Memory_ClassE6invokeIXadL_ZNS2_6callocES0_jjEEEES0_S0_jj:
   31|     18|    {
   32|     18|        return (static_cast<Class *>(self)->*M)(self, args...);
   33|     18|    }
_ZN6MethodIFvPvS0_E12Memory_ClassE6invokeIXadL_ZNS2_4freeES0_S0_EEEEvS0_S0_:
   31|    422|    {
   32|    422|        return (static_cast<Class *>(self)->*M)(self, args...);
   33|    422|    }

free_uint8_t_pointer_array:
   27|     39|{
   28|     39|    if (ary == nullptr) {
  ------------------
  |  |   63|     39|#define nullptr NULL
  ------------------
  |  Branch (28:9): [True: 21, False: 18]
  ------------------
   29|     21|        return;
   30|     21|    }
   31|       |
   32|    422|    for (size_t i = 0; i < n_items; ++i) {
  ------------------
  |  Branch (32:24): [True: 404, False: 18]
  ------------------
   33|    404|        if (ary[i] != nullptr) {
  ------------------
  |  |   63|    404|#define nullptr NULL
  ------------------
  |  Branch (33:13): [True: 404, False: 0]
  ------------------
   34|    404|            mem_delete(mem, ary[i]);
   35|    404|        }
   36|    404|    }
   37|       |
   38|     18|    mem_delete(mem, ary);
   39|     18|}

