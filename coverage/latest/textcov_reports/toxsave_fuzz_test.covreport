fuzz_support.cc:_ZZN6detail15func_conversionIPFPvP11Null_SystemjEXadL_ZN4$_218__invokeES3_jEEEcvPFT_T0_DpT1_EIS1_S1_JjEEEvENKUlS1_DpT_E_clIJjEEEDaS1_SG_:
   31|  6.86k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFPvP11Null_SystemjEXadL_ZN4$_218__invokeES3_jEEE13static_casterIS1_EcvT_IS3_EEv:
   22|  6.86k|        {
   23|  6.86k|            return static_cast<To>(obj);
   24|  6.86k|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFPvP11Null_SystemjjEXadL_ZN4$_228__invokeES3_jjEEEcvPFT_T0_DpT1_EIS1_S1_JjjEEEvENKUlS1_DpT_E_clIJjjEEEDaS1_SG_:
   31|  77.3k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFPvP11Null_SystemjjEXadL_ZN4$_228__invokeES3_jjEEE13static_casterIS1_EcvT_IS3_EEv:
   22|  77.3k|        {
   23|  77.3k|            return static_cast<To>(obj);
   24|  77.3k|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFPvP11Null_SystemS1_jEXadL_ZN4$_238__invokeES3_S1_jEEEcvPFT_T0_DpT1_EIS1_S1_JS1_jEEEvENKUlS1_DpT_E_clIJS1_jEEEDaS1_SG_:
   31|  34.8k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFPvP11Null_SystemS1_jEXadL_ZN4$_238__invokeES3_S1_jEEE13static_casterIS1_EcvT_IS3_EEv:
   22|  34.8k|        {
   23|  34.8k|            return static_cast<To>(obj);
   24|  34.8k|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFvP11Null_SystemPvEXadL_ZN4$_248__invokeES2_S3_EEEcvPFT_T0_DpT1_EIvS3_JS3_EEEvENKUlS3_DpT_E_clIJS3_EEEDaS3_SG_:
   31|   998k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFvP11Null_SystemPvEXadL_ZN4$_248__invokeES2_S3_EEE13static_casterIS3_EcvT_IS2_EEv:
   22|   998k|        {
   23|   998k|            return static_cast<To>(obj);
   24|   998k|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Null_System6SocketEXadL_ZN4$_258__invokeES2_S3_EEEcvPFT_T0_DpT1_EIiPvJS3_EEEvENKUlSF_DpT_E_clIJS3_EEEDaSF_SH_:
   31|  1.74k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Null_System6SocketEXadL_ZN4$_258__invokeES2_S3_EEE13static_casterIPvEcvT_IS2_EEv:
   22|  1.74k|        {
   23|  1.74k|            return static_cast<To>(obj);
   24|  1.74k|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Null_System6SocketPK12Network_AddrEXadL_ZN4$_278__invokeES2_S3_S6_EEEcvPFT_T0_DpT1_EIiPvJS3_S6_EEEvENKUlSI_DpT_E_clIJS3_S6_EEEDaSI_SK_:
   31|  1.74k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Null_System6SocketPK12Network_AddrEXadL_ZN4$_278__invokeES2_S3_S6_EEE13static_casterIPvEcvT_IS2_EEv:
   22|  1.74k|        {
   23|  1.74k|            return static_cast<To>(obj);
   24|  1.74k|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPF6SocketP11Null_SystemiiiEXadL_ZN4$_358__invokeES3_iiiEEEcvPFT_T0_DpT1_EIS1_PvJiiiEEEvENKUlSF_DpT_E_clIJiiiEEEDaSF_SH_:
   31|  1.74k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPF6SocketP11Null_SystemiiiEXadL_ZN4$_358__invokeES3_iiiEEE13static_casterIPvEcvT_IS3_EEv:
   22|  1.74k|        {
   23|  1.74k|            return static_cast<To>(obj);
   24|  1.74k|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Null_System6SocketbEXadL_ZN4$_368__invokeES2_S3_bEEEcvPFT_T0_DpT1_EIiPvJS3_bEEEvENKUlSF_DpT_E_clIJS3_bEEEDaSF_SH_:
   31|  1.74k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Null_System6SocketbEXadL_ZN4$_368__invokeES2_S3_bEEE13static_casterIPvEcvT_IS2_EEv:
   22|  1.74k|        {
   23|  1.74k|            return static_cast<To>(obj);
   24|  1.74k|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Null_System6SocketiiPvPmEXadL_ZN4$_378__invokeES2_S3_iiS4_S5_EEEcvPFT_T0_DpT1_EIiS4_JS3_iiS4_S5_EEEvENKUlS4_DpT_E_clIJS3_iiS4_S5_EEEDaS4_SI_:
   31|  1.74k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Null_System6SocketiiPvPmEXadL_ZN4$_378__invokeES2_S3_iiS4_S5_EEE13static_casterIS4_EcvT_IS2_EEv:
   22|  1.74k|        {
   23|  1.74k|            return static_cast<To>(obj);
   24|  1.74k|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Null_System6SocketiiPKvmEXadL_ZN4$_388__invokeES2_S3_iiS5_mEEEcvPFT_T0_DpT1_EIiPvJS3_iiS5_mEEEvENKUlSH_DpT_E_clIJS3_iiS5_mEEEDaSH_SJ_:
   31|  6.98k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Null_System6SocketiiPKvmEXadL_ZN4$_388__invokeES2_S3_iiS5_mEEE13static_casterIPvEcvT_IS2_EEv:
   22|  6.98k|        {
   23|  6.98k|            return static_cast<To>(obj);
   24|  6.98k|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFvP11Null_SystemPhmEXadL_ZN4$_398__invokeES2_S3_mEEEcvPFT_T0_DpT1_EIvPvJS3_mEEEvENKUlSF_DpT_E_clIJS3_mEEEDaSF_SH_:
   31|  26.1k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFvP11Null_SystemPhmEXadL_ZN4$_398__invokeES2_S3_mEEE13static_casterIPvEcvT_IS2_EEv:
   22|  26.1k|        {
   23|  26.1k|            return static_cast<To>(obj);
   24|  26.1k|        }

_ZN6SystemC2ENSt3__110unique_ptrI10Tox_SystemNS0_14default_deleteIS2_EEEENS1_I6MemoryNS3_IS6_EEEENS1_I7NetworkNS3_IS9_EEEENS1_I6RandomNS3_ISC_EEEE:
   38|  1.74k|    : sys(std::move(in_sys))
   39|  1.74k|    , mem(std::move(in_mem))
   40|  1.74k|    , ns(std::move(in_ns))
   41|  1.74k|    , rng(std::move(in_rng))
   42|  1.74k|{
   43|  1.74k|}
_ZN6SystemD2Ev:
   46|  1.74k|System::~System() { }
_ZN11Null_SystemC2Ev:
  321|  1.74k|    : System{
  322|  1.74k|        std::make_unique<Tox_System>(),
  323|  1.74k|        std::make_unique<Memory>(Memory{&null_memory_funcs, this}),
  324|  1.74k|        std::make_unique<Network>(Network{&null_network_funcs, this}),
  325|  1.74k|        std::make_unique<Random>(Random{&null_random_funcs, this}),
  326|  1.74k|    }
  327|  1.74k|{
  328|  1.74k|    sys->mono_time_callback = [](void *self) { return static_cast<Null_System *>(self)->clock; };
  329|  1.74k|    sys->mono_time_user_data = this;
  330|  1.74k|    sys->mem = mem.get();
  331|  1.74k|    sys->ns = ns.get();
  332|  1.74k|    sys->rng = rng.get();
  333|  1.74k|}
fuzz_support.cc:_ZNK4$_21clEP11Null_Systemj:
  249|  6.86k|    ![](Null_System *self, uint32_t size) { return std::malloc(size); },
fuzz_support.cc:_ZNK4$_22clEP11Null_Systemjj:
  251|  77.3k|    ![](Null_System *self, uint32_t nmemb, uint32_t size) { return std::calloc(nmemb, size); },
fuzz_support.cc:_ZNK4$_23clEP11Null_SystemPvj:
  253|  34.8k|    ![](Null_System *self, void *ptr, uint32_t size) { return std::realloc(ptr, size); },
fuzz_support.cc:_ZNK4$_24clEP11Null_SystemPv:
  255|   998k|    ![](Null_System *self, void *ptr) { std::free(ptr); },
fuzz_support.cc:_ZNK4$_25clEP11Null_System6Socket:
  259|  1.74k|    /* .close = */ ![](Null_System *self, Socket sock) { return 0; },
fuzz_support.cc:_ZNK4$_27clEP11Null_System6SocketPK12Network_Addr:
  261|  1.74k|    /* .bind = */ ![](Null_System *self, Socket sock, const Network_Addr *addr) { return 0; },
fuzz_support.cc:_ZNK4$_35clEP11Null_Systemiii:
  287|  1.74k|    /* .socket = */ ![](Null_System *self, int domain, int type, int proto) { return Socket{42}; },
fuzz_support.cc:_ZNK4$_36clEP11Null_System6Socketb:
  288|  1.74k|    /* .socket_nonblock = */ ![](Null_System *self, Socket sock, bool nonblock) { return 0; },
fuzz_support.cc:_ZNK4$_37clEP11Null_System6SocketiiPvPm:
  290|  1.74k|    ![](Null_System *self, Socket sock, int level, int optname, void *optval, size_t *optlen) {
  291|  1.74k|        std::memset(optval, 0, *optlen);
  292|  1.74k|        return 0;
  293|  1.74k|    },
fuzz_support.cc:_ZNK4$_38clEP11Null_System6SocketiiPKvm:
  295|  6.98k|    ![](Null_System *self, Socket sock, int level, int optname, const void *optval, size_t optlen) {
  296|  6.98k|        return 0;
  297|  6.98k|    },
fuzz_support.cc:_ZNK4$_39clEP11Null_SystemPhm:
  309|  26.1k|    ![](Null_System *self, uint8_t *bytes, size_t length) {
  310|   695k|        for (size_t i = 0; i < length; ++i) {
  ------------------
  |  Branch (310:28): [True: 669k, False: 26.1k]
  ------------------
  311|   669k|            bytes[i] = simple_rng(self->seed) & 0xff;
  312|   669k|        }
  313|  26.1k|    },
fuzz_support.cc:_ZL10simple_rngRm:
  301|   669k|{
  302|       |    // https://nuclear.llnl.gov/CNP/rng/rngman/node4.html
  303|   669k|    seed = 2862933555777941757LL * seed + 3037000493LL;
  304|   669k|    return seed;
  305|   669k|}
fuzz_support.cc:_ZZN11Null_SystemC1EvENK3$_0clEPv:
  328|  1.74k|    sys->mono_time_callback = [](void *self) { return static_cast<Null_System *>(self)->clock; };

_ZN9Fuzz_DataC2EPKhm:
   32|  1.74k|        : data_(input_data)
   33|  1.74k|        , base_(input_data)
   34|  1.74k|        , size_(input_size)
   35|  1.74k|    {
   36|  1.74k|    }
_ZNK9Fuzz_Data4sizeEv:
   69|  3.49k|    std::size_t size() const { return size_; }
_ZN9Fuzz_Data7consumeEPKcm:
   75|  1.74k|    {
   76|  1.74k|        const uint8_t *val = data_;
   77|  1.74k|        if (FUZZ_DEBUG) {
  ------------------
  |  Branch (77:13): [Folded - Ignored]
  ------------------
   78|      0|            if (pos() == TRACE_TRAP) {
  ------------------
  |  Branch (78:17): [True: 0, False: 0]
  ------------------
   79|      0|                __asm__("int $3");
   80|      0|            }
   81|      0|            if (count == 1) {
  ------------------
  |  Branch (81:17): [True: 0, False: 0]
  ------------------
   82|      0|                std::printf("consume@%zu(%s): %d (0x%02x)\n", pos(), func, val[0], val[0]);
   83|      0|            } else if (count != 0) {
  ------------------
  |  Branch (83:24): [True: 0, False: 0]
  ------------------
   84|      0|                std::printf("consume@%zu(%s): %02x..%02x[%zu]\n", pos(), func, val[0],
   85|      0|                    val[count - 1], count);
   86|      0|            }
   87|      0|        }
   88|  1.74k|        data_ += count;
   89|  1.74k|        size_ -= count;
   90|  1.74k|        return val;
   91|  1.74k|    }

LLVMFuzzerTestOneInput:
   51|  1.74k|{
   52|  1.74k|    Fuzz_Data input{data, size};
   53|  1.74k|    TestSaveDataLoading(input);
   54|  1.74k|    return 0;  // Non-zero return values are reserved for future use.
   55|  1.74k|}
toxsave_fuzz_test.cc:_ZN12_GLOBAL__N_119TestSaveDataLoadingER9Fuzz_Data:
   12|  1.74k|{
   13|  1.74k|    Tox_Err_Options_New error_options;
   14|       |
   15|  1.74k|    struct Tox_Options *tox_options = tox_options_new(&error_options);
   16|       |
   17|  1.74k|    assert(tox_options != nullptr);
   18|  1.74k|    assert(error_options == TOX_ERR_OPTIONS_NEW_OK);
   19|       |
   20|  1.74k|    const size_t savedata_size = input.size();
   21|  1.74k|    CONSUME_OR_RETURN(const uint8_t *savedata, input, savedata_size);
  ------------------
  |  |  139|  1.74k|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 0, False: 1.74k]
  |  |  ------------------
  |  |  140|      0|        return;                              \
  |  |  141|      0|    }                                        \
  |  |  142|  1.74k|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   22|       |
   23|  1.74k|    tox_options_set_experimental_groups_persistence(tox_options, true);
   24|       |
   25|       |    // pass test data to Tox
   26|  1.74k|    tox_options_set_savedata_data(tox_options, savedata, savedata_size);
   27|  1.74k|    tox_options_set_savedata_type(tox_options, TOX_SAVEDATA_TYPE_TOX_SAVE);
   28|       |
   29|  1.74k|    Tox_Options_Testing tox_options_testing;
   30|  1.74k|    Null_System sys;
   31|  1.74k|    tox_options_testing.operating_system = sys.sys.get();
   32|       |
   33|  1.74k|    Tox *tox = tox_new_testing(tox_options, nullptr, &tox_options_testing, nullptr);
   34|  1.74k|    tox_options_free(tox_options);
   35|  1.74k|    if (tox == nullptr) {
  ------------------
  |  Branch (35:9): [True: 525, False: 1.22k]
  ------------------
   36|       |        // Tox save was invalid, we're finished here
   37|    525|        return;
   38|    525|    }
   39|       |
   40|       |    // verify that the file can be saved again
   41|  1.22k|    std::vector<uint8_t> new_savedata(tox_get_savedata_size(tox));
   42|  1.22k|    tox_get_savedata(tox, new_savedata.data());
   43|       |
   44|  1.22k|    tox_kill(tox);
   45|  1.22k|}

cmp_init:
  837|  36.3k|                                         cmp_writer *write) {
  838|  36.3k|  ctx->error = CMP_ERROR_NONE;
  839|  36.3k|  ctx->buf = buf;
  840|  36.3k|  ctx->read = read;
  841|  36.3k|  ctx->skip = skip;
  842|  36.3k|  ctx->write = write;
  843|  36.3k|}
cmp_write_pfix:
  859|  1.98k|bool cmp_write_pfix(cmp_ctx_t *ctx, uint8_t c) {
  860|  1.98k|  if (c <= 0x7F)
  ------------------
  |  Branch (860:7): [True: 1.98k, False: 0]
  ------------------
  861|  1.98k|    return write_fixed_value(ctx, c);
  862|       |
  863|      0|  ctx->error = CMP_ERROR_INPUT_VALUE_TOO_LARGE;
  864|      0|  return false;
  865|  1.98k|}
cmp_write_u8:
  938|     20|bool cmp_write_u8(cmp_ctx_t *ctx, uint8_t c) {
  939|     20|  if (!write_type_marker(ctx, U8_MARKER))
  ------------------
  |  Branch (939:7): [True: 0, False: 20]
  ------------------
  940|      0|    return false;
  941|       |
  942|     20|  return ctx->write(ctx, &c, sizeof(uint8_t)) == sizeof(uint8_t);
  943|     20|}
cmp_write_u16:
  945|    216|bool cmp_write_u16(cmp_ctx_t *ctx, uint16_t s) {
  946|    216|  if (!write_type_marker(ctx, U16_MARKER))
  ------------------
  |  Branch (946:7): [True: 0, False: 216]
  ------------------
  947|      0|    return false;
  948|       |
  949|    216|  s = be16(s);
  950|       |
  951|    216|  return ctx->write(ctx, &s, sizeof(uint16_t)) == sizeof(uint16_t);
  952|    216|}
cmp_write_uinteger:
  972|  2.22k|bool cmp_write_uinteger(cmp_ctx_t *ctx, uint64_t u) {
  973|  2.22k|  if (u <= 0x7F)
  ------------------
  |  Branch (973:7): [True: 1.98k, False: 236]
  ------------------
  974|  1.98k|    return cmp_write_pfix(ctx, (uint8_t)u);
  975|    236|  if (u <= 0xFF)
  ------------------
  |  Branch (975:7): [True: 20, False: 216]
  ------------------
  976|     20|    return cmp_write_u8(ctx, (uint8_t)u);
  977|    216|  if (u <= 0xFFFF)
  ------------------
  |  Branch (977:7): [True: 216, False: 0]
  ------------------
  978|    216|    return cmp_write_u16(ctx, (uint16_t)u);
  979|      0|  if (u <= 0xFFFFFFFF)
  ------------------
  |  Branch (979:7): [True: 0, False: 0]
  ------------------
  980|      0|    return cmp_write_u32(ctx, (uint32_t)u);
  981|       |
  982|      0|  return cmp_write_u64(ctx, u);
  983|      0|}
cmp_write_nil:
 1041|     36|bool cmp_write_nil(cmp_ctx_t *ctx) {
 1042|     36|  return write_type_marker(ctx, NIL_MARKER);
 1043|     36|}
cmp_write_true:
 1045|      8|bool cmp_write_true(cmp_ctx_t *ctx) {
 1046|      8|  return write_type_marker(ctx, TRUE_MARKER);
 1047|      8|}
cmp_write_false:
 1049|    140|bool cmp_write_false(cmp_ctx_t *ctx) {
 1050|    140|  return write_type_marker(ctx, FALSE_MARKER);
 1051|    140|}
cmp_write_bool:
 1053|    148|bool cmp_write_bool(cmp_ctx_t *ctx, bool b) {
 1054|    148|  if (b)
  ------------------
  |  Branch (1054:7): [True: 8, False: 140]
  ------------------
 1055|      8|    return cmp_write_true(ctx);
 1056|       |
 1057|    140|  return cmp_write_false(ctx);
 1058|    148|}
cmp_write_bin8_marker:
 1205|  1.96k|bool cmp_write_bin8_marker(cmp_ctx_t *ctx, uint8_t size) {
 1206|  1.96k|  if (!write_type_marker(ctx, BIN8_MARKER))
  ------------------
  |  Branch (1206:7): [True: 0, False: 1.96k]
  ------------------
 1207|      0|    return false;
 1208|       |
 1209|  1.96k|  if (ctx->write(ctx, &size, sizeof(uint8_t)) == sizeof(uint8_t))
  ------------------
  |  Branch (1209:7): [True: 1.96k, False: 0]
  ------------------
 1210|  1.96k|    return true;
 1211|       |
 1212|      0|  ctx->error = CMP_ERROR_LENGTH_WRITING;
 1213|      0|  return false;
 1214|  1.96k|}
cmp_write_bin8:
 1216|  1.96k|bool cmp_write_bin8(cmp_ctx_t *ctx, const void *data, uint8_t size) {
 1217|  1.96k|  if (!cmp_write_bin8_marker(ctx, size))
  ------------------
  |  Branch (1217:7): [True: 0, False: 1.96k]
  ------------------
 1218|      0|    return false;
 1219|       |
 1220|  1.96k|  if (size == 0)
  ------------------
  |  Branch (1220:7): [True: 148, False: 1.82k]
  ------------------
 1221|    148|    return true;
 1222|       |
 1223|  1.82k|  if (ctx->write(ctx, data, size) == size)
  ------------------
  |  Branch (1223:7): [True: 1.82k, False: 0]
  ------------------
 1224|  1.82k|    return true;
 1225|       |
 1226|      0|  ctx->error = CMP_ERROR_DATA_WRITING;
 1227|      0|  return false;
 1228|  1.82k|}
cmp_write_bin16_marker:
 1230|    216|bool cmp_write_bin16_marker(cmp_ctx_t *ctx, uint16_t size) {
 1231|    216|  if (!write_type_marker(ctx, BIN16_MARKER))
  ------------------
  |  Branch (1231:7): [True: 0, False: 216]
  ------------------
 1232|      0|    return false;
 1233|       |
 1234|    216|  size = be16(size);
 1235|       |
 1236|    216|  if (ctx->write(ctx, &size, sizeof(uint16_t)) == sizeof(uint16_t))
  ------------------
  |  Branch (1236:7): [True: 216, False: 0]
  ------------------
 1237|    216|    return true;
 1238|       |
 1239|      0|  ctx->error = CMP_ERROR_LENGTH_WRITING;
 1240|      0|  return false;
 1241|    216|}
cmp_write_bin16:
 1243|    216|bool cmp_write_bin16(cmp_ctx_t *ctx, const void *data, uint16_t size) {
 1244|    216|  if (!cmp_write_bin16_marker(ctx, size))
  ------------------
  |  Branch (1244:7): [True: 0, False: 216]
  ------------------
 1245|      0|    return false;
 1246|       |
 1247|    216|  if (size == 0)
  ------------------
  |  Branch (1247:7): [True: 0, False: 216]
  ------------------
 1248|      0|    return true;
 1249|       |
 1250|    216|  if (ctx->write(ctx, data, size) == size)
  ------------------
  |  Branch (1250:7): [True: 216, False: 0]
  ------------------
 1251|    216|    return true;
 1252|       |
 1253|      0|  ctx->error = CMP_ERROR_DATA_WRITING;
 1254|      0|  return false;
 1255|    216|}
cmp_write_bin:
 1293|  2.18k|bool cmp_write_bin(cmp_ctx_t *ctx, const void *data, uint32_t size) {
 1294|  2.18k|  if (size <= 0xFF)
  ------------------
  |  Branch (1294:7): [True: 1.96k, False: 216]
  ------------------
 1295|  1.96k|    return cmp_write_bin8(ctx, data, (uint8_t)size);
 1296|    216|  if (size <= 0xFFFF)
  ------------------
  |  Branch (1296:7): [True: 216, False: 0]
  ------------------
 1297|    216|    return cmp_write_bin16(ctx, data, (uint16_t)size);
 1298|       |
 1299|      0|  return cmp_write_bin32(ctx, data, size);
 1300|    216|}
cmp_write_fixarray:
 1302|  3.85k|bool cmp_write_fixarray(cmp_ctx_t *ctx, uint8_t size) {
 1303|  3.85k|  if (size <= FIXARRAY_SIZE)
  ------------------
  |  Branch (1303:7): [True: 3.85k, False: 0]
  ------------------
 1304|  3.85k|    return write_fixed_value(ctx, FIXARRAY_MARKER | size);
 1305|       |
 1306|      0|  ctx->error = CMP_ERROR_INPUT_VALUE_TOO_LARGE;
 1307|      0|  return false;
 1308|  3.85k|}
cmp_write_array16:
 1310|      8|bool cmp_write_array16(cmp_ctx_t *ctx, uint16_t size) {
 1311|      8|  if (!write_type_marker(ctx, ARRAY16_MARKER))
  ------------------
  |  Branch (1311:7): [True: 0, False: 8]
  ------------------
 1312|      0|    return false;
 1313|       |
 1314|      8|  size = be16(size);
 1315|       |
 1316|      8|  if (ctx->write(ctx, &size, sizeof(uint16_t)) == sizeof(uint16_t))
  ------------------
  |  Branch (1316:7): [True: 8, False: 0]
  ------------------
 1317|      8|    return true;
 1318|       |
 1319|      0|  ctx->error = CMP_ERROR_LENGTH_WRITING;
 1320|      0|  return false;
 1321|      8|}
cmp_write_array:
 1336|  3.86k|bool cmp_write_array(cmp_ctx_t *ctx, uint32_t size) {
 1337|  3.86k|  if (size <= FIXARRAY_SIZE)
  ------------------
  |  Branch (1337:7): [True: 3.85k, False: 8]
  ------------------
 1338|  3.85k|    return cmp_write_fixarray(ctx, (uint8_t)size);
 1339|      8|  if (size <= 0xFFFF)
  ------------------
  |  Branch (1339:7): [True: 8, False: 0]
  ------------------
 1340|      8|    return cmp_write_array16(ctx, (uint16_t)size);
 1341|       |
 1342|      0|  return cmp_write_array32(ctx, size);
 1343|      8|}
cmp_read_uchar:
 2144|  20.5k|bool cmp_read_uchar(cmp_ctx_t *ctx, uint8_t *c) {
 2145|  20.5k|  cmp_object_t obj;
 2146|       |
 2147|  20.5k|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2147:7): [True: 384, False: 20.1k]
  ------------------
 2148|    384|    return false;
 2149|       |
 2150|  20.1k|  switch (obj.type) {
 2151|  11.5k|    case CMP_TYPE_POSITIVE_FIXNUM:
  ------------------
  |  Branch (2151:5): [True: 11.5k, False: 8.55k]
  ------------------
 2152|  17.0k|    case CMP_TYPE_UINT8: {
  ------------------
  |  Branch (2152:5): [True: 5.43k, False: 14.6k]
  ------------------
 2153|  17.0k|      *c = obj.as.u8;
 2154|  17.0k|      return true;
 2155|  11.5k|    }
 2156|    317|    case CMP_TYPE_NEGATIVE_FIXNUM:
  ------------------
  |  Branch (2156:5): [True: 317, False: 19.8k]
  ------------------
 2157|    692|    case CMP_TYPE_SINT8: {
  ------------------
  |  Branch (2157:5): [True: 375, False: 19.7k]
  ------------------
 2158|    692|      if (obj.as.s8 >= 0) {
  ------------------
  |  Branch (2158:11): [True: 375, False: 317]
  ------------------
 2159|    375|        *c = (uint8_t)obj.as.s8;
 2160|    375|        return true;
 2161|    375|      }
 2162|    317|      break;
 2163|    692|    }
 2164|  2.42k|    default:
  ------------------
  |  Branch (2164:5): [True: 2.42k, False: 17.7k]
  ------------------
 2165|  2.42k|      break;
 2166|  20.1k|  }
 2167|       |
 2168|  2.74k|  ctx->error = CMP_ERROR_INVALID_TYPE;
 2169|  2.74k|  return false;
 2170|  20.1k|}
cmp_read_ushort:
 2172|  42.0k|bool cmp_read_ushort(cmp_ctx_t *ctx, uint16_t *s) {
 2173|  42.0k|  cmp_object_t obj;
 2174|       |
 2175|  42.0k|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2175:7): [True: 1.33k, False: 40.7k]
  ------------------
 2176|  1.33k|    return false;
 2177|       |
 2178|  40.7k|  switch (obj.type) {
 2179|  22.4k|    case CMP_TYPE_POSITIVE_FIXNUM:
  ------------------
  |  Branch (2179:5): [True: 22.4k, False: 18.3k]
  ------------------
 2180|  37.3k|    case CMP_TYPE_UINT8: {
  ------------------
  |  Branch (2180:5): [True: 14.9k, False: 25.7k]
  ------------------
 2181|  37.3k|      *s = obj.as.u8;
 2182|  37.3k|      return true;
 2183|  22.4k|    }
 2184|    538|    case CMP_TYPE_UINT16: {
  ------------------
  |  Branch (2184:5): [True: 538, False: 40.1k]
  ------------------
 2185|    538|      *s = obj.as.u16;
 2186|    538|      return true;
 2187|  22.4k|    }
 2188|     48|    case CMP_TYPE_NEGATIVE_FIXNUM:
  ------------------
  |  Branch (2188:5): [True: 48, False: 40.6k]
  ------------------
 2189|     83|    case CMP_TYPE_SINT8: {
  ------------------
  |  Branch (2189:5): [True: 35, False: 40.6k]
  ------------------
 2190|     83|      if (obj.as.s8 >= 0) {
  ------------------
  |  Branch (2190:11): [True: 35, False: 48]
  ------------------
 2191|     35|        *s = (uint8_t)obj.as.s8;
 2192|     35|        return true;
 2193|     35|      }
 2194|     48|      break;
 2195|     83|    }
 2196|     55|    case CMP_TYPE_SINT16: {
  ------------------
  |  Branch (2196:5): [True: 55, False: 40.6k]
  ------------------
 2197|     55|      if (obj.as.s16 >= 0) {
  ------------------
  |  Branch (2197:11): [True: 37, False: 18]
  ------------------
 2198|     37|        *s = (uint16_t)obj.as.s16;
 2199|     37|        return true;
 2200|     37|      }
 2201|     18|      break;
 2202|     55|    }
 2203|  2.67k|    default:
  ------------------
  |  Branch (2203:5): [True: 2.67k, False: 38.0k]
  ------------------
 2204|  2.67k|      break;
 2205|  40.7k|  }
 2206|       |
 2207|  2.74k|  ctx->error = CMP_ERROR_INVALID_TYPE;
 2208|  2.74k|  return false;
 2209|  40.7k|}
cmp_read_uint:
 2211|  19.6k|bool cmp_read_uint(cmp_ctx_t *ctx, uint32_t *i) {
 2212|  19.6k|  cmp_object_t obj;
 2213|       |
 2214|  19.6k|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2214:7): [True: 3.11k, False: 16.5k]
  ------------------
 2215|  3.11k|    return false;
 2216|       |
 2217|  16.5k|  switch (obj.type) {
 2218|  10.7k|    case CMP_TYPE_POSITIVE_FIXNUM:
  ------------------
  |  Branch (2218:5): [True: 10.7k, False: 5.77k]
  ------------------
 2219|  10.8k|    case CMP_TYPE_UINT8: {
  ------------------
  |  Branch (2219:5): [True: 61, False: 16.5k]
  ------------------
 2220|  10.8k|      *i = obj.as.u8;
 2221|  10.8k|      return true;
 2222|  10.7k|    }
 2223|  2.06k|    case CMP_TYPE_UINT16: {
  ------------------
  |  Branch (2223:5): [True: 2.06k, False: 14.5k]
  ------------------
 2224|  2.06k|      *i = obj.as.u16;
 2225|  2.06k|      return true;
 2226|  10.7k|    }
 2227|    266|    case CMP_TYPE_UINT32: {
  ------------------
  |  Branch (2227:5): [True: 266, False: 16.3k]
  ------------------
 2228|    266|      *i = obj.as.u32;
 2229|    266|      return true;
 2230|  10.7k|    }
 2231|  1.30k|    case CMP_TYPE_NEGATIVE_FIXNUM:
  ------------------
  |  Branch (2231:5): [True: 1.30k, False: 15.2k]
  ------------------
 2232|  1.32k|    case CMP_TYPE_SINT8: {
  ------------------
  |  Branch (2232:5): [True: 20, False: 16.5k]
  ------------------
 2233|  1.32k|      if (obj.as.s8 >= 0) {
  ------------------
  |  Branch (2233:11): [True: 19, False: 1.31k]
  ------------------
 2234|     19|        *i = (uint8_t)obj.as.s8;
 2235|     19|        return true;
 2236|     19|      }
 2237|  1.31k|      break;
 2238|  1.32k|    }
 2239|  1.31k|    case CMP_TYPE_SINT16: {
  ------------------
  |  Branch (2239:5): [True: 28, False: 16.5k]
  ------------------
 2240|     28|      if (obj.as.s16 >= 0) {
  ------------------
  |  Branch (2240:11): [True: 18, False: 10]
  ------------------
 2241|     18|        *i = (uint16_t)obj.as.s16;
 2242|     18|        return true;
 2243|     18|      }
 2244|     10|      break;
 2245|     28|    }
 2246|    654|    case CMP_TYPE_SINT32: {
  ------------------
  |  Branch (2246:5): [True: 654, False: 15.9k]
  ------------------
 2247|    654|      if (obj.as.s32 >= 0) {
  ------------------
  |  Branch (2247:11): [True: 615, False: 39]
  ------------------
 2248|    615|        *i = (uint32_t)obj.as.s32;
 2249|    615|        return true;
 2250|    615|      }
 2251|     39|      break;
 2252|    654|    }
 2253|  1.37k|    default:
  ------------------
  |  Branch (2253:5): [True: 1.37k, False: 15.1k]
  ------------------
 2254|  1.37k|      break;
 2255|  16.5k|  }
 2256|       |
 2257|  2.73k|  ctx->error = CMP_ERROR_INVALID_TYPE;
 2258|  2.73k|  return false;
 2259|  16.5k|}
cmp_read_nil:
 2382|     74|bool cmp_read_nil(cmp_ctx_t *ctx) {
 2383|     74|  cmp_object_t obj;
 2384|       |
 2385|     74|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2385:7): [True: 3, False: 71]
  ------------------
 2386|      3|    return false;
 2387|       |
 2388|     71|  if (obj.type == CMP_TYPE_NIL)
  ------------------
  |  Branch (2388:7): [True: 32, False: 39]
  ------------------
 2389|     32|    return true;
 2390|       |
 2391|     39|  ctx->error = CMP_ERROR_INVALID_TYPE;
 2392|     39|  return false;
 2393|     71|}
cmp_read_bool:
 2395|  19.9k|bool cmp_read_bool(cmp_ctx_t *ctx, bool *b) {
 2396|  19.9k|  cmp_object_t obj;
 2397|       |
 2398|  19.9k|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2398:7): [True: 454, False: 19.5k]
  ------------------
 2399|    454|    return false;
 2400|       |
 2401|  19.5k|  if (obj.type != CMP_TYPE_BOOLEAN) {
  ------------------
  |  Branch (2401:7): [True: 2.37k, False: 17.1k]
  ------------------
 2402|  2.37k|    ctx->error = CMP_ERROR_INVALID_TYPE;
 2403|  2.37k|    return false;
 2404|  2.37k|  }
 2405|       |
 2406|  17.1k|  if (obj.as.boolean) {
  ------------------
  |  Branch (2406:7): [True: 386, False: 16.7k]
  ------------------
 2407|    386|    *b = true;
 2408|  16.7k|  } else {
 2409|  16.7k|    *b = false;
 2410|  16.7k|  }
 2411|       |
 2412|  17.1k|  return true;
 2413|  19.5k|}
cmp_read_bin_size:
 2479|  3.34k|bool cmp_read_bin_size(cmp_ctx_t *ctx, uint32_t *size) {
 2480|  3.34k|  cmp_object_t obj;
 2481|       |
 2482|  3.34k|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2482:7): [True: 7, False: 3.34k]
  ------------------
 2483|      7|    return false;
 2484|       |
 2485|  3.34k|  switch (obj.type) {
 2486|  2.93k|    case CMP_TYPE_BIN8:
  ------------------
  |  Branch (2486:5): [True: 2.93k, False: 404]
  ------------------
 2487|  3.16k|    case CMP_TYPE_BIN16:
  ------------------
  |  Branch (2487:5): [True: 233, False: 3.10k]
  ------------------
 2488|  3.17k|    case CMP_TYPE_BIN32: {
  ------------------
  |  Branch (2488:5): [True: 6, False: 3.33k]
  ------------------
 2489|  3.17k|      *size = obj.as.bin_size;
 2490|  3.17k|      return true;
 2491|  3.16k|    }
 2492|    165|    default: {
  ------------------
  |  Branch (2492:5): [True: 165, False: 3.17k]
  ------------------
 2493|    165|      ctx->error = CMP_ERROR_INVALID_TYPE;
 2494|    165|      return false;
 2495|  3.16k|    }
 2496|  3.34k|  }
 2497|  3.34k|}
cmp_read_array:
 2519|  75.3k|bool cmp_read_array(cmp_ctx_t *ctx, uint32_t *size) {
 2520|  75.3k|  cmp_object_t obj;
 2521|       |
 2522|  75.3k|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2522:7): [True: 815, False: 74.5k]
  ------------------
 2523|    815|    return false;
 2524|       |
 2525|  74.5k|  switch (obj.type) {
 2526|  67.3k|    case CMP_TYPE_FIXARRAY:
  ------------------
  |  Branch (2526:5): [True: 67.3k, False: 7.19k]
  ------------------
 2527|  67.3k|    case CMP_TYPE_ARRAY16:
  ------------------
  |  Branch (2527:5): [True: 34, False: 74.4k]
  ------------------
 2528|  67.3k|    case CMP_TYPE_ARRAY32: {
  ------------------
  |  Branch (2528:5): [True: 11, False: 74.4k]
  ------------------
 2529|  67.3k|      *size = obj.as.array_size;
 2530|  67.3k|      return true;
 2531|  67.3k|    }
 2532|  7.14k|    default: {
  ------------------
  |  Branch (2532:5): [True: 7.14k, False: 67.3k]
  ------------------
 2533|  7.14k|      ctx->error = CMP_ERROR_INVALID_TYPE;
 2534|  7.14k|      return false;
 2535|  67.3k|    }
 2536|  74.5k|  }
 2537|  74.5k|}
cmp_read_object:
 2810|   180k|bool cmp_read_object(cmp_ctx_t *ctx, cmp_object_t *obj) {
 2811|   180k|  uint8_t type_marker = 0;
 2812|       |
 2813|   180k|  if (!read_type_marker(ctx, &type_marker))
  ------------------
  |  Branch (2813:7): [True: 1.14k, False: 179k]
  ------------------
 2814|  1.14k|    return false;
 2815|       |
 2816|   179k|  if (!type_marker_to_cmp_type(type_marker, &obj->type)) {
  ------------------
  |  Branch (2816:7): [True: 292, False: 179k]
  ------------------
 2817|    292|    ctx->error = CMP_ERROR_INVALID_TYPE;
 2818|    292|    return false;
 2819|    292|  }
 2820|       |
 2821|   179k|  return read_obj_data(ctx, type_marker, obj);
 2822|   179k|}
cmp.c:write_fixed_value:
  245|  5.84k|static bool write_fixed_value(cmp_ctx_t *ctx, uint8_t value) {
  246|  5.84k|  if (write_byte(ctx, value))
  ------------------
  |  Branch (246:7): [True: 5.84k, False: 0]
  ------------------
  247|  5.84k|    return true;
  248|       |
  249|      0|  ctx->error = CMP_ERROR_FIXED_VALUE_WRITING;
  250|      0|  return false;
  251|  5.84k|}
cmp.c:write_byte:
  207|  8.45k|static bool write_byte(cmp_ctx_t *ctx, uint8_t x) {
  208|  8.45k|  return ctx->write(ctx, &x, sizeof(uint8_t)) == sizeof(uint8_t);
  209|  8.45k|}
cmp.c:write_type_marker:
  237|  2.61k|static bool write_type_marker(cmp_ctx_t *ctx, uint8_t marker) {
  238|  2.61k|  if (write_byte(ctx, marker))
  ------------------
  |  Branch (238:7): [True: 2.61k, False: 0]
  ------------------
  239|  2.61k|    return true;
  240|       |
  241|      0|  ctx->error = CMP_ERROR_TYPE_MARKER_WRITING;
  242|      0|  return false;
  243|  2.61k|}
cmp.c:sbe16:
  127|    313|static int16_t sbe16(int16_t x) {
  128|    313|  return (int16_t)be16((uint16_t)x);
  129|    313|}
cmp.c:sbe32:
  138|    943|static int32_t sbe32(int32_t x) {
  139|    943|  return (int32_t)be32((uint32_t)x);
  140|    943|}
cmp.c:sbe64:
  149|     70|static int64_t sbe64(int64_t x) {
  150|     70|  return (int64_t)be64((uint64_t)x);
  151|     70|}
cmp.c:be16:
  119|  13.8k|static uint16_t be16(uint16_t x) {
  120|  13.8k|  if (!is_bigendian())
  ------------------
  |  Branch (120:7): [True: 13.8k, False: 0]
  ------------------
  121|  13.8k|    return ((x >> 8) & 0x00ff)
  122|  13.8k|         | ((x << 8) & 0xff00);
  123|       |
  124|      0|  return x;
  125|  13.8k|}
cmp.c:is_bigendian:
  109|  18.4k|static bool is_bigendian(void) {
  110|       |#ifdef WORDS_BIGENDIAN
  111|       |  return WORDS_BIGENDIAN;
  112|       |#else
  113|  18.4k|  const int32_t i_ = 1;
  114|  18.4k|  const char *i_bytes = (const char *)&i_;
  115|  18.4k|  return *i_bytes == 0;
  116|  18.4k|#endif /* WORDS_BIGENDIAN */
  117|  18.4k|}
cmp.c:be32:
  131|  4.52k|static uint32_t be32(uint32_t x) {
  132|  4.52k|  if (!is_bigendian())
  ------------------
  |  Branch (132:7): [True: 4.52k, False: 0]
  ------------------
  133|  4.52k|    return ((uint32_t)be16((uint16_t)(x & 0xffff)) << 16) | (uint32_t)be16((uint16_t)(x >> 16));
  134|       |
  135|      0|  return x;
  136|  4.52k|}
cmp.c:be64:
  142|    132|static uint64_t be64(uint64_t x) {
  143|    132|  if (!is_bigendian())
  ------------------
  |  Branch (143:7): [True: 132, False: 0]
  ------------------
  144|    132|    return ((uint64_t)be32((uint32_t)(x & 0xffffffff)) << 32) | (uint64_t)be32((uint32_t)(x >> 32));
  145|       |
  146|      0|  return x;
  147|    132|}
cmp.c:read_type_marker:
  228|   180k|static bool read_type_marker(cmp_ctx_t *ctx, uint8_t *marker) {
  229|   180k|  if (read_byte(ctx, marker)) {
  ------------------
  |  Branch (229:7): [True: 179k, False: 1.14k]
  ------------------
  230|   179k|    return true;
  231|   179k|  }
  232|       |
  233|  1.14k|  ctx->error = CMP_ERROR_TYPE_MARKER_READING;
  234|  1.14k|  return false;
  235|   180k|}
cmp.c:read_byte:
  203|   180k|static bool read_byte(cmp_ctx_t *ctx, uint8_t *x) {
  204|   180k|  return ctx->read(ctx, x, sizeof(uint8_t));
  205|   180k|}
cmp.c:type_marker_to_cmp_type:
  253|   179k|static bool type_marker_to_cmp_type(uint8_t type_marker, uint8_t *cmp_type) {
  254|   179k|  if (type_marker <= 0x7F) {
  ------------------
  |  Branch (254:7): [True: 48.4k, False: 131k]
  ------------------
  255|  48.4k|    *cmp_type = CMP_TYPE_POSITIVE_FIXNUM;
  256|  48.4k|    return true;
  257|  48.4k|  }
  258|       |
  259|   131k|  if (type_marker <= 0x8F) {
  ------------------
  |  Branch (259:7): [True: 572, False: 130k]
  ------------------
  260|    572|    *cmp_type = CMP_TYPE_FIXMAP;
  261|    572|    return true;
  262|    572|  }
  263|       |
  264|   130k|  if (type_marker <= 0x9F) {
  ------------------
  |  Branch (264:7): [True: 67.4k, False: 63.3k]
  ------------------
  265|  67.4k|    *cmp_type = CMP_TYPE_FIXARRAY;
  266|  67.4k|    return true;
  267|  67.4k|  }
  268|       |
  269|  63.3k|  if (type_marker <= 0xBF) {
  ------------------
  |  Branch (269:7): [True: 898, False: 62.4k]
  ------------------
  270|    898|    *cmp_type = CMP_TYPE_FIXSTR;
  271|    898|    return true;
  272|    898|  }
  273|       |
  274|  62.4k|  if (type_marker >= 0xE0) {
  ------------------
  |  Branch (274:7): [True: 3.31k, False: 59.1k]
  ------------------
  275|  3.31k|    *cmp_type = CMP_TYPE_NEGATIVE_FIXNUM;
  276|  3.31k|    return true;
  277|  3.31k|  }
  278|       |
  279|  59.1k|  switch (type_marker) {
  280|    551|    case NIL_MARKER: {
  ------------------
  |  Branch (280:5): [True: 551, False: 58.5k]
  ------------------
  281|    551|      *cmp_type = CMP_TYPE_NIL;
  282|    551|      return true;
  283|      0|    }
  284|  16.9k|    case FALSE_MARKER: {
  ------------------
  |  Branch (284:5): [True: 16.9k, False: 42.1k]
  ------------------
  285|  16.9k|      *cmp_type = CMP_TYPE_BOOLEAN;
  286|  16.9k|      return true;
  287|      0|    }
  288|    734|    case TRUE_MARKER: {
  ------------------
  |  Branch (288:5): [True: 734, False: 58.3k]
  ------------------
  289|    734|      *cmp_type = CMP_TYPE_BOOLEAN;
  290|    734|      return true;
  291|      0|    }
  292|  4.26k|    case BIN8_MARKER: {
  ------------------
  |  Branch (292:5): [True: 4.26k, False: 54.8k]
  ------------------
  293|  4.26k|      *cmp_type = CMP_TYPE_BIN8;
  294|  4.26k|      return true;
  295|      0|    }
  296|    333|    case BIN16_MARKER: {
  ------------------
  |  Branch (296:5): [True: 333, False: 58.7k]
  ------------------
  297|    333|      *cmp_type = CMP_TYPE_BIN16;
  298|    333|      return true;
  299|      0|    }
  300|  3.42k|    case BIN32_MARKER: {
  ------------------
  |  Branch (300:5): [True: 3.42k, False: 55.7k]
  ------------------
  301|  3.42k|      *cmp_type = CMP_TYPE_BIN32;
  302|  3.42k|      return true;
  303|      0|    }
  304|     94|    case EXT8_MARKER: {
  ------------------
  |  Branch (304:5): [True: 94, False: 59.0k]
  ------------------
  305|     94|      *cmp_type = CMP_TYPE_EXT8;
  306|     94|      return true;
  307|      0|    }
  308|    234|    case EXT16_MARKER: {
  ------------------
  |  Branch (308:5): [True: 234, False: 58.8k]
  ------------------
  309|    234|      *cmp_type = CMP_TYPE_EXT16;
  310|    234|      return true;
  311|      0|    }
  312|    124|    case EXT32_MARKER: {
  ------------------
  |  Branch (312:5): [True: 124, False: 59.0k]
  ------------------
  313|    124|      *cmp_type = CMP_TYPE_EXT32;
  314|    124|      return true;
  315|      0|    }
  316|     97|    case FLOAT_MARKER: {
  ------------------
  |  Branch (316:5): [True: 97, False: 59.0k]
  ------------------
  317|     97|      *cmp_type = CMP_TYPE_FLOAT;
  318|     97|      return true;
  319|      0|    }
  320|    994|    case DOUBLE_MARKER: {
  ------------------
  |  Branch (320:5): [True: 994, False: 58.1k]
  ------------------
  321|    994|      *cmp_type = CMP_TYPE_DOUBLE;
  322|    994|      return true;
  323|      0|    }
  324|  20.6k|    case U8_MARKER: {
  ------------------
  |  Branch (324:5): [True: 20.6k, False: 38.4k]
  ------------------
  325|  20.6k|      *cmp_type = CMP_TYPE_UINT8;
  326|  20.6k|      return true;
  327|      0|    }
  328|  4.70k|    case U16_MARKER: {
  ------------------
  |  Branch (328:5): [True: 4.70k, False: 54.4k]
  ------------------
  329|  4.70k|      *cmp_type = CMP_TYPE_UINT16;
  330|  4.70k|      return true;
  331|      0|    }
  332|    473|    case U32_MARKER: {
  ------------------
  |  Branch (332:5): [True: 473, False: 58.6k]
  ------------------
  333|    473|      *cmp_type = CMP_TYPE_UINT32;
  334|    473|      return true;
  335|      0|    }
  336|     97|    case U64_MARKER: {
  ------------------
  |  Branch (336:5): [True: 97, False: 59.0k]
  ------------------
  337|     97|      *cmp_type = CMP_TYPE_UINT64;
  338|     97|      return true;
  339|      0|    }
  340|    552|    case S8_MARKER: {
  ------------------
  |  Branch (340:5): [True: 552, False: 58.5k]
  ------------------
  341|    552|      *cmp_type = CMP_TYPE_SINT8;
  342|    552|      return true;
  343|      0|    }
  344|    331|    case S16_MARKER: {
  ------------------
  |  Branch (344:5): [True: 331, False: 58.7k]
  ------------------
  345|    331|      *cmp_type = CMP_TYPE_SINT16;
  346|    331|      return true;
  347|      0|    }
  348|    963|    case S32_MARKER: {
  ------------------
  |  Branch (348:5): [True: 963, False: 58.1k]
  ------------------
  349|    963|      *cmp_type = CMP_TYPE_SINT32;
  350|    963|      return true;
  351|      0|    }
  352|    102|    case S64_MARKER: {
  ------------------
  |  Branch (352:5): [True: 102, False: 59.0k]
  ------------------
  353|    102|      *cmp_type = CMP_TYPE_SINT64;
  354|    102|      return true;
  355|      0|    }
  356|    110|    case FIXEXT1_MARKER: {
  ------------------
  |  Branch (356:5): [True: 110, False: 59.0k]
  ------------------
  357|    110|      *cmp_type = CMP_TYPE_FIXEXT1;
  358|    110|      return true;
  359|      0|    }
  360|    177|    case FIXEXT2_MARKER: {
  ------------------
  |  Branch (360:5): [True: 177, False: 58.9k]
  ------------------
  361|    177|      *cmp_type = CMP_TYPE_FIXEXT2;
  362|    177|      return true;
  363|      0|    }
  364|  1.23k|    case FIXEXT4_MARKER: {
  ------------------
  |  Branch (364:5): [True: 1.23k, False: 57.8k]
  ------------------
  365|  1.23k|      *cmp_type = CMP_TYPE_FIXEXT4;
  366|  1.23k|      return true;
  367|      0|    }
  368|    113|    case FIXEXT8_MARKER: {
  ------------------
  |  Branch (368:5): [True: 113, False: 59.0k]
  ------------------
  369|    113|      *cmp_type = CMP_TYPE_FIXEXT8;
  370|    113|      return true;
  371|      0|    }
  372|    104|    case FIXEXT16_MARKER: {
  ------------------
  |  Branch (372:5): [True: 104, False: 59.0k]
  ------------------
  373|    104|      *cmp_type = CMP_TYPE_FIXEXT16;
  374|    104|      return true;
  375|      0|    }
  376|    116|    case STR8_MARKER: {
  ------------------
  |  Branch (376:5): [True: 116, False: 59.0k]
  ------------------
  377|    116|      *cmp_type = CMP_TYPE_STR8;
  378|    116|      return true;
  379|      0|    }
  380|     99|    case STR16_MARKER: {
  ------------------
  |  Branch (380:5): [True: 99, False: 59.0k]
  ------------------
  381|     99|      *cmp_type = CMP_TYPE_STR16;
  382|     99|      return true;
  383|      0|    }
  384|    137|    case STR32_MARKER: {
  ------------------
  |  Branch (384:5): [True: 137, False: 58.9k]
  ------------------
  385|    137|      *cmp_type = CMP_TYPE_STR32;
  386|    137|      return true;
  387|      0|    }
  388|    519|    case ARRAY16_MARKER: {
  ------------------
  |  Branch (388:5): [True: 519, False: 58.6k]
  ------------------
  389|    519|      *cmp_type = CMP_TYPE_ARRAY16;
  390|    519|      return true;
  391|      0|    }
  392|     77|    case ARRAY32_MARKER: {
  ------------------
  |  Branch (392:5): [True: 77, False: 59.0k]
  ------------------
  393|     77|      *cmp_type = CMP_TYPE_ARRAY32;
  394|     77|      return true;
  395|      0|    }
  396|    340|    case MAP16_MARKER: {
  ------------------
  |  Branch (396:5): [True: 340, False: 58.7k]
  ------------------
  397|    340|      *cmp_type = CMP_TYPE_MAP16;
  398|    340|      return true;
  399|      0|    }
  400|     94|    case MAP32_MARKER: {
  ------------------
  |  Branch (400:5): [True: 94, False: 59.0k]
  ------------------
  401|     94|      *cmp_type = CMP_TYPE_MAP32;
  402|     94|      return true;
  403|      0|    }
  404|    292|    default: {
  ------------------
  |  Branch (404:5): [True: 292, False: 58.8k]
  ------------------
  405|    292|      return false;
  406|      0|    }
  407|  59.1k|  }
  408|  59.1k|}
cmp.c:read_obj_data:
  618|   179k|                                          cmp_object_t *obj) {
  619|   179k|  switch (obj->type) {
  620|  48.4k|    case CMP_TYPE_POSITIVE_FIXNUM: {
  ------------------
  |  Branch (620:5): [True: 48.4k, False: 131k]
  ------------------
  621|  48.4k|      obj->as.u8 = type_marker;
  622|  48.4k|      return true;
  623|      0|    }
  624|  3.31k|    case CMP_TYPE_NEGATIVE_FIXNUM: {
  ------------------
  |  Branch (624:5): [True: 3.31k, False: 176k]
  ------------------
  625|  3.31k|      obj->as.s8 = (int8_t)type_marker;
  626|  3.31k|      return true;
  627|      0|    }
  628|    551|    case CMP_TYPE_NIL: {
  ------------------
  |  Branch (628:5): [True: 551, False: 178k]
  ------------------
  629|    551|      obj->as.u8 = 0;
  630|    551|      return true;
  631|      0|    }
  632|  17.6k|    case CMP_TYPE_BOOLEAN: {
  ------------------
  |  Branch (632:5): [True: 17.6k, False: 161k]
  ------------------
  633|  17.6k|      switch (type_marker) {
  634|    734|        case TRUE_MARKER: {
  ------------------
  |  Branch (634:9): [True: 734, False: 16.9k]
  ------------------
  635|    734|          obj->as.boolean = true;
  636|    734|          return true;
  637|      0|        }
  638|  16.9k|        case FALSE_MARKER: {
  ------------------
  |  Branch (638:9): [True: 16.9k, False: 734]
  ------------------
  639|  16.9k|          obj->as.boolean = false;
  640|  16.9k|          return true;
  641|      0|        }
  642|      0|        default:
  ------------------
  |  Branch (642:9): [True: 0, False: 17.6k]
  ------------------
  643|      0|          break;
  644|  17.6k|      }
  645|      0|      ctx->error = CMP_ERROR_INTERNAL;
  646|      0|      return false;
  647|  17.6k|    }
  648|  20.6k|    case CMP_TYPE_UINT8: {
  ------------------
  |  Branch (648:5): [True: 20.6k, False: 158k]
  ------------------
  649|  20.6k|      if (!ctx->read(ctx, &obj->as.u8, sizeof(uint8_t))) {
  ------------------
  |  Branch (649:11): [True: 10, False: 20.6k]
  ------------------
  650|     10|        ctx->error = CMP_ERROR_DATA_READING;
  651|     10|        return false;
  652|     10|      }
  653|  20.6k|      return true;
  654|  20.6k|    }
  655|  4.70k|    case CMP_TYPE_UINT16: {
  ------------------
  |  Branch (655:5): [True: 4.70k, False: 174k]
  ------------------
  656|  4.70k|      if (!ctx->read(ctx, &obj->as.u16, sizeof(uint16_t))) {
  ------------------
  |  Branch (656:11): [True: 2.04k, False: 2.66k]
  ------------------
  657|  2.04k|        ctx->error = CMP_ERROR_DATA_READING;
  658|  2.04k|        return false;
  659|  2.04k|      }
  660|  2.66k|      obj->as.u16 = be16(obj->as.u16);
  661|  2.66k|      return true;
  662|  4.70k|    }
  663|    473|    case CMP_TYPE_UINT32: {
  ------------------
  |  Branch (663:5): [True: 473, False: 179k]
  ------------------
  664|    473|      if (!ctx->read(ctx, &obj->as.u32, sizeof(uint32_t))) {
  ------------------
  |  Branch (664:11): [True: 90, False: 383]
  ------------------
  665|     90|        ctx->error = CMP_ERROR_DATA_READING;
  666|     90|        return false;
  667|     90|      }
  668|    383|      obj->as.u32 = be32(obj->as.u32);
  669|    383|      return true;
  670|    473|    }
  671|     97|    case CMP_TYPE_UINT64: {
  ------------------
  |  Branch (671:5): [True: 97, False: 179k]
  ------------------
  672|     97|      if (!ctx->read(ctx, &obj->as.u64, sizeof(uint64_t))) {
  ------------------
  |  Branch (672:11): [True: 35, False: 62]
  ------------------
  673|     35|        ctx->error = CMP_ERROR_DATA_READING;
  674|     35|        return false;
  675|     35|      }
  676|     62|      obj->as.u64 = be64(obj->as.u64);
  677|     62|      return true;
  678|     97|    }
  679|    552|    case CMP_TYPE_SINT8: {
  ------------------
  |  Branch (679:5): [True: 552, False: 178k]
  ------------------
  680|    552|      if (!ctx->read(ctx, &obj->as.s8, sizeof(int8_t))) {
  ------------------
  |  Branch (680:11): [True: 10, False: 542]
  ------------------
  681|     10|        ctx->error = CMP_ERROR_DATA_READING;
  682|     10|        return false;
  683|     10|      }
  684|    542|      return true;
  685|    552|    }
  686|    331|    case CMP_TYPE_SINT16: {
  ------------------
  |  Branch (686:5): [True: 331, False: 179k]
  ------------------
  687|    331|      if (!ctx->read(ctx, &obj->as.s16, sizeof(int16_t))) {
  ------------------
  |  Branch (687:11): [True: 18, False: 313]
  ------------------
  688|     18|        ctx->error = CMP_ERROR_DATA_READING;
  689|     18|        return false;
  690|     18|      }
  691|    313|      obj->as.s16 = sbe16(obj->as.s16);
  692|    313|      return true;
  693|    331|    }
  694|    963|    case CMP_TYPE_SINT32: {
  ------------------
  |  Branch (694:5): [True: 963, False: 178k]
  ------------------
  695|    963|      if (!ctx->read(ctx, &obj->as.s32, sizeof(int32_t))) {
  ------------------
  |  Branch (695:11): [True: 20, False: 943]
  ------------------
  696|     20|        ctx->error = CMP_ERROR_DATA_READING;
  697|     20|        return false;
  698|     20|      }
  699|    943|      obj->as.s32 = sbe32(obj->as.s32);
  700|    943|      return true;
  701|    963|    }
  702|    102|    case CMP_TYPE_SINT64: {
  ------------------
  |  Branch (702:5): [True: 102, False: 179k]
  ------------------
  703|    102|      if (!ctx->read(ctx, &obj->as.s64, sizeof(int64_t))) {
  ------------------
  |  Branch (703:11): [True: 32, False: 70]
  ------------------
  704|     32|        ctx->error = CMP_ERROR_DATA_READING;
  705|     32|        return false;
  706|     32|      }
  707|     70|      obj->as.s64 = sbe64(obj->as.s64);
  708|     70|      return true;
  709|    102|    }
  710|     97|    case CMP_TYPE_FLOAT: {
  ------------------
  |  Branch (710:5): [True: 97, False: 179k]
  ------------------
  711|       |#ifndef CMP_NO_FLOAT
  712|       |      char bytes[4];
  713|       |
  714|       |      if (!ctx->read(ctx, bytes, 4)) {
  715|       |        ctx->error = CMP_ERROR_DATA_READING;
  716|       |        return false;
  717|       |      }
  718|       |      obj->as.flt = decode_befloat(bytes);
  719|       |      return true;
  720|       |#else /* CMP_NO_FLOAT */
  721|     97|      ctx->error = CMP_ERROR_DISABLED_FLOATING_POINT;
  722|     97|      return false;
  723|    102|#endif /* CMP_NO_FLOAT */
  724|    102|    }
  725|    994|    case CMP_TYPE_DOUBLE: {
  ------------------
  |  Branch (725:5): [True: 994, False: 178k]
  ------------------
  726|       |#ifndef CMP_NO_FLOAT
  727|       |      char bytes[8];
  728|       |
  729|       |      if (!ctx->read(ctx, bytes, 8)) {
  730|       |        ctx->error = CMP_ERROR_DATA_READING;
  731|       |        return false;
  732|       |      }
  733|       |      obj->as.dbl = decode_bedouble(bytes);
  734|       |      return true;
  735|       |#else /* CMP_NO_FLOAT */
  736|    994|      ctx->error = CMP_ERROR_DISABLED_FLOATING_POINT;
  737|    994|      return false;
  738|    102|#endif /* CMP_NO_FLOAT */
  739|    102|    }
  740|  4.26k|    case CMP_TYPE_BIN8:
  ------------------
  |  Branch (740:5): [True: 4.26k, False: 175k]
  ------------------
  741|  4.59k|    case CMP_TYPE_BIN16:
  ------------------
  |  Branch (741:5): [True: 333, False: 179k]
  ------------------
  742|  8.01k|    case CMP_TYPE_BIN32:
  ------------------
  |  Branch (742:5): [True: 3.42k, False: 176k]
  ------------------
  743|  8.01k|      return read_type_size(ctx, type_marker, obj->type, &obj->as.bin_size);
  744|    898|    case CMP_TYPE_FIXSTR:
  ------------------
  |  Branch (744:5): [True: 898, False: 178k]
  ------------------
  745|  1.01k|    case CMP_TYPE_STR8:
  ------------------
  |  Branch (745:5): [True: 116, False: 179k]
  ------------------
  746|  1.11k|    case CMP_TYPE_STR16:
  ------------------
  |  Branch (746:5): [True: 99, False: 179k]
  ------------------
  747|  1.25k|    case CMP_TYPE_STR32:
  ------------------
  |  Branch (747:5): [True: 137, False: 179k]
  ------------------
  748|  1.25k|      return read_type_size(ctx, type_marker, obj->type, &obj->as.str_size);
  749|  67.4k|    case CMP_TYPE_FIXARRAY:
  ------------------
  |  Branch (749:5): [True: 67.4k, False: 112k]
  ------------------
  750|  67.9k|    case CMP_TYPE_ARRAY16:
  ------------------
  |  Branch (750:5): [True: 519, False: 179k]
  ------------------
  751|  68.0k|    case CMP_TYPE_ARRAY32:
  ------------------
  |  Branch (751:5): [True: 77, False: 179k]
  ------------------
  752|  68.0k|      return read_type_size(ctx, type_marker, obj->type, &obj->as.array_size);
  753|    572|    case CMP_TYPE_FIXMAP:
  ------------------
  |  Branch (753:5): [True: 572, False: 178k]
  ------------------
  754|    912|    case CMP_TYPE_MAP16:
  ------------------
  |  Branch (754:5): [True: 340, False: 179k]
  ------------------
  755|  1.00k|    case CMP_TYPE_MAP32:
  ------------------
  |  Branch (755:5): [True: 94, False: 179k]
  ------------------
  756|  1.00k|      return read_type_size(ctx, type_marker, obj->type, &obj->as.map_size);
  757|    110|    case CMP_TYPE_FIXEXT1: {
  ------------------
  |  Branch (757:5): [True: 110, False: 179k]
  ------------------
  758|    110|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (758:11): [True: 25, False: 85]
  ------------------
  759|     25|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  760|     25|        return false;
  761|     25|      }
  762|     85|      obj->as.ext.size = 1;
  763|     85|      return true;
  764|    110|    }
  765|    177|    case CMP_TYPE_FIXEXT2: {
  ------------------
  |  Branch (765:5): [True: 177, False: 179k]
  ------------------
  766|    177|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (766:11): [True: 18, False: 159]
  ------------------
  767|     18|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  768|     18|        return false;
  769|     18|      }
  770|    159|      obj->as.ext.size = 2;
  771|    159|      return true;
  772|    177|    }
  773|  1.23k|    case CMP_TYPE_FIXEXT4: {
  ------------------
  |  Branch (773:5): [True: 1.23k, False: 178k]
  ------------------
  774|  1.23k|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (774:11): [True: 13, False: 1.22k]
  ------------------
  775|     13|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  776|     13|        return false;
  777|     13|      }
  778|  1.22k|      obj->as.ext.size = 4;
  779|  1.22k|      return true;
  780|  1.23k|    }
  781|    113|    case CMP_TYPE_FIXEXT8: {
  ------------------
  |  Branch (781:5): [True: 113, False: 179k]
  ------------------
  782|    113|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (782:11): [True: 18, False: 95]
  ------------------
  783|     18|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  784|     18|        return false;
  785|     18|      }
  786|     95|      obj->as.ext.size = 8;
  787|     95|      return true;
  788|    113|    }
  789|    104|    case CMP_TYPE_FIXEXT16: {
  ------------------
  |  Branch (789:5): [True: 104, False: 179k]
  ------------------
  790|    104|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (790:11): [True: 10, False: 94]
  ------------------
  791|     10|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  792|     10|        return false;
  793|     10|      }
  794|     94|      obj->as.ext.size = 16;
  795|     94|      return true;
  796|    104|    }
  797|     94|    case CMP_TYPE_EXT8: {
  ------------------
  |  Branch (797:5): [True: 94, False: 179k]
  ------------------
  798|     94|      if (!read_type_size(ctx, type_marker, obj->type, &obj->as.ext.size)) {
  ------------------
  |  Branch (798:11): [True: 1, False: 93]
  ------------------
  799|      1|        return false;
  800|      1|      }
  801|     93|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (801:11): [True: 19, False: 74]
  ------------------
  802|     19|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  803|     19|        return false;
  804|     19|      }
  805|     74|      return true;
  806|     93|    }
  807|    234|    case CMP_TYPE_EXT16: {
  ------------------
  |  Branch (807:5): [True: 234, False: 179k]
  ------------------
  808|    234|      if (!read_type_size(ctx, type_marker, obj->type, &obj->as.ext.size)) {
  ------------------
  |  Branch (808:11): [True: 28, False: 206]
  ------------------
  809|     28|        return false;
  810|     28|      }
  811|    206|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (811:11): [True: 100, False: 106]
  ------------------
  812|    100|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  813|    100|        return false;
  814|    100|      }
  815|    106|      return true;
  816|    206|    }
  817|    124|    case CMP_TYPE_EXT32: {
  ------------------
  |  Branch (817:5): [True: 124, False: 179k]
  ------------------
  818|    124|      if (!read_type_size(ctx, type_marker, obj->type, &obj->as.ext.size)) {
  ------------------
  |  Branch (818:11): [True: 13, False: 111]
  ------------------
  819|     13|        return false;
  820|     13|      }
  821|    111|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (821:11): [True: 12, False: 99]
  ------------------
  822|     12|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  823|     12|        return false;
  824|     12|      }
  825|     99|      return true;
  826|    111|    }
  827|      0|    default:
  ------------------
  |  Branch (827:5): [True: 0, False: 179k]
  ------------------
  828|      0|      break;
  829|   179k|  }
  830|       |
  831|      0|  ctx->error = CMP_ERROR_INVALID_TYPE;
  832|      0|  return false;
  833|   179k|}
cmp.c:read_type_size:
  412|  78.7k|                                           uint32_t *size) {
  413|  78.7k|  uint8_t u8temp = 0;
  414|  78.7k|  uint16_t u16temp = 0;
  415|  78.7k|  uint32_t u32temp = 0;
  416|       |
  417|  78.7k|  switch (cmp_type) {
  418|      0|    case CMP_TYPE_POSITIVE_FIXNUM: {
  ------------------
  |  Branch (418:5): [True: 0, False: 78.7k]
  ------------------
  419|      0|      *size = 0;
  420|      0|      return true;
  421|      0|    }
  422|    572|    case CMP_TYPE_FIXMAP: {
  ------------------
  |  Branch (422:5): [True: 572, False: 78.1k]
  ------------------
  423|    572|      *size = type_marker & FIXMAP_SIZE;
  424|    572|      return true;
  425|      0|    }
  426|  67.4k|    case CMP_TYPE_FIXARRAY: {
  ------------------
  |  Branch (426:5): [True: 67.4k, False: 11.3k]
  ------------------
  427|  67.4k|      *size = type_marker & FIXARRAY_SIZE;
  428|  67.4k|      return true;
  429|      0|    }
  430|    898|    case CMP_TYPE_FIXSTR: {
  ------------------
  |  Branch (430:5): [True: 898, False: 77.8k]
  ------------------
  431|    898|      *size = type_marker & FIXSTR_SIZE;
  432|    898|      return true;
  433|      0|    }
  434|      0|    case CMP_TYPE_NIL: {
  ------------------
  |  Branch (434:5): [True: 0, False: 78.7k]
  ------------------
  435|      0|      *size = 0;
  436|      0|      return true;
  437|      0|    }
  438|      0|    case CMP_TYPE_BOOLEAN: {
  ------------------
  |  Branch (438:5): [True: 0, False: 78.7k]
  ------------------
  439|      0|      *size = 0;
  440|      0|      return true;
  441|      0|    }
  442|  4.26k|    case CMP_TYPE_BIN8: {
  ------------------
  |  Branch (442:5): [True: 4.26k, False: 74.5k]
  ------------------
  443|  4.26k|      if (!ctx->read(ctx, &u8temp, sizeof(uint8_t))) {
  ------------------
  |  Branch (443:11): [True: 1, False: 4.26k]
  ------------------
  444|      1|        ctx->error = CMP_ERROR_LENGTH_READING;
  445|      1|        return false;
  446|      1|      }
  447|  4.26k|      *size = u8temp;
  448|  4.26k|      return true;
  449|  4.26k|    }
  450|    333|    case CMP_TYPE_BIN16: {
  ------------------
  |  Branch (450:5): [True: 333, False: 78.4k]
  ------------------
  451|    333|      if (!ctx->read(ctx, &u16temp, sizeof(uint16_t))) {
  ------------------
  |  Branch (451:11): [True: 11, False: 322]
  ------------------
  452|     11|        ctx->error = CMP_ERROR_LENGTH_READING;
  453|     11|        return false;
  454|     11|      }
  455|    322|      *size = be16(u16temp);
  456|    322|      return true;
  457|    333|    }
  458|  3.42k|    case CMP_TYPE_BIN32: {
  ------------------
  |  Branch (458:5): [True: 3.42k, False: 75.3k]
  ------------------
  459|  3.42k|      if (!ctx->read(ctx, &u32temp, sizeof(uint32_t))) {
  ------------------
  |  Branch (459:11): [True: 854, False: 2.56k]
  ------------------
  460|    854|        ctx->error = CMP_ERROR_LENGTH_READING;
  461|    854|        return false;
  462|    854|      }
  463|  2.56k|      *size = be32(u32temp);
  464|  2.56k|      return true;
  465|  3.42k|    }
  466|     94|    case CMP_TYPE_EXT8: {
  ------------------
  |  Branch (466:5): [True: 94, False: 78.6k]
  ------------------
  467|     94|      if (!ctx->read(ctx, &u8temp, sizeof(uint8_t))) {
  ------------------
  |  Branch (467:11): [True: 1, False: 93]
  ------------------
  468|      1|        ctx->error = CMP_ERROR_LENGTH_READING;
  469|      1|        return false;
  470|      1|      }
  471|     93|      *size = u8temp;
  472|     93|      return true;
  473|     94|    }
  474|    234|    case CMP_TYPE_EXT16: {
  ------------------
  |  Branch (474:5): [True: 234, False: 78.5k]
  ------------------
  475|    234|      if (!ctx->read(ctx, &u16temp, sizeof(uint16_t))) {
  ------------------
  |  Branch (475:11): [True: 28, False: 206]
  ------------------
  476|     28|        ctx->error = CMP_ERROR_LENGTH_READING;
  477|     28|        return false;
  478|     28|      }
  479|    206|      *size = be16(u16temp);
  480|    206|      return true;
  481|    234|    }
  482|    124|    case CMP_TYPE_EXT32: {
  ------------------
  |  Branch (482:5): [True: 124, False: 78.6k]
  ------------------
  483|    124|      if (!ctx->read(ctx, &u32temp, sizeof(uint32_t))) {
  ------------------
  |  Branch (483:11): [True: 13, False: 111]
  ------------------
  484|     13|        ctx->error = CMP_ERROR_LENGTH_READING;
  485|     13|        return false;
  486|     13|      }
  487|    111|      *size = be32(u32temp);
  488|    111|      return true;
  489|    124|    }
  490|      0|    case CMP_TYPE_FLOAT: {
  ------------------
  |  Branch (490:5): [True: 0, False: 78.7k]
  ------------------
  491|      0|      *size = 4;
  492|      0|      return true;
  493|    124|    }
  494|      0|    case CMP_TYPE_DOUBLE: {
  ------------------
  |  Branch (494:5): [True: 0, False: 78.7k]
  ------------------
  495|      0|      *size = 8;
  496|      0|      return true;
  497|    124|    }
  498|      0|    case CMP_TYPE_UINT8: {
  ------------------
  |  Branch (498:5): [True: 0, False: 78.7k]
  ------------------
  499|      0|      *size = 1;
  500|      0|      return true;
  501|    124|    }
  502|      0|    case CMP_TYPE_UINT16: {
  ------------------
  |  Branch (502:5): [True: 0, False: 78.7k]
  ------------------
  503|      0|      *size = 2;
  504|      0|      return true;
  505|    124|    }
  506|      0|    case CMP_TYPE_UINT32: {
  ------------------
  |  Branch (506:5): [True: 0, False: 78.7k]
  ------------------
  507|      0|      *size = 4;
  508|      0|      return true;
  509|    124|    }
  510|      0|    case CMP_TYPE_UINT64: {
  ------------------
  |  Branch (510:5): [True: 0, False: 78.7k]
  ------------------
  511|      0|      *size = 8;
  512|      0|      return true;
  513|    124|    }
  514|      0|    case CMP_TYPE_SINT8: {
  ------------------
  |  Branch (514:5): [True: 0, False: 78.7k]
  ------------------
  515|      0|      *size = 1;
  516|      0|      return true;
  517|    124|    }
  518|      0|    case CMP_TYPE_SINT16: {
  ------------------
  |  Branch (518:5): [True: 0, False: 78.7k]
  ------------------
  519|      0|      *size = 2;
  520|      0|      return true;
  521|    124|    }
  522|      0|    case CMP_TYPE_SINT32: {
  ------------------
  |  Branch (522:5): [True: 0, False: 78.7k]
  ------------------
  523|      0|      *size = 4;
  524|      0|      return true;
  525|    124|    }
  526|      0|    case CMP_TYPE_SINT64: {
  ------------------
  |  Branch (526:5): [True: 0, False: 78.7k]
  ------------------
  527|      0|      *size = 8;
  528|      0|      return true;
  529|    124|    }
  530|      0|    case CMP_TYPE_FIXEXT1: {
  ------------------
  |  Branch (530:5): [True: 0, False: 78.7k]
  ------------------
  531|      0|      *size = 1;
  532|      0|      return true;
  533|    124|    }
  534|      0|    case CMP_TYPE_FIXEXT2: {
  ------------------
  |  Branch (534:5): [True: 0, False: 78.7k]
  ------------------
  535|      0|      *size = 2;
  536|      0|      return true;
  537|    124|    }
  538|      0|    case CMP_TYPE_FIXEXT4: {
  ------------------
  |  Branch (538:5): [True: 0, False: 78.7k]
  ------------------
  539|      0|      *size = 4;
  540|      0|      return true;
  541|    124|    }
  542|      0|    case CMP_TYPE_FIXEXT8: {
  ------------------
  |  Branch (542:5): [True: 0, False: 78.7k]
  ------------------
  543|      0|      *size = 8;
  544|      0|      return true;
  545|    124|    }
  546|      0|    case CMP_TYPE_FIXEXT16: {
  ------------------
  |  Branch (546:5): [True: 0, False: 78.7k]
  ------------------
  547|      0|      *size = 16;
  548|      0|      return true;
  549|    124|    }
  550|    116|    case CMP_TYPE_STR8: {
  ------------------
  |  Branch (550:5): [True: 116, False: 78.6k]
  ------------------
  551|    116|      if (!ctx->read(ctx, &u8temp, sizeof(uint8_t))) {
  ------------------
  |  Branch (551:11): [True: 1, False: 115]
  ------------------
  552|      1|        ctx->error = CMP_ERROR_DATA_READING;
  553|      1|        return false;
  554|      1|      }
  555|    115|      *size = u8temp;
  556|    115|      return true;
  557|    116|    }
  558|     99|    case CMP_TYPE_STR16: {
  ------------------
  |  Branch (558:5): [True: 99, False: 78.6k]
  ------------------
  559|     99|      if (!ctx->read(ctx, &u16temp, sizeof(uint16_t))) {
  ------------------
  |  Branch (559:11): [True: 10, False: 89]
  ------------------
  560|     10|        ctx->error = CMP_ERROR_DATA_READING;
  561|     10|        return false;
  562|     10|      }
  563|     89|      *size = be16(u16temp);
  564|     89|      return true;
  565|     99|    }
  566|    137|    case CMP_TYPE_STR32: {
  ------------------
  |  Branch (566:5): [True: 137, False: 78.6k]
  ------------------
  567|    137|      if (!ctx->read(ctx, &u32temp, sizeof(uint32_t))) {
  ------------------
  |  Branch (567:11): [True: 15, False: 122]
  ------------------
  568|     15|        ctx->error = CMP_ERROR_DATA_READING;
  569|     15|        return false;
  570|     15|      }
  571|    122|      *size = be32(u32temp);
  572|    122|      return true;
  573|    137|    }
  574|    519|    case CMP_TYPE_ARRAY16: {
  ------------------
  |  Branch (574:5): [True: 519, False: 78.2k]
  ------------------
  575|    519|      if (!ctx->read(ctx, &u16temp, sizeof(uint16_t))) {
  ------------------
  |  Branch (575:11): [True: 133, False: 386]
  ------------------
  576|    133|        ctx->error = CMP_ERROR_DATA_READING;
  577|    133|        return false;
  578|    133|      }
  579|    386|      *size = be16(u16temp);
  580|    386|      return true;
  581|    519|    }
  582|     77|    case CMP_TYPE_ARRAY32: {
  ------------------
  |  Branch (582:5): [True: 77, False: 78.6k]
  ------------------
  583|     77|      if (!ctx->read(ctx, &u32temp, sizeof(uint32_t))) {
  ------------------
  |  Branch (583:11): [True: 20, False: 57]
  ------------------
  584|     20|        ctx->error = CMP_ERROR_DATA_READING;
  585|     20|        return false;
  586|     20|      }
  587|     57|      *size = be32(u32temp);
  588|     57|      return true;
  589|     77|    }
  590|    340|    case CMP_TYPE_MAP16: {
  ------------------
  |  Branch (590:5): [True: 340, False: 78.4k]
  ------------------
  591|    340|      if (!ctx->read(ctx, &u16temp, sizeof(uint16_t))) {
  ------------------
  |  Branch (591:11): [True: 11, False: 329]
  ------------------
  592|     11|        ctx->error = CMP_ERROR_DATA_READING;
  593|     11|        return false;
  594|     11|      }
  595|    329|      *size = be16(u16temp);
  596|    329|      return true;
  597|    340|    }
  598|     94|    case CMP_TYPE_MAP32: {
  ------------------
  |  Branch (598:5): [True: 94, False: 78.6k]
  ------------------
  599|     94|      if (!ctx->read(ctx, &u32temp, sizeof(uint32_t))) {
  ------------------
  |  Branch (599:11): [True: 13, False: 81]
  ------------------
  600|     13|        ctx->error = CMP_ERROR_DATA_READING;
  601|     13|        return false;
  602|     13|      }
  603|     81|      *size = be32(u32temp);
  604|     81|      return true;
  605|     94|    }
  606|      0|    case CMP_TYPE_NEGATIVE_FIXNUM: {
  ------------------
  |  Branch (606:5): [True: 0, False: 78.7k]
  ------------------
  607|      0|      *size = 0;
  608|      0|      return true;
  609|     94|    }
  610|      0|    default: {
  ------------------
  |  Branch (610:5): [True: 0, False: 78.7k]
  ------------------
  611|      0|      ctx->error = CMP_ERROR_INVALID_TYPE;
  612|      0|      return false;
  613|     94|    }
  614|  78.7k|  }
  615|  78.7k|}

dht_get_self_public_key:
  147|  4.49k|{
  148|  4.49k|    return dht->self_public_key;
  149|  4.49k|}
dht_get_self_secret_key:
  151|  6.98k|{
  152|  6.98k|    return dht->self_secret_key;
  153|  6.98k|}
dht_get_net:
  165|  29.6k|{
  166|  29.6k|    return dht->net;
  167|  29.6k|}
id_closest:
  221|    107|{
  222|  3.53k|    for (size_t i = 0; i < CRYPTO_PUBLIC_KEY_SIZE; ++i) {
  ------------------
  |  |   43|  3.53k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  |  Branch (222:24): [True: 3.42k, False: 107]
  ------------------
  223|  3.42k|        const uint8_t distance1 = pk[i] ^ pk1[i];
  224|  3.42k|        const uint8_t distance2 = pk[i] ^ pk2[i];
  225|       |
  226|  3.42k|        if (distance1 < distance2) {
  ------------------
  |  Branch (226:13): [True: 0, False: 3.42k]
  ------------------
  227|      0|            return 1;
  228|      0|        }
  229|       |
  230|  3.42k|        if (distance1 > distance2) {
  ------------------
  |  Branch (230:13): [True: 0, False: 3.42k]
  ------------------
  231|      0|            return 2;
  232|      0|        }
  233|  3.42k|    }
  234|       |
  235|    107|    return 0;
  236|    107|}
packed_node_size:
  355|  14.6k|{
  356|  14.6k|    if (net_family_is_ipv4(ip_family) || net_family_is_tcp_ipv4(ip_family)) {
  ------------------
  |  Branch (356:9): [True: 3.66k, False: 11.0k]
  |  Branch (356:42): [True: 0, False: 11.0k]
  ------------------
  357|  3.66k|        return PACKED_NODE_SIZE_IP4;
  ------------------
  |  |   71|  3.66k|#define PACKED_NODE_SIZE_IP4 (1 + SIZE_IP4 + sizeof(uint16_t) + CRYPTO_PUBLIC_KEY_SIZE)
  |  |  ------------------
  |  |  |  |  185|  3.66k|#define SIZE_IP4 4
  |  |  ------------------
  |  |               #define PACKED_NODE_SIZE_IP4 (1 + SIZE_IP4 + sizeof(uint16_t) + CRYPTO_PUBLIC_KEY_SIZE)
  |  |  ------------------
  |  |  |  |   43|  3.66k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  358|  3.66k|    }
  359|       |
  360|  11.0k|    if (net_family_is_ipv6(ip_family) || net_family_is_tcp_ipv6(ip_family)) {
  ------------------
  |  Branch (360:9): [True: 3.66k, False: 7.33k]
  |  Branch (360:42): [True: 7.33k, False: 0]
  ------------------
  361|  11.0k|        return PACKED_NODE_SIZE_IP6;
  ------------------
  |  |   72|  11.0k|#define PACKED_NODE_SIZE_IP6 (1 + SIZE_IP6 + sizeof(uint16_t) + CRYPTO_PUBLIC_KEY_SIZE)
  |  |  ------------------
  |  |  |  |  186|  11.0k|#define SIZE_IP6 16
  |  |  ------------------
  |  |               #define PACKED_NODE_SIZE_IP6 (1 + SIZE_IP6 + sizeof(uint16_t) + CRYPTO_PUBLIC_KEY_SIZE)
  |  |  ------------------
  |  |  |  |   43|  11.0k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  362|  11.0k|    }
  363|       |
  364|      0|    return -1;
  365|  11.0k|}
pack_nodes:
  416|  4.12k|{
  417|  4.12k|    const uint32_t size = bin_pack_obj_array_b_size(bin_pack_node_handler, nodes, number, logger);
  418|  4.12k|    if (!bin_pack_obj_array_b(bin_pack_node_handler, nodes, number, logger, data, length)) {
  ------------------
  |  Branch (418:9): [True: 0, False: 4.12k]
  ------------------
  419|      0|        return -1;
  420|      0|    }
  421|  4.12k|    return size;
  422|  4.12k|}
unpack_nodes:
  426|  1.81k|{
  427|  1.81k|    uint32_t num = 0;
  428|  1.81k|    uint32_t len_processed = 0;
  429|       |
  430|  11.9k|    while (num < max_num_nodes && len_processed < length) {
  ------------------
  |  Branch (430:12): [True: 11.5k, False: 474]
  |  Branch (430:35): [True: 11.0k, False: 483]
  ------------------
  431|  11.0k|        const int ipp_size = unpack_ip_port(&nodes[num].ip_port, data + len_processed, length - len_processed, tcp_enabled);
  432|       |
  433|  11.0k|        if (ipp_size == -1) {
  ------------------
  |  Branch (433:13): [True: 758, False: 10.2k]
  ------------------
  434|    758|            break;
  435|    758|        }
  436|       |
  437|  10.2k|        len_processed += ipp_size;
  438|       |
  439|  10.2k|        if (len_processed + CRYPTO_PUBLIC_KEY_SIZE > length) {
  ------------------
  |  |   43|  10.2k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  |  Branch (439:13): [True: 102, False: 10.1k]
  ------------------
  440|    102|            return -1;
  441|    102|        }
  442|       |
  443|  10.1k|        memcpy(nodes[num].public_key, data + len_processed, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|  10.1k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  444|  10.1k|        len_processed += CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|  10.1k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  445|  10.1k|        ++num;
  446|       |
  447|  10.1k|#ifndef NDEBUG
  448|  10.1k|        const uint32_t increment = ipp_size + CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|  10.1k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  449|  10.1k|        assert(increment == PACKED_NODE_SIZE_IP4 || increment == PACKED_NODE_SIZE_IP6);
  450|  10.1k|#endif /* NDEBUG */
  451|  10.1k|    }
  452|       |
  453|  1.71k|    if (num == 0 && max_num_nodes > 0 && length > 0) {
  ------------------
  |  Branch (453:9): [True: 253, False: 1.46k]
  |  Branch (453:21): [True: 253, False: 0]
  |  Branch (453:42): [True: 252, False: 1]
  ------------------
  454|    252|        return -1;
  455|    252|    }
  456|       |
  457|  1.46k|    if (processed_data_len != nullptr) {
  ------------------
  |  |   63|  1.46k|#define nullptr NULL
  ------------------
  |  Branch (457:9): [True: 250, False: 1.21k]
  ------------------
  458|    250|        *processed_data_len = len_processed;
  459|    250|    }
  460|       |
  461|  1.46k|    return num;
  462|  1.71k|}
get_close_nodes:
  755|  3.49k|{
  756|  3.49k|    return get_somewhat_close_nodes(
  757|  3.49k|               dht->cur_time, public_key, nodes_list,
  758|  3.49k|               sa_family, dht->close_clientlist,
  759|  3.49k|               dht->friends_list, dht->num_friends,
  760|  3.49k|               is_lan, want_announce);
  761|  3.49k|}
dht_addfriend:
 1630|  3.49k|{
 1631|  3.49k|    const uint32_t friend_num = index_of_friend_pk(dht->friends_list, dht->num_friends, public_key);
 1632|       |
 1633|  3.49k|    if (friend_num != UINT32_MAX) { /* Is friend already in DHT? */
  ------------------
  |  Branch (1633:9): [True: 0, False: 3.49k]
  ------------------
 1634|      0|        DHT_Friend *const dht_friend = &dht->friends_list[friend_num];
 1635|      0|        const uint32_t tmp_lock_token = dht_friend_lock(dht_friend, ip_callback, data, number);
 1636|       |
 1637|      0|        if (tmp_lock_token == 0) {
  ------------------
  |  Branch (1637:13): [True: 0, False: 0]
  ------------------
 1638|      0|            return -1;
 1639|      0|        }
 1640|       |
 1641|      0|        return 0;
 1642|      0|    }
 1643|       |
 1644|  3.49k|    DHT_Friend *const temp = (DHT_Friend *)mem_vrealloc(dht->mem, dht->friends_list, dht->num_friends + 1, sizeof(DHT_Friend));
 1645|       |
 1646|  3.49k|    if (temp == nullptr) {
  ------------------
  |  |   63|  3.49k|#define nullptr NULL
  ------------------
  |  Branch (1646:9): [True: 0, False: 3.49k]
  ------------------
 1647|      0|        return -1;
 1648|      0|    }
 1649|       |
 1650|  3.49k|    dht->friends_list = temp;
 1651|  3.49k|    DHT_Friend *const dht_friend = &dht->friends_list[dht->num_friends];
 1652|  3.49k|    *dht_friend = empty_dht_friend;
 1653|  3.49k|    memcpy(dht_friend->public_key, public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|  3.49k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 1654|       |
 1655|  3.49k|    dht_friend->nat.nat_ping_id = random_u64(dht->rng);
 1656|  3.49k|    ++dht->num_friends;
 1657|       |
 1658|  3.49k|    *lock_token = dht_friend_lock(dht_friend, ip_callback, data, number);
 1659|  3.49k|    assert(*lock_token != 0); // Friend was newly allocated
 1660|       |
 1661|  3.49k|    dht_friend->num_to_bootstrap = get_close_nodes(dht, dht_friend->public_key, dht_friend->to_bootstrap, net_family_unspec(),
 1662|  3.49k|                                   true, false);
 1663|       |
 1664|  3.49k|    return 0;
 1665|  3.49k|}
cryptopacket_registerhandler:
 2488|  6.98k|{
 2489|  6.98k|    dht->cryptopackethandlers[byte].function = cb;
 2490|  6.98k|    dht->cryptopackethandlers[byte].object = object;
 2491|  6.98k|}
dht_callback_nodes_response:
 2538|  1.22k|{
 2539|  1.22k|    dht->nodes_response_callback = function;
 2540|  1.22k|}
new_dht:
 2569|  1.74k|{
 2570|  1.74k|    if (net == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (2570:9): [True: 0, False: 1.74k]
  ------------------
 2571|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2572|      0|    }
 2573|       |
 2574|  1.74k|    DHT *const dht = (DHT *)mem_alloc(mem, sizeof(DHT));
 2575|       |
 2576|  1.74k|    if (dht == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (2576:9): [True: 0, False: 1.74k]
  ------------------
 2577|      0|        LOGGER_ERROR(log, "failed to allocate DHT struct (%ld bytes)", (unsigned long)sizeof(DHT));
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2578|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2579|      0|    }
 2580|       |
 2581|  1.74k|    dht->ns = ns;
 2582|  1.74k|    dht->mono_time = mono_time;
 2583|  1.74k|    dht->cur_time = mono_time_get(mono_time);
 2584|  1.74k|    dht->log = log;
 2585|  1.74k|    dht->net = net;
 2586|  1.74k|    dht->rng = rng;
 2587|  1.74k|    dht->mem = mem;
 2588|       |
 2589|  1.74k|    dht->hole_punching_enabled = hole_punching_enabled;
 2590|  1.74k|    dht->lan_discovery_enabled = lan_discovery_enabled;
 2591|       |
 2592|  1.74k|    dht->ping = ping_new(mem, mono_time, rng, dht);
 2593|       |
 2594|  1.74k|    if (dht->ping == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (2594:9): [True: 0, False: 1.74k]
  ------------------
 2595|      0|        LOGGER_ERROR(log, "failed to initialise ping");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2596|      0|        kill_dht(dht);
 2597|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2598|      0|    }
 2599|       |
 2600|  1.74k|    networking_registerhandler(dht->net, NET_PACKET_NODES_REQUEST, &handle_nodes_request, dht);
 2601|  1.74k|    networking_registerhandler(dht->net, NET_PACKET_NODES_RESPONSE, &handle_nodes_response, dht);
 2602|  1.74k|    networking_registerhandler(dht->net, NET_PACKET_CRYPTO, &cryptopacket_handle, dht);
 2603|  1.74k|    networking_registerhandler(dht->net, NET_PACKET_LAN_DISCOVERY, &handle_lan_discovery, dht);
 2604|  1.74k|    cryptopacket_registerhandler(dht, CRYPTO_PACKET_NAT_PING, &handle_nat_ping, dht);
  ------------------
  |  |   68|  1.74k|#define CRYPTO_PACKET_NAT_PING      254 // NAT ping crypto packet ID.
  ------------------
 2605|       |
 2606|  1.74k|#ifdef CHECK_ANNOUNCE_NODE
 2607|  1.74k|    networking_registerhandler(dht->net, NET_PACKET_DATA_SEARCH_RESPONSE, &handle_data_search_response, dht);
 2608|  1.74k|#endif /* CHECK_ANNOUNCE_NODE */
 2609|       |
 2610|  1.74k|    crypto_new_keypair(rng, dht->self_public_key, dht->self_secret_key);
 2611|       |
 2612|  1.74k|    dht->shared_keys_recv = shared_key_cache_new(log, mono_time, mem, dht->self_secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   57|  1.74k|#define KEYS_TIMEOUT 600
  ------------------
                  dht->shared_keys_recv = shared_key_cache_new(log, mono_time, mem, dht->self_secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   56|  1.74k|#define MAX_KEYS_PER_SLOT 4
  ------------------
 2613|  1.74k|    dht->shared_keys_sent = shared_key_cache_new(log, mono_time, mem, dht->self_secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   57|  1.74k|#define KEYS_TIMEOUT 600
  ------------------
                  dht->shared_keys_sent = shared_key_cache_new(log, mono_time, mem, dht->self_secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   56|  1.74k|#define MAX_KEYS_PER_SLOT 4
  ------------------
 2614|       |
 2615|  1.74k|    if (dht->shared_keys_recv == nullptr || dht->shared_keys_sent == nullptr) {
  ------------------
  |  |   63|  3.49k|#define nullptr NULL
  ------------------
                  if (dht->shared_keys_recv == nullptr || dht->shared_keys_sent == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (2615:9): [True: 0, False: 1.74k]
  |  Branch (2615:45): [True: 0, False: 1.74k]
  ------------------
 2616|      0|        LOGGER_ERROR(log, "failed to initialise shared key cache");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2617|      0|        kill_dht(dht);
 2618|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2619|      0|    }
 2620|       |
 2621|  1.74k|    dht->dht_ping_array = ping_array_new(mem, DHT_PING_ARRAY_SIZE, PING_TIMEOUT);
  ------------------
  |  |   46|  1.74k|#define DHT_PING_ARRAY_SIZE 512
  ------------------
                  dht->dht_ping_array = ping_array_new(mem, DHT_PING_ARRAY_SIZE, PING_TIMEOUT);
  ------------------
  |  |   43|  1.74k|#define PING_TIMEOUT 5
  ------------------
 2622|       |
 2623|  1.74k|    if (dht->dht_ping_array == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (2623:9): [True: 0, False: 1.74k]
  ------------------
 2624|      0|        LOGGER_ERROR(log, "failed to initialise ping array");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2625|      0|        kill_dht(dht);
 2626|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2627|      0|    }
 2628|       |
 2629|  5.23k|    for (uint32_t i = 0; i < DHT_FAKE_FRIEND_NUMBER; ++i) {
  ------------------
  |  |   61|  5.23k|#define DHT_FAKE_FRIEND_NUMBER 2
  ------------------
  |  Branch (2629:26): [True: 3.49k, False: 1.74k]
  ------------------
 2630|  3.49k|        uint8_t random_public_key_bytes[CRYPTO_PUBLIC_KEY_SIZE];
 2631|  3.49k|        uint8_t random_secret_key_bytes[CRYPTO_SECRET_KEY_SIZE];
 2632|       |
 2633|  3.49k|        crypto_new_keypair(rng, random_public_key_bytes, random_secret_key_bytes);
 2634|       |
 2635|  3.49k|        uint32_t token; // We don't intend to delete these ever, but need to pass the token
 2636|  3.49k|        if (dht_addfriend(dht, random_public_key_bytes, nullptr, nullptr, 0, &token) != 0) {
  ------------------
  |  |   63|  3.49k|#define nullptr NULL
  ------------------
                      if (dht_addfriend(dht, random_public_key_bytes, nullptr, nullptr, 0, &token) != 0) {
  ------------------
  |  |   63|  3.49k|#define nullptr NULL
  ------------------
  |  Branch (2636:13): [True: 0, False: 3.49k]
  ------------------
 2637|      0|            LOGGER_ERROR(log, "failed to add initial random seed DHT friends");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2638|      0|            kill_dht(dht);
 2639|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2640|      0|        }
 2641|  3.49k|    }
 2642|       |
 2643|  1.74k|    if (dht->num_friends != DHT_FAKE_FRIEND_NUMBER) {
  ------------------
  |  |   61|  1.74k|#define DHT_FAKE_FRIEND_NUMBER 2
  ------------------
  |  Branch (2643:9): [True: 0, False: 1.74k]
  ------------------
 2644|      0|        LOGGER_ERROR(log, "the RNG provided seems to be broken: it generated the same keypair twice");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2645|      0|        kill_dht(dht);
 2646|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2647|      0|    }
 2648|       |
 2649|  1.74k|    return dht;
 2650|  1.74k|}
kill_dht:
 2674|  1.74k|{
 2675|  1.74k|    if (dht == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (2675:9): [True: 0, False: 1.74k]
  ------------------
 2676|      0|        return;
 2677|      0|    }
 2678|       |
 2679|  1.74k|    networking_registerhandler(dht->net, NET_PACKET_NODES_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht->net, NET_PACKET_NODES_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
 2680|  1.74k|    networking_registerhandler(dht->net, NET_PACKET_NODES_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht->net, NET_PACKET_NODES_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
 2681|  1.74k|    networking_registerhandler(dht->net, NET_PACKET_CRYPTO, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht->net, NET_PACKET_CRYPTO, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
 2682|  1.74k|    networking_registerhandler(dht->net, NET_PACKET_LAN_DISCOVERY, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht->net, NET_PACKET_LAN_DISCOVERY, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
 2683|  1.74k|    cryptopacket_registerhandler(dht, CRYPTO_PACKET_NAT_PING, nullptr, nullptr);
  ------------------
  |  |   68|  1.74k|#define CRYPTO_PACKET_NAT_PING      254 // NAT ping crypto packet ID.
  ------------------
                  cryptopacket_registerhandler(dht, CRYPTO_PACKET_NAT_PING, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  cryptopacket_registerhandler(dht, CRYPTO_PACKET_NAT_PING, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
 2684|       |
 2685|  1.74k|    shared_key_cache_free(dht->shared_keys_recv);
 2686|  1.74k|    shared_key_cache_free(dht->shared_keys_sent);
 2687|  1.74k|    ping_array_kill(dht->dht_ping_array);
 2688|  1.74k|    ping_kill(dht->mem, dht->ping);
 2689|  1.74k|    mem_delete(dht->mem, dht->friends_list);
 2690|  1.74k|    mem_delete(dht->mem, dht->loaded_nodes_list);
 2691|  1.74k|    crypto_memzero(dht->self_secret_key, sizeof(dht->self_secret_key));
 2692|  1.74k|    mem_delete(dht->mem, dht);
 2693|  1.74k|}
dht_size:
 2706|  3.66k|{
 2707|  3.66k|    uint32_t numv4 = 0;
 2708|  3.66k|    uint32_t numv6 = 0;
 2709|       |
 2710|  13.1k|    for (uint32_t i = 0; i < dht->loaded_num_nodes; ++i) {
  ------------------
  |  Branch (2710:26): [True: 9.48k, False: 3.66k]
  ------------------
 2711|  9.48k|        numv4 += net_family_is_ipv4(dht->loaded_nodes_list[i].ip_port.ip.family) ? 1 : 0;
  ------------------
  |  Branch (2711:18): [True: 8.94k, False: 531]
  ------------------
 2712|  9.48k|        numv6 += net_family_is_ipv6(dht->loaded_nodes_list[i].ip_port.ip.family) ? 1 : 0;
  ------------------
  |  Branch (2712:18): [True: 531, False: 8.94k]
  ------------------
 2713|  9.48k|    }
 2714|       |
 2715|  3.76M|    for (uint32_t i = 0; i < LCLIENT_LIST; ++i) {
  ------------------
  |  |   35|  3.76M|#define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  ------------------
  |  |  |  |   32|  3.76M|#define LCLIENT_LENGTH 128
  |  |  ------------------
  |  |               #define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  ------------------
  |  |  |  |   31|  3.76M|#define LCLIENT_NODES MAX_FRIEND_CLIENTS
  |  |  |  |  ------------------
  |  |  |  |  |  |   29|  3.76M|#define MAX_FRIEND_CLIENTS 8
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (2715:26): [True: 3.75M, False: 3.66k]
  ------------------
 2716|  3.75M|        numv4 += dht->close_clientlist[i].assoc4.timestamp != 0 ? 1 : 0;
  ------------------
  |  Branch (2716:18): [True: 0, False: 3.75M]
  ------------------
 2717|  3.75M|        numv6 += dht->close_clientlist[i].assoc6.timestamp != 0 ? 1 : 0;
  ------------------
  |  Branch (2717:18): [True: 0, False: 3.75M]
  ------------------
 2718|  3.75M|    }
 2719|       |
 2720|  11.0k|    for (uint32_t i = 0; i < DHT_FAKE_FRIEND_NUMBER && i < dht->num_friends; ++i) {
  ------------------
  |  |   61|  22.0k|#define DHT_FAKE_FRIEND_NUMBER 2
  ------------------
  |  Branch (2720:26): [True: 7.33k, False: 3.66k]
  |  Branch (2720:56): [True: 7.33k, False: 0]
  ------------------
 2721|  7.33k|        const DHT_Friend *const fr = &dht->friends_list[i];
 2722|       |
 2723|  66.0k|        for (uint32_t j = 0; j < MAX_FRIEND_CLIENTS; ++j) {
  ------------------
  |  |   29|  66.0k|#define MAX_FRIEND_CLIENTS 8
  ------------------
  |  Branch (2723:30): [True: 58.7k, False: 7.33k]
  ------------------
 2724|  58.7k|            numv4 += fr->client_list[j].assoc4.timestamp != 0 ? 1 : 0;
  ------------------
  |  Branch (2724:22): [True: 0, False: 58.7k]
  ------------------
 2725|  58.7k|            numv6 += fr->client_list[j].assoc6.timestamp != 0 ? 1 : 0;
  ------------------
  |  Branch (2725:22): [True: 0, False: 58.7k]
  ------------------
 2726|  58.7k|        }
 2727|  7.33k|    }
 2728|       |
 2729|  3.66k|    const uint32_t size32 = sizeof(uint32_t);
 2730|  3.66k|    const uint32_t sizesubhead = size32 * 2;
 2731|       |
 2732|  3.66k|    return size32 + sizesubhead + packed_node_size(net_family_ipv4()) * numv4 + packed_node_size(net_family_ipv6()) * numv6;
 2733|  3.66k|}
dht_save:
 2737|  1.22k|{
 2738|  1.22k|    host_to_lendian_bytes32(data, DHT_STATE_COOKIE_GLOBAL);
  ------------------
  |  | 2697|  1.22k|#define DHT_STATE_COOKIE_GLOBAL 0x159000d
  ------------------
 2739|  1.22k|    data += sizeof(uint32_t);
 2740|       |
 2741|  1.22k|    uint8_t *const old_data = data;
 2742|       |
 2743|       |    /* get right offset. we write the actual header later. */
 2744|  1.22k|    data = state_write_section_header(data, DHT_STATE_COOKIE_TYPE, 0, 0);
  ------------------
  |  | 2699|  1.22k|#define DHT_STATE_COOKIE_TYPE      0x11ce
  ------------------
 2745|       |
 2746|  1.22k|    Node_format *clients = (Node_format *)mem_valloc(dht->mem, MAX_SAVED_DHT_NODES, sizeof(Node_format));
  ------------------
  |  | 2702|  1.22k|#define MAX_SAVED_DHT_NODES (((DHT_FAKE_FRIEND_NUMBER * MAX_FRIEND_CLIENTS) + LCLIENT_LIST) * 2)
  |  |  ------------------
  |  |  |  |   61|  1.22k|#define DHT_FAKE_FRIEND_NUMBER 2
  |  |  ------------------
  |  |               #define MAX_SAVED_DHT_NODES (((DHT_FAKE_FRIEND_NUMBER * MAX_FRIEND_CLIENTS) + LCLIENT_LIST) * 2)
  |  |  ------------------
  |  |  |  |   29|  1.22k|#define MAX_FRIEND_CLIENTS 8
  |  |  ------------------
  |  |               #define MAX_SAVED_DHT_NODES (((DHT_FAKE_FRIEND_NUMBER * MAX_FRIEND_CLIENTS) + LCLIENT_LIST) * 2)
  |  |  ------------------
  |  |  |  |   35|  1.22k|#define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  1.22k|#define LCLIENT_LENGTH 128
  |  |  |  |  ------------------
  |  |  |  |               #define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   31|  1.22k|#define LCLIENT_NODES MAX_FRIEND_CLIENTS
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|  1.22k|#define MAX_FRIEND_CLIENTS 8
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2747|       |
 2748|  1.22k|    if (clients == nullptr) {
  ------------------
  |  |   63|  1.22k|#define nullptr NULL
  ------------------
  |  Branch (2748:9): [True: 0, False: 1.22k]
  ------------------
 2749|      0|        LOGGER_ERROR(dht->log, "could not allocate %u nodes", MAX_SAVED_DHT_NODES);
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2750|      0|        return;
 2751|      0|    }
 2752|       |
 2753|  1.22k|    uint32_t num = 0;
 2754|       |
 2755|  1.22k|    if (dht->loaded_num_nodes > 0) {
  ------------------
  |  Branch (2755:9): [True: 136, False: 1.08k]
  ------------------
 2756|    136|        memcpy(clients, dht->loaded_nodes_list, sizeof(Node_format) * dht->loaded_num_nodes);
 2757|    136|        num += dht->loaded_num_nodes;
 2758|    136|    }
 2759|       |
 2760|  1.25M|    for (uint32_t i = 0; i < LCLIENT_LIST; ++i) {
  ------------------
  |  |   35|  1.25M|#define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  ------------------
  |  |  |  |   32|  1.25M|#define LCLIENT_LENGTH 128
  |  |  ------------------
  |  |               #define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  ------------------
  |  |  |  |   31|  1.25M|#define LCLIENT_NODES MAX_FRIEND_CLIENTS
  |  |  |  |  ------------------
  |  |  |  |  |  |   29|  1.25M|#define MAX_FRIEND_CLIENTS 8
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (2760:26): [True: 1.25M, False: 1.22k]
  ------------------
 2761|  1.25M|        if (dht->close_clientlist[i].assoc4.timestamp != 0) {
  ------------------
  |  Branch (2761:13): [True: 0, False: 1.25M]
  ------------------
 2762|      0|            memcpy(clients[num].public_key, dht->close_clientlist[i].public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      0|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 2763|      0|            clients[num].ip_port = dht->close_clientlist[i].assoc4.ip_port;
 2764|      0|            ++num;
 2765|      0|        }
 2766|       |
 2767|  1.25M|        if (dht->close_clientlist[i].assoc6.timestamp != 0) {
  ------------------
  |  Branch (2767:13): [True: 0, False: 1.25M]
  ------------------
 2768|      0|            memcpy(clients[num].public_key, dht->close_clientlist[i].public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      0|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 2769|      0|            clients[num].ip_port = dht->close_clientlist[i].assoc6.ip_port;
 2770|      0|            ++num;
 2771|      0|        }
 2772|  1.25M|    }
 2773|       |
 2774|  3.66k|    for (uint32_t i = 0; i < DHT_FAKE_FRIEND_NUMBER && i < dht->num_friends; ++i) {
  ------------------
  |  |   61|  7.33k|#define DHT_FAKE_FRIEND_NUMBER 2
  ------------------
  |  Branch (2774:26): [True: 2.44k, False: 1.22k]
  |  Branch (2774:56): [True: 2.44k, False: 0]
  ------------------
 2775|  2.44k|        const DHT_Friend *const fr = &dht->friends_list[i];
 2776|       |
 2777|  22.0k|        for (uint32_t j = 0; j < MAX_FRIEND_CLIENTS; ++j) {
  ------------------
  |  |   29|  22.0k|#define MAX_FRIEND_CLIENTS 8
  ------------------
  |  Branch (2777:30): [True: 19.5k, False: 2.44k]
  ------------------
 2778|  19.5k|            if (fr->client_list[j].assoc4.timestamp != 0) {
  ------------------
  |  Branch (2778:17): [True: 0, False: 19.5k]
  ------------------
 2779|      0|                memcpy(clients[num].public_key, fr->client_list[j].public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      0|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 2780|      0|                clients[num].ip_port = fr->client_list[j].assoc4.ip_port;
 2781|      0|                ++num;
 2782|      0|            }
 2783|       |
 2784|  19.5k|            if (fr->client_list[j].assoc6.timestamp != 0) {
  ------------------
  |  Branch (2784:17): [True: 0, False: 19.5k]
  ------------------
 2785|      0|                memcpy(clients[num].public_key, fr->client_list[j].public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      0|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 2786|      0|                clients[num].ip_port = fr->client_list[j].assoc6.ip_port;
 2787|      0|                ++num;
 2788|      0|            }
 2789|  19.5k|        }
 2790|  2.44k|    }
 2791|       |
 2792|  1.22k|    state_write_section_header(
 2793|  1.22k|        old_data, DHT_STATE_COOKIE_TYPE, pack_nodes(dht->log, data, sizeof(Node_format) * num, clients, num),
  ------------------
  |  | 2699|  1.22k|#define DHT_STATE_COOKIE_TYPE      0x11ce
  ------------------
 2794|  1.22k|        DHT_STATE_TYPE_NODES);
  ------------------
  |  | 2700|  1.22k|#define DHT_STATE_TYPE_NODES       4
  ------------------
 2795|       |
 2796|  1.22k|    mem_delete(dht->mem, clients);
 2797|  1.22k|}
dht_load:
 2876|    697|{
 2877|    697|    const uint32_t cookie_len = sizeof(uint32_t);
 2878|       |
 2879|    697|    if (length > cookie_len) {
  ------------------
  |  Branch (2879:9): [True: 631, False: 66]
  ------------------
 2880|    631|        uint32_t data32;
 2881|    631|        lendian_bytes_to_host32(&data32, data);
 2882|       |
 2883|    631|        if (data32 == DHT_STATE_COOKIE_GLOBAL) {
  ------------------
  |  | 2697|    631|#define DHT_STATE_COOKIE_GLOBAL 0x159000d
  ------------------
  |  Branch (2883:13): [True: 612, False: 19]
  ------------------
 2884|    612|            return state_load(dht->log, dht_load_state_callback, dht, data + cookie_len,
 2885|    612|                              length - cookie_len, DHT_STATE_COOKIE_TYPE);
  ------------------
  |  | 2699|    612|#define DHT_STATE_COOKIE_TYPE      0x11ce
  ------------------
 2886|    612|        }
 2887|    631|    }
 2888|       |
 2889|     85|    return -1;
 2890|    697|}
DHT.c:bin_pack_node_handler:
  409|  7.93k|{
  410|  7.93k|    const Node_format *nodes = (const Node_format *)arr;
  411|  7.93k|    return bin_pack_ip_port(bp, logger, &nodes[index].ip_port)
  ------------------
  |  Branch (411:12): [True: 7.93k, False: 0]
  ------------------
  412|  7.93k|           && bin_pack_bin_b(bp, nodes[index].public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|  7.93k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  |  Branch (412:15): [True: 7.93k, False: 0]
  ------------------
  413|  7.93k|}
DHT.c:get_somewhat_close_nodes:
  726|  3.49k|{
  727|  17.4k|    for (uint16_t i = 0; i < MAX_SENT_NODES; ++i) {
  ------------------
  |  |   40|  17.4k|#define MAX_SENT_NODES 4
  ------------------
  |  Branch (727:26): [True: 13.9k, False: 3.49k]
  ------------------
  728|  13.9k|        nodes_list[i] = empty_node_format;
  729|  13.9k|    }
  730|       |
  731|  3.49k|    uint32_t num_nodes = 0;
  732|  3.49k|    get_close_nodes_inner(
  733|  3.49k|        cur_time, public_key,
  734|  3.49k|        nodes_list, &num_nodes,
  735|  3.49k|        sa_family, close_clientlist, LCLIENT_LIST,
  ------------------
  |  |   35|  3.49k|#define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  ------------------
  |  |  |  |   32|  3.49k|#define LCLIENT_LENGTH 128
  |  |  ------------------
  |  |               #define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  ------------------
  |  |  |  |   31|  3.49k|#define LCLIENT_NODES MAX_FRIEND_CLIENTS
  |  |  |  |  ------------------
  |  |  |  |  |  |   29|  3.49k|#define MAX_FRIEND_CLIENTS 8
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  736|  3.49k|        is_lan, want_announce);
  737|       |
  738|  8.73k|    for (uint16_t i = 0; i < friends_list_size; ++i) {
  ------------------
  |  Branch (738:26): [True: 5.23k, False: 3.49k]
  ------------------
  739|  5.23k|        const DHT_Friend *dht_friend = &friends_list[i];
  740|       |
  741|  5.23k|        get_close_nodes_inner(
  742|  5.23k|            cur_time, public_key,
  743|  5.23k|            nodes_list, &num_nodes,
  744|  5.23k|            sa_family, dht_friend->client_list, MAX_FRIEND_CLIENTS,
  ------------------
  |  |   29|  5.23k|#define MAX_FRIEND_CLIENTS 8
  ------------------
  745|  5.23k|            is_lan, want_announce);
  746|  5.23k|    }
  747|       |
  748|  3.49k|    return num_nodes;
  749|  3.49k|}
DHT.c:get_close_nodes_inner:
  655|  8.73k|{
  656|  8.73k|    if (!net_family_is_ipv4(sa_family) && !net_family_is_ipv6(sa_family) && !net_family_is_unspec(sa_family)) {
  ------------------
  |  Branch (656:9): [True: 8.73k, False: 0]
  |  Branch (656:43): [True: 8.73k, False: 0]
  |  Branch (656:77): [True: 0, False: 8.73k]
  ------------------
  657|      0|        return;
  658|      0|    }
  659|       |
  660|  8.73k|    uint32_t num_nodes = *num_nodes_ptr;
  661|       |
  662|  3.62M|    for (uint32_t i = 0; i < client_list_length; ++i) {
  ------------------
  |  Branch (662:26): [True: 3.61M, False: 8.73k]
  ------------------
  663|  3.61M|        const Client_data *const client = &client_list[i];
  664|       |
  665|       |        /* node already in list? */
  666|  3.61M|        if (index_of_node_pk(nodes_list, MAX_SENT_NODES, client->public_key) != UINT32_MAX) {
  ------------------
  |  |   40|  3.61M|#define MAX_SENT_NODES 4
  ------------------
  |  Branch (666:13): [True: 3.61M, False: 0]
  ------------------
  667|  3.61M|            continue;
  668|  3.61M|        }
  669|       |
  670|      0|        const IPPTsPng *ipptp;
  671|       |
  672|      0|        if (net_family_is_ipv4(sa_family)) {
  ------------------
  |  Branch (672:13): [True: 0, False: 0]
  ------------------
  673|      0|            ipptp = &client->assoc4;
  674|      0|        } else if (net_family_is_ipv6(sa_family)) {
  ------------------
  |  Branch (674:20): [True: 0, False: 0]
  ------------------
  675|      0|            ipptp = &client->assoc6;
  676|      0|        } else if (client->assoc4.timestamp >= client->assoc6.timestamp) {
  ------------------
  |  Branch (676:20): [True: 0, False: 0]
  ------------------
  677|      0|            ipptp = &client->assoc4;
  678|      0|        } else {
  679|      0|            ipptp = &client->assoc6;
  680|      0|        }
  681|       |
  682|       |        /* node not in a good condition? */
  683|      0|        if (assoc_timeout(cur_time, ipptp)) {
  ------------------
  |  Branch (683:13): [True: 0, False: 0]
  ------------------
  684|      0|            continue;
  685|      0|        }
  686|       |
  687|       |        /* don't send LAN ips to non LAN peers */
  688|      0|        if (ip_is_lan(&ipptp->ip_port.ip) && !is_lan) {
  ------------------
  |  Branch (688:13): [True: 0, False: 0]
  |  Branch (688:46): [True: 0, False: 0]
  ------------------
  689|      0|            continue;
  690|      0|        }
  691|       |
  692|      0|#ifdef CHECK_ANNOUNCE_NODE
  693|       |
  694|      0|        if (want_announce && !client->announce_node) {
  ------------------
  |  Branch (694:13): [True: 0, False: 0]
  |  Branch (694:30): [True: 0, False: 0]
  ------------------
  695|      0|            continue;
  696|      0|        }
  697|       |
  698|      0|#endif /* CHECK_ANNOUNCE_NODE */
  699|       |
  700|      0|        if (num_nodes < MAX_SENT_NODES) {
  ------------------
  |  |   40|      0|#define MAX_SENT_NODES 4
  ------------------
  |  Branch (700:13): [True: 0, False: 0]
  ------------------
  701|      0|            memcpy(nodes_list[num_nodes].public_key, client->public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      0|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  702|      0|            nodes_list[num_nodes].ip_port = ipptp->ip_port;
  703|      0|            ++num_nodes;
  704|      0|        } else {
  705|       |            // TODO(zugz): this could be made significantly more efficient by
  706|       |            // using a version of add_to_list which works with a sorted list.
  707|      0|            add_to_list(nodes_list, MAX_SENT_NODES, client->public_key, &ipptp->ip_port, public_key);
  ------------------
  |  |   40|      0|#define MAX_SENT_NODES 4
  ------------------
  708|      0|        }
  709|      0|    }
  710|       |
  711|  8.73k|    *num_nodes_ptr = num_nodes;
  712|  8.73k|}
DHT.c:index_of_node_pk:
  498|  3.61M|{
  499|  3.61M|    assert(size == 0 || array != nullptr);
  500|       |
  501|  3.61M|    for (uint32_t i = 0; i < size; ++i) {
  ------------------
  |  Branch (501:26): [True: 3.61M, False: 0]
  ------------------
  502|  3.61M|        if (pk_equal(array[i].public_key, pk)) {
  ------------------
  |  Branch (502:13): [True: 3.61M, False: 0]
  ------------------
  503|  3.61M|            return i;
  504|  3.61M|        }
  505|  3.61M|    }
  506|       |
  507|      0|    return UINT32_MAX;
  508|  3.61M|}
DHT.c:index_of_friend_pk:
  484|  3.49k|{
  485|  3.49k|    assert(size == 0 || array != nullptr);
  486|       |
  487|  5.23k|    for (uint32_t i = 0; i < size; ++i) {
  ------------------
  |  Branch (487:26): [True: 1.74k, False: 3.49k]
  ------------------
  488|  1.74k|        if (pk_equal(array[i].public_key, pk)) {
  ------------------
  |  Branch (488:13): [True: 0, False: 1.74k]
  ------------------
  489|      0|            return i;
  490|      0|        }
  491|  1.74k|    }
  492|       |
  493|  3.49k|    return UINT32_MAX;
  494|  3.49k|}
DHT.c:dht_friend_lock:
 1575|  3.49k|{
 1576|       |    // find first free slot
 1577|  3.49k|    uint8_t lock_num;
 1578|  3.49k|    uint32_t lock_token = 0;
 1579|  3.49k|    for (lock_num = 0; lock_num < DHT_FRIEND_MAX_LOCKS; ++lock_num) {
  ------------------
  |  |   53|  3.49k|#define DHT_FRIEND_MAX_LOCKS 32
  ------------------
  |  Branch (1579:24): [True: 3.49k, False: 0]
  ------------------
 1580|  3.49k|        lock_token = UINT32_C(1) << lock_num;
 1581|  3.49k|        if ((dht_friend->lock_flags & lock_token) == 0) {
  ------------------
  |  Branch (1581:13): [True: 3.49k, False: 0]
  ------------------
 1582|  3.49k|            break;
 1583|  3.49k|        }
 1584|  3.49k|    }
 1585|       |
 1586|       |    // One of the conditions would be enough, but static analyzers don't get that
 1587|  3.49k|    if (lock_token == 0 || lock_num == DHT_FRIEND_MAX_LOCKS) {
  ------------------
  |  |   53|  3.49k|#define DHT_FRIEND_MAX_LOCKS 32
  ------------------
  |  Branch (1587:9): [True: 0, False: 3.49k]
  |  Branch (1587:28): [True: 0, False: 3.49k]
  ------------------
 1588|      0|        return 0;
 1589|      0|    }
 1590|       |
 1591|       |    // Claim that slot
 1592|  3.49k|    dht_friend->lock_flags |= lock_token;
 1593|       |
 1594|  3.49k|    dht_friend->callbacks[lock_num].ip_callback = ip_callback;
 1595|  3.49k|    dht_friend->callbacks[lock_num].data = data;
 1596|  3.49k|    dht_friend->callbacks[lock_num].number = number;
 1597|       |
 1598|  3.49k|    return lock_token;
 1599|  3.49k|}
DHT.c:dht_load_state_callback:
 2831|    596|{
 2832|    596|    DHT *dht = (DHT *)outer;
 2833|       |
 2834|    596|    switch (type) {
 2835|    530|        case DHT_STATE_TYPE_NODES: {
  ------------------
  |  | 2700|    530|#define DHT_STATE_TYPE_NODES       4
  ------------------
  |  Branch (2835:9): [True: 530, False: 66]
  ------------------
 2836|    530|            if (length == 0) {
  ------------------
  |  Branch (2836:17): [True: 10, False: 520]
  ------------------
 2837|     10|                break;
 2838|     10|            }
 2839|       |
 2840|    520|            mem_delete(dht->mem, dht->loaded_nodes_list);
 2841|       |
 2842|       |            // Copy to loaded_clients_list
 2843|    520|            Node_format *nodes = (Node_format *)mem_valloc(dht->mem, MAX_SAVED_DHT_NODES, sizeof(Node_format));
  ------------------
  |  | 2702|    520|#define MAX_SAVED_DHT_NODES (((DHT_FAKE_FRIEND_NUMBER * MAX_FRIEND_CLIENTS) + LCLIENT_LIST) * 2)
  |  |  ------------------
  |  |  |  |   61|    520|#define DHT_FAKE_FRIEND_NUMBER 2
  |  |  ------------------
  |  |               #define MAX_SAVED_DHT_NODES (((DHT_FAKE_FRIEND_NUMBER * MAX_FRIEND_CLIENTS) + LCLIENT_LIST) * 2)
  |  |  ------------------
  |  |  |  |   29|    520|#define MAX_FRIEND_CLIENTS 8
  |  |  ------------------
  |  |               #define MAX_SAVED_DHT_NODES (((DHT_FAKE_FRIEND_NUMBER * MAX_FRIEND_CLIENTS) + LCLIENT_LIST) * 2)
  |  |  ------------------
  |  |  |  |   35|    520|#define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|    520|#define LCLIENT_LENGTH 128
  |  |  |  |  ------------------
  |  |  |  |               #define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   31|    520|#define LCLIENT_NODES MAX_FRIEND_CLIENTS
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|    520|#define MAX_FRIEND_CLIENTS 8
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2844|       |
 2845|    520|            if (nodes == nullptr) {
  ------------------
  |  |   63|    520|#define nullptr NULL
  ------------------
  |  Branch (2845:17): [True: 0, False: 520]
  ------------------
 2846|      0|                LOGGER_ERROR(dht->log, "could not allocate %u nodes", MAX_SAVED_DHT_NODES);
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2847|      0|                dht->loaded_num_nodes = 0;
 2848|      0|                break;
 2849|      0|            }
 2850|       |
 2851|    520|            const int num = unpack_nodes(nodes, MAX_SAVED_DHT_NODES, nullptr, data, length, false);
  ------------------
  |  | 2702|    520|#define MAX_SAVED_DHT_NODES (((DHT_FAKE_FRIEND_NUMBER * MAX_FRIEND_CLIENTS) + LCLIENT_LIST) * 2)
  |  |  ------------------
  |  |  |  |   61|    520|#define DHT_FAKE_FRIEND_NUMBER 2
  |  |  ------------------
  |  |               #define MAX_SAVED_DHT_NODES (((DHT_FAKE_FRIEND_NUMBER * MAX_FRIEND_CLIENTS) + LCLIENT_LIST) * 2)
  |  |  ------------------
  |  |  |  |   29|    520|#define MAX_FRIEND_CLIENTS 8
  |  |  ------------------
  |  |               #define MAX_SAVED_DHT_NODES (((DHT_FAKE_FRIEND_NUMBER * MAX_FRIEND_CLIENTS) + LCLIENT_LIST) * 2)
  |  |  ------------------
  |  |  |  |   35|    520|#define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|    520|#define LCLIENT_LENGTH 128
  |  |  |  |  ------------------
  |  |  |  |               #define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   31|    520|#define LCLIENT_NODES MAX_FRIEND_CLIENTS
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|    520|#define MAX_FRIEND_CLIENTS 8
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                          const int num = unpack_nodes(nodes, MAX_SAVED_DHT_NODES, nullptr, data, length, false);
  ------------------
  |  |   63|    520|#define nullptr NULL
  ------------------
 2852|       |
 2853|    520|            if (num < 0) {
  ------------------
  |  Branch (2853:17): [True: 47, False: 473]
  ------------------
 2854|       |                // Unpack error happened, we ignore it.
 2855|     47|                dht->loaded_num_nodes = 0;
 2856|    473|            } else {
 2857|    473|                dht->loaded_num_nodes = num;
 2858|    473|            }
 2859|       |
 2860|    520|            dht->loaded_nodes_list = nodes;
 2861|       |
 2862|    520|            break;
 2863|    520|        }
 2864|       |
 2865|     66|        default: {
  ------------------
  |  Branch (2865:9): [True: 66, False: 530]
  ------------------
 2866|     66|            LOGGER_ERROR(dht->log, "Load state (DHT): contains unrecognized part (len %u, type %u)",
  ------------------
  |  |   87|     66|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     66|    do {                                                                         \
  |  |  |  |   77|     66|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    132|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|     66|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|     66|        }                                                                        \
  |  |  |  |   80|     66|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2867|     66|                         length, type);
 2868|     66|            break;
 2869|    520|        }
 2870|    596|    }
 2871|       |
 2872|    596|    return STATE_LOAD_STATUS_CONTINUE;
 2873|    596|}

lan_discovery_init:
  413|  1.74k|{
  414|  1.74k|    return fetch_broadcast_info(mem, ns);
  415|  1.74k|}
lan_discovery_kill:
  418|  1.74k|{
  419|  1.74k|    if (broadcast == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (419:9): [True: 0, False: 1.74k]
  ------------------
  420|      0|        return;
  421|      0|    }
  422|       |
  423|  1.74k|    mem_delete(broadcast->mem, broadcast);
  424|  1.74k|}
LAN_discovery.c:fetch_broadcast_info:
  227|  1.74k|{
  228|  1.74k|    Broadcast_Info *broadcast = (Broadcast_Info *)mem_alloc(mem, sizeof(Broadcast_Info));
  229|       |
  230|  1.74k|    if (broadcast == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (230:9): [True: 0, False: 1.74k]
  ------------------
  231|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  232|      0|    }
  233|       |
  234|  1.74k|    broadcast->mem = mem;
  235|       |
  236|  1.74k|    return broadcast;
  237|  1.74k|}

getfriend_id:
   86|  3.39k|{
   87|  3.99k|    for (uint32_t i = 0; i < m->numfriends; ++i) {
  ------------------
  |  Branch (87:26): [True: 730, False: 3.26k]
  ------------------
   88|    730|        if (m->friendlist[i].status > 0 && pk_equal(real_pk, m->friendlist[i].real_pk)) {
  ------------------
  |  Branch (88:13): [True: 730, False: 0]
  |  Branch (88:44): [True: 126, False: 604]
  ------------------
   89|    126|            return i;
   90|    126|        }
   91|    730|    }
   92|       |
   93|  3.26k|    return -1;
   94|  3.39k|}
m_addfriend:
  249|    122|{
  250|    122|    if (length > MAX_FRIEND_REQUEST_DATA_SIZE) {
  ------------------
  |  |   19|    122|#define MAX_FRIEND_REQUEST_DATA_SIZE (ONION_CLIENT_MAX_DATA_SIZE - 100)
  |  |  ------------------
  |  |  |  |  188|    122|#define ONION_CLIENT_MAX_DATA_SIZE (MAX_DATA_REQUEST_SIZE - ONION_DATA_IN_RESPONSE_MIN_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   42|    122|#define MAX_DATA_REQUEST_SIZE (ONION_MAX_DATA_SIZE - ONION_DATA_REQUEST_MIN_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   52|    122|#define ONION_MAX_DATA_SIZE (ONION_MAX_PACKET_SIZE - (ONION_SEND_1 + 1))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   41|    122|#define ONION_MAX_PACKET_SIZE 1400
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define ONION_MAX_DATA_SIZE (ONION_MAX_PACKET_SIZE - (ONION_SEND_1 + 1))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   50|    122|#define ONION_SEND_1 (CRYPTO_NONCE_SIZE + ONION_SEND_BASE*3)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   69|    122|#define CRYPTO_NONCE_SIZE              24
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |               #define ONION_SEND_1 (CRYPTO_NONCE_SIZE + ONION_SEND_BASE*3)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   47|    122|#define ONION_SEND_BASE (CRYPTO_PUBLIC_KEY_SIZE + SIZE_IPPORT + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |   43|    122|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |               #define ONION_SEND_BASE (CRYPTO_PUBLIC_KEY_SIZE + SIZE_IPPORT + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  189|    122|#define SIZE_IPPORT (SIZE_IP + SIZE_PORT)
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  187|    122|#define SIZE_IP (1 + SIZE_IP6)
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  186|    122|#define SIZE_IP6 16
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |               #define SIZE_IPPORT (SIZE_IP + SIZE_PORT)
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  188|    122|#define SIZE_PORT 2
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |               #define ONION_SEND_BASE (CRYPTO_PUBLIC_KEY_SIZE + SIZE_IPPORT + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |   64|    122|#define CRYPTO_MAC_SIZE                16
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define MAX_DATA_REQUEST_SIZE (ONION_MAX_DATA_SIZE - ONION_DATA_REQUEST_MIN_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   41|    122|#define ONION_DATA_REQUEST_MIN_SIZE (1 + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_NONCE_SIZE + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   43|    122|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define ONION_DATA_REQUEST_MIN_SIZE (1 + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_NONCE_SIZE + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   69|    122|#define CRYPTO_NONCE_SIZE              24
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define ONION_DATA_REQUEST_MIN_SIZE (1 + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_NONCE_SIZE + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   43|    122|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define ONION_DATA_REQUEST_MIN_SIZE (1 + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_NONCE_SIZE + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   64|    122|#define CRYPTO_MAC_SIZE                16
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define ONION_CLIENT_MAX_DATA_SIZE (MAX_DATA_REQUEST_SIZE - ONION_DATA_IN_RESPONSE_MIN_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  185|    122|#define ONION_DATA_IN_RESPONSE_MIN_SIZE (CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   43|    122|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define ONION_DATA_IN_RESPONSE_MIN_SIZE (CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   64|    122|#define CRYPTO_MAC_SIZE                16
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (250:9): [True: 11, False: 111]
  ------------------
  251|     11|        return FAERR_TOOLONG;
  252|     11|    }
  253|       |
  254|    111|    uint8_t real_pk[CRYPTO_PUBLIC_KEY_SIZE];
  255|    111|    pk_copy(real_pk, address);
  256|       |
  257|    111|    if (!public_key_valid(real_pk)) {
  ------------------
  |  Branch (257:9): [True: 10, False: 101]
  ------------------
  258|     10|        return FAERR_BADCHECKSUM;
  259|     10|    }
  260|       |
  261|    101|    uint16_t check;
  262|    101|    const uint16_t checksum = data_checksum(address, FRIEND_ADDRESS_SIZE - sizeof(checksum));
  ------------------
  |  |   42|    101|#define FRIEND_ADDRESS_SIZE (CRYPTO_PUBLIC_KEY_SIZE + sizeof(uint32_t) + sizeof(uint16_t))
  |  |  ------------------
  |  |  |  |   43|    101|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  263|    101|    memcpy(&check, address + CRYPTO_PUBLIC_KEY_SIZE + sizeof(uint32_t), sizeof(check));
  ------------------
  |  |   43|    101|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  264|       |
  265|    101|    if (check != checksum) {
  ------------------
  |  Branch (265:9): [True: 0, False: 101]
  ------------------
  266|      0|        return FAERR_BADCHECKSUM;
  267|      0|    }
  268|       |
  269|    101|    if (length < 1) {
  ------------------
  |  Branch (269:9): [True: 10, False: 91]
  ------------------
  270|     10|        return FAERR_NOMESSAGE;
  271|     10|    }
  272|       |
  273|     91|    if (pk_equal(real_pk, nc_get_self_public_key(m->net_crypto))) {
  ------------------
  |  Branch (273:9): [True: 10, False: 81]
  ------------------
  274|     10|        return FAERR_OWNKEY;
  275|     10|    }
  276|       |
  277|     81|    const int32_t friend_id = getfriend_id(m, real_pk);
  278|       |
  279|     81|    if (friend_id != -1) {
  ------------------
  |  Branch (279:9): [True: 45, False: 36]
  ------------------
  280|     45|        if (m->friendlist[friend_id].status >= FRIEND_CONFIRMED) {
  ------------------
  |  Branch (280:13): [True: 10, False: 35]
  ------------------
  281|     10|            return FAERR_ALREADYSENT;
  282|     10|        }
  283|       |
  284|     35|        uint32_t nospam;
  285|     35|        memcpy(&nospam, address + CRYPTO_PUBLIC_KEY_SIZE, sizeof(nospam));
  ------------------
  |  |   43|     35|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  286|       |
  287|     35|        if (m->friendlist[friend_id].friendrequest_nospam == nospam) {
  ------------------
  |  Branch (287:13): [True: 18, False: 17]
  ------------------
  288|     18|            return FAERR_ALREADYSENT;
  289|     18|        }
  290|       |
  291|     17|        m->friendlist[friend_id].friendrequest_nospam = nospam;
  292|     17|        return FAERR_SETNEWNOSPAM;
  293|     35|    }
  294|       |
  295|     36|    const int32_t ret = init_new_friend(m, real_pk, FRIEND_ADDED);
  296|       |
  297|     36|    if (ret < 0) {
  ------------------
  |  Branch (297:9): [True: 0, False: 36]
  ------------------
  298|      0|        return ret;
  299|      0|    }
  300|       |
  301|     36|    m->friendlist[ret].friendrequest_timeout = FRIENDREQUEST_TIMEOUT;
  ------------------
  |  |  123|     36|#define FRIENDREQUEST_TIMEOUT 5
  ------------------
  302|     36|    memcpy(m->friendlist[ret].info, data, length);
  303|     36|    m->friendlist[ret].info_size = length;
  304|     36|    memcpy(&m->friendlist[ret].friendrequest_nospam, address + CRYPTO_PUBLIC_KEY_SIZE, sizeof(uint32_t));
  ------------------
  |  |   43|     36|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  305|       |
  306|     36|    return ret;
  307|     36|}
m_addfriend_norequest:
  310|    261|{
  311|    261|    if (!public_key_valid(real_pk)) {
  ------------------
  |  Branch (311:9): [True: 30, False: 231]
  ------------------
  312|     30|        return FAERR_BADCHECKSUM;
  313|     30|    }
  314|       |
  315|    231|    if (pk_equal(real_pk, nc_get_self_public_key(m->net_crypto))) {
  ------------------
  |  Branch (315:9): [True: 10, False: 221]
  ------------------
  316|     10|        return FAERR_OWNKEY;
  317|     10|    }
  318|       |
  319|    221|    return m_add_friend_contact_norequest(m, real_pk);
  320|    231|}
m_create_group_connection:
  384|     62|{
  385|     62|    random_bytes(m->rng, chat->m_group_public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|     62|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  386|     62|    const int friendcon_id = new_friend_connection(m->fr_c, chat->m_group_public_key);
  387|       |
  388|     62|    if (friendcon_id == -1) {
  ------------------
  |  Branch (388:9): [True: 0, False: 62]
  ------------------
  389|      0|        return false;
  390|      0|    }
  391|       |
  392|     62|    const Friend_Conn *connection = get_conn(m->fr_c, friendcon_id);
  393|       |
  394|     62|    if (connection == nullptr) {
  ------------------
  |  |   63|     62|#define nullptr NULL
  ------------------
  |  Branch (394:9): [True: 0, False: 62]
  ------------------
  395|      0|        return false;
  396|      0|    }
  397|       |
  398|     62|    chat->friend_connection_id = friendcon_id;
  399|       |
  400|     62|    if (friend_con_connected(m->fr_c, friendcon_id) == FRIENDCONN_STATUS_CONNECTED) {
  ------------------
  |  Branch (400:9): [True: 0, False: 62]
  ------------------
  401|      0|        send_online_packet(m, friendcon_id);
  402|      0|    }
  403|       |
  404|     62|    const int onion_friend_number = friend_conn_get_onion_friendnum(connection);
  405|     62|    Onion_Friend *onion_friend = onion_get_friend(m->onion_c, (uint16_t)onion_friend_number);
  406|       |
  407|     62|    onion_friend_set_gc_public_key(onion_friend, get_chat_id(&chat->chat_public_key));
  408|     62|    onion_friend_set_gc_data(onion_friend, nullptr, 0);
  ------------------
  |  |   63|     62|#define nullptr NULL
  ------------------
  409|       |
  410|     62|    return true;
  411|     62|}
m_kill_group_connection:
  417|     62|{
  418|     62|    remove_request_received(m->fr, chat->m_group_public_key);
  419|       |
  420|     62|    friend_connection_callbacks(m->fr_c, chat->friend_connection_id, MESSENGER_CALLBACK_INDEX, nullptr,
  ------------------
  |  |   24|     62|#define MESSENGER_CALLBACK_INDEX 0
  ------------------
                  friend_connection_callbacks(m->fr_c, chat->friend_connection_id, MESSENGER_CALLBACK_INDEX, nullptr,
  ------------------
  |  |   63|     62|#define nullptr NULL
  ------------------
  421|     62|                                nullptr, nullptr, nullptr, 0);
  ------------------
  |  |   63|     62|#define nullptr NULL
  ------------------
                                              nullptr, nullptr, nullptr, 0);
  ------------------
  |  |   63|     62|#define nullptr NULL
  ------------------
                                              nullptr, nullptr, nullptr, 0);
  ------------------
  |  |   63|     62|#define nullptr NULL
  ------------------
  422|       |
  423|     62|    if (friend_con_connected(m->fr_c, chat->friend_connection_id) == FRIENDCONN_STATUS_CONNECTED) {
  ------------------
  |  Branch (423:9): [True: 0, False: 62]
  ------------------
  424|      0|        send_offline_packet(m, chat->friend_connection_id);
  425|      0|    }
  426|       |
  427|     62|    kill_friend_connection(m->fr_c, chat->friend_connection_id);
  428|     62|}
m_friend_exists:
  546|    666|{
  547|    666|    return (unsigned int)friendnumber < m->numfriends && m->friendlist[friendnumber].status != 0;
  ------------------
  |  Branch (547:12): [True: 666, False: 0]
  |  Branch (547:58): [True: 666, False: 0]
  ------------------
  548|    666|}
setfriendname:
  653|    210|{
  654|    210|    if (!m_friend_exists(m, friendnumber)) {
  ------------------
  |  Branch (654:9): [True: 0, False: 210]
  ------------------
  655|      0|        return -1;
  656|      0|    }
  657|       |
  658|    210|    if (length > MAX_NAME_LENGTH || length == 0) {
  ------------------
  |  |   34|    420|#define MAX_NAME_LENGTH 128
  ------------------
  |  Branch (658:9): [True: 87, False: 123]
  |  Branch (658:37): [True: 71, False: 52]
  ------------------
  659|    158|        return -1;
  660|    158|    }
  661|       |
  662|     52|    m->friendlist[friendnumber].name_length = length;
  663|     52|    memcpy(m->friendlist[friendnumber].name, name, length);
  664|     52|    return 0;
  665|    210|}
setname:
  677|    320|{
  678|    320|    if (length > MAX_NAME_LENGTH) {
  ------------------
  |  |   34|    320|#define MAX_NAME_LENGTH 128
  ------------------
  |  Branch (678:9): [True: 0, False: 320]
  ------------------
  679|      0|        return -1;
  680|      0|    }
  681|       |
  682|    320|    if (m->name_length == length && (length == 0 || memcmp(name, m->name, length) == 0)) {
  ------------------
  |  Branch (682:9): [True: 245, False: 75]
  |  Branch (682:38): [True: 0, False: 245]
  |  Branch (682:53): [True: 74, False: 171]
  ------------------
  683|     74|        return 0;
  684|     74|    }
  685|       |
  686|    246|    if (length > 0) {
  ------------------
  |  Branch (686:9): [True: 246, False: 0]
  ------------------
  687|    246|        memcpy(m->name, name, length);
  688|    246|    }
  689|       |
  690|    246|    m->name_length = length;
  691|       |
  692|    579|    for (uint32_t i = 0; i < m->numfriends; ++i) {
  ------------------
  |  Branch (692:26): [True: 333, False: 246]
  ------------------
  693|    333|        m->friendlist[i].name_sent = false;
  694|    333|    }
  695|       |
  696|    246|    return 0;
  697|    320|}
m_set_statusmessage:
  751|    581|{
  752|    581|    if (length > MAX_STATUSMESSAGE_LENGTH) {
  ------------------
  |  |   36|    581|#define MAX_STATUSMESSAGE_LENGTH 1007
  ------------------
  |  Branch (752:9): [True: 0, False: 581]
  ------------------
  753|      0|        return -1;
  754|      0|    }
  755|       |
  756|    581|    if (m->statusmessage_length == length && (length == 0 || memcmp(m->statusmessage, status, length) == 0)) {
  ------------------
  |  Branch (756:9): [True: 387, False: 194]
  |  Branch (756:47): [True: 0, False: 387]
  |  Branch (756:62): [True: 116, False: 271]
  ------------------
  757|    116|        return 0;
  758|    116|    }
  759|       |
  760|    465|    if (length > 0) {
  ------------------
  |  Branch (760:9): [True: 465, False: 0]
  ------------------
  761|    465|        memcpy(m->statusmessage, status, length);
  762|    465|    }
  763|       |
  764|    465|    m->statusmessage_length = length;
  765|       |
  766|    837|    for (uint32_t i = 0; i < m->numfriends; ++i) {
  ------------------
  |  Branch (766:26): [True: 372, False: 465]
  ------------------
  767|    372|        m->friendlist[i].statusmessage_sent = false;
  768|    372|    }
  769|       |
  770|    465|    return 0;
  771|    581|}
m_set_userstatus:
  805|    559|{
  806|    559|    if (status >= USERSTATUS_INVALID) {
  ------------------
  |  Branch (806:9): [True: 265, False: 294]
  ------------------
  807|    265|        return -1;
  808|    265|    }
  809|       |
  810|    294|    if (m->userstatus == status) {
  ------------------
  |  Branch (810:9): [True: 146, False: 148]
  ------------------
  811|    146|        return 0;
  812|    146|    }
  813|       |
  814|    148|    userstatus_from_int(status, &m->userstatus);
  815|       |
  816|    266|    for (uint32_t i = 0; i < m->numfriends; ++i) {
  ------------------
  |  Branch (816:26): [True: 118, False: 148]
  ------------------
  817|    118|        m->friendlist[i].userstatus_sent = false;
  818|    118|    }
  819|       |
  820|    148|    return 0;
  821|    294|}
m_callback_friendrequest:
  981|  1.22k|{
  982|  1.22k|    m->friend_request = function;
  983|  1.22k|}
m_callback_friendmessage:
  987|  1.22k|{
  988|  1.22k|    m->friend_message = function;
  989|  1.22k|}
m_callback_namechange:
  992|  1.22k|{
  993|  1.22k|    m->friend_namechange = function;
  994|  1.22k|}
m_callback_statusmessage:
  997|  1.22k|{
  998|  1.22k|    m->friend_statusmessagechange = function;
  999|  1.22k|}
m_callback_userstatus:
 1002|  1.22k|{
 1003|  1.22k|    m->friend_userstatuschange = function;
 1004|  1.22k|}
m_callback_typingchange:
 1007|  1.22k|{
 1008|  1.22k|    m->friend_typingchange = function;
 1009|  1.22k|}
m_callback_read_receipt:
 1012|  1.22k|{
 1013|  1.22k|    m->read_receipt = function;
 1014|  1.22k|}
m_callback_connectionstatus:
 1017|  1.22k|{
 1018|  1.22k|    m->friend_connectionstatuschange = function;
 1019|  1.22k|}
m_callback_core_connection:
 1022|  1.22k|{
 1023|  1.22k|    m->core_connection_change = function;
 1024|  1.22k|}
m_callback_conference_invite:
 1087|  3.49k|{
 1088|  3.49k|    m->conference_invite = function;
 1089|  3.49k|}
m_callback_group_invite:
 1093|  1.22k|{
 1094|  1.22k|    m->group_invite = function;
 1095|  1.22k|}
callback_file_sendrequest:
 1120|  1.22k|{
 1121|  1.22k|    m->file_sendrequest = function;
 1122|  1.22k|}
callback_file_control:
 1126|  1.22k|{
 1127|  1.22k|    m->file_filecontrol = function;
 1128|  1.22k|}
callback_file_data:
 1132|  1.22k|{
 1133|  1.22k|    m->file_filedata = function;
 1134|  1.22k|}
callback_file_reqchunk:
 1138|  1.22k|{
 1139|  1.22k|    m->file_reqchunk = function;
 1140|  1.22k|}
custom_lossy_packet_registerhandler:
 1859|  1.22k|{
 1860|  1.22k|    m->lossy_packethandler = lossy_packethandler;
 1861|  1.22k|}
custom_lossless_packet_registerhandler:
 1914|  1.22k|{
 1915|  1.22k|    m->lossless_packethandler = lossless_packethandler;
 1916|  1.22k|}
m_register_state_plugin:
 2860|  15.7k|{
 2861|  15.7k|    const uint32_t new_length = m->options.state_plugins_length + 1;
 2862|  15.7k|    Messenger_State_Plugin *temp = (Messenger_State_Plugin *)mem_vrealloc(
 2863|  15.7k|                                       m->mem, m->options.state_plugins, new_length, sizeof(Messenger_State_Plugin));
 2864|       |
 2865|  15.7k|    if (temp == nullptr) {
  ------------------
  |  |   63|  15.7k|#define nullptr NULL
  ------------------
  |  Branch (2865:9): [True: 0, False: 15.7k]
  ------------------
 2866|      0|        return false;
 2867|      0|    }
 2868|       |
 2869|  15.7k|    m->options.state_plugins = temp;
 2870|  15.7k|    m->options.state_plugins_length = new_length;
 2871|       |
 2872|  15.7k|    const uint8_t index = m->options.state_plugins_length - 1;
 2873|  15.7k|    m->options.state_plugins[index].type = type;
 2874|  15.7k|    m->options.state_plugins[index].size = size_callback;
 2875|  15.7k|    m->options.state_plugins[index].load = load_callback;
 2876|  15.7k|    m->options.state_plugins[index].save = save_callback;
 2877|       |
 2878|  15.7k|    return true;
 2879|  15.7k|}
messenger_size:
 2899|  2.44k|{
 2900|  2.44k|    return m_state_plugins_size(m);
 2901|  2.44k|}
messenger_save:
 2905|  1.22k|{
 2906|  12.2k|    for (uint8_t i = 0; i < m->options.state_plugins_length; ++i) {
  ------------------
  |  Branch (2906:25): [True: 11.0k, False: 1.22k]
  ------------------
 2907|  11.0k|        const Messenger_State_Plugin plugin = m->options.state_plugins[i];
 2908|  11.0k|        data = plugin.save(m, data);
 2909|  11.0k|    }
 2910|       |
 2911|  1.22k|    return data;
 2912|  1.22k|}
messenger_load_state_section:
 3376|  29.2k|{
 3377|   197k|    for (uint8_t i = 0; i < m->options.state_plugins_length; ++i) {
  ------------------
  |  Branch (3377:25): [True: 196k, False: 687]
  ------------------
 3378|   196k|        const Messenger_State_Plugin *const plugin = &m->options.state_plugins[i];
 3379|       |
 3380|   196k|        if (plugin->type == type) {
  ------------------
  |  Branch (3380:13): [True: 28.6k, False: 168k]
  ------------------
 3381|  28.6k|            *status = plugin->load(m, data, length);
 3382|  28.6k|            return true;
 3383|  28.6k|        }
 3384|   196k|    }
 3385|       |
 3386|    687|    return false;
 3387|  29.2k|}
count_friendlist:
 3395|  3.66k|{
 3396|  3.66k|    uint32_t ret = 0;
 3397|       |
 3398|  4.02k|    for (uint32_t i = 0; i < m->numfriends; ++i) {
  ------------------
  |  Branch (3398:26): [True: 360, False: 3.66k]
  ------------------
 3399|    360|        if (m->friendlist[i].status > 0) {
  ------------------
  |  Branch (3399:13): [True: 360, False: 0]
  ------------------
 3400|    360|            ++ret;
 3401|    360|        }
 3402|    360|    }
 3403|       |
 3404|  3.66k|    return ret;
 3405|  3.66k|}
new_messenger:
 3458|  1.74k|{
 3459|  1.74k|    if (options == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (3459:9): [True: 0, False: 1.74k]
  ------------------
 3460|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3461|      0|    }
 3462|       |
 3463|  1.74k|    if (error != nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (3463:9): [True: 1.74k, False: 0]
  ------------------
 3464|  1.74k|        *error = MESSENGER_ERROR_OTHER;
 3465|  1.74k|    }
 3466|       |
 3467|  1.74k|    Messenger *m = (Messenger *)mem_alloc(mem, sizeof(Messenger));
 3468|       |
 3469|  1.74k|    if (m == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (3469:9): [True: 0, False: 1.74k]
  ------------------
 3470|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3471|      0|    }
 3472|       |
 3473|  1.74k|    m->mono_time = mono_time;
 3474|  1.74k|    m->mem = mem;
 3475|  1.74k|    m->rng = rng;
 3476|  1.74k|    m->ns = ns;
 3477|       |
 3478|  1.74k|    m->fr = friendreq_new(mem);
 3479|       |
 3480|  1.74k|    if (m->fr == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (3480:9): [True: 0, False: 1.74k]
  ------------------
 3481|      0|        mem_delete(mem, m);
 3482|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3483|      0|    }
 3484|       |
 3485|  1.74k|    m->log = logger_new(mem);
 3486|       |
 3487|  1.74k|    if (m->log == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (3487:9): [True: 0, False: 1.74k]
  ------------------
 3488|      0|        friendreq_kill(m->fr);
 3489|      0|        mem_delete(mem, m);
 3490|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3491|      0|    }
 3492|       |
 3493|  1.74k|    logger_callback_log(m->log, options->log_callback, options->log_context, options->log_user_data);
 3494|       |
 3495|  1.74k|    unsigned int net_err = 0;
 3496|       |
 3497|  1.74k|    if (!options->udp_disabled && options->proxy_info.proxy_type != TCP_PROXY_NONE) {
  ------------------
  |  Branch (3497:9): [True: 1.74k, False: 0]
  |  Branch (3497:35): [True: 0, False: 1.74k]
  ------------------
 3498|       |        // We don't currently support UDP over proxy.
 3499|      0|        LOGGER_INFO(m->log, "UDP enabled and proxy set: disabling UDP");
  ------------------
  |  |   85|      0|#define LOGGER_INFO(log, ...)    LOGGER_WRITE(log, LOGGER_LEVEL_INFO, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3500|      0|        options->udp_disabled = true;
 3501|      0|    }
 3502|       |
 3503|  1.74k|    if (options->udp_disabled) {
  ------------------
  |  Branch (3503:9): [True: 0, False: 1.74k]
  ------------------
 3504|      0|        m->net = new_networking_no_udp(m->log, m->mem, m->ns);
 3505|  1.74k|    } else {
 3506|  1.74k|        IP ip;
 3507|  1.74k|        ip_init(&ip, options->ipv6enabled);
 3508|  1.74k|        m->net = new_networking_ex(m->log, m->mem, m->ns, &ip, options->port_range[0], options->port_range[1], &net_err);
 3509|  1.74k|    }
 3510|       |
 3511|  1.74k|    if (m->net == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (3511:9): [True: 0, False: 1.74k]
  ------------------
 3512|      0|        friendreq_kill(m->fr);
 3513|       |
 3514|      0|        if (error != nullptr && net_err == 1) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (3514:13): [True: 0, False: 0]
  |  Branch (3514:33): [True: 0, False: 0]
  ------------------
 3515|      0|            LOGGER_WARNING(m->log, "network initialisation failed (no ports available)");
  ------------------
  |  |   86|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3516|      0|            *error = MESSENGER_ERROR_PORT;
 3517|      0|        }
 3518|       |
 3519|      0|        logger_kill(m->log);
 3520|      0|        mem_delete(mem, m);
 3521|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3522|      0|    }
 3523|       |
 3524|  1.74k|    m->dht = new_dht(m->log, m->mem, m->rng, m->ns, m->mono_time, m->net, options->hole_punching_enabled, options->local_discovery_enabled);
 3525|       |
 3526|  1.74k|    if (m->dht == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (3526:9): [True: 0, False: 1.74k]
  ------------------
 3527|      0|        kill_networking(m->net);
 3528|      0|        friendreq_kill(m->fr);
 3529|      0|        logger_kill(m->log);
 3530|      0|        mem_delete(mem, m);
 3531|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3532|      0|    }
 3533|       |
 3534|  1.74k|    m->net_crypto = new_net_crypto(m->log, m->mem, m->rng, m->ns, m->mono_time, m->dht, &options->proxy_info);
 3535|       |
 3536|  1.74k|    if (m->net_crypto == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (3536:9): [True: 0, False: 1.74k]
  ------------------
 3537|      0|        LOGGER_WARNING(m->log, "net_crypto initialisation failed");
  ------------------
  |  |   86|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3538|       |
 3539|      0|        kill_dht(m->dht);
 3540|      0|        kill_networking(m->net);
 3541|      0|        friendreq_kill(m->fr);
 3542|      0|        logger_kill(m->log);
 3543|      0|        mem_delete(mem, m);
 3544|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3545|      0|    }
 3546|       |
 3547|  1.74k|    m->group_announce = new_gca_list(m->mem);
 3548|       |
 3549|  1.74k|    if (m->group_announce == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (3549:9): [True: 0, False: 1.74k]
  ------------------
 3550|      0|        LOGGER_WARNING(m->log, "DHT group chats initialisation failed");
  ------------------
  |  |   86|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3551|       |
 3552|      0|        kill_net_crypto(m->net_crypto);
 3553|      0|        kill_dht(m->dht);
 3554|      0|        kill_networking(m->net);
 3555|      0|        friendreq_kill(m->fr);
 3556|      0|        logger_kill(m->log);
 3557|      0|        mem_delete(mem, m);
 3558|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3559|      0|    }
 3560|       |
 3561|  1.74k|    if (options->dht_announcements_enabled) {
  ------------------
  |  Branch (3561:9): [True: 1.74k, False: 0]
  ------------------
 3562|  1.74k|        m->forwarding = new_forwarding(m->log, m->mem, m->rng, m->mono_time, m->dht);
 3563|  1.74k|        if (m->forwarding != nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (3563:13): [True: 1.74k, False: 0]
  ------------------
 3564|  1.74k|            m->announce = new_announcements(m->log, m->mem, m->rng, m->mono_time, m->forwarding);
 3565|  1.74k|        } else {
 3566|      0|            m->announce = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3567|      0|        }
 3568|  1.74k|    } else {
 3569|      0|        m->forwarding = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3570|      0|        m->announce = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3571|      0|    }
 3572|       |
 3573|  1.74k|    m->onion = new_onion(m->log, m->mem, m->mono_time, m->rng, m->dht);
 3574|  1.74k|    m->onion_a = new_onion_announce(m->log, m->mem, m->rng, m->mono_time, m->dht);
 3575|  1.74k|    m->onion_c = new_onion_client(m->log, m->mem, m->rng, m->mono_time, m->net_crypto);
 3576|  1.74k|    if (m->onion_c != nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (3576:9): [True: 1.74k, False: 0]
  ------------------
 3577|  1.74k|        m->fr_c = new_friend_connections(m->log, m->mem, m->mono_time, m->ns, m->onion_c, options->local_discovery_enabled);
 3578|  1.74k|    }
 3579|       |
 3580|  1.74k|    if ((options->dht_announcements_enabled && (m->forwarding == nullptr || m->announce == nullptr)) ||
  ------------------
  |  |   63|  3.49k|#define nullptr NULL
  ------------------
                  if ((options->dht_announcements_enabled && (m->forwarding == nullptr || m->announce == nullptr)) ||
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (3580:10): [True: 1.74k, False: 0]
  |  Branch (3580:49): [True: 0, False: 1.74k]
  |  Branch (3580:77): [True: 0, False: 1.74k]
  ------------------
 3581|  1.74k|            m->onion == nullptr || m->onion_a == nullptr || m->onion_c == nullptr || m->fr_c == nullptr) {
  ------------------
  |  |   63|  3.49k|#define nullptr NULL
  ------------------
                          m->onion == nullptr || m->onion_a == nullptr || m->onion_c == nullptr || m->fr_c == nullptr) {
  ------------------
  |  |   63|  3.49k|#define nullptr NULL
  ------------------
                          m->onion == nullptr || m->onion_a == nullptr || m->onion_c == nullptr || m->fr_c == nullptr) {
  ------------------
  |  |   63|  3.49k|#define nullptr NULL
  ------------------
                          m->onion == nullptr || m->onion_a == nullptr || m->onion_c == nullptr || m->fr_c == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (3581:13): [True: 0, False: 1.74k]
  |  Branch (3581:36): [True: 0, False: 1.74k]
  |  Branch (3581:61): [True: 0, False: 1.74k]
  |  Branch (3581:86): [True: 0, False: 1.74k]
  ------------------
 3582|      0|        LOGGER_WARNING(m->log, "onion initialisation failed");
  ------------------
  |  |   86|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3583|       |
 3584|      0|        kill_onion(m->onion);
 3585|      0|        kill_onion_announce(m->onion_a);
 3586|      0|        kill_onion_client(m->onion_c);
 3587|      0|        kill_gca(m->group_announce);
 3588|      0|        kill_friend_connections(m->fr_c);
 3589|      0|        kill_announcements(m->announce);
 3590|      0|        kill_forwarding(m->forwarding);
 3591|      0|        kill_net_crypto(m->net_crypto);
 3592|      0|        kill_dht(m->dht);
 3593|      0|        kill_networking(m->net);
 3594|      0|        friendreq_kill(m->fr);
 3595|      0|        logger_kill(m->log);
 3596|      0|        mem_delete(mem, m);
 3597|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3598|      0|    }
 3599|       |
 3600|  1.74k|    gca_onion_init(m->group_announce, m->onion_a);
 3601|       |
 3602|  1.74k|    m->group_handler = new_dht_groupchats(m);
 3603|       |
 3604|  1.74k|    if (m->group_handler == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (3604:9): [True: 0, False: 1.74k]
  ------------------
 3605|      0|        LOGGER_WARNING(m->log, "conferences initialisation failed");
  ------------------
  |  |   86|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|       |
 3607|      0|        kill_onion(m->onion);
 3608|      0|        kill_onion_announce(m->onion_a);
 3609|      0|        kill_onion_client(m->onion_c);
 3610|      0|        kill_gca(m->group_announce);
 3611|      0|        kill_friend_connections(m->fr_c);
 3612|      0|        kill_announcements(m->announce);
 3613|      0|        kill_forwarding(m->forwarding);
 3614|      0|        kill_net_crypto(m->net_crypto);
 3615|      0|        kill_dht(m->dht);
 3616|      0|        kill_networking(m->net);
 3617|      0|        friendreq_kill(m->fr);
 3618|      0|        logger_kill(m->log);
 3619|      0|        mem_delete(mem, m);
 3620|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3621|      0|    }
 3622|       |
 3623|  1.74k|    if (options->tcp_server_port != 0) {
  ------------------
  |  Branch (3623:9): [True: 0, False: 1.74k]
  ------------------
 3624|      0|        m->tcp_server = new_tcp_server(m->log, m->mem, m->rng, m->ns, options->ipv6enabled, 1,
 3625|      0|                                       &options->tcp_server_port, dht_get_self_secret_key(m->dht),
 3626|      0|                                       m->onion, m->forwarding);
 3627|       |
 3628|      0|        if (m->tcp_server == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (3628:13): [True: 0, False: 0]
  ------------------
 3629|      0|            LOGGER_WARNING(m->log, "TCP server initialisation failed");
  ------------------
  |  |   86|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3630|       |
 3631|      0|            kill_onion(m->onion);
 3632|      0|            kill_onion_announce(m->onion_a);
 3633|      0|            kill_dht_groupchats(m->group_handler);
 3634|      0|            kill_friend_connections(m->fr_c);
 3635|      0|            kill_onion_client(m->onion_c);
 3636|      0|            kill_gca(m->group_announce);
 3637|      0|            kill_announcements(m->announce);
 3638|      0|            kill_forwarding(m->forwarding);
 3639|      0|            kill_net_crypto(m->net_crypto);
 3640|      0|            kill_dht(m->dht);
 3641|      0|            kill_networking(m->net);
 3642|      0|            friendreq_kill(m->fr);
 3643|      0|            logger_kill(m->log);
 3644|      0|            mem_delete(mem, m);
 3645|       |
 3646|      0|            if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (3646:17): [True: 0, False: 0]
  ------------------
 3647|      0|                *error = MESSENGER_ERROR_TCP_SERVER;
 3648|      0|            }
 3649|       |
 3650|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3651|      0|        }
 3652|      0|    }
 3653|       |
 3654|  1.74k|    m->options = *options;
 3655|  1.74k|    friendreq_init(m->fr, m->fr_c);
 3656|  1.74k|    set_nospam(m->fr, random_u32(m->rng));
 3657|  1.74k|    set_filter_function(m->fr, &friend_already_added, m);
 3658|       |
 3659|  1.74k|    m->lastdump = 0;
 3660|  1.74k|    m->is_receiving_file = 0;
 3661|       |
 3662|  1.74k|    m_register_default_plugins(m);
 3663|  1.74k|    callback_friendrequest(m->fr, m_handle_friend_request, m);
 3664|       |
 3665|  1.74k|    if (error != nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (3665:9): [True: 1.74k, False: 0]
  ------------------
 3666|  1.74k|        *error = MESSENGER_ERROR_NONE;
 3667|  1.74k|    }
 3668|       |
 3669|  1.74k|    return m;
 3670|  1.74k|}
kill_messenger:
 3677|  1.74k|{
 3678|  1.74k|    if (m == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (3678:9): [True: 0, False: 1.74k]
  ------------------
 3679|      0|        return;
 3680|      0|    }
 3681|       |
 3682|  1.74k|    if (m->tcp_server != nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (3682:9): [True: 0, False: 1.74k]
  ------------------
 3683|      0|        kill_tcp_server(m->tcp_server);
 3684|      0|    }
 3685|       |
 3686|  1.74k|    kill_onion(m->onion);
 3687|  1.74k|    kill_onion_announce(m->onion_a);
 3688|  1.74k|    kill_dht_groupchats(m->group_handler);
 3689|  1.74k|    kill_friend_connections(m->fr_c);
 3690|  1.74k|    kill_onion_client(m->onion_c);
 3691|  1.74k|    kill_gca(m->group_announce);
 3692|  1.74k|    kill_announcements(m->announce);
 3693|  1.74k|    kill_forwarding(m->forwarding);
 3694|  1.74k|    kill_net_crypto(m->net_crypto);
 3695|  1.74k|    kill_dht(m->dht);
 3696|  1.74k|    kill_networking(m->net);
 3697|       |
 3698|  1.99k|    for (uint32_t i = 0; i < m->numfriends; ++i) {
  ------------------
  |  Branch (3698:26): [True: 246, False: 1.74k]
  ------------------
 3699|    246|        clear_receipts(m, i);
 3700|    246|    }
 3701|       |
 3702|  1.74k|    mem_delete(m->mem, m->friendlist);
 3703|  1.74k|    friendreq_kill(m->fr);
 3704|       |
 3705|  1.74k|    mem_delete(m->mem, m->options.state_plugins);
 3706|  1.74k|    logger_kill(m->log);
 3707|  1.74k|    mem_delete(m->mem, m);
 3708|  1.74k|}
Messenger.c:init_new_friend:
  165|    246|{
  166|    246|    if (m->numfriends == UINT32_MAX) {
  ------------------
  |  Branch (166:9): [True: 0, False: 246]
  ------------------
  167|      0|        LOGGER_ERROR(m->log, "Friend list full: we have more than 4 billion friends");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  168|       |        /* This is technically incorrect, but close enough. */
  169|      0|        return FAERR_NOMEM;
  170|      0|    }
  171|       |
  172|       |    /* Resize the friend list if necessary. */
  173|    246|    if (realloc_friendlist(m, m->numfriends + 1) != 0) {
  ------------------
  |  Branch (173:9): [True: 0, False: 246]
  ------------------
  174|      0|        return FAERR_NOMEM;
  175|      0|    }
  176|       |
  177|    246|    m->friendlist[m->numfriends] = empty_friend;
  178|       |
  179|    246|    const int friendcon_id = new_friend_connection(m->fr_c, real_pk);
  180|       |
  181|    246|    if (friendcon_id == -1) {
  ------------------
  |  Branch (181:9): [True: 0, False: 246]
  ------------------
  182|      0|        return FAERR_NOMEM;
  183|      0|    }
  184|       |
  185|    560|    for (uint32_t i = 0; i <= m->numfriends; ++i) {
  ------------------
  |  Branch (185:26): [True: 560, False: 0]
  ------------------
  186|    560|        if (m->friendlist[i].status == NOFRIEND) {
  ------------------
  |  Branch (186:13): [True: 246, False: 314]
  ------------------
  187|    246|            m->friendlist[i].status = status;
  188|    246|            m->friendlist[i].friendcon_id = friendcon_id;
  189|    246|            m->friendlist[i].friendrequest_lastsent = 0;
  190|    246|            pk_copy(m->friendlist[i].real_pk, real_pk);
  191|    246|            m->friendlist[i].statusmessage_length = 0;
  192|    246|            m->friendlist[i].userstatus = USERSTATUS_NONE;
  193|    246|            m->friendlist[i].is_typing = false;
  194|    246|            m->friendlist[i].message_id = 0;
  195|    246|            friend_connection_callbacks(m->fr_c, friendcon_id, MESSENGER_CALLBACK_INDEX, &m_handle_status, &m_handle_packet,
  ------------------
  |  |   24|    246|#define MESSENGER_CALLBACK_INDEX 0
  ------------------
  196|    246|                                        &m_handle_lossy_packet, m, i);
  197|       |
  198|    246|            if (m->numfriends == i) {
  ------------------
  |  Branch (198:17): [True: 246, False: 0]
  ------------------
  199|    246|                ++m->numfriends;
  200|    246|            }
  201|       |
  202|    246|            if (friend_con_connected(m->fr_c, friendcon_id) == FRIENDCONN_STATUS_CONNECTED) {
  ------------------
  |  Branch (202:17): [True: 0, False: 246]
  ------------------
  203|      0|                send_online_packet(m, friendcon_id);
  204|      0|            }
  205|       |
  206|    246|            return i;
  207|    246|        }
  208|    560|    }
  209|       |
  210|      0|    return FAERR_NOMEM;
  211|    246|}
Messenger.c:set_friend_statusmessage:
  950|    210|{
  951|    210|    if (!m_friend_exists(m, friendnumber)) {
  ------------------
  |  Branch (951:9): [True: 0, False: 210]
  ------------------
  952|      0|        return -1;
  953|      0|    }
  954|       |
  955|    210|    if (length > MAX_STATUSMESSAGE_LENGTH) {
  ------------------
  |  |   36|    210|#define MAX_STATUSMESSAGE_LENGTH 1007
  ------------------
  |  Branch (955:9): [True: 112, False: 98]
  ------------------
  956|    112|        return -1;
  957|    112|    }
  958|       |
  959|     98|    if (length > 0) {
  ------------------
  |  Branch (959:9): [True: 52, False: 46]
  ------------------
  960|     52|        memcpy(m->friendlist[friendnumber].statusmessage, status, length);
  961|     52|    }
  962|       |
  963|     98|    m->friendlist[friendnumber].statusmessage_length = length;
  964|     98|    return 0;
  965|    210|}
Messenger.c:set_friend_userstatus:
  969|    210|{
  970|    210|    userstatus_from_int(status, &m->friendlist[friendnumber].userstatus);
  971|    210|}
Messenger.c:m_add_friend_contact_norequest:
  215|    221|{
  216|    221|    if (getfriend_id(m, real_pk) != -1) {
  ------------------
  |  Branch (216:9): [True: 11, False: 210]
  ------------------
  217|     11|        return FAERR_ALREADYSENT;
  218|     11|    }
  219|       |
  220|    210|    if (pk_equal(real_pk, nc_get_self_public_key(m->net_crypto))) {
  ------------------
  |  Branch (220:9): [True: 0, False: 210]
  ------------------
  221|      0|        return FAERR_OWNKEY;
  222|      0|    }
  223|       |
  224|    210|    return init_new_friend(m, real_pk, FRIEND_CONFIRMED);
  225|    210|}
Messenger.c:clear_receipts:
  324|    246|{
  325|    246|    if (!m_friend_exists(m, friendnumber)) {
  ------------------
  |  Branch (325:9): [True: 0, False: 246]
  ------------------
  326|      0|        return -1;
  327|      0|    }
  328|       |
  329|    246|    struct Receipts *receipts = m->friendlist[friendnumber].receipts_start;
  330|       |
  331|    246|    while (receipts != nullptr) {
  ------------------
  |  |   63|    246|#define nullptr NULL
  ------------------
  |  Branch (331:12): [True: 0, False: 246]
  ------------------
  332|      0|        struct Receipts *temp_r = receipts->next;
  333|      0|        mem_delete(m->mem, receipts);
  334|      0|        receipts = temp_r;
  335|      0|    }
  336|       |
  337|    246|    m->friendlist[friendnumber].receipts_start = nullptr;
  ------------------
  |  |   63|    246|#define nullptr NULL
  ------------------
  338|    246|    m->friendlist[friendnumber].receipts_end = nullptr;
  ------------------
  |  |   63|    246|#define nullptr NULL
  ------------------
  339|    246|    return 0;
  340|    246|}
Messenger.c:realloc_friendlist:
   65|    246|{
   66|    246|    if (num == 0) {
  ------------------
  |  Branch (66:9): [True: 0, False: 246]
  ------------------
   67|      0|        mem_delete(m->mem, m->friendlist);
   68|      0|        m->friendlist = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   69|      0|        return 0;
   70|      0|    }
   71|       |
   72|    246|    Friend *newfriendlist = (Friend *)mem_vrealloc(m->mem, m->friendlist, num, sizeof(Friend));
   73|       |
   74|    246|    if (newfriendlist == nullptr) {
  ------------------
  |  |   63|    246|#define nullptr NULL
  ------------------
  |  Branch (74:9): [True: 0, False: 246]
  ------------------
   75|      0|        return -1;
   76|      0|    }
   77|       |
   78|    246|    m->friendlist = newfriendlist;
   79|    246|    return 0;
   80|    246|}
Messenger.c:userstatus_from_int:
  775|    358|{
  776|    358|    switch (status) {
  777|    170|        case USERSTATUS_NONE: {
  ------------------
  |  Branch (777:9): [True: 170, False: 188]
  ------------------
  778|    170|            *out_enum = USERSTATUS_NONE;
  779|    170|            return true;
  780|      0|        }
  781|       |
  782|      7|        case USERSTATUS_AWAY: {
  ------------------
  |  Branch (782:9): [True: 7, False: 351]
  ------------------
  783|      7|            *out_enum = USERSTATUS_AWAY;
  784|      7|            return true;
  785|      0|        }
  786|       |
  787|     75|        case USERSTATUS_BUSY: {
  ------------------
  |  Branch (787:9): [True: 75, False: 283]
  ------------------
  788|     75|            *out_enum = USERSTATUS_BUSY;
  789|     75|            return true;
  790|      0|        }
  791|       |
  792|      0|        case USERSTATUS_INVALID: {
  ------------------
  |  Branch (792:9): [True: 0, False: 358]
  ------------------
  793|      0|            *out_enum = USERSTATUS_INVALID;
  794|      0|            return true;
  795|      0|        }
  796|       |
  797|    106|        default: {
  ------------------
  |  Branch (797:9): [True: 106, False: 252]
  ------------------
  798|    106|            *out_enum = USERSTATUS_INVALID;
  799|    106|            return false;
  800|      0|        }
  801|    358|    }
  802|    358|}
Messenger.c:m_state_plugins_size:
 2837|  2.44k|{
 2838|  2.44k|    const uint32_t size32 = sizeof(uint32_t);
 2839|  2.44k|    const uint32_t sizesubhead = size32 * 2;
 2840|       |
 2841|  2.44k|    uint32_t size = 0;
 2842|       |
 2843|  2.44k|    for (const Messenger_State_Plugin *plugin = m->options.state_plugins;
 2844|  24.4k|            plugin != m->options.state_plugins + m->options.state_plugins_length;
  ------------------
  |  Branch (2844:13): [True: 22.0k, False: 2.44k]
  ------------------
 2845|  22.0k|            ++plugin) {
 2846|  22.0k|        size += sizesubhead + plugin->size(m);
 2847|  22.0k|    }
 2848|       |
 2849|  2.44k|    return size;
 2850|  2.44k|}
Messenger.c:m_register_default_plugins:
 3359|  1.74k|{
 3360|  1.74k|    m_register_state_plugin(m, STATE_TYPE_NOSPAMKEYS, nospam_keys_size, load_nospam_keys, save_nospam_keys);
 3361|  1.74k|    m_register_state_plugin(m, STATE_TYPE_DHT, m_dht_size, m_dht_load, save_dht);
 3362|  1.74k|    m_register_state_plugin(m, STATE_TYPE_FRIENDS, saved_friendslist_size, friends_list_load, friends_list_save);
 3363|  1.74k|    m_register_state_plugin(m, STATE_TYPE_NAME, name_size, load_name, save_name);
 3364|  1.74k|    m_register_state_plugin(m, STATE_TYPE_STATUSMESSAGE, status_message_size, load_status_message,
 3365|  1.74k|                            save_status_message);
 3366|  1.74k|    m_register_state_plugin(m, STATE_TYPE_STATUS, status_size, load_status, save_status);
 3367|  1.74k|    if (m->options.groups_persistence_enabled) {
  ------------------
  |  Branch (3367:9): [True: 1.74k, False: 0]
  ------------------
 3368|  1.74k|        m_register_state_plugin(m, STATE_TYPE_GROUPS, saved_groups_size, groups_load, groups_save);
 3369|  1.74k|    }
 3370|  1.74k|    m_register_state_plugin(m, STATE_TYPE_TCP_RELAY, tcp_relay_size, load_tcp_relays, save_tcp_relays);
 3371|  1.74k|    m_register_state_plugin(m, STATE_TYPE_PATH_NODE, path_node_size, load_path_nodes, save_path_nodes);
 3372|  1.74k|}
Messenger.c:nospam_keys_size:
 2917|  4.22k|{
 2918|  4.22k|    return sizeof(uint32_t) + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_SECRET_KEY_SIZE;
  ------------------
  |  |   43|  4.22k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
                  return sizeof(uint32_t) + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_SECRET_KEY_SIZE;
  ------------------
  |  |   48|  4.22k|#define CRYPTO_SECRET_KEY_SIZE         32
  ------------------
 2919|  4.22k|}
Messenger.c:load_nospam_keys:
 2923|    552|{
 2924|    552|    if (length != m_plugin_size(m, STATE_TYPE_NOSPAMKEYS)) {
  ------------------
  |  Branch (2924:9): [True: 1, False: 551]
  ------------------
 2925|      1|        return STATE_LOAD_STATUS_ERROR;
 2926|      1|    }
 2927|       |
 2928|    551|    uint32_t nospam;
 2929|    551|    lendian_bytes_to_host32(&nospam, data);
 2930|    551|    set_nospam(m->fr, nospam);
 2931|    551|    load_secret_key(m->net_crypto, data + sizeof(uint32_t) + CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|    551|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 2932|       |
 2933|    551|    if (!pk_equal(data + sizeof(uint32_t), nc_get_self_public_key(m->net_crypto))) {
  ------------------
  |  Branch (2933:9): [True: 7, False: 544]
  ------------------
 2934|      7|        LOGGER_ERROR(m->log, "public key stored in savedata does not match its secret key");
  ------------------
  |  |   87|      7|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      7|    do {                                                                         \
  |  |  |  |   77|      7|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     14|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      7|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      7|        }                                                                        \
  |  |  |  |   80|      7|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2935|      7|        return STATE_LOAD_STATUS_ERROR;
 2936|      7|    }
 2937|       |
 2938|    544|    return STATE_LOAD_STATUS_CONTINUE;
 2939|    551|}
Messenger.c:m_plugin_size:
 2883|  8.00k|{
 2884|  27.0k|    for (uint8_t i = 0; i < m->options.state_plugins_length; ++i) {
  ------------------
  |  Branch (2884:25): [True: 27.0k, False: 0]
  ------------------
 2885|  27.0k|        const Messenger_State_Plugin plugin = m->options.state_plugins[i];
 2886|       |
 2887|  27.0k|        if (plugin.type == type) {
  ------------------
  |  Branch (2887:13): [True: 8.00k, False: 19.0k]
  ------------------
 2888|  8.00k|            return plugin.size(m);
 2889|  8.00k|        }
 2890|  27.0k|    }
 2891|       |
 2892|      0|    LOGGER_ERROR(m->log, "Unknown type encountered: %u", type);
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2893|       |
 2894|      0|    return UINT32_MAX;
 2895|  8.00k|}
Messenger.c:save_nospam_keys:
 2943|  1.22k|{
 2944|  1.22k|    const uint32_t len = m_plugin_size(m, STATE_TYPE_NOSPAMKEYS);
 2945|  1.22k|    static_assert(sizeof(get_nospam(m->fr)) == sizeof(uint32_t), "nospam doesn't fit in a 32 bit int");
 2946|  1.22k|    data = state_write_section_header(data, STATE_COOKIE_TYPE, len, STATE_TYPE_NOSPAMKEYS);
  ------------------
  |  |   29|  1.22k|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 2947|  1.22k|    const uint32_t nospam = get_nospam(m->fr);
 2948|  1.22k|    host_to_lendian_bytes32(data, nospam);
 2949|  1.22k|    save_keys(m->net_crypto, data + sizeof(uint32_t));
 2950|  1.22k|    data += len;
 2951|  1.22k|    return data;
 2952|  1.22k|}
Messenger.c:m_dht_size:
 2957|  3.66k|{
 2958|  3.66k|    return dht_size(m->dht);
 2959|  3.66k|}
Messenger.c:m_dht_load:
 2973|    697|{
 2974|    697|    dht_load(m->dht, data, length); // TODO(endoffile78): Should we throw an error if dht_load fails?
 2975|    697|    return STATE_LOAD_STATUS_CONTINUE;
 2976|    697|}
Messenger.c:save_dht:
 2963|  1.22k|{
 2964|  1.22k|    const uint32_t len = m_plugin_size(m, STATE_TYPE_DHT);
 2965|  1.22k|    data = state_write_section_header(data, STATE_COOKIE_TYPE, len, STATE_TYPE_DHT);
  ------------------
  |  |   29|  1.22k|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 2966|  1.22k|    dht_save(m->dht, data);
 2967|  1.22k|    data += len;
 2968|  1.22k|    return data;
 2969|  1.22k|}
Messenger.c:saved_friendslist_size:
 2981|  3.66k|{
 2982|  3.66k|    return count_friendlist(m) * friend_size();
 2983|  3.66k|}
Messenger.c:friend_size:
 2726|  5.40k|{
 2727|  5.40k|    uint32_t data = 0;
 2728|  5.40k|    const struct Saved_Friend *const temp = nullptr;
  ------------------
  |  |   63|  5.40k|#define nullptr NULL
  ------------------
 2729|       |
 2730|  5.40k|#define VALUE_MEMBER(data, name) \
 2731|  5.40k|    do {                         \
 2732|  5.40k|        data += sizeof(name);    \
 2733|  5.40k|    } while (0)
 2734|  5.40k|#define ARRAY_MEMBER(data, name) \
 2735|  5.40k|    do {                         \
 2736|  5.40k|        data += sizeof(name);    \
 2737|  5.40k|    } while (0)
 2738|       |
 2739|       |    // Exactly the same in friend_load, friend_save, and friend_size
 2740|  5.40k|    VALUE_MEMBER(data, temp->status);
  ------------------
  |  | 2731|  5.40k|    do {                         \
  |  | 2732|  5.40k|        data += sizeof(name);    \
  |  | 2733|  5.40k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2733:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2741|  5.40k|    ARRAY_MEMBER(data, temp->real_pk);
  ------------------
  |  | 2735|  5.40k|    do {                         \
  |  | 2736|  5.40k|        data += sizeof(name);    \
  |  | 2737|  5.40k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2737:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2742|  5.40k|    ARRAY_MEMBER(data, temp->info);
  ------------------
  |  | 2735|  5.40k|    do {                         \
  |  | 2736|  5.40k|        data += sizeof(name);    \
  |  | 2737|  5.40k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2737:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2743|  5.40k|    ++data; // padding
 2744|  5.40k|    VALUE_MEMBER(data, temp->info_size);
  ------------------
  |  | 2731|  5.40k|    do {                         \
  |  | 2732|  5.40k|        data += sizeof(name);    \
  |  | 2733|  5.40k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2733:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2745|  5.40k|    ARRAY_MEMBER(data, temp->name);
  ------------------
  |  | 2735|  5.40k|    do {                         \
  |  | 2736|  5.40k|        data += sizeof(name);    \
  |  | 2737|  5.40k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2737:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2746|  5.40k|    VALUE_MEMBER(data, temp->name_length);
  ------------------
  |  | 2731|  5.40k|    do {                         \
  |  | 2732|  5.40k|        data += sizeof(name);    \
  |  | 2733|  5.40k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2733:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2747|  5.40k|    ARRAY_MEMBER(data, temp->statusmessage);
  ------------------
  |  | 2735|  5.40k|    do {                         \
  |  | 2736|  5.40k|        data += sizeof(name);    \
  |  | 2737|  5.40k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2737:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2748|  5.40k|    ++data; // padding
 2749|  5.40k|    VALUE_MEMBER(data, temp->statusmessage_length);
  ------------------
  |  | 2731|  5.40k|    do {                         \
  |  | 2732|  5.40k|        data += sizeof(name);    \
  |  | 2733|  5.40k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2733:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2750|  5.40k|    VALUE_MEMBER(data, temp->userstatus);
  ------------------
  |  | 2731|  5.40k|    do {                         \
  |  | 2732|  5.40k|        data += sizeof(name);    \
  |  | 2733|  5.40k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2733:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2751|  5.40k|    data += 3; // padding
 2752|  5.40k|    VALUE_MEMBER(data, temp->friendrequest_nospam);
  ------------------
  |  | 2731|  5.40k|    do {                         \
  |  | 2732|  5.40k|        data += sizeof(name);    \
  |  | 2733|  5.40k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2733:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2753|  5.40k|    ARRAY_MEMBER(data, temp->last_seen_time);
  ------------------
  |  | 2735|  5.40k|    do {                         \
  |  | 2736|  5.40k|        data += sizeof(name);    \
  |  | 2737|  5.40k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2737:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2754|       |
 2755|  5.40k|#undef VALUE_MEMBER
 2756|  5.40k|#undef ARRAY_MEMBER
 2757|       |
 2758|  5.40k|    return data;
 2759|  5.40k|}
Messenger.c:friends_list_load:
 3038|    269|{
 3039|    269|    const uint32_t l_friend_size = friend_size();
 3040|       |
 3041|    269|    if (length % l_friend_size != 0) {
  ------------------
  |  Branch (3041:9): [True: 1, False: 268]
  ------------------
 3042|      1|        return STATE_LOAD_STATUS_ERROR; // TODO(endoffile78): error or continue?
 3043|      1|    }
 3044|       |
 3045|    268|    const uint32_t num = length / l_friend_size;
 3046|    268|    const uint8_t *cur_data = data;
 3047|       |
 3048|    724|    for (uint32_t i = 0; i < num; ++i) {
  ------------------
  |  Branch (3048:26): [True: 456, False: 268]
  ------------------
 3049|    456|        struct Saved_Friend temp = { 0 };
 3050|    456|        const uint8_t *next_data = friend_load(&temp, cur_data);
 3051|    456|        assert(next_data - cur_data == l_friend_size);
 3052|       |
 3053|    456|        cur_data = next_data;
 3054|       |
 3055|    456|        if (temp.status >= 3) {
  ------------------
  |  Branch (3055:13): [True: 261, False: 195]
  ------------------
 3056|    261|            const int fnum = m_addfriend_norequest(m, temp.real_pk);
 3057|       |
 3058|    261|            if (fnum < 0) {
  ------------------
  |  Branch (3058:17): [True: 51, False: 210]
  ------------------
 3059|     51|                continue;
 3060|     51|            }
 3061|       |
 3062|    210|            setfriendname(m, fnum, temp.name, net_ntohs(temp.name_length));
 3063|    210|            set_friend_statusmessage(m, fnum, temp.statusmessage, net_ntohs(temp.statusmessage_length));
 3064|    210|            set_friend_userstatus(m, fnum, temp.userstatus);
 3065|    210|            net_unpack_u64(temp.last_seen_time, &m->friendlist[fnum].last_seen_time);
 3066|    210|        } else if (temp.status != 0) {
  ------------------
  |  Branch (3066:20): [True: 122, False: 73]
  ------------------
 3067|       |            /* TODO(irungentoo): This is not a good way to do this. */
 3068|    122|            uint8_t address[FRIEND_ADDRESS_SIZE];
 3069|    122|            pk_copy(address, temp.real_pk);
 3070|    122|            memcpy(address + CRYPTO_PUBLIC_KEY_SIZE, &temp.friendrequest_nospam, sizeof(uint32_t));
  ------------------
  |  |   43|    122|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 3071|    122|            uint16_t checksum = data_checksum(address, FRIEND_ADDRESS_SIZE - sizeof(checksum));
  ------------------
  |  |   42|    122|#define FRIEND_ADDRESS_SIZE (CRYPTO_PUBLIC_KEY_SIZE + sizeof(uint32_t) + sizeof(uint16_t))
  |  |  ------------------
  |  |  |  |   43|    122|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
 3072|    122|            memcpy(address + CRYPTO_PUBLIC_KEY_SIZE + sizeof(uint32_t), &checksum, sizeof(checksum));
  ------------------
  |  |   43|    122|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 3073|    122|            m_addfriend(m, address, temp.info, net_ntohs(temp.info_size));
 3074|    122|        }
 3075|    456|    }
 3076|       |
 3077|    268|    return STATE_LOAD_STATUS_CONTINUE;
 3078|    268|}
Messenger.c:friend_load:
 2800|    456|{
 2801|    456|#define VALUE_MEMBER(data, name)           \
 2802|    456|    do {                                   \
 2803|    456|        memcpy(&name, data, sizeof(name)); \
 2804|    456|        data += sizeof(name);              \
 2805|    456|    } while (0)
 2806|       |
 2807|    456|#define ARRAY_MEMBER(data, name)          \
 2808|    456|    do {                                  \
 2809|    456|        memcpy(name, data, sizeof(name)); \
 2810|    456|        data += sizeof(name);             \
 2811|    456|    } while (0)
 2812|       |
 2813|       |    // Exactly the same in friend_load, friend_save, and friend_size
 2814|    456|    VALUE_MEMBER(data, temp->status);
  ------------------
  |  | 2802|    456|    do {                                   \
  |  | 2803|    456|        memcpy(&name, data, sizeof(name)); \
  |  | 2804|    456|        data += sizeof(name);              \
  |  | 2805|    456|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2805:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2815|    456|    ARRAY_MEMBER(data, temp->real_pk);
  ------------------
  |  | 2808|    456|    do {                                  \
  |  | 2809|    456|        memcpy(name, data, sizeof(name)); \
  |  | 2810|    456|        data += sizeof(name);             \
  |  | 2811|    456|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2811:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2816|    456|    ARRAY_MEMBER(data, temp->info);
  ------------------
  |  | 2808|    456|    do {                                  \
  |  | 2809|    456|        memcpy(name, data, sizeof(name)); \
  |  | 2810|    456|        data += sizeof(name);             \
  |  | 2811|    456|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2811:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2817|    456|    ++data; // padding
 2818|    456|    VALUE_MEMBER(data, temp->info_size);
  ------------------
  |  | 2802|    456|    do {                                   \
  |  | 2803|    456|        memcpy(&name, data, sizeof(name)); \
  |  | 2804|    456|        data += sizeof(name);              \
  |  | 2805|    456|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2805:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2819|    456|    ARRAY_MEMBER(data, temp->name);
  ------------------
  |  | 2808|    456|    do {                                  \
  |  | 2809|    456|        memcpy(name, data, sizeof(name)); \
  |  | 2810|    456|        data += sizeof(name);             \
  |  | 2811|    456|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2811:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2820|    456|    VALUE_MEMBER(data, temp->name_length);
  ------------------
  |  | 2802|    456|    do {                                   \
  |  | 2803|    456|        memcpy(&name, data, sizeof(name)); \
  |  | 2804|    456|        data += sizeof(name);              \
  |  | 2805|    456|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2805:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2821|    456|    ARRAY_MEMBER(data, temp->statusmessage);
  ------------------
  |  | 2808|    456|    do {                                  \
  |  | 2809|    456|        memcpy(name, data, sizeof(name)); \
  |  | 2810|    456|        data += sizeof(name);             \
  |  | 2811|    456|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2811:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2822|    456|    ++data; // padding
 2823|    456|    VALUE_MEMBER(data, temp->statusmessage_length);
  ------------------
  |  | 2802|    456|    do {                                   \
  |  | 2803|    456|        memcpy(&name, data, sizeof(name)); \
  |  | 2804|    456|        data += sizeof(name);              \
  |  | 2805|    456|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2805:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2824|    456|    VALUE_MEMBER(data, temp->userstatus);
  ------------------
  |  | 2802|    456|    do {                                   \
  |  | 2803|    456|        memcpy(&name, data, sizeof(name)); \
  |  | 2804|    456|        data += sizeof(name);              \
  |  | 2805|    456|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2805:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2825|    456|    data += 3; // padding
 2826|    456|    VALUE_MEMBER(data, temp->friendrequest_nospam);
  ------------------
  |  | 2802|    456|    do {                                   \
  |  | 2803|    456|        memcpy(&name, data, sizeof(name)); \
  |  | 2804|    456|        data += sizeof(name);              \
  |  | 2805|    456|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2805:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2827|    456|    ARRAY_MEMBER(data, temp->last_seen_time);
  ------------------
  |  | 2808|    456|    do {                                  \
  |  | 2809|    456|        memcpy(name, data, sizeof(name)); \
  |  | 2810|    456|        data += sizeof(name);             \
  |  | 2811|    456|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2811:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2828|       |
 2829|    456|#undef VALUE_MEMBER
 2830|    456|#undef ARRAY_MEMBER
 2831|       |
 2832|    456|    return data;
 2833|    456|}
Messenger.c:friends_list_save:
 2987|  1.22k|{
 2988|  1.22k|    const uint32_t len = m_plugin_size(m, STATE_TYPE_FRIENDS);
 2989|  1.22k|    data = state_write_section_header(data, STATE_COOKIE_TYPE, len, STATE_TYPE_FRIENDS);
  ------------------
  |  |   29|  1.22k|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 2990|       |
 2991|  1.22k|    uint32_t num = 0;
 2992|  1.22k|    uint8_t *cur_data = data;
 2993|       |
 2994|  1.34k|    for (uint32_t i = 0; i < m->numfriends; ++i) {
  ------------------
  |  Branch (2994:26): [True: 120, False: 1.22k]
  ------------------
 2995|    120|        if (m->friendlist[i].status > 0) {
  ------------------
  |  Branch (2995:13): [True: 120, False: 0]
  ------------------
 2996|    120|            struct Saved_Friend temp = { 0 };
 2997|    120|            temp.status = m->friendlist[i].status;
 2998|    120|            memcpy(temp.real_pk, m->friendlist[i].real_pk, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|    120|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 2999|       |
 3000|    120|            if (temp.status < 3) {
  ------------------
  |  Branch (3000:17): [True: 29, False: 91]
  ------------------
 3001|       |                // TODO(iphydf): Use uint16_t and min_u16 here.
 3002|     29|                const size_t friendrequest_length =
 3003|     29|                    min_u32(m->friendlist[i].info_size,
 3004|     29|                            min_u32(SAVED_FRIEND_REQUEST_SIZE, MAX_FRIEND_REQUEST_DATA_SIZE));
  ------------------
  |  | 2708|     29|#define SAVED_FRIEND_REQUEST_SIZE 1024
  ------------------
                                          min_u32(SAVED_FRIEND_REQUEST_SIZE, MAX_FRIEND_REQUEST_DATA_SIZE));
  ------------------
  |  |   19|     29|#define MAX_FRIEND_REQUEST_DATA_SIZE (ONION_CLIENT_MAX_DATA_SIZE - 100)
  |  |  ------------------
  |  |  |  |  188|     29|#define ONION_CLIENT_MAX_DATA_SIZE (MAX_DATA_REQUEST_SIZE - ONION_DATA_IN_RESPONSE_MIN_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   42|     29|#define MAX_DATA_REQUEST_SIZE (ONION_MAX_DATA_SIZE - ONION_DATA_REQUEST_MIN_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   52|     29|#define ONION_MAX_DATA_SIZE (ONION_MAX_PACKET_SIZE - (ONION_SEND_1 + 1))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   41|     29|#define ONION_MAX_PACKET_SIZE 1400
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define ONION_MAX_DATA_SIZE (ONION_MAX_PACKET_SIZE - (ONION_SEND_1 + 1))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   50|     29|#define ONION_SEND_1 (CRYPTO_NONCE_SIZE + ONION_SEND_BASE*3)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   69|     29|#define CRYPTO_NONCE_SIZE              24
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |               #define ONION_SEND_1 (CRYPTO_NONCE_SIZE + ONION_SEND_BASE*3)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   47|     29|#define ONION_SEND_BASE (CRYPTO_PUBLIC_KEY_SIZE + SIZE_IPPORT + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |   43|     29|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |               #define ONION_SEND_BASE (CRYPTO_PUBLIC_KEY_SIZE + SIZE_IPPORT + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  189|     29|#define SIZE_IPPORT (SIZE_IP + SIZE_PORT)
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  187|     29|#define SIZE_IP (1 + SIZE_IP6)
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  186|     29|#define SIZE_IP6 16
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |               #define SIZE_IPPORT (SIZE_IP + SIZE_PORT)
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  188|     29|#define SIZE_PORT 2
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |               #define ONION_SEND_BASE (CRYPTO_PUBLIC_KEY_SIZE + SIZE_IPPORT + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |   64|     29|#define CRYPTO_MAC_SIZE                16
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define MAX_DATA_REQUEST_SIZE (ONION_MAX_DATA_SIZE - ONION_DATA_REQUEST_MIN_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   41|     29|#define ONION_DATA_REQUEST_MIN_SIZE (1 + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_NONCE_SIZE + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   43|     29|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define ONION_DATA_REQUEST_MIN_SIZE (1 + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_NONCE_SIZE + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   69|     29|#define CRYPTO_NONCE_SIZE              24
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define ONION_DATA_REQUEST_MIN_SIZE (1 + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_NONCE_SIZE + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   43|     29|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define ONION_DATA_REQUEST_MIN_SIZE (1 + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_NONCE_SIZE + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   64|     29|#define CRYPTO_MAC_SIZE                16
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define ONION_CLIENT_MAX_DATA_SIZE (MAX_DATA_REQUEST_SIZE - ONION_DATA_IN_RESPONSE_MIN_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  185|     29|#define ONION_DATA_IN_RESPONSE_MIN_SIZE (CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   43|     29|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define ONION_DATA_IN_RESPONSE_MIN_SIZE (CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   64|     29|#define CRYPTO_MAC_SIZE                16
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3005|     29|                memcpy(temp.info, m->friendlist[i].info, friendrequest_length);
 3006|       |
 3007|     29|                temp.info_size = net_htons(m->friendlist[i].info_size);
 3008|     29|                temp.friendrequest_nospam = m->friendlist[i].friendrequest_nospam;
 3009|     91|            } else {
 3010|     91|                temp.status = 3;
 3011|     91|                memcpy(temp.name, m->friendlist[i].name, m->friendlist[i].name_length);
 3012|     91|                temp.name_length = net_htons(m->friendlist[i].name_length);
 3013|     91|                memcpy(temp.statusmessage, m->friendlist[i].statusmessage, m->friendlist[i].statusmessage_length);
 3014|     91|                temp.statusmessage_length = net_htons(m->friendlist[i].statusmessage_length);
 3015|     91|                temp.userstatus = m->friendlist[i].userstatus;
 3016|       |
 3017|     91|                net_pack_u64(temp.last_seen_time, m->friendlist[i].last_seen_time);
 3018|     91|            }
 3019|       |
 3020|    120|            uint8_t *next_data = friend_save(&temp, cur_data);
 3021|    120|            assert(next_data - cur_data == friend_size());
 3022|    120|#ifdef __LP64__
 3023|    120|            assert(memcmp(cur_data, &temp, friend_size()) == 0);
 3024|    120|#endif /* __LP64__ */
 3025|    120|            cur_data = next_data;
 3026|    120|            ++num;
 3027|    120|        }
 3028|    120|    }
 3029|       |
 3030|  1.22k|    assert(cur_data - data == num * friend_size());
 3031|  1.22k|    data += len;
 3032|       |
 3033|  1.22k|    return data;
 3034|  1.22k|}
Messenger.c:friend_save:
 2763|    120|{
 2764|    120|#define VALUE_MEMBER(data, name)           \
 2765|    120|    do {                                   \
 2766|    120|        memcpy(data, &name, sizeof(name)); \
 2767|    120|        data += sizeof(name);              \
 2768|    120|    } while (0)
 2769|       |
 2770|    120|#define ARRAY_MEMBER(data, name)          \
 2771|    120|    do {                                  \
 2772|    120|        memcpy(data, name, sizeof(name)); \
 2773|    120|        data += sizeof(name);             \
 2774|    120|    } while (0)
 2775|       |
 2776|       |    // Exactly the same in friend_load, friend_save, and friend_size
 2777|    120|    VALUE_MEMBER(data, temp->status);
  ------------------
  |  | 2765|    120|    do {                                   \
  |  | 2766|    120|        memcpy(data, &name, sizeof(name)); \
  |  | 2767|    120|        data += sizeof(name);              \
  |  | 2768|    120|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2768:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2778|    120|    ARRAY_MEMBER(data, temp->real_pk);
  ------------------
  |  | 2771|    120|    do {                                  \
  |  | 2772|    120|        memcpy(data, name, sizeof(name)); \
  |  | 2773|    120|        data += sizeof(name);             \
  |  | 2774|    120|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2774:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2779|    120|    ARRAY_MEMBER(data, temp->info);
  ------------------
  |  | 2771|    120|    do {                                  \
  |  | 2772|    120|        memcpy(data, name, sizeof(name)); \
  |  | 2773|    120|        data += sizeof(name);             \
  |  | 2774|    120|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2774:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2780|    120|    ++data; // padding
 2781|    120|    VALUE_MEMBER(data, temp->info_size);
  ------------------
  |  | 2765|    120|    do {                                   \
  |  | 2766|    120|        memcpy(data, &name, sizeof(name)); \
  |  | 2767|    120|        data += sizeof(name);              \
  |  | 2768|    120|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2768:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2782|    120|    ARRAY_MEMBER(data, temp->name);
  ------------------
  |  | 2771|    120|    do {                                  \
  |  | 2772|    120|        memcpy(data, name, sizeof(name)); \
  |  | 2773|    120|        data += sizeof(name);             \
  |  | 2774|    120|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2774:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2783|    120|    VALUE_MEMBER(data, temp->name_length);
  ------------------
  |  | 2765|    120|    do {                                   \
  |  | 2766|    120|        memcpy(data, &name, sizeof(name)); \
  |  | 2767|    120|        data += sizeof(name);              \
  |  | 2768|    120|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2768:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2784|    120|    ARRAY_MEMBER(data, temp->statusmessage);
  ------------------
  |  | 2771|    120|    do {                                  \
  |  | 2772|    120|        memcpy(data, name, sizeof(name)); \
  |  | 2773|    120|        data += sizeof(name);             \
  |  | 2774|    120|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2774:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2785|    120|    ++data; // padding
 2786|    120|    VALUE_MEMBER(data, temp->statusmessage_length);
  ------------------
  |  | 2765|    120|    do {                                   \
  |  | 2766|    120|        memcpy(data, &name, sizeof(name)); \
  |  | 2767|    120|        data += sizeof(name);              \
  |  | 2768|    120|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2768:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2787|    120|    VALUE_MEMBER(data, temp->userstatus);
  ------------------
  |  | 2765|    120|    do {                                   \
  |  | 2766|    120|        memcpy(data, &name, sizeof(name)); \
  |  | 2767|    120|        data += sizeof(name);              \
  |  | 2768|    120|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2768:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2788|    120|    data += 3; // padding
 2789|    120|    VALUE_MEMBER(data, temp->friendrequest_nospam);
  ------------------
  |  | 2765|    120|    do {                                   \
  |  | 2766|    120|        memcpy(data, &name, sizeof(name)); \
  |  | 2767|    120|        data += sizeof(name);              \
  |  | 2768|    120|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2768:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2790|    120|    ARRAY_MEMBER(data, temp->last_seen_time);
  ------------------
  |  | 2771|    120|    do {                                  \
  |  | 2772|    120|        memcpy(data, name, sizeof(name)); \
  |  | 2773|    120|        data += sizeof(name);             \
  |  | 2774|    120|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2774:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2791|       |
 2792|    120|#undef VALUE_MEMBER
 2793|    120|#undef ARRAY_MEMBER
 2794|       |
 2795|    120|    return data;
 2796|    120|}
Messenger.c:name_size:
 3185|  3.66k|{
 3186|  3.66k|    return m->name_length;
 3187|  3.66k|}
Messenger.c:load_name:
 3201|    453|{
 3202|    453|    if (length > 0 && length <= MAX_NAME_LENGTH) {
  ------------------
  |  |   34|    386|#define MAX_NAME_LENGTH 128
  ------------------
  |  Branch (3202:9): [True: 386, False: 67]
  |  Branch (3202:23): [True: 320, False: 66]
  ------------------
 3203|    320|        setname(m, data, length);
 3204|    320|    }
 3205|       |
 3206|    453|    return STATE_LOAD_STATUS_CONTINUE;
 3207|    453|}
Messenger.c:save_name:
 3191|  1.22k|{
 3192|  1.22k|    const uint32_t len = m_plugin_size(m, STATE_TYPE_NAME);
 3193|  1.22k|    data = state_write_section_header(data, STATE_COOKIE_TYPE, len, STATE_TYPE_NAME);
  ------------------
  |  |   29|  1.22k|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 3194|  1.22k|    memcpy(data, m->name, len);
 3195|  1.22k|    data += len;
 3196|  1.22k|    return data;
 3197|  1.22k|}
Messenger.c:status_message_size:
 3212|  3.66k|{
 3213|  3.66k|    return m->statusmessage_length;
 3214|  3.66k|}
Messenger.c:load_status_message:
 3228|    694|{
 3229|    694|    if (length > 0 && length <= MAX_STATUSMESSAGE_LENGTH) {
  ------------------
  |  |   36|    591|#define MAX_STATUSMESSAGE_LENGTH 1007
  ------------------
  |  Branch (3229:9): [True: 591, False: 103]
  |  Branch (3229:23): [True: 581, False: 10]
  ------------------
 3230|    581|        m_set_statusmessage(m, data, length);
 3231|    581|    }
 3232|       |
 3233|    694|    return STATE_LOAD_STATUS_CONTINUE;
 3234|    694|}
Messenger.c:save_status_message:
 3218|  1.22k|{
 3219|  1.22k|    const uint32_t len = m_plugin_size(m, STATE_TYPE_STATUSMESSAGE);
 3220|  1.22k|    data = state_write_section_header(data, STATE_COOKIE_TYPE, len, STATE_TYPE_STATUSMESSAGE);
  ------------------
  |  |   29|  1.22k|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 3221|  1.22k|    memcpy(data, m->statusmessage, len);
 3222|  1.22k|    data += len;
 3223|  1.22k|    return data;
 3224|  1.22k|}
Messenger.c:status_size:
 3239|  3.66k|{
 3240|  3.66k|    return 1;
 3241|  3.66k|}
Messenger.c:load_status:
 3255|    594|{
 3256|    594|    if (length == 1) {
  ------------------
  |  Branch (3256:9): [True: 559, False: 35]
  ------------------
 3257|    559|        m_set_userstatus(m, *data);
 3258|    559|    }
 3259|       |
 3260|    594|    return STATE_LOAD_STATUS_CONTINUE;
 3261|    594|}
Messenger.c:save_status:
 3245|  1.22k|{
 3246|  1.22k|    const uint32_t len = m_plugin_size(m, STATE_TYPE_STATUS);
 3247|  1.22k|    data = state_write_section_header(data, STATE_COOKIE_TYPE, len, STATE_TYPE_STATUS);
  ------------------
  |  |   29|  1.22k|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 3248|  1.22k|    *data = m->userstatus;
 3249|  1.22k|    data += len;
 3250|  1.22k|    return data;
 3251|  1.22k|}
Messenger.c:saved_groups_size:
 3107|  2.56k|{
 3108|  2.56k|    const GC_Session *session = m->group_handler;
 3109|  2.56k|    return bin_pack_obj_size(pack_groupchats_handler, session, m->log);
 3110|  2.56k|}
Messenger.c:pack_groupchats_handler:
 3099|  2.68k|{
 3100|  2.68k|    const GC_Session *session = (const GC_Session *)obj;
 3101|  2.68k|    pack_groupchats(session, bp);
 3102|  2.68k|    return true;  // TODO(iphydf): Return bool from pack functions.
 3103|  2.68k|}
Messenger.c:pack_groupchats:
 3082|  2.68k|{
 3083|  2.68k|    assert(bp != nullptr && c != nullptr);
 3084|  2.68k|    bin_pack_array(bp, gc_count_groups(c));
 3085|       |
 3086|  5.55k|    for (uint32_t i = 0; i < c->chats_index; ++i) { // this loop must match the one in gc_count_groups()
  ------------------
  |  Branch (3086:26): [True: 2.87k, False: 2.68k]
  ------------------
 3087|  2.87k|        const GC_Chat *chat = &c->chats[i];
 3088|       |
 3089|  2.87k|        if (!gc_group_is_valid(chat)) {
  ------------------
  |  Branch (3089:13): [True: 1.90k, False: 972]
  ------------------
 3090|  1.90k|            continue;
 3091|  1.90k|        }
 3092|       |
 3093|    972|        gc_group_save(chat, bp);
 3094|    972|    }
 3095|  2.68k|}
Messenger.c:groups_load:
 3173|  24.3k|{
 3174|  24.3k|    if (!bin_unpack_obj(m->mem, handle_groups_load, m, data, length)) {
  ------------------
  |  Branch (3174:9): [True: 33, False: 24.2k]
  ------------------
 3175|     33|        LOGGER_ERROR(m->log, "msgpack failed to unpack groupchats array");
  ------------------
  |  |   87|     33|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     33|    do {                                                                         \
  |  |  |  |   77|     33|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     66|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|     33|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|     33|        }                                                                        \
  |  |  |  |   80|     33|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3176|     33|        return STATE_LOAD_STATUS_ERROR;
 3177|     33|    }
 3178|       |
 3179|  24.2k|    return STATE_LOAD_STATUS_CONTINUE;
 3180|  24.3k|}
Messenger.c:handle_groups_load:
 3145|  24.3k|{
 3146|  24.3k|    Messenger *m = (Messenger *)obj;
 3147|       |
 3148|  24.3k|    uint32_t num_groups;
 3149|  24.3k|    if (!bin_unpack_array(bu, &num_groups)) {
  ------------------
  |  Branch (3149:9): [True: 33, False: 24.2k]
  ------------------
 3150|     33|        LOGGER_ERROR(m->log, "msgpack failed to unpack groupchats array: expected array");
  ------------------
  |  |   87|     33|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     33|    do {                                                                         \
  |  |  |  |   77|     33|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     66|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|     33|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|     33|        }                                                                        \
  |  |  |  |   80|     33|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3151|     33|        return false;
 3152|     33|    }
 3153|       |
 3154|  24.2k|    LOGGER_DEBUG(m->log, "Loading %u groups", num_groups);
  ------------------
  |  |   84|  24.2k|#define LOGGER_DEBUG(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_DEBUG, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|  24.2k|    do {                                                                         \
  |  |  |  |   77|  24.2k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  48.5k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|  24.2k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3155|       |
 3156|  24.3k|    for (uint32_t i = 0; i < num_groups; ++i) {
  ------------------
  |  Branch (3156:26): [True: 24.2k, False: 83]
  ------------------
 3157|  24.2k|        const int group_number = gc_group_load(m->group_handler, bu);
 3158|       |
 3159|  24.2k|        if (group_number < 0) {
  ------------------
  |  Branch (3159:13): [True: 24.2k, False: 70]
  ------------------
 3160|  24.2k|            LOGGER_WARNING(m->log, "Failed to load group %u", i);
  ------------------
  |  |   86|  24.2k|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|  24.2k|    do {                                                                         \
  |  |  |  |   77|  24.2k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  48.4k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|  24.2k|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|  24.2k|        }                                                                        \
  |  |  |  |   80|  24.2k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3161|       |            // Can't recover trivially. We may need to skip over some data here.
 3162|  24.2k|            break;
 3163|  24.2k|        }
 3164|  24.2k|    }
 3165|       |
 3166|  24.2k|    LOGGER_DEBUG(m->log, "Successfully loaded %u groups", gc_count_groups(m->group_handler));
  ------------------
  |  |   84|  24.2k|#define LOGGER_DEBUG(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_DEBUG, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|  24.2k|    do {                                                                         \
  |  |  |  |   77|  24.2k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  48.5k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|  24.2k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3167|       |
 3168|  24.2k|    return true;
 3169|  24.3k|}
Messenger.c:groups_save:
 3114|  1.22k|{
 3115|  1.22k|    const GC_Session *c = m->group_handler;
 3116|       |
 3117|  1.22k|    const uint32_t num_groups = gc_count_groups(c);
 3118|       |
 3119|  1.22k|    if (num_groups == 0) {
  ------------------
  |  Branch (3119:9): [True: 1.10k, False: 117]
  ------------------
 3120|  1.10k|        return data;
 3121|  1.10k|    }
 3122|       |
 3123|    117|    const uint32_t len = m_plugin_size(m, STATE_TYPE_GROUPS);
 3124|       |
 3125|    117|    if (len == 0) {
  ------------------
  |  Branch (3125:9): [True: 0, False: 117]
  ------------------
 3126|      0|        return data;
 3127|      0|    }
 3128|       |
 3129|    117|    data = state_write_section_header(data, STATE_COOKIE_TYPE, len, STATE_TYPE_GROUPS);
  ------------------
  |  |   29|    117|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 3130|       |
 3131|    117|    if (!bin_pack_obj(pack_groupchats_handler, c, m->log, data, len)) {
  ------------------
  |  Branch (3131:9): [True: 0, False: 117]
  ------------------
 3132|      0|        LOGGER_FATAL(m->log, "failed to pack group chats into buffer of length %u", len);
  ------------------
  |  |   90|      0|    do {                                \
  |  |   91|      0|        LOGGER_ERROR(log, __VA_ARGS__); \
  |  |  ------------------
  |  |  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   92|      0|        logger_abort();                 \
  |  |   93|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (93:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 3133|      0|        return data;
 3134|      0|    }
 3135|       |
 3136|    117|    data += len;
 3137|       |
 3138|    117|    LOGGER_DEBUG(m->log, "Saved %u groups (length %u)", num_groups, len);
  ------------------
  |  |   84|    117|#define LOGGER_DEBUG(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_DEBUG, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|    117|    do {                                                                         \
  |  |  |  |   77|    117|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    234|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|    117|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3139|       |
 3140|    117|    return data;
 3141|    117|}
Messenger.c:tcp_relay_size:
 3266|  2.44k|{
 3267|  2.44k|    return NUM_SAVED_TCP_RELAYS * packed_node_size(net_family_tcp_ipv6());
  ------------------
  |  |   38|  2.44k|#define NUM_SAVED_TCP_RELAYS 8
  ------------------
 3268|  2.44k|}
Messenger.c:load_tcp_relays:
 3297|    598|{
 3298|    598|    if (length > 0) {
  ------------------
  |  Branch (3298:9): [True: 532, False: 66]
  ------------------
 3299|    532|        const int num = unpack_nodes(m->loaded_relays, NUM_SAVED_TCP_RELAYS, nullptr, data, length, true);
  ------------------
  |  |   38|    532|#define NUM_SAVED_TCP_RELAYS 8
  ------------------
                      const int num = unpack_nodes(m->loaded_relays, NUM_SAVED_TCP_RELAYS, nullptr, data, length, true);
  ------------------
  |  |   63|    532|#define nullptr NULL
  ------------------
 3300|       |
 3301|    532|        if (num == -1) {
  ------------------
  |  Branch (3301:13): [True: 99, False: 433]
  ------------------
 3302|     99|            m->num_loaded_relays = 0;
 3303|     99|            return STATE_LOAD_STATUS_CONTINUE;
 3304|     99|        }
 3305|       |
 3306|    433|        m->num_loaded_relays = num;
 3307|    433|        m->has_added_relays = false;
 3308|    433|    }
 3309|       |
 3310|    499|    return STATE_LOAD_STATUS_CONTINUE;
 3311|    598|}
Messenger.c:save_tcp_relays:
 3272|  1.22k|{
 3273|  1.22k|    Node_format relays[NUM_SAVED_TCP_RELAYS] = {{{0}}};
 3274|  1.22k|    uint8_t *temp_data = data;
 3275|  1.22k|    data = state_write_section_header(temp_data, STATE_COOKIE_TYPE, 0, STATE_TYPE_TCP_RELAY);
  ------------------
  |  |   29|  1.22k|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 3276|       |
 3277|  1.22k|    if (m->num_loaded_relays > 0) {
  ------------------
  |  Branch (3277:9): [True: 40, False: 1.18k]
  ------------------
 3278|     40|        memcpy(relays, m->loaded_relays, sizeof(Node_format) * m->num_loaded_relays);
 3279|     40|    }
 3280|       |
 3281|  1.22k|    uint32_t num = m->num_loaded_relays;
 3282|  1.22k|    num += copy_connected_tcp_relays(m->net_crypto, relays + num, NUM_SAVED_TCP_RELAYS - num);
  ------------------
  |  |   38|  1.22k|#define NUM_SAVED_TCP_RELAYS 8
  ------------------
 3283|       |
 3284|  1.22k|    const int l = pack_nodes(m->log, data, NUM_SAVED_TCP_RELAYS * packed_node_size(net_family_tcp_ipv6()), relays, num);
  ------------------
  |  |   38|  1.22k|#define NUM_SAVED_TCP_RELAYS 8
  ------------------
 3285|       |
 3286|  1.22k|    if (l > 0) {
  ------------------
  |  Branch (3286:9): [True: 40, False: 1.18k]
  ------------------
 3287|     40|        const uint32_t len = l;
 3288|     40|        data = state_write_section_header(temp_data, STATE_COOKIE_TYPE, len, STATE_TYPE_TCP_RELAY);
  ------------------
  |  |   29|     40|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 3289|     40|        data += len;
 3290|     40|    }
 3291|       |
 3292|  1.22k|    return data;
 3293|  1.22k|}
Messenger.c:path_node_size:
 3316|  2.44k|{
 3317|  2.44k|    return NUM_SAVED_PATH_NODES * packed_node_size(net_family_tcp_ipv6());
  ------------------
  |  | 2709|  2.44k|#define NUM_SAVED_PATH_NODES 8
  ------------------
 3318|  2.44k|}
Messenger.c:load_path_nodes:
 3340|    429|{
 3341|    429|    if (length > 0) {
  ------------------
  |  Branch (3341:9): [True: 361, False: 68]
  ------------------
 3342|    361|        Node_format nodes[NUM_SAVED_PATH_NODES];
 3343|    361|        const int num = unpack_nodes(nodes, NUM_SAVED_PATH_NODES, nullptr, data, length, false);
  ------------------
  |  | 2709|    361|#define NUM_SAVED_PATH_NODES 8
  ------------------
                      const int num = unpack_nodes(nodes, NUM_SAVED_PATH_NODES, nullptr, data, length, false);
  ------------------
  |  |   63|    361|#define nullptr NULL
  ------------------
 3344|       |
 3345|    361|        if (num == -1) {
  ------------------
  |  Branch (3345:13): [True: 54, False: 307]
  ------------------
 3346|     54|            return STATE_LOAD_STATUS_CONTINUE;
 3347|     54|        }
 3348|       |
 3349|  2.24k|        for (int i = 0; i < num; ++i) {
  ------------------
  |  Branch (3349:25): [True: 1.93k, False: 307]
  ------------------
 3350|  1.93k|            onion_add_bs_path_node(m->onion_c, &nodes[i].ip_port, nodes[i].public_key);
 3351|  1.93k|        }
 3352|    307|    }
 3353|       |
 3354|    375|    return STATE_LOAD_STATUS_CONTINUE;
 3355|    429|}
Messenger.c:save_path_nodes:
 3322|  1.22k|{
 3323|  1.22k|    Node_format nodes[NUM_SAVED_PATH_NODES] = {{{0}}};
 3324|  1.22k|    uint8_t *temp_data = data;
 3325|  1.22k|    data = state_write_section_header(data, STATE_COOKIE_TYPE, 0, STATE_TYPE_PATH_NODE);
  ------------------
  |  |   29|  1.22k|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 3326|  1.22k|    const unsigned int num = onion_backup_nodes(m->onion_c, nodes, NUM_SAVED_PATH_NODES);
  ------------------
  |  | 2709|  1.22k|#define NUM_SAVED_PATH_NODES 8
  ------------------
 3327|  1.22k|    const int l = pack_nodes(m->log, data, NUM_SAVED_PATH_NODES * packed_node_size(net_family_tcp_ipv6()), nodes, num);
  ------------------
  |  | 2709|  1.22k|#define NUM_SAVED_PATH_NODES 8
  ------------------
 3328|       |
 3329|  1.22k|    if (l > 0) {
  ------------------
  |  Branch (3329:9): [True: 37, False: 1.18k]
  ------------------
 3330|     37|        const uint32_t len = l;
 3331|     37|        data = state_write_section_header(temp_data, STATE_COOKIE_TYPE, len, STATE_TYPE_PATH_NODE);
  ------------------
  |  |   29|     37|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 3332|     37|        data += len;
 3333|     37|    }
 3334|       |
 3335|  1.22k|    return data;
 3336|  1.22k|}

tcp_connections_count:
   74|     70|{
   75|     70|    return tcp_c->tcp_connections_length;
   76|     70|}
set_packet_tcp_connection_callback:
  551|  1.81k|{
  552|  1.81k|    tcp_c->tcp_data_callback = tcp_data_callback;
  553|  1.81k|    tcp_c->tcp_data_callback_object = object;
  554|  1.81k|}
set_oob_packet_tcp_connection_callback:
  558|  1.81k|{
  559|  1.81k|    tcp_c->tcp_oob_callback = tcp_oob_callback;
  560|  1.81k|    tcp_c->tcp_oob_callback_object = object;
  561|  1.81k|}
set_onion_packet_tcp_connection_callback:
  565|  3.49k|{
  566|  3.49k|    tcp_c->tcp_onion_callback = tcp_onion_callback;
  567|  3.49k|    tcp_c->tcp_onion_callback_object = object;
  568|  3.49k|}
tcp_copy_connected_relays:
 1489|  1.21k|{
 1490|  1.21k|    const uint32_t r = random_u32(tcp_c->rng);
 1491|  1.21k|    uint32_t copied = 0;
 1492|       |
 1493|  1.21k|    for (uint32_t i = 0; (i < tcp_c->tcp_connections_length) && (copied < max_num); ++i) {
  ------------------
  |  Branch (1493:26): [True: 0, False: 1.21k]
  |  Branch (1493:65): [True: 0, False: 0]
  ------------------
 1494|      0|        const uint16_t idx = (i + r) % tcp_c->tcp_connections_length;
 1495|       |
 1496|      0|        if (copy_tcp_relay_conn(tcp_c, &tcp_relays[copied], idx)) {
  ------------------
  |  Branch (1496:13): [True: 0, False: 0]
  ------------------
 1497|      0|            ++copied;
 1498|      0|        }
 1499|      0|    }
 1500|       |
 1501|  1.21k|    return copied;
 1502|  1.21k|}
new_tcp_connections:
 1600|  1.81k|{
 1601|  1.81k|    assert(logger != nullptr);
 1602|  1.81k|    assert(mem != nullptr);
 1603|  1.81k|    assert(rng != nullptr);
 1604|  1.81k|    assert(ns != nullptr);
 1605|  1.81k|    assert(mono_time != nullptr);
 1606|       |
 1607|  1.81k|    if (secret_key == nullptr) {
  ------------------
  |  |   63|  1.81k|#define nullptr NULL
  ------------------
  |  Branch (1607:9): [True: 0, False: 1.81k]
  ------------------
 1608|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1609|      0|    }
 1610|       |
 1611|  1.81k|    TCP_Connections *temp = (TCP_Connections *)mem_alloc(mem, sizeof(TCP_Connections));
 1612|       |
 1613|  1.81k|    if (temp == nullptr) {
  ------------------
  |  |   63|  1.81k|#define nullptr NULL
  ------------------
  |  Branch (1613:9): [True: 0, False: 1.81k]
  ------------------
 1614|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1615|      0|    }
 1616|       |
 1617|  1.81k|    Net_Profile *np = netprof_new(logger, mem);
 1618|       |
 1619|  1.81k|    if (np == nullptr) {
  ------------------
  |  |   63|  1.81k|#define nullptr NULL
  ------------------
  |  Branch (1619:9): [True: 0, False: 1.81k]
  ------------------
 1620|      0|        mem_delete(mem, temp);
 1621|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1622|      0|    }
 1623|       |
 1624|  1.81k|    temp->net_profile = np;
 1625|  1.81k|    temp->logger = logger;
 1626|  1.81k|    temp->mem = mem;
 1627|  1.81k|    temp->rng = rng;
 1628|  1.81k|    temp->mono_time = mono_time;
 1629|  1.81k|    temp->ns = ns;
 1630|       |
 1631|  1.81k|    memcpy(temp->self_secret_key, secret_key, CRYPTO_SECRET_KEY_SIZE);
  ------------------
  |  |   48|  1.81k|#define CRYPTO_SECRET_KEY_SIZE         32
  ------------------
 1632|  1.81k|    crypto_derive_public_key(temp->self_public_key, temp->self_secret_key);
 1633|  1.81k|    temp->proxy_info = *proxy_info;
 1634|       |
 1635|  1.81k|    return temp;
 1636|  1.81k|}
kill_tcp_connections:
 1728|  1.81k|{
 1729|  1.81k|    if (tcp_c == nullptr) {
  ------------------
  |  |   63|  1.81k|#define nullptr NULL
  ------------------
  |  Branch (1729:9): [True: 0, False: 1.81k]
  ------------------
 1730|      0|        return;
 1731|      0|    }
 1732|       |
 1733|  1.81k|    for (uint32_t i = 0; i < tcp_c->tcp_connections_length; ++i) {
  ------------------
  |  Branch (1733:26): [True: 0, False: 1.81k]
  ------------------
 1734|      0|        kill_tcp_connection(tcp_c->tcp_connections[i].connection);
 1735|      0|    }
 1736|       |
 1737|  1.81k|    crypto_memzero(tcp_c->self_secret_key, sizeof(tcp_c->self_secret_key));
 1738|       |
 1739|  1.81k|    netprof_kill(tcp_c->mem, tcp_c->net_profile);
 1740|  1.81k|    mem_delete(tcp_c->mem, tcp_c->tcp_connections);
 1741|  1.81k|    mem_delete(tcp_c->mem, tcp_c->connections);
 1742|  1.81k|    mem_delete(tcp_c->mem, tcp_c);
 1743|  1.81k|}

new_announcements:
  648|  1.74k|{
  649|  1.74k|    if (log == nullptr || mono_time == nullptr || forwarding == nullptr) {
  ------------------
  |  |   63|  3.49k|#define nullptr NULL
  ------------------
                  if (log == nullptr || mono_time == nullptr || forwarding == nullptr) {
  ------------------
  |  |   63|  3.49k|#define nullptr NULL
  ------------------
                  if (log == nullptr || mono_time == nullptr || forwarding == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (649:9): [True: 0, False: 1.74k]
  |  Branch (649:27): [True: 0, False: 1.74k]
  |  Branch (649:51): [True: 0, False: 1.74k]
  ------------------
  650|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  651|      0|    }
  652|       |
  653|  1.74k|    Announcements *announce = (Announcements *)mem_alloc(mem, sizeof(Announcements));
  654|       |
  655|  1.74k|    if (announce == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (655:9): [True: 0, False: 1.74k]
  ------------------
  656|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  657|      0|    }
  658|       |
  659|  1.74k|    announce->log = log;
  660|  1.74k|    announce->mem = mem;
  661|  1.74k|    announce->rng = rng;
  662|  1.74k|    announce->forwarding = forwarding;
  663|  1.74k|    announce->mono_time = mono_time;
  664|  1.74k|    announce->dht = forwarding_get_dht(forwarding);
  665|  1.74k|    announce->net = dht_get_net(announce->dht);
  666|  1.74k|    announce->public_key = dht_get_self_public_key(announce->dht);
  667|  1.74k|    announce->secret_key = dht_get_self_secret_key(announce->dht);
  668|  1.74k|    new_hmac_key(announce->rng, announce->hmac_key);
  669|  1.74k|    announce->shared_keys = shared_key_cache_new(log, mono_time, mem, announce->secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   30|  1.74k|#define KEYS_TIMEOUT 600
  ------------------
                  announce->shared_keys = shared_key_cache_new(log, mono_time, mem, announce->secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   29|  1.74k|#define MAX_KEYS_PER_SLOT 4
  ------------------
  670|  1.74k|    if (announce->shared_keys == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (670:9): [True: 0, False: 1.74k]
  ------------------
  671|      0|        mem_delete(announce->mem, announce);
  672|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  673|      0|    }
  674|       |
  675|  1.74k|    announce->start_time = mono_time_get(announce->mono_time);
  676|       |
  677|  1.74k|    set_callback_forwarded_request(forwarding, forwarded_request_callback, announce);
  678|       |
  679|  1.74k|    networking_registerhandler(announce->net, NET_PACKET_DATA_SEARCH_REQUEST, handle_dht_announce_request, announce);
  680|  1.74k|    networking_registerhandler(announce->net, NET_PACKET_DATA_RETRIEVE_REQUEST, handle_dht_announce_request, announce);
  681|  1.74k|    networking_registerhandler(announce->net, NET_PACKET_STORE_ANNOUNCE_REQUEST, handle_dht_announce_request, announce);
  682|       |
  683|  1.74k|    return announce;
  684|  1.74k|}
kill_announcements:
  687|  1.74k|{
  688|  1.74k|    if (announce == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (688:9): [True: 0, False: 1.74k]
  ------------------
  689|      0|        return;
  690|      0|    }
  691|       |
  692|  1.74k|    set_callback_forwarded_request(announce->forwarding, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  set_callback_forwarded_request(announce->forwarding, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  693|       |
  694|  1.74k|    networking_registerhandler(announce->net, NET_PACKET_DATA_SEARCH_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(announce->net, NET_PACKET_DATA_SEARCH_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  695|  1.74k|    networking_registerhandler(announce->net, NET_PACKET_DATA_RETRIEVE_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(announce->net, NET_PACKET_DATA_RETRIEVE_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  696|  1.74k|    networking_registerhandler(announce->net, NET_PACKET_STORE_ANNOUNCE_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(announce->net, NET_PACKET_STORE_ANNOUNCE_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  697|       |
  698|  1.74k|    crypto_memzero(announce->hmac_key, CRYPTO_HMAC_KEY_SIZE);
  ------------------
  |  |  162|  1.74k|#define CRYPTO_HMAC_KEY_SIZE           32
  ------------------
  699|  1.74k|    shared_key_cache_free(announce->shared_keys);
  700|       |
  701|   448k|    for (uint32_t i = 0; i < ANNOUNCE_BUCKETS * ANNOUNCE_BUCKET_SIZE; ++i) {
  ------------------
  |  |   72|   448k|#define ANNOUNCE_BUCKETS 32 // ANNOUNCE_BUCKETS = 2 ** ANNOUNCE_BUCKET_PREFIX_LENGTH
  ------------------
                  for (uint32_t i = 0; i < ANNOUNCE_BUCKETS * ANNOUNCE_BUCKET_SIZE; ++i) {
  ------------------
  |  |   70|   448k|#define ANNOUNCE_BUCKET_SIZE 8
  ------------------
  |  Branch (701:26): [True: 446k, False: 1.74k]
  ------------------
  702|   446k|        mem_delete(announce->mem, announce->entries[i].data);
  703|   446k|    }
  704|       |
  705|  1.74k|    mem_delete(announce->mem, announce);
  706|  1.74k|}

bin_pack_obj_size:
   68|  3.12k|{
   69|  3.12k|    Bin_Pack bp;
   70|  3.12k|    bin_pack_init(&bp, nullptr, 0);
  ------------------
  |  |   63|  3.12k|#define nullptr NULL
  ------------------
   71|  3.12k|    if (!callback(obj, logger, &bp)) {
  ------------------
  |  Branch (71:9): [True: 0, False: 3.12k]
  ------------------
   72|      0|        return UINT32_MAX;
   73|      0|    }
   74|  3.12k|    return bp.bytes_pos;
   75|  3.12k|}
bin_pack_obj:
   78|    677|{
   79|    677|    Bin_Pack bp;
   80|    677|    bin_pack_init(&bp, buf, buf_size);
   81|    677|    return callback(obj, logger, &bp);
   82|    677|}
bin_pack_obj_array_b_size:
   85|  4.12k|{
   86|  4.12k|    Bin_Pack bp;
   87|  4.12k|    bin_pack_init(&bp, nullptr, 0);
  ------------------
  |  |   63|  4.12k|#define nullptr NULL
  ------------------
   88|  4.12k|    if (arr == nullptr) {
  ------------------
  |  |   63|  4.12k|#define nullptr NULL
  ------------------
  |  Branch (88:9): [True: 0, False: 4.12k]
  ------------------
   89|      0|        assert(arr_size == 0);
   90|      0|    }
   91|  8.09k|    for (uint32_t i = 0; i < arr_size; ++i) {
  ------------------
  |  Branch (91:26): [True: 3.96k, False: 4.12k]
  ------------------
   92|  3.96k|        if (!callback(arr, i, logger, &bp)) {
  ------------------
  |  Branch (92:13): [True: 0, False: 3.96k]
  ------------------
   93|      0|            return UINT32_MAX;
   94|      0|        }
   95|  3.96k|    }
   96|  4.12k|    return bp.bytes_pos;
   97|  4.12k|}
bin_pack_obj_array_b:
  100|  4.12k|{
  101|  4.12k|    Bin_Pack bp;
  102|  4.12k|    bin_pack_init(&bp, buf, buf_size);
  103|  4.12k|    if (arr == nullptr) {
  ------------------
  |  |   63|  4.12k|#define nullptr NULL
  ------------------
  |  Branch (103:9): [True: 0, False: 4.12k]
  ------------------
  104|      0|        assert(arr_size == 0);
  105|      0|    }
  106|  8.09k|    for (uint32_t i = 0; i < arr_size; ++i) {
  ------------------
  |  Branch (106:26): [True: 3.96k, False: 4.12k]
  ------------------
  107|  3.96k|        if (!callback(arr, i, logger, &bp)) {
  ------------------
  |  Branch (107:13): [True: 0, False: 3.96k]
  ------------------
  108|      0|            return false;
  109|      0|        }
  110|  3.96k|    }
  111|  4.12k|    return true;
  112|  4.12k|}
bin_pack_array:
  135|  3.86k|{
  136|  3.86k|    return cmp_write_array(&bp->ctx, size);
  137|  3.86k|}
bin_pack_bool:
  140|    148|{
  141|    148|    return cmp_write_bool(&bp->ctx, val);
  142|    148|}
bin_pack_u08:
  145|    592|{
  146|    592|    return cmp_write_uinteger(&bp->ctx, val);
  147|    592|}
bin_pack_u16:
  150|  1.18k|{
  151|  1.18k|    return cmp_write_uinteger(&bp->ctx, val);
  152|  1.18k|}
bin_pack_u32:
  155|    444|{
  156|    444|    return cmp_write_uinteger(&bp->ctx, val);
  157|    444|}
bin_pack_bin:
  165|  2.18k|{
  166|  2.18k|    return cmp_write_bin(&bp->ctx, data, length);
  167|  2.18k|}
bin_pack_nil:
  170|     36|{
  171|     36|    return cmp_write_nil(&bp->ctx);
  172|     36|}
bin_pack_u08_b:
  180|  27.1k|{
  181|  27.1k|    return bp->ctx.write(&bp->ctx, &val, 1) == 1;
  182|  27.1k|}
bin_pack_u16_b:
  185|  9.05k|{
  186|  9.05k|    return bin_pack_u08_b(bp, (val >> 8) & 0xff)
  ------------------
  |  Branch (186:12): [True: 9.05k, False: 0]
  ------------------
  187|  9.05k|           && bin_pack_u08_b(bp, val & 0xff);
  ------------------
  |  Branch (187:15): [True: 9.05k, False: 0]
  ------------------
  188|  9.05k|}
bin_pack_bin_b:
  203|  16.9k|{
  204|  16.9k|    return bp->ctx.write(&bp->ctx, data, length) == length;
  205|  16.9k|}
bin_pack.c:bin_pack_init:
   60|  12.0k|{
   61|  12.0k|    bp->bytes = buf;
   62|  12.0k|    bp->bytes_size = buf_size;
   63|  12.0k|    bp->bytes_pos = 0;
   64|  12.0k|    cmp_init(&bp->ctx, bp, null_reader, null_skipper, buf_writer);
   65|  12.0k|}
bin_pack.c:buf_writer:
   38|  57.0k|{
   39|  57.0k|    const uint8_t *bytes = (const uint8_t *)data;
   40|  57.0k|    Bin_Pack *bp = (Bin_Pack *)ctx->buf;
   41|  57.0k|    assert(bp != nullptr);
   42|  57.0k|    const uint32_t new_pos = bp->bytes_pos + count;
   43|  57.0k|    if (new_pos < bp->bytes_pos) {
  ------------------
  |  Branch (43:9): [True: 0, False: 57.0k]
  ------------------
   44|       |        // 32 bit overflow.
   45|      0|        return 0;
   46|      0|    }
   47|  57.0k|    if (bp->bytes != nullptr) {
  ------------------
  |  |   63|  57.0k|#define nullptr NULL
  ------------------
  |  Branch (47:9): [True: 24.7k, False: 32.3k]
  ------------------
   48|  24.7k|        if (new_pos > bp->bytes_size) {
  ------------------
  |  Branch (48:13): [True: 0, False: 24.7k]
  ------------------
   49|       |            // Buffer too small.
   50|      0|            return 0;
   51|      0|        }
   52|  24.7k|        memcpy(&bp->bytes[bp->bytes_pos], bytes, count);
   53|  24.7k|    }
   54|  57.0k|    bp->bytes_pos += count;
   55|  57.0k|    return count;
   56|  57.0k|}

bin_unpack_obj:
   68|  24.3k|{
   69|  24.3k|    Bin_Unpack bu;
   70|  24.3k|    bin_unpack_init(&bu, mem, buf, buf_size);
   71|  24.3k|    return callback(obj, &bu);
   72|  24.3k|}
bin_unpack_array:
   75|  24.3k|{
   76|  24.3k|    return cmp_read_array(&bu->ctx, size) && *size <= bu->bytes_size;
  ------------------
  |  Branch (76:12): [True: 24.2k, False: 30]
  |  Branch (76:46): [True: 24.2k, False: 3]
  ------------------
   77|  24.3k|}
bin_unpack_array_fixed:
   80|  51.0k|{
   81|  51.0k|    uint32_t size = 0;
   82|  51.0k|    const bool success = cmp_read_array(&bu->ctx, &size) && size == required_size;
  ------------------
  |  Branch (82:26): [True: 43.0k, False: 7.93k]
  |  Branch (82:61): [True: 42.9k, False: 162]
  ------------------
   83|  51.0k|    if (actual_size != nullptr) {
  ------------------
  |  |   63|  51.0k|#define nullptr NULL
  ------------------
  |  Branch (83:9): [True: 24.5k, False: 26.4k]
  ------------------
   84|  24.5k|        *actual_size = size;
   85|  24.5k|    }
   86|  51.0k|    return success;
   87|  51.0k|}
bin_unpack_bool:
   90|  19.9k|{
   91|  19.9k|    return cmp_read_bool(&bu->ctx, val);
   92|  19.9k|}
bin_unpack_u08:
   95|  20.5k|{
   96|  20.5k|    return cmp_read_uchar(&bu->ctx, val);
   97|  20.5k|}
bin_unpack_u16:
  100|  42.0k|{
  101|  42.0k|    return cmp_read_ushort(&bu->ctx, val);
  102|  42.0k|}
bin_unpack_u32:
  105|  19.6k|{
  106|  19.6k|    return cmp_read_uint(&bu->ctx, val);
  107|  19.6k|}
bin_unpack_nil:
  115|     74|{
  116|     74|    return cmp_read_nil(&bu->ctx);
  117|     74|}
bin_unpack_bin_max:
  143|    884|{
  144|    884|    uint32_t bin_size;
  145|    884|    if (!bin_unpack_bin_size(bu, &bin_size) || bin_size > max_data_length) {
  ------------------
  |  Branch (145:9): [True: 46, False: 838]
  |  Branch (145:48): [True: 21, False: 817]
  ------------------
  146|     67|        return false;
  147|     67|    }
  148|       |
  149|    817|    *data_length_ptr = bin_size;
  150|       |
  151|    817|    return bin_unpack_bin_b(bu, data, bin_size);
  152|    884|}
bin_unpack_bin_fixed:
  155|  2.46k|{
  156|  2.46k|    uint32_t bin_size;
  157|  2.46k|    if (!bin_unpack_bin_size(bu, &bin_size) || bin_size != data_length) {
  ------------------
  |  Branch (157:9): [True: 126, False: 2.33k]
  |  Branch (157:48): [True: 42, False: 2.29k]
  ------------------
  158|    168|        return false;
  159|    168|    }
  160|       |
  161|  2.29k|    return bin_unpack_bin_b(bu, data, bin_size);
  162|  2.46k|}
bin_unpack_bin_size:
  165|  3.34k|{
  166|  3.34k|    return cmp_read_bin_size(&bu->ctx, size);
  167|  3.34k|}
bin_unpack_bin_b:
  211|  3.11k|{
  212|  3.11k|    return bu->ctx.read(&bu->ctx, data, length);
  213|  3.11k|}
bin_unpack.c:bin_unpack_init:
   60|  24.3k|{
   61|  24.3k|    bu->mem = mem;
   62|  24.3k|    bu->bytes = buf;
   63|  24.3k|    bu->bytes_size = buf_size;
   64|  24.3k|    cmp_init(&bu->ctx, bu, buf_reader, buf_skipper, null_writer);
   65|  24.3k|}
bin_unpack.c:buf_reader:
   25|   223k|{
   26|   223k|    uint8_t *bytes = (uint8_t *)data;
   27|   223k|    Bin_Unpack *reader = (Bin_Unpack *)ctx->buf;
   28|   223k|    assert(reader != nullptr && reader->bytes != nullptr);
   29|   223k|    if (limit > reader->bytes_size) {
  ------------------
  |  Branch (29:9): [True: 4.72k, False: 219k]
  ------------------
   30|  4.72k|        return false;
   31|  4.72k|    }
   32|   219k|    memcpy(bytes, reader->bytes, limit);
   33|   219k|    reader->bytes += limit;
   34|   219k|    reader->bytes_size -= limit;
   35|   219k|    return true;
   36|   223k|}

get_enc_key:
   66|    214|{
   67|    214|    return key->enc;
   68|    214|}
get_sig_pk:
   71|    140|{
   72|    140|    return key->sig;
   73|    140|}
get_sig_sk:
   81|     70|{
   82|     70|    return key->sig;
   83|     70|}
get_chat_id:
   86|    169|{
   87|    169|    return key->sig;
   88|    169|}
crypto_memzero:
  116|  30.0k|{
  117|  30.0k|#if defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  118|  30.0k|    memzero((uint8_t *)data, length);
  119|       |#else
  120|       |    sodium_memzero(data, length);
  121|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  122|  30.0k|}
crypto_memlock:
  125|  12.3k|{
  126|  12.3k|#if defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  127|  12.3k|    return false;
  128|       |#else
  129|       |
  130|       |    return sodium_mlock(data, length) == 0;
  131|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  132|  12.3k|}
crypto_memunlock:
  135|  24.7k|{
  136|  24.7k|#if defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  137|  24.7k|    return false;
  138|       |#else
  139|       |
  140|       |    return sodium_munlock(data, length) == 0;
  141|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  142|  24.7k|}
pk_equal:
  145|  3.67M|{
  146|  3.67M|#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
  147|       |    // Hope that this is better for the fuzzer
  148|  3.67M|    return memcmp(pk1, pk2, CRYPTO_PUBLIC_KEY_SIZE) == 0;
  ------------------
  |  |   43|  3.67M|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  149|       |#else
  150|       |    return crypto_verify_32(pk1, pk2) == 0;
  151|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  152|  3.67M|}
pk_copy:
  155|  9.45k|{
  156|  9.45k|    memcpy(dest, src, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|  9.45k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  157|  9.45k|}
random_u32:
  194|  2.96k|{
  195|  2.96k|    uint32_t randnum;
  196|  2.96k|    random_bytes(rng, (uint8_t *)&randnum, sizeof(randnum));
  197|  2.96k|    return randnum;
  198|  2.96k|}
random_u64:
  201|  3.49k|{
  202|  3.49k|    uint64_t randnum;
  203|  3.49k|    random_bytes(rng, (uint8_t *)&randnum, sizeof(randnum));
  204|  3.49k|    return randnum;
  205|  3.49k|}
public_key_valid:
  227|    372|{
  228|       |    /* Last bit of key is always zero. */
  229|    372|    return public_key[31] < 128;
  230|    372|}
new_symmetric_key:
  432|  5.23k|{
  433|  5.23k|    random_bytes(rng, key, CRYPTO_SYMMETRIC_KEY_SIZE);
  ------------------
  |  |   58|  5.23k|#define CRYPTO_SYMMETRIC_KEY_SIZE      CRYPTO_SHARED_KEY_SIZE
  |  |  ------------------
  |  |  |  |   53|  5.23k|#define CRYPTO_SHARED_KEY_SIZE         32
  |  |  ------------------
  ------------------
  434|  5.23k|}
crypto_new_keypair:
  439|  9.14k|{
  440|  9.14k|    random_bytes(rng, secret_key, CRYPTO_SECRET_KEY_SIZE);
  ------------------
  |  |   48|  9.14k|#define CRYPTO_SECRET_KEY_SIZE         32
  ------------------
  441|  9.14k|    memzero(public_key, CRYPTO_PUBLIC_KEY_SIZE);  // Make MSAN happy
  ------------------
  |  |   43|  9.14k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  442|  9.14k|    crypto_derive_public_key(public_key, secret_key);
  443|  9.14k|    return 0;
  444|  9.14k|}
crypto_derive_public_key:
  448|  11.5k|{
  449|  11.5k|    crypto_scalarmult_curve25519_base(public_key, secret_key);
  450|  11.5k|}
new_hmac_key:
  453|  5.23k|{
  454|  5.23k|    random_bytes(rng, key, CRYPTO_HMAC_KEY_SIZE);
  ------------------
  |  |  162|  5.23k|#define CRYPTO_HMAC_KEY_SIZE           32
  ------------------
  455|  5.23k|}
os_random:
  518|  1.74k|{
  519|  1.74k|#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
  520|  1.74k|    if ((true)) {
  ------------------
  |  Branch (520:9): [Folded - Ignored]
  ------------------
  521|  1.74k|        return nullptr;
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  522|  1.74k|    }
  523|      0|#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  524|       |    // It is safe to call this function more than once and from different
  525|       |    // threads -- subsequent calls won't have any effects.
  526|      0|    if (sodium_init() == -1) {
  ------------------
  |  Branch (526:9): [True: 0, False: 0]
  ------------------
  527|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  528|      0|    }
  529|      0|    return &os_random_obj;
  530|      0|}
random_bytes:
  533|  26.1k|{
  534|  26.1k|    rng->funcs->random_bytes(rng->obj, bytes, length);
  535|  26.1k|}

pack_extended_public_key:
   16|    444|{
   17|    444|    uint8_t ext_key[EXT_PUBLIC_KEY_SIZE];
   18|    444|    static_assert(sizeof(ext_key) == sizeof(key->enc) + sizeof(key->sig),
  ------------------
  |  |   67|    444|#define static_assert _Static_assert
  ------------------
   19|    444|                  "extended secret key size is not the sum of the encryption and sign secret key sizes");
   20|    444|    memcpy(ext_key, key->enc, sizeof(key->enc));
   21|    444|    memcpy(&ext_key[sizeof(key->enc)], key->sig, sizeof(key->sig));
   22|       |
   23|    444|    return bin_pack_bin(bp, ext_key, sizeof(ext_key));
   24|    444|}
pack_extended_secret_key:
   27|    296|{
   28|    296|    uint8_t ext_key[EXT_SECRET_KEY_SIZE];
   29|    296|    static_assert(sizeof(ext_key) == sizeof(key->enc) + sizeof(key->sig),
  ------------------
  |  |   67|    296|#define static_assert _Static_assert
  ------------------
   30|    296|                  "extended secret key size is not the sum of the encryption and sign secret key sizes");
   31|    296|    memcpy(ext_key, key->enc, sizeof(key->enc));
   32|    296|    memcpy(&ext_key[sizeof(key->enc)], key->sig, sizeof(key->sig));
   33|       |
   34|    296|    const bool result = bin_pack_bin(bp, ext_key, sizeof(ext_key));
   35|    296|    crypto_memzero(ext_key, sizeof(ext_key));
   36|    296|    return result;
   37|    296|}
unpack_extended_public_key:
   40|    677|{
   41|    677|    uint8_t ext_key[EXT_PUBLIC_KEY_SIZE];
   42|       |
   43|    677|    if (!bin_unpack_bin_fixed(bu, ext_key, sizeof(ext_key))) {
  ------------------
  |  Branch (43:9): [True: 51, False: 626]
  ------------------
   44|     51|        return false;
   45|     51|    }
   46|       |
   47|    626|    memcpy(key->enc, ext_key, sizeof(key->enc));
   48|    626|    memcpy(key->sig, &ext_key[sizeof(key->enc)], sizeof(key->sig));
   49|       |
   50|    626|    return true;
   51|    677|}
unpack_extended_secret_key:
   54|    293|{
   55|    293|    uint8_t ext_key[EXT_SECRET_KEY_SIZE];
   56|       |
   57|    293|    if (!bin_unpack_bin_fixed(bu, ext_key, sizeof(ext_key))) {
  ------------------
  |  Branch (57:9): [True: 38, False: 255]
  ------------------
   58|     38|        return false;
   59|     38|    }
   60|       |
   61|    255|    memcpy(key->enc, ext_key, sizeof(key->enc));
   62|    255|    memcpy(key->sig, &ext_key[sizeof(key->enc)], sizeof(key->sig));
   63|    255|    crypto_memzero(ext_key, sizeof(ext_key));
   64|       |
   65|    255|    return true;
   66|    293|}

forwarding_get_dht:
   41|  1.74k|{
   42|  1.74k|    return forwarding->dht;
   43|  1.74k|}
set_callback_forwarded_request:
  344|  3.49k|{
  345|  3.49k|    forwarding->forwarded_request_callback = function;
  346|  3.49k|    forwarding->forwarded_request_callback_object = object;
  347|  3.49k|}
new_forwarding:
  362|  1.74k|{
  363|  1.74k|    if (log == nullptr || mono_time == nullptr || dht == nullptr) {
  ------------------
  |  |   63|  3.49k|#define nullptr NULL
  ------------------
                  if (log == nullptr || mono_time == nullptr || dht == nullptr) {
  ------------------
  |  |   63|  3.49k|#define nullptr NULL
  ------------------
                  if (log == nullptr || mono_time == nullptr || dht == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (363:9): [True: 0, False: 1.74k]
  |  Branch (363:27): [True: 0, False: 1.74k]
  |  Branch (363:51): [True: 0, False: 1.74k]
  ------------------
  364|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  365|      0|    }
  366|       |
  367|  1.74k|    Forwarding *forwarding = (Forwarding *)mem_alloc(mem, sizeof(Forwarding));
  368|       |
  369|  1.74k|    if (forwarding == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (369:9): [True: 0, False: 1.74k]
  ------------------
  370|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  371|      0|    }
  372|       |
  373|  1.74k|    forwarding->log = log;
  374|  1.74k|    forwarding->mem = mem;
  375|  1.74k|    forwarding->rng = rng;
  376|  1.74k|    forwarding->mono_time = mono_time;
  377|  1.74k|    forwarding->dht = dht;
  378|  1.74k|    forwarding->net = dht_get_net(dht);
  379|       |
  380|  1.74k|    networking_registerhandler(forwarding->net, NET_PACKET_FORWARD_REQUEST, &handle_forward_request, forwarding);
  381|  1.74k|    networking_registerhandler(forwarding->net, NET_PACKET_FORWARD_REPLY, &handle_forward_reply, forwarding);
  382|  1.74k|    networking_registerhandler(forwarding->net, NET_PACKET_FORWARDING, &handle_forwarding, forwarding);
  383|       |
  384|  1.74k|    new_hmac_key(forwarding->rng, forwarding->hmac_key);
  385|       |
  386|  1.74k|    return forwarding;
  387|  1.74k|}
kill_forwarding:
  390|  1.74k|{
  391|  1.74k|    if (forwarding == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (391:9): [True: 0, False: 1.74k]
  ------------------
  392|      0|        return;
  393|      0|    }
  394|       |
  395|  1.74k|    networking_registerhandler(forwarding->net, NET_PACKET_FORWARD_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(forwarding->net, NET_PACKET_FORWARD_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  396|  1.74k|    networking_registerhandler(forwarding->net, NET_PACKET_FORWARD_REPLY, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(forwarding->net, NET_PACKET_FORWARD_REPLY, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  397|  1.74k|    networking_registerhandler(forwarding->net, NET_PACKET_FORWARDING, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(forwarding->net, NET_PACKET_FORWARDING, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  398|       |
  399|  1.74k|    crypto_memzero(forwarding->hmac_key, CRYPTO_HMAC_KEY_SIZE);
  ------------------
  |  |  162|  1.74k|#define CRYPTO_HMAC_KEY_SIZE           32
  ------------------
  400|       |
  401|  1.74k|    mem_delete(forwarding->mem, forwarding);
  402|  1.74k|}

friend_conn_get_onion_friendnum:
   95|     62|{
   96|     62|    return fc->onion_friendnum;
   97|     62|}
get_conn:
  201|  1.40k|{
  202|  1.40k|    if (!friendconn_id_valid(fr_c, friendcon_id)) {
  ------------------
  |  Branch (202:9): [True: 1, False: 1.40k]
  ------------------
  203|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  204|      1|    }
  205|       |
  206|  1.40k|    return &fr_c->conns[friendcon_id];
  207|  1.40k|}
getfriend_conn_id_pk:
  214|    308|{
  215|    656|    for (uint32_t i = 0; i < fr_c->num_cons; ++i) {
  ------------------
  |  Branch (215:26): [True: 352, False: 304]
  ------------------
  216|    352|        const Friend_Conn *friend_con = get_conn(fr_c, i);
  217|       |
  218|    352|        if (friend_con != nullptr) {
  ------------------
  |  |   63|    352|#define nullptr NULL
  ------------------
  |  Branch (218:13): [True: 352, False: 0]
  ------------------
  219|    352|            if (pk_equal(friend_con->real_public_key, real_pk)) {
  ------------------
  |  Branch (219:17): [True: 4, False: 348]
  ------------------
  220|      4|                return i;
  221|      4|            }
  222|    352|        }
  223|    352|    }
  224|       |
  225|    304|    return -1;
  226|    308|}
friend_con_connected:
  684|    370|{
  685|    370|    const Friend_Conn *const friend_con = get_conn(fr_c, friendcon_id);
  686|       |
  687|    370|    if (friend_con == nullptr) {
  ------------------
  |  |   63|    370|#define nullptr NULL
  ------------------
  |  Branch (687:9): [True: 0, False: 370]
  ------------------
  688|      0|        return 0;
  689|      0|    }
  690|       |
  691|    370|    return friend_con->status;
  692|    370|}
friend_connection_callbacks:
  736|    308|{
  737|    308|    Friend_Conn *const friend_con = get_conn(fr_c, friendcon_id);
  738|       |
  739|    308|    if (friend_con == nullptr) {
  ------------------
  |  |   63|    308|#define nullptr NULL
  ------------------
  |  Branch (739:9): [True: 0, False: 308]
  ------------------
  740|      0|        return -1;
  741|      0|    }
  742|       |
  743|    308|    if (index >= MAX_FRIEND_CONNECTION_CALLBACKS) {
  ------------------
  |  |   23|    308|#define MAX_FRIEND_CONNECTION_CALLBACKS 2
  ------------------
  |  Branch (743:9): [True: 0, False: 308]
  ------------------
  744|      0|        return -1;
  745|      0|    }
  746|       |
  747|    308|    if (object != nullptr && (status_callback == nullptr || data_callback == nullptr || lossy_data_callback == nullptr)) {
  ------------------
  |  |   63|    616|#define nullptr NULL
  ------------------
                  if (object != nullptr && (status_callback == nullptr || data_callback == nullptr || lossy_data_callback == nullptr)) {
  ------------------
  |  |   63|    492|#define nullptr NULL
  ------------------
                  if (object != nullptr && (status_callback == nullptr || data_callback == nullptr || lossy_data_callback == nullptr)) {
  ------------------
  |  |   63|    492|#define nullptr NULL
  ------------------
                  if (object != nullptr && (status_callback == nullptr || data_callback == nullptr || lossy_data_callback == nullptr)) {
  ------------------
  |  |   63|    246|#define nullptr NULL
  ------------------
  |  Branch (747:9): [True: 246, False: 62]
  |  Branch (747:31): [True: 0, False: 246]
  |  Branch (747:61): [True: 0, False: 246]
  |  Branch (747:89): [True: 0, False: 246]
  ------------------
  748|      0|        LOGGER_ERROR(fr_c->logger, "non-null user data object but null callbacks");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  749|      0|        return -1;
  750|      0|    }
  751|       |
  752|    308|    friend_con->callbacks[index].status_callback = status_callback;
  753|    308|    friend_con->callbacks[index].data_callback = data_callback;
  754|    308|    friend_con->callbacks[index].lossy_data_callback = lossy_data_callback;
  755|       |
  756|    308|    friend_con->callbacks[index].callback_object = object;
  757|    308|    friend_con->callbacks[index].callback_id = number;
  758|       |
  759|    308|    return 0;
  760|    308|}
set_global_status_callback:
  764|  3.49k|{
  765|  3.49k|    if (object != nullptr && global_status_callback == nullptr) {
  ------------------
  |  |   63|  6.98k|#define nullptr NULL
  ------------------
                  if (object != nullptr && global_status_callback == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (765:9): [True: 1.74k, False: 1.74k]
  |  Branch (765:30): [True: 0, False: 1.74k]
  ------------------
  766|      0|        LOGGER_ERROR(fr_c->logger, "non-null user data object but null callback");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  767|      0|        object = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  768|      0|    }
  769|       |
  770|  3.49k|    fr_c->global_status_callback = global_status_callback;
  771|  3.49k|    fr_c->global_status_callback_object = object;
  772|  3.49k|}
new_friend_connection:
  797|    308|{
  798|    308|    int friendcon_id = getfriend_conn_id_pk(fr_c, real_public_key);
  799|       |
  800|    308|    if (friendcon_id != -1) {
  ------------------
  |  Branch (800:9): [True: 4, False: 304]
  ------------------
  801|      4|        ++fr_c->conns[friendcon_id].lock_count;
  802|      4|        return friendcon_id;
  803|      4|    }
  804|       |
  805|    304|    friendcon_id = create_friend_conn(fr_c);
  806|       |
  807|    304|    if (friendcon_id == -1) {
  ------------------
  |  Branch (807:9): [True: 0, False: 304]
  ------------------
  808|      0|        return -1;
  809|      0|    }
  810|       |
  811|    304|    const int32_t onion_friendnum = onion_addfriend(fr_c->onion_c, real_public_key);
  812|       |
  813|    304|    if (onion_friendnum == -1) {
  ------------------
  |  Branch (813:9): [True: 0, False: 304]
  ------------------
  814|      0|        return -1;
  815|      0|    }
  816|       |
  817|    304|    Friend_Conn *const friend_con = &fr_c->conns[friendcon_id];
  818|       |
  819|    304|    friend_con->crypt_connection_id = -1;
  820|    304|    friend_con->status = FRIENDCONN_STATUS_CONNECTING;
  821|    304|    memcpy(friend_con->real_public_key, real_public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|    304|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  822|    304|    friend_con->onion_friendnum = onion_friendnum;
  823|       |
  824|    304|    recv_tcp_relay_handler(fr_c->onion_c, onion_friendnum, &tcp_relay_node_callback, fr_c, friendcon_id);
  825|    304|    onion_dht_pk_callback(fr_c->onion_c, onion_friendnum, &dht_pk_callback, fr_c, friendcon_id);
  826|       |
  827|    304|    return friendcon_id;
  828|    304|}
kill_friend_connection:
  836|    309|{
  837|    309|    Friend_Conn *const friend_con = get_conn(fr_c, friendcon_id);
  838|       |
  839|    309|    if (friend_con == nullptr) {
  ------------------
  |  |   63|    309|#define nullptr NULL
  ------------------
  |  Branch (839:9): [True: 1, False: 308]
  ------------------
  840|      1|        return -1;
  841|      1|    }
  842|       |
  843|    308|    if (friend_con->lock_count > 0) {
  ------------------
  |  Branch (843:9): [True: 4, False: 304]
  ------------------
  844|      4|        --friend_con->lock_count;
  845|      4|        return 0;
  846|      4|    }
  847|       |
  848|    304|    onion_delfriend(fr_c->onion_c, friend_con->onion_friendnum);
  849|    304|    crypto_kill(fr_c->net_crypto, friend_con->crypt_connection_id);
  850|       |
  851|    304|    if (friend_con->dht_lock_token > 0) {
  ------------------
  |  Branch (851:9): [True: 0, False: 304]
  ------------------
  852|      0|        dht_delfriend(fr_c->dht, friend_con->dht_temp_pk, friend_con->dht_lock_token);
  853|      0|        friend_con->dht_lock_token = 0;
  854|      0|    }
  855|       |
  856|    304|    return wipe_friend_conn(fr_c, friendcon_id);
  857|    308|}
set_friend_request_callback:
  864|  1.74k|{
  865|  1.74k|    fr_c->fr_request_callback = fr_request_callback;
  866|  1.74k|    fr_c->fr_request_object = object;
  867|  1.74k|    oniondata_registerhandler(fr_c->onion_c, CRYPTO_PACKET_FRIEND_REQ, fr_request_callback, object);
  ------------------
  |  |   66|  1.74k|#define CRYPTO_PACKET_FRIEND_REQ    32  // Friend request crypto packet ID.
  ------------------
  868|  1.74k|}
new_friend_connections:
  918|  1.74k|{
  919|  1.74k|    if (onion_c == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (919:9): [True: 0, False: 1.74k]
  ------------------
  920|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  921|      0|    }
  922|       |
  923|  1.74k|    Friend_Connections *const temp = (Friend_Connections *)mem_alloc(mem, sizeof(Friend_Connections));
  924|       |
  925|  1.74k|    if (temp == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (925:9): [True: 0, False: 1.74k]
  ------------------
  926|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  927|      0|    }
  928|       |
  929|  1.74k|    temp->local_discovery_enabled = local_discovery_enabled;
  930|       |
  931|  1.74k|    if (temp->local_discovery_enabled) {
  ------------------
  |  Branch (931:9): [True: 1.74k, False: 0]
  ------------------
  932|  1.74k|        temp->broadcast = lan_discovery_init(mem, ns);
  933|       |
  934|  1.74k|        if (temp->broadcast == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (934:13): [True: 0, False: 1.74k]
  ------------------
  935|      0|            LOGGER_ERROR(logger, "could not initialise LAN discovery");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  936|      0|            temp->local_discovery_enabled = false;
  937|      0|        }
  938|  1.74k|    }
  939|       |
  940|  1.74k|    temp->mono_time = mono_time;
  941|  1.74k|    temp->mem = mem;
  942|  1.74k|    temp->logger = logger;
  943|  1.74k|    temp->dht = onion_get_dht(onion_c);
  944|  1.74k|    temp->net_crypto = onion_get_net_crypto(onion_c);
  945|  1.74k|    temp->onion_c = onion_c;
  946|       |    // Don't include default port in port range
  947|  1.74k|    temp->next_lan_port = TOX_PORTRANGE_FROM + 1;
  ------------------
  |  |  162|  1.74k|#define TOX_PORTRANGE_FROM 33445
  ------------------
  948|       |
  949|  1.74k|    new_connection_handler(temp->net_crypto, &handle_new_connections, temp);
  950|       |
  951|  1.74k|    return temp;
  952|  1.74k|}
kill_friend_connections:
 1032|  1.74k|{
 1033|  1.74k|    if (fr_c == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (1033:9): [True: 0, False: 1.74k]
  ------------------
 1034|      0|        return;
 1035|      0|    }
 1036|       |
 1037|  1.99k|    for (uint32_t i = 0; i < fr_c->num_cons; ++i) {
  ------------------
  |  Branch (1037:26): [True: 247, False: 1.74k]
  ------------------
 1038|    247|        kill_friend_connection(fr_c, i);
 1039|    247|    }
 1040|       |
 1041|       |    // there might be allocated NONE connections
 1042|  1.74k|    if (fr_c->conns != nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (1042:9): [True: 0, False: 1.74k]
  ------------------
 1043|      0|        mem_delete(fr_c->mem, fr_c->conns);
 1044|      0|    }
 1045|       |
 1046|  1.74k|    lan_discovery_kill(fr_c->broadcast);
 1047|  1.74k|    mem_delete(fr_c->mem, fr_c);
 1048|  1.74k|}
friend_connection.c:friendconn_id_valid:
  115|  1.70k|{
  116|  1.70k|    return (unsigned int)friendcon_id < fr_c->num_cons &&
  ------------------
  |  Branch (116:12): [True: 1.70k, False: 0]
  ------------------
  117|  1.70k|           fr_c->conns != nullptr &&
  ------------------
  |  |   63|  3.41k|#define nullptr NULL
  ------------------
  |  Branch (117:12): [True: 1.70k, False: 0]
  ------------------
  118|  1.70k|           fr_c->conns[friendcon_id].status != FRIENDCONN_STATUS_NONE;
  ------------------
  |  Branch (118:12): [True: 1.70k, False: 1]
  ------------------
  119|  1.70k|}
friend_connection.c:create_friend_conn:
  152|    304|{
  153|    650|    for (uint32_t i = 0; i < fr_c->num_cons; ++i) {
  ------------------
  |  Branch (153:26): [True: 346, False: 304]
  ------------------
  154|    346|        if (fr_c->conns[i].status == FRIENDCONN_STATUS_NONE) {
  ------------------
  |  Branch (154:13): [True: 0, False: 346]
  ------------------
  155|      0|            return i;
  156|      0|        }
  157|    346|    }
  158|       |
  159|    304|    if (!realloc_friendconns(fr_c, fr_c->num_cons + 1)) {
  ------------------
  |  Branch (159:9): [True: 0, False: 304]
  ------------------
  160|      0|        return -1;
  161|      0|    }
  162|       |
  163|    304|    const int id = fr_c->num_cons;
  164|    304|    ++fr_c->num_cons;
  165|    304|    fr_c->conns[id] = empty_friend_conn;
  166|       |
  167|    304|    return id;
  168|    304|}
friend_connection.c:realloc_friendconns:
  128|    448|{
  129|    448|    if (num == 0) {
  ------------------
  |  Branch (129:9): [True: 141, False: 307]
  ------------------
  130|    141|        mem_delete(fr_c->mem, fr_c->conns);
  131|    141|        fr_c->conns = nullptr;
  ------------------
  |  |   63|    141|#define nullptr NULL
  ------------------
  132|    141|        return true;
  133|    141|    }
  134|       |
  135|    307|    Friend_Conn *newgroup_cons = (Friend_Conn *)mem_vrealloc(fr_c->mem, fr_c->conns, num, sizeof(Friend_Conn));
  136|       |
  137|    307|    if (newgroup_cons == nullptr) {
  ------------------
  |  |   63|    307|#define nullptr NULL
  ------------------
  |  Branch (137:9): [True: 0, False: 307]
  ------------------
  138|      0|        return false;
  139|      0|    }
  140|       |
  141|    307|    fr_c->conns = newgroup_cons;
  142|    307|    return true;
  143|    307|}
friend_connection.c:wipe_friend_conn:
  177|    304|{
  178|    304|    if (!friendconn_id_valid(fr_c, friendcon_id)) {
  ------------------
  |  Branch (178:9): [True: 0, False: 304]
  ------------------
  179|      0|        return -1;
  180|      0|    }
  181|       |
  182|    304|    fr_c->conns[friendcon_id] = empty_friend_conn;
  183|       |
  184|    304|    uint32_t i;
  185|       |
  186|    608|    for (i = fr_c->num_cons; i != 0; --i) {
  ------------------
  |  Branch (186:30): [True: 467, False: 141]
  ------------------
  187|    467|        if (fr_c->conns[i - 1].status != FRIENDCONN_STATUS_NONE) {
  ------------------
  |  Branch (187:13): [True: 163, False: 304]
  ------------------
  188|    163|            break;
  189|    163|        }
  190|    467|    }
  191|       |
  192|    304|    if (fr_c->num_cons != i) {
  ------------------
  |  Branch (192:9): [True: 144, False: 160]
  ------------------
  193|    144|        fr_c->num_cons = i;
  194|    144|        realloc_friendconns(fr_c, fr_c->num_cons);
  195|    144|    }
  196|       |
  197|    304|    return 0;
  198|    304|}

set_nospam:
   54|  2.29k|{
   55|  2.29k|    fr->nospam = num;
   56|  2.29k|}
get_nospam:
   59|  1.22k|{
   60|  1.22k|    return fr->nospam;
   61|  1.22k|}
callback_friendrequest:
   65|  1.74k|{
   66|  1.74k|    fr->handle_friendrequest = function;
   67|  1.74k|    fr->handle_friendrequest_isset = 1;
   68|  1.74k|    fr->handle_friendrequest_object = object;
   69|  1.74k|}
set_filter_function:
   75|  1.74k|{
   76|  1.74k|    fr->filter_function = function;
   77|  1.74k|    fr->filter_function_userdata = userdata;
   78|  1.74k|}
remove_request_received:
  115|     62|{
  116|  2.04k|    for (uint32_t i = 0; i < MAX_RECEIVED_STORED; ++i) {
  ------------------
  |  |   31|  2.04k|#define MAX_RECEIVED_STORED 32
  ------------------
  |  Branch (116:26): [True: 1.98k, False: 62]
  ------------------
  117|  1.98k|        if (pk_equal(fr->received.requests[i], real_pk)) {
  ------------------
  |  Branch (117:13): [True: 0, False: 1.98k]
  ------------------
  118|      0|            crypto_memzero(fr->received.requests[i], CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      0|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  119|      0|            return 0;
  120|      0|        }
  121|  1.98k|    }
  122|       |
  123|     62|    return -1;
  124|     62|}
friendreq_init:
  169|  1.74k|{
  170|  1.74k|    set_friend_request_callback(fr_c, &friendreq_handlepacket, fr);
  171|  1.74k|}
friendreq_new:
  174|  1.74k|{
  175|  1.74k|    Friend_Requests *fr = (Friend_Requests *)mem_alloc(mem, sizeof(Friend_Requests));
  176|       |
  177|  1.74k|    if (fr == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (177:9): [True: 0, False: 1.74k]
  ------------------
  178|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  179|      0|    }
  180|       |
  181|  1.74k|    fr->mem = mem;
  182|       |
  183|  1.74k|    return fr;
  184|  1.74k|}
friendreq_kill:
  187|  1.74k|{
  188|  1.74k|    if (fr == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (188:9): [True: 0, False: 1.74k]
  ------------------
  189|      0|        return;
  190|      0|    }
  191|       |
  192|  1.74k|    mem_delete(fr->mem, fr);
  193|  1.74k|}

del_groupchat:
 1410|  1.30k|{
 1411|  1.30k|    Group_c *g = get_group_c(g_c, groupnumber);
 1412|       |
 1413|  1.30k|    if (g == nullptr) {
  ------------------
  |  |   63|  1.30k|#define nullptr NULL
  ------------------
  |  Branch (1413:9): [True: 0, False: 1.30k]
  ------------------
 1414|      0|        return false;
 1415|      0|    }
 1416|       |
 1417|  1.30k|    group_leave(g_c, groupnumber, leave_permanently);
 1418|       |
 1419|  22.2k|    for (uint32_t i = 0; i < MAX_GROUP_CONNECTIONS; ++i) {
  ------------------
  |  |   56|  22.2k|#define MAX_GROUP_CONNECTIONS 16
  ------------------
  |  Branch (1419:26): [True: 20.9k, False: 1.30k]
  ------------------
 1420|  20.9k|        if (g->connections[i].type == GROUPCHAT_CONNECTION_NONE) {
  ------------------
  |  Branch (1420:13): [True: 20.9k, False: 0]
  ------------------
 1421|  20.9k|            continue;
 1422|  20.9k|        }
 1423|       |
 1424|      0|        g->connections[i].type = GROUPCHAT_CONNECTION_NONE;
 1425|      0|        kill_friend_connection(g_c->fr_c, g->connections[i].number);
 1426|      0|    }
 1427|       |
 1428|  2.61k|    for (uint32_t i = 0; i < g->numpeers; ++i) {
  ------------------
  |  Branch (1428:26): [True: 1.30k, False: 1.30k]
  ------------------
 1429|  1.30k|        if (g->peer_on_leave != nullptr) {
  ------------------
  |  |   63|  1.30k|#define nullptr NULL
  ------------------
  |  Branch (1429:13): [True: 0, False: 1.30k]
  ------------------
 1430|      0|            g->peer_on_leave(g->object, groupnumber, g->group[i].object);
 1431|      0|        }
 1432|  1.30k|    }
 1433|       |
 1434|  1.30k|    if (g->group_on_delete != nullptr) {
  ------------------
  |  |   63|  1.30k|#define nullptr NULL
  ------------------
  |  Branch (1434:9): [True: 0, False: 1.30k]
  ------------------
 1435|      0|        g->group_on_delete(g->object, groupnumber);
 1436|      0|    }
 1437|       |
 1438|  1.30k|    return wipe_group_chat(g_c, groupnumber);
 1439|  1.30k|}
g_callback_group_invite:
 1884|  1.22k|{
 1885|  1.22k|    g_c->invite_callback = function;
 1886|  1.22k|}
g_callback_group_connected:
 1890|  1.22k|{
 1891|  1.22k|    g_c->connected_callback = function;
 1892|  1.22k|}
g_callback_group_message:
 1896|  1.22k|{
 1897|  1.22k|    g_c->message_callback = function;
 1898|  1.22k|}
g_callback_peer_name:
 1905|  1.22k|{
 1906|  1.22k|    g_c->peer_name_callback = function;
 1907|  1.22k|}
g_callback_peer_list_changed:
 1914|  1.22k|{
 1915|  1.22k|    g_c->peer_list_changed_callback = function;
 1916|  1.22k|}
g_callback_group_title:
 1920|  1.22k|{
 1921|  1.22k|    g_c->title_callback = function;
 1922|  1.22k|}
conferences_size:
 3586|  2.44k|{
 3587|  2.44k|    return 2 * sizeof(uint32_t) + conferences_section_size(g_c);
 3588|  2.44k|}
conferences_save:
 3591|  1.22k|{
 3592|  1.22k|    const uint32_t len = conferences_section_size(g_c);
 3593|  1.22k|    data = state_write_section_header(data, STATE_COOKIE_TYPE, len, STATE_TYPE_CONFERENCES);
  ------------------
  |  |   29|  1.22k|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 3594|       |
 3595|  2.17k|    for (uint16_t i = 0; i < g_c->num_chats; ++i) {
  ------------------
  |  Branch (3595:26): [True: 951, False: 1.22k]
  ------------------
 3596|    951|        const Group_c *g = get_group_c(g_c, i);
 3597|       |
 3598|    951|        if (g == nullptr || g->status != GROUPCHAT_STATUS_CONNECTED) {
  ------------------
  |  |   63|  1.90k|#define nullptr NULL
  ------------------
  |  Branch (3598:13): [True: 0, False: 951]
  |  Branch (3598:29): [True: 0, False: 951]
  ------------------
 3599|      0|            continue;
 3600|      0|        }
 3601|       |
 3602|    951|        data = save_conf(g, data);
 3603|    951|    }
 3604|       |
 3605|  1.22k|    return data;
 3606|  1.22k|}
conferences_load_state_section:
 3798|    687|{
 3799|    687|    if (type != STATE_TYPE_CONFERENCES) {
  ------------------
  |  Branch (3799:9): [True: 382, False: 305]
  ------------------
 3800|    382|        return false;
 3801|    382|    }
 3802|       |
 3803|    305|    *status = load_conferences(g_c, data, length);
 3804|    305|    return true;
 3805|    687|}
new_groupchats:
 3809|  1.74k|{
 3810|  1.74k|    if (m == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (3810:9): [True: 0, False: 1.74k]
  ------------------
 3811|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3812|      0|    }
 3813|       |
 3814|  1.74k|    Group_Chats *temp = (Group_Chats *)mem_alloc(mem, sizeof(Group_Chats));
 3815|       |
 3816|  1.74k|    if (temp == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (3816:9): [True: 0, False: 1.74k]
  ------------------
 3817|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3818|      0|    }
 3819|       |
 3820|  1.74k|    temp->mem = mem;
 3821|  1.74k|    temp->mono_time = mono_time;
 3822|  1.74k|    temp->m = m;
 3823|  1.74k|    temp->fr_c = m->fr_c;
 3824|  1.74k|    m_callback_conference_invite(m, &handle_friend_invite_packet);
 3825|       |
 3826|  1.74k|    set_global_status_callback(m->fr_c, &g_handle_any_status, temp);
 3827|       |
 3828|  1.74k|    return temp;
 3829|  1.74k|}
kill_groupchats:
 3859|  1.74k|{
 3860|  1.74k|    if (g_c == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (3860:9): [True: 0, False: 1.74k]
  ------------------
 3861|      0|        return;
 3862|      0|    }
 3863|       |
 3864|  3.05k|    for (uint16_t i = 0; i < g_c->num_chats; ++i) {
  ------------------
  |  Branch (3864:26): [True: 1.30k, False: 1.74k]
  ------------------
 3865|  1.30k|        del_groupchat(g_c, i, false);
 3866|  1.30k|    }
 3867|       |
 3868|  1.74k|    m_callback_conference_invite(g_c->m, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
 3869|  1.74k|    set_global_status_callback(g_c->m->fr_c, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  set_global_status_callback(g_c->m->fr_c, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
 3870|  1.74k|    g_c->m->conferences_object = nullptr;
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
 3871|  1.74k|    mem_delete(g_c->mem, g_c);
 3872|  1.74k|}
group.c:create_group_chat:
  287|  2.79k|{
  288|   132k|    for (uint16_t i = 0; i < g_c->num_chats; ++i) {
  ------------------
  |  Branch (288:26): [True: 129k, False: 2.79k]
  ------------------
  289|   129k|        if (g_c->chats[i].status == GROUPCHAT_STATUS_NONE) {
  ------------------
  |  Branch (289:13): [True: 0, False: 129k]
  ------------------
  290|      0|            return i;
  291|      0|        }
  292|   129k|    }
  293|       |
  294|  2.79k|    if (realloc_conferences(g_c, g_c->num_chats + 1)) {
  ------------------
  |  Branch (294:9): [True: 2.79k, False: 0]
  ------------------
  295|  2.79k|        const uint16_t id = g_c->num_chats;
  296|  2.79k|        ++g_c->num_chats;
  297|  2.79k|        setup_conference(&g_c->chats[id]);
  298|  2.79k|        return id;
  299|  2.79k|    }
  300|       |
  301|      0|    return -1;
  302|  2.79k|}
group.c:realloc_conferences:
  256|  2.92k|{
  257|  2.92k|    if (num == 0) {
  ------------------
  |  Branch (257:9): [True: 96, False: 2.82k]
  ------------------
  258|     96|        mem_delete(g_c->mem, g_c->chats);
  259|     96|        g_c->chats = nullptr;
  ------------------
  |  |   63|     96|#define nullptr NULL
  ------------------
  260|     96|        return true;
  261|     96|    }
  262|       |
  263|  2.82k|    Group_c *newgroup_chats = (Group_c *)mem_vrealloc(g_c->mem, g_c->chats, num, sizeof(Group_c));
  264|       |
  265|  2.82k|    if (newgroup_chats == nullptr) {
  ------------------
  |  |   63|  2.82k|#define nullptr NULL
  ------------------
  |  Branch (265:9): [True: 0, False: 2.82k]
  ------------------
  266|      0|        return false;
  267|      0|    }
  268|       |
  269|  2.82k|    g_c->chats = newgroup_chats;
  270|  2.82k|    return true;
  271|  2.82k|}
group.c:setup_conference:
  275|  5.59k|{
  276|  5.59k|    *g = empty_group_c;
  277|  5.59k|    g->maxfrozen = MAX_FROZEN_DEFAULT;
  ------------------
  |  |   61|  5.59k|#define MAX_FROZEN_DEFAULT 128
  ------------------
  278|  5.59k|}
group.c:addpeer:
  801|  2.75k|{
  802|  2.75k|    Group_c *g = get_group_c(g_c, groupnumber);
  803|       |
  804|  2.75k|    if (g == nullptr) {
  ------------------
  |  |   63|  2.75k|#define nullptr NULL
  ------------------
  |  Branch (804:9): [True: 0, False: 2.75k]
  ------------------
  805|      0|        return -1;
  806|      0|    }
  807|       |
  808|  2.75k|    const int peer_index = fresh ?
  ------------------
  |  Branch (808:28): [True: 2.75k, False: 0]
  ------------------
  809|  2.75k|                           note_peer_active(g_c, groupnumber, peer_number, userdata) :
  810|  2.75k|                           get_peer_index(g, peer_number);
  811|       |
  812|  2.75k|    if (peer_index != -1) {
  ------------------
  |  Branch (812:9): [True: 40, False: 2.71k]
  ------------------
  813|     40|        if (!pk_equal(g->group[peer_index].real_pk, real_pk)) {
  ------------------
  |  Branch (813:13): [True: 6, False: 34]
  ------------------
  814|      6|            LOGGER_ERROR(g_c->m->log, "peer public key is incorrect for peer %d", peer_number);
  ------------------
  |  |   87|      6|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      6|    do {                                                                         \
  |  |  |  |   77|      6|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     12|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      6|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      6|        }                                                                        \
  |  |  |  |   80|      6|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  815|      6|            return -1;
  816|      6|        }
  817|       |
  818|     34|        if (fresh || !g->group[peer_index].temp_pk_updated) {
  ------------------
  |  Branch (818:13): [True: 34, False: 0]
  |  Branch (818:22): [True: 0, False: 0]
  ------------------
  819|     34|            pk_copy(g->group[peer_index].temp_pk, temp_pk);
  820|     34|            g->group[peer_index].temp_pk_updated = true;
  821|     34|        }
  822|       |
  823|     34|        return peer_index;
  824|     40|    }
  825|       |
  826|  2.71k|    if (!fresh) {
  ------------------
  |  Branch (826:9): [True: 0, False: 2.71k]
  ------------------
  827|      0|        const int frozen_index = get_frozen_index(g, peer_number);
  828|       |
  829|      0|        if (frozen_index != -1) {
  ------------------
  |  Branch (829:13): [True: 0, False: 0]
  ------------------
  830|      0|            if (!pk_equal(g->frozen[frozen_index].real_pk, real_pk)) {
  ------------------
  |  Branch (830:17): [True: 0, False: 0]
  ------------------
  831|      0|                return -1;
  832|      0|            }
  833|       |
  834|      0|            pk_copy(g->frozen[frozen_index].temp_pk, temp_pk);
  835|       |
  836|      0|            return -1;
  837|      0|        }
  838|      0|    }
  839|       |
  840|  2.71k|    delete_any_peer_with_pk(g_c, groupnumber, real_pk, userdata);
  841|       |
  842|  2.71k|    Group_Peer *temp = (Group_Peer *)mem_vrealloc(g_c->mem, g->group, g->numpeers + 1, sizeof(Group_Peer));
  843|       |
  844|  2.71k|    if (temp == nullptr) {
  ------------------
  |  |   63|  2.71k|#define nullptr NULL
  ------------------
  |  Branch (844:9): [True: 0, False: 2.71k]
  ------------------
  845|      0|        return -1;
  846|      0|    }
  847|       |
  848|  2.71k|    temp[g->numpeers] = empty_group_peer;
  849|  2.71k|    g->group = temp;
  850|       |
  851|  2.71k|    const uint32_t new_index = g->numpeers;
  852|       |
  853|  2.71k|    pk_copy(g->group[new_index].real_pk, real_pk);
  854|  2.71k|    pk_copy(g->group[new_index].temp_pk, temp_pk);
  855|  2.71k|    g->group[new_index].temp_pk_updated = true;
  856|  2.71k|    g->group[new_index].peer_number = peer_number;
  857|  2.71k|    g->group[new_index].last_active = mono_time_get(g_c->mono_time);
  858|  2.71k|    g->group[new_index].is_friend = getfriend_id(g_c->m, real_pk) != -1;
  859|  2.71k|    ++g->numpeers;
  860|       |
  861|  2.71k|    add_to_closest(g, real_pk, temp_pk);
  862|       |
  863|  2.71k|    if (do_gc_callback && g_c->peer_list_changed_callback != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (863:9): [True: 0, False: 2.71k]
  |  Branch (863:27): [True: 0, False: 0]
  ------------------
  864|      0|        g_c->peer_list_changed_callback(g_c->m, groupnumber, userdata);
  865|      0|    }
  866|       |
  867|  2.71k|    if (g->peer_on_join != nullptr) {
  ------------------
  |  |   63|  2.71k|#define nullptr NULL
  ------------------
  |  Branch (867:9): [True: 0, False: 2.71k]
  ------------------
  868|      0|        g->peer_on_join(g->object, groupnumber, new_index);
  869|      0|    }
  870|       |
  871|  2.71k|    return new_index;
  872|  2.71k|}
group.c:note_peer_active:
  707|  2.75k|{
  708|  2.75k|    Group_c *g = get_group_c(g_c, groupnumber);
  709|       |
  710|  2.75k|    if (g == nullptr) {
  ------------------
  |  |   63|  2.75k|#define nullptr NULL
  ------------------
  |  Branch (710:9): [True: 0, False: 2.75k]
  ------------------
  711|      0|        return -1;
  712|      0|    }
  713|       |
  714|  2.75k|    const int peer_index = get_peer_index(g, peer_number);
  715|       |
  716|  2.75k|    if (peer_index != -1) {
  ------------------
  |  Branch (716:9): [True: 0, False: 2.75k]
  ------------------
  717|      0|        g->group[peer_index].last_active = mono_time_get(g_c->mono_time);
  718|      0|        return peer_index;
  719|      0|    }
  720|       |
  721|  2.75k|    const int frozen_index = get_frozen_index(g, peer_number);
  722|       |
  723|  2.75k|    if (frozen_index == -1) {
  ------------------
  |  Branch (723:9): [True: 2.71k, False: 40]
  ------------------
  724|  2.71k|        return -1;
  725|  2.71k|    }
  726|       |
  727|       |    /* Now thaw the peer */
  728|       |
  729|     40|    Group_Peer *temp = (Group_Peer *)mem_vrealloc(g_c->mem, g->group, g->numpeers + 1, sizeof(Group_Peer));
  730|       |
  731|     40|    if (temp == nullptr) {
  ------------------
  |  |   63|     40|#define nullptr NULL
  ------------------
  |  Branch (731:9): [True: 0, False: 40]
  ------------------
  732|      0|        return -1;
  733|      0|    }
  734|       |
  735|     40|    const uint32_t thawed_index = g->numpeers;
  736|       |
  737|     40|    g->group = temp;
  738|     40|    g->group[thawed_index] = g->frozen[frozen_index];
  739|     40|    g->group[thawed_index].temp_pk_updated = false;
  740|     40|    g->group[thawed_index].last_active = mono_time_get(g_c->mono_time);
  741|       |
  742|     40|    add_to_closest(g, g->group[thawed_index].real_pk, g->group[thawed_index].temp_pk);
  743|       |
  744|     40|    ++g->numpeers;
  745|       |
  746|     40|    delete_frozen(g_c->mem, g, frozen_index);
  747|       |
  748|     40|    if (g_c->peer_list_changed_callback != nullptr) {
  ------------------
  |  |   63|     40|#define nullptr NULL
  ------------------
  |  Branch (748:9): [True: 0, False: 40]
  ------------------
  749|      0|        g_c->peer_list_changed_callback(g_c->m, groupnumber, userdata);
  750|      0|    }
  751|       |
  752|     40|    if (g->peer_on_join != nullptr) {
  ------------------
  |  |   63|     40|#define nullptr NULL
  ------------------
  |  Branch (752:9): [True: 0, False: 40]
  ------------------
  753|      0|        g->peer_on_join(g->object, groupnumber, thawed_index);
  754|      0|    }
  755|       |
  756|     40|    g->need_send_name = true;
  757|       |
  758|     40|    return thawed_index;
  759|     40|}
group.c:delete_frozen:
  673|     70|{
  674|     70|    if (frozen_index >= g->numfrozen) {
  ------------------
  |  Branch (674:9): [True: 0, False: 70]
  ------------------
  675|      0|        return false;
  676|      0|    }
  677|       |
  678|     70|    --g->numfrozen;
  679|       |
  680|     70|    if (g->numfrozen == 0) {
  ------------------
  |  Branch (680:9): [True: 56, False: 14]
  ------------------
  681|     56|        mem_delete(mem, g->frozen);
  682|     56|        g->frozen = nullptr;
  ------------------
  |  |   63|     56|#define nullptr NULL
  ------------------
  683|     56|    } else {
  684|     14|        if (g->numfrozen != frozen_index) {
  ------------------
  |  Branch (684:13): [True: 12, False: 2]
  ------------------
  685|     12|            g->frozen[frozen_index] = g->frozen[g->numfrozen];
  686|     12|        }
  687|       |
  688|     14|        Group_Peer *const frozen_temp = (Group_Peer *)mem_vrealloc(mem, g->frozen, g->numfrozen, sizeof(Group_Peer));
  689|       |
  690|     14|        if (frozen_temp == nullptr) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (690:13): [True: 0, False: 14]
  ------------------
  691|      0|            return false;
  692|      0|        }
  693|       |
  694|     14|        g->frozen = frozen_temp;
  695|     14|    }
  696|       |
  697|     70|    return true;
  698|     70|}
group.c:get_peer_index:
  424|  2.75k|{
  425|  2.75k|    for (uint32_t i = 0; i < g->numpeers; ++i) {
  ------------------
  |  Branch (425:26): [True: 0, False: 2.75k]
  ------------------
  426|      0|        if (g->group[i].peer_number == peer_number) {
  ------------------
  |  Branch (426:13): [True: 0, False: 0]
  ------------------
  427|      0|            return i;
  428|      0|        }
  429|      0|    }
  430|       |
  431|  2.75k|    return -1;
  432|  2.75k|}
group.c:get_frozen_index:
  661|  2.75k|{
  662|  3.01k|    for (uint32_t i = 0; i < g->numfrozen; ++i) {
  ------------------
  |  Branch (662:26): [True: 301, False: 2.71k]
  ------------------
  663|    301|        if (g->frozen[i].peer_number == peer_number) {
  ------------------
  |  Branch (663:13): [True: 40, False: 261]
  ------------------
  664|     40|            return i;
  665|     40|        }
  666|    301|    }
  667|       |
  668|  2.71k|    return -1;
  669|  2.75k|}
group.c:delete_any_peer_with_pk:
  766|  2.71k|{
  767|  2.71k|    Group_c *g = get_group_c(g_c, groupnumber);
  768|       |
  769|  2.71k|    if (g == nullptr) {
  ------------------
  |  |   63|  2.71k|#define nullptr NULL
  ------------------
  |  Branch (769:9): [True: 0, False: 2.71k]
  ------------------
  770|      0|        return;
  771|      0|    }
  772|       |
  773|  2.71k|    const int peer_index = peer_in_group(g, real_pk);
  774|       |
  775|  2.71k|    if (peer_index >= 0) {
  ------------------
  |  Branch (775:9): [True: 0, False: 2.71k]
  ------------------
  776|      0|        delpeer(g_c, groupnumber, peer_index, userdata);
  777|      0|    }
  778|       |
  779|  2.71k|    const int frozen_index = frozen_in_group(g, real_pk);
  780|       |
  781|  2.71k|    if (frozen_index >= 0) {
  ------------------
  |  Branch (781:9): [True: 30, False: 2.68k]
  ------------------
  782|     30|        delete_frozen(g_c->mem, g, frozen_index);
  783|     30|    }
  784|  2.71k|}
group.c:peer_in_group:
  361|  2.71k|{
  362|  2.71k|    for (uint32_t i = 0; i < g->numpeers; ++i) {
  ------------------
  |  Branch (362:26): [True: 0, False: 2.71k]
  ------------------
  363|      0|        if (pk_equal(g->group[i].real_pk, real_pk)) {
  ------------------
  |  Branch (363:13): [True: 0, False: 0]
  ------------------
  364|      0|            return i;
  365|      0|        }
  366|      0|    }
  367|       |
  368|  2.71k|    return -1;
  369|  2.71k|}
group.c:frozen_in_group:
  373|  2.71k|{
  374|  2.84k|    for (uint32_t i = 0; i < g->numfrozen; ++i) {
  ------------------
  |  Branch (374:26): [True: 159, False: 2.68k]
  ------------------
  375|    159|        if (pk_equal(g->frozen[i].real_pk, real_pk)) {
  ------------------
  |  Branch (375:13): [True: 30, False: 129]
  ------------------
  376|     30|            return i;
  377|     30|        }
  378|    159|    }
  379|       |
  380|  2.68k|    return -1;
  381|  2.71k|}
group.c:add_to_closest:
  456|  2.75k|{
  457|  2.75k|    if (pk_equal(g->real_pk, real_pk)) {
  ------------------
  |  Branch (457:9): [True: 2.74k, False: 6]
  ------------------
  458|  2.74k|        return false;
  459|  2.74k|    }
  460|       |
  461|      6|    unsigned int index = DESIRED_CLOSEST;
  ------------------
  |  |   55|      6|#define DESIRED_CLOSEST 4
  ------------------
  462|       |
  463|     30|    for (unsigned int i = 0; i < DESIRED_CLOSEST; ++i) {
  ------------------
  |  |   55|     30|#define DESIRED_CLOSEST 4
  ------------------
  |  Branch (463:30): [True: 24, False: 6]
  ------------------
  464|     24|        if (g->closest_peers[i].active && pk_equal(real_pk, g->closest_peers[i].real_pk)) {
  ------------------
  |  Branch (464:13): [True: 0, False: 24]
  |  Branch (464:43): [True: 0, False: 0]
  ------------------
  465|      0|            return true;
  466|      0|        }
  467|     24|    }
  468|       |
  469|      6|    for (unsigned int i = 0; i < DESIRED_CLOSEST; ++i) {
  ------------------
  |  |   55|      6|#define DESIRED_CLOSEST 4
  ------------------
  |  Branch (469:30): [True: 6, False: 0]
  ------------------
  470|      6|        if (!g->closest_peers[i].active) {
  ------------------
  |  Branch (470:13): [True: 6, False: 0]
  ------------------
  471|      6|            index = i;
  472|      6|            break;
  473|      6|        }
  474|      6|    }
  475|       |
  476|      6|    if (index == DESIRED_CLOSEST) {
  ------------------
  |  |   55|      6|#define DESIRED_CLOSEST 4
  ------------------
  |  Branch (476:9): [True: 0, False: 6]
  ------------------
  477|      0|        uint64_t comp_val = calculate_comp_value(g->real_pk, real_pk);
  478|      0|        uint64_t comp_d = 0;
  479|       |
  480|      0|        for (unsigned int i = 0; i < (DESIRED_CLOSEST / 2); ++i) {
  ------------------
  |  |   55|      0|#define DESIRED_CLOSEST 4
  ------------------
  |  Branch (480:34): [True: 0, False: 0]
  ------------------
  481|      0|            const uint64_t comp = calculate_comp_value(g->real_pk, g->closest_peers[i].real_pk);
  482|       |
  483|      0|            if (comp > comp_val && comp > comp_d) {
  ------------------
  |  Branch (483:17): [True: 0, False: 0]
  |  Branch (483:36): [True: 0, False: 0]
  ------------------
  484|      0|                index = i;
  485|      0|                comp_d = comp;
  486|      0|            }
  487|      0|        }
  488|       |
  489|      0|        comp_val = calculate_comp_value(real_pk, g->real_pk);
  490|       |
  491|      0|        for (unsigned int i = DESIRED_CLOSEST / 2; i < DESIRED_CLOSEST; ++i) {
  ------------------
  |  |   55|      0|#define DESIRED_CLOSEST 4
  ------------------
                      for (unsigned int i = DESIRED_CLOSEST / 2; i < DESIRED_CLOSEST; ++i) {
  ------------------
  |  |   55|      0|#define DESIRED_CLOSEST 4
  ------------------
  |  Branch (491:52): [True: 0, False: 0]
  ------------------
  492|      0|            const uint64_t comp = calculate_comp_value(g->closest_peers[i].real_pk, g->real_pk);
  493|       |
  494|      0|            if (comp > comp_val && comp > comp_d) {
  ------------------
  |  Branch (494:17): [True: 0, False: 0]
  |  Branch (494:36): [True: 0, False: 0]
  ------------------
  495|      0|                index = i;
  496|      0|                comp_d = comp;
  497|      0|            }
  498|      0|        }
  499|      0|    }
  500|       |
  501|      6|    if (index == DESIRED_CLOSEST) {
  ------------------
  |  |   55|      6|#define DESIRED_CLOSEST 4
  ------------------
  |  Branch (501:9): [True: 0, False: 6]
  ------------------
  502|      0|        return false;
  503|      0|    }
  504|       |
  505|      6|    uint8_t old_real_pk[CRYPTO_PUBLIC_KEY_SIZE];
  506|      6|    uint8_t old_temp_pk[CRYPTO_PUBLIC_KEY_SIZE];
  507|      6|    bool old = false;
  508|       |
  509|      6|    if (g->closest_peers[index].active) {
  ------------------
  |  Branch (509:9): [True: 0, False: 6]
  ------------------
  510|      0|        memcpy(old_real_pk, g->closest_peers[index].real_pk, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      0|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  511|      0|        memcpy(old_temp_pk, g->closest_peers[index].temp_pk, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      0|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  512|      0|        old = true;
  513|      0|    }
  514|       |
  515|      6|    g->closest_peers[index].active = true;
  516|      6|    memcpy(g->closest_peers[index].real_pk, real_pk, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      6|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  517|      6|    memcpy(g->closest_peers[index].temp_pk, temp_pk, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      6|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  518|       |
  519|      6|    if (old) {
  ------------------
  |  Branch (519:9): [True: 0, False: 6]
  ------------------
  520|      0|        add_to_closest(g, old_real_pk, old_temp_pk);
  521|      0|    }
  522|       |
  523|      6|    if (g->changed == GROUPCHAT_CLOSEST_CHANGE_NONE) {
  ------------------
  |  Branch (523:9): [True: 6, False: 0]
  ------------------
  524|      6|        g->changed = GROUPCHAT_CLOSEST_CHANGE_ADDED;
  525|      6|    }
  526|       |
  527|      6|    return true;
  528|      6|}
group.c:setnick:
 1104|  2.74k|{
 1105|  2.74k|    if (nick_len > MAX_NAME_LENGTH) {
  ------------------
  |  |   34|  2.74k|#define MAX_NAME_LENGTH 128
  ------------------
  |  Branch (1105:9): [True: 0, False: 2.74k]
  ------------------
 1106|      0|        return false;
 1107|      0|    }
 1108|       |
 1109|  2.74k|    Group_c *g = get_group_c(g_c, groupnumber);
 1110|       |
 1111|  2.74k|    if (g == nullptr) {
  ------------------
  |  |   63|  2.74k|#define nullptr NULL
  ------------------
  |  Branch (1111:9): [True: 0, False: 2.74k]
  ------------------
 1112|      0|        return false;
 1113|      0|    }
 1114|       |
 1115|  2.74k|    g->group[peer_index].nick_updated = true;
 1116|       |
 1117|  2.74k|    if (g_peer_nick_eq(&g->group[peer_index], nick, nick_len)) {
  ------------------
  |  Branch (1117:9): [True: 2.26k, False: 481]
  ------------------
 1118|       |        /* same name as already stored */
 1119|  2.26k|        return true;
 1120|  2.26k|    }
 1121|       |
 1122|    481|    if (nick_len > 0) {
  ------------------
  |  Branch (1122:9): [True: 447, False: 34]
  ------------------
 1123|    447|        memcpy(g->group[peer_index].nick, nick, nick_len);
 1124|    447|    }
 1125|       |
 1126|    481|    g->group[peer_index].nick_len = nick_len;
 1127|       |
 1128|    481|    if (do_gc_callback && g_c->peer_name_callback != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1128:9): [True: 0, False: 481]
  |  Branch (1128:27): [True: 0, False: 0]
  ------------------
 1129|      0|        g_c->peer_name_callback(g_c->m, groupnumber, peer_index, nick, nick_len, userdata);
 1130|      0|    }
 1131|       |
 1132|    481|    return true;
 1133|  2.74k|}
group.c:g_peer_nick_eq:
  233|  2.74k|{
  234|  2.74k|    return memeq(peer->nick, peer->nick_len, nick, nick_len);
  235|  2.74k|}
group.c:get_group_c:
  343|  18.6k|{
  344|  18.6k|    if (!is_groupnumber_valid(g_c, groupnumber)) {
  ------------------
  |  Branch (344:9): [True: 0, False: 18.6k]
  ------------------
  345|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  346|      0|    }
  347|       |
  348|  18.6k|    return &g_c->chats[groupnumber];
  349|  18.6k|}
group.c:is_groupnumber_valid:
  243|  18.6k|{
  244|  18.6k|    return groupnumber < g_c->num_chats
  ------------------
  |  Branch (244:12): [True: 18.6k, False: 0]
  ------------------
  245|  18.6k|           && g_c->chats != nullptr
  ------------------
  |  |   63|  37.3k|#define nullptr NULL
  ------------------
  |  Branch (245:15): [True: 18.6k, False: 0]
  ------------------
  246|  18.6k|           && g_c->chats[groupnumber].status != GROUPCHAT_STATUS_NONE;
  ------------------
  |  Branch (246:15): [True: 18.6k, False: 0]
  ------------------
  247|  18.6k|}
group.c:wipe_group_chat:
  318|  2.79k|{
  319|  2.79k|    if (groupnumber >= g_c->num_chats || g_c->chats == nullptr) {
  ------------------
  |  |   63|  2.79k|#define nullptr NULL
  ------------------
  |  Branch (319:9): [True: 0, False: 2.79k]
  |  Branch (319:42): [True: 0, False: 2.79k]
  ------------------
  320|      0|        return false;
  321|      0|    }
  322|       |
  323|  2.79k|    wipe_group_c(g_c->mem, &g_c->chats[groupnumber]);
  324|       |
  325|  2.79k|    uint16_t i;
  326|       |
  327|  5.59k|    for (i = g_c->num_chats; i != 0; --i) {
  ------------------
  |  Branch (327:30): [True: 5.49k, False: 96]
  ------------------
  328|  5.49k|        if (g_c->chats[i - 1].status != GROUPCHAT_STATUS_NONE) {
  ------------------
  |  Branch (328:13): [True: 2.70k, False: 2.79k]
  ------------------
  329|  2.70k|            break;
  330|  2.70k|        }
  331|  5.49k|    }
  332|       |
  333|  2.79k|    if (g_c->num_chats != i) {
  ------------------
  |  Branch (333:9): [True: 127, False: 2.66k]
  ------------------
  334|    127|        g_c->num_chats = i;
  335|    127|        realloc_conferences(g_c, g_c->num_chats);
  336|    127|    }
  337|       |
  338|  2.79k|    return true;
  339|  2.79k|}
group.c:wipe_group_c:
  306|  2.79k|{
  307|  2.79k|    mem_delete(mem, g->frozen);
  308|  2.79k|    mem_delete(mem, g->group);
  309|  2.79k|    crypto_memzero(g, sizeof(Group_c));
  310|  2.79k|}
group.c:count_connected:
 2311|  1.30k|{
 2312|  1.30k|    unsigned int count = 0;
 2313|       |
 2314|  22.2k|    for (unsigned int i = 0; i < MAX_GROUP_CONNECTIONS; ++i) {
  ------------------
  |  |   56|  22.2k|#define MAX_GROUP_CONNECTIONS 16
  ------------------
  |  Branch (2314:30): [True: 20.9k, False: 1.30k]
  ------------------
 2315|  20.9k|        if (g->connections[i].type == GROUPCHAT_CONNECTION_ONLINE) {
  ------------------
  |  Branch (2315:13): [True: 0, False: 20.9k]
  ------------------
 2316|      0|            ++count;
 2317|      0|        }
 2318|  20.9k|    }
 2319|       |
 2320|  1.30k|    return count;
 2321|  1.30k|}
group.c:group_leave:
 2050|  1.30k|{
 2051|  1.30k|    const Group_c *g = get_group_c(g_c, groupnumber);
 2052|       |
 2053|  1.30k|    if (g == nullptr) {
  ------------------
  |  |   63|  1.30k|#define nullptr NULL
  ------------------
  |  Branch (2053:9): [True: 0, False: 1.30k]
  ------------------
 2054|      0|        return false;
 2055|      0|    }
 2056|       |
 2057|  1.30k|    if (permanent) {
  ------------------
  |  Branch (2057:9): [True: 0, False: 1.30k]
  ------------------
 2058|      0|        return group_kill_peer_send(g_c, groupnumber, g->peer_number);
 2059|  1.30k|    } else {
 2060|  1.30k|        return group_freeze_peer_send(g_c, groupnumber, g->peer_number);
 2061|  1.30k|    }
 2062|  1.30k|}
group.c:group_freeze_peer_send:
 2024|  1.30k|{
 2025|  1.30k|    uint8_t packet[GROUP_MESSAGE_KILL_PEER_LENGTH];
 2026|       |
 2027|  1.30k|    peer_num = net_htons(peer_num);
 2028|  1.30k|    memcpy(packet, &peer_num, sizeof(uint16_t));
 2029|       |
 2030|  1.30k|    return send_message_group(g_c, groupnumber, GROUP_MESSAGE_FREEZE_PEER_ID, packet, sizeof(packet)) > 0;
 2031|  1.30k|}
group.c:send_message_group:
 2727|  1.30k|{
 2728|  1.30k|    assert(len == 0 || data != nullptr);
 2729|  1.30k|    Group_c *g = get_group_c(g_c, groupnumber);
 2730|       |
 2731|  1.30k|    if (g == nullptr) {
  ------------------
  |  |   63|  1.30k|#define nullptr NULL
  ------------------
  |  Branch (2731:9): [True: 0, False: 1.30k]
  ------------------
 2732|      0|        return -1;
 2733|      0|    }
 2734|       |
 2735|  1.30k|    if (len > MAX_GROUP_MESSAGE_DATA_LEN) {
  ------------------
  |  |  188|  1.30k|#define MAX_GROUP_MESSAGE_DATA_LEN (MAX_CRYPTO_DATA_SIZE - (1 + MIN_MESSAGE_PACKET_LEN))
  |  |  ------------------
  |  |  |  |   93|  1.30k|#define MAX_CRYPTO_DATA_SIZE (uint16_t)(MAX_CRYPTO_PACKET_SIZE - CRYPTO_DATA_PACKET_MIN_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   88|  1.30k|#define MAX_CRYPTO_PACKET_SIZE (uint16_t)1400
  |  |  |  |  ------------------
  |  |  |  |               #define MAX_CRYPTO_DATA_SIZE (uint16_t)(MAX_CRYPTO_PACKET_SIZE - CRYPTO_DATA_PACKET_MIN_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   90|  1.30k|#define CRYPTO_DATA_PACKET_MIN_SIZE (uint16_t)(1 + sizeof(uint16_t) + (sizeof(uint32_t) + sizeof(uint32_t)) + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   64|  1.30k|#define CRYPTO_MAC_SIZE                16
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MAX_GROUP_MESSAGE_DATA_LEN (MAX_CRYPTO_DATA_SIZE - (1 + MIN_MESSAGE_PACKET_LEN))
  |  |  ------------------
  |  |  |  |  209|  1.30k|#define MIN_MESSAGE_PACKET_LEN (sizeof(uint16_t) * 2 + sizeof(uint32_t) + 1)
  |  |  ------------------
  ------------------
  |  Branch (2735:9): [True: 0, False: 1.30k]
  ------------------
 2736|      0|        return -2;
 2737|      0|    }
 2738|       |
 2739|  1.30k|    if (g->status != GROUPCHAT_STATUS_CONNECTED || count_connected(g) == 0) {
  ------------------
  |  Branch (2739:9): [True: 0, False: 1.30k]
  |  Branch (2739:52): [True: 1.30k, False: 0]
  ------------------
 2740|  1.30k|        return -3;
 2741|  1.30k|    }
 2742|       |
 2743|      0|    const uint16_t packet_size = sizeof(uint16_t) + sizeof(uint32_t) + 1 + len;
 2744|      0|    VLA(uint8_t, packet, packet_size);
  ------------------
  |  |   59|      0|#define VLA ALLOC_VLA
  |  |  ------------------
  |  |  |  |   28|      0|#define ALLOC_VLA(type, name, size) type name[size]
  |  |  ------------------
  ------------------
 2745|      0|    const uint16_t peer_num = net_htons(g->peer_number);
 2746|      0|    memcpy(packet, &peer_num, sizeof(peer_num));
 2747|       |
 2748|      0|    ++g->message_number;
 2749|       |
 2750|      0|    if (g->message_number == 0) {
  ------------------
  |  Branch (2750:9): [True: 0, False: 0]
  ------------------
 2751|      0|        ++g->message_number;
 2752|      0|    }
 2753|       |
 2754|      0|    const uint32_t message_num = net_htonl(g->message_number);
 2755|      0|    memcpy(packet + sizeof(uint16_t), &message_num, sizeof(message_num));
 2756|       |
 2757|      0|    packet[sizeof(uint16_t) + sizeof(uint32_t)] = message_id;
 2758|       |
 2759|      0|    if (len != 0) {
  ------------------
  |  Branch (2759:9): [True: 0, False: 0]
  ------------------
 2760|      0|        memcpy(packet + sizeof(uint16_t) + sizeof(uint32_t) + 1, data, len);
 2761|      0|    }
 2762|       |
 2763|      0|    const unsigned int ret = send_message_all_connections(g_c, g, packet, packet_size, -1);
 2764|       |
 2765|      0|    if (ret == 0) {
  ------------------
  |  Branch (2765:9): [True: 0, False: 0]
  ------------------
 2766|      0|        return -4;
 2767|      0|    }
 2768|       |
 2769|      0|    return ret;
 2770|      0|}
group.c:conferences_section_size:
 3569|  3.66k|{
 3570|  3.66k|    uint32_t len = 0;
 3571|       |
 3572|  6.52k|    for (uint16_t i = 0; i < g_c->num_chats; ++i) {
  ------------------
  |  Branch (3572:26): [True: 2.85k, False: 3.66k]
  ------------------
 3573|  2.85k|        const Group_c *g = get_group_c(g_c, i);
 3574|       |
 3575|  2.85k|        if (g == nullptr || g->status != GROUPCHAT_STATUS_CONNECTED) {
  ------------------
  |  |   63|  5.70k|#define nullptr NULL
  ------------------
  |  Branch (3575:13): [True: 0, False: 2.85k]
  |  Branch (3575:29): [True: 0, False: 2.85k]
  ------------------
 3576|      0|            continue;
 3577|      0|        }
 3578|       |
 3579|  2.85k|        len += saved_conf_size(g);
 3580|  2.85k|    }
 3581|       |
 3582|  3.66k|    return len;
 3583|  3.66k|}
group.c:saved_conf_size:
 3499|  2.85k|{
 3500|  2.85k|    uint32_t len = SAVED_CONF_SIZE_CONSTANT + g->title_len;
  ------------------
  |  | 3494|  2.85k|#define SAVED_CONF_SIZE_CONSTANT (1 + GROUP_ID_LENGTH + sizeof(uint32_t) \
  |  |  ------------------
  |  |  |  |   53|  2.85k|#define GROUP_ID_LENGTH CRYPTO_SYMMETRIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   58|  2.85k|#define CRYPTO_SYMMETRIC_KEY_SIZE      CRYPTO_SHARED_KEY_SIZE
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   53|  2.85k|#define CRYPTO_SHARED_KEY_SIZE         32
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3495|  2.85k|      + sizeof(uint16_t) + sizeof(uint16_t) + sizeof(uint32_t) + 1)
  ------------------
 3501|       |
 3502|  6.25k|    for (uint32_t j = 0; j < g->numpeers + g->numfrozen; ++j) {
  ------------------
  |  Branch (3502:26): [True: 3.40k, False: 2.85k]
  ------------------
 3503|  3.40k|        const Group_Peer *peer = (j < g->numpeers) ? &g->group[j] : &g->frozen[j - g->numpeers];
  ------------------
  |  Branch (3503:34): [True: 2.85k, False: 549]
  ------------------
 3504|       |
 3505|  3.40k|        if (pk_equal(peer->real_pk, g->real_pk)) {
  ------------------
  |  Branch (3505:13): [True: 2.85k, False: 549]
  ------------------
 3506|  2.85k|            continue;
 3507|  2.85k|        }
 3508|       |
 3509|    549|        len += saved_peer_size(peer);
 3510|    549|    }
 3511|       |
 3512|  2.85k|    return len;
 3513|  2.85k|}
group.c:saved_peer_size:
 3465|    549|{
 3466|    549|    return SAVED_PEER_SIZE_CONSTANT + peer->nick_len;
  ------------------
  |  | 3461|    549|#define SAVED_PEER_SIZE_CONSTANT (2 * CRYPTO_PUBLIC_KEY_SIZE + sizeof(uint16_t) + sizeof(uint64_t) + 1)
  |  |  ------------------
  |  |  |  |   43|    549|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
 3467|    549|}
group.c:save_conf:
 3524|    951|{
 3525|    951|    *data = g->type;
 3526|    951|    ++data;
 3527|       |
 3528|    951|    memcpy(data, g->id, GROUP_ID_LENGTH);
  ------------------
  |  |   53|    951|#define GROUP_ID_LENGTH CRYPTO_SYMMETRIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   58|    951|#define CRYPTO_SYMMETRIC_KEY_SIZE      CRYPTO_SHARED_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   53|    951|#define CRYPTO_SHARED_KEY_SIZE         32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    951|    data += GROUP_ID_LENGTH;
  ------------------
  |  |   53|    951|#define GROUP_ID_LENGTH CRYPTO_SYMMETRIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   58|    951|#define CRYPTO_SYMMETRIC_KEY_SIZE      CRYPTO_SHARED_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   53|    951|#define CRYPTO_SHARED_KEY_SIZE         32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3530|       |
 3531|    951|    host_to_lendian_bytes32(data, g->message_number + SAVE_OFFSET_MESSAGE_NUMBER);
  ------------------
  |  | 3519|    951|#define SAVE_OFFSET_MESSAGE_NUMBER (1 << 16)
  ------------------
 3532|    951|    data += sizeof(uint32_t);
 3533|       |
 3534|    951|    host_to_lendian_bytes16(data, g->lossy_message_number + SAVE_OFFSET_LOSSY_MESSAGE_NUMBER);
  ------------------
  |  | 3520|    951|#define SAVE_OFFSET_LOSSY_MESSAGE_NUMBER (1 << 13)
  ------------------
 3535|    951|    data += sizeof(uint16_t);
 3536|       |
 3537|    951|    host_to_lendian_bytes16(data, g->peer_number);
 3538|    951|    data += sizeof(uint16_t);
 3539|       |
 3540|    951|    uint8_t *const numsaved_location = data;
 3541|    951|    data += sizeof(uint32_t);
 3542|       |
 3543|    951|    *data = g->title_len;
 3544|    951|    ++data;
 3545|       |
 3546|    951|    memcpy(data, g->title, g->title_len);
 3547|    951|    data += g->title_len;
 3548|       |
 3549|    951|    uint32_t numsaved = 0;
 3550|       |
 3551|  2.08k|    for (uint32_t j = 0; j < g->numpeers + g->numfrozen; ++j) {
  ------------------
  |  Branch (3551:26): [True: 1.13k, False: 951]
  ------------------
 3552|  1.13k|        const Group_Peer *peer = (j < g->numpeers) ? &g->group[j] : &g->frozen[j - g->numpeers];
  ------------------
  |  Branch (3552:34): [True: 951, False: 183]
  ------------------
 3553|       |
 3554|  1.13k|        if (pk_equal(peer->real_pk, g->real_pk)) {
  ------------------
  |  Branch (3554:13): [True: 951, False: 183]
  ------------------
 3555|    951|            continue;
 3556|    951|        }
 3557|       |
 3558|    183|        data = save_peer(peer, data);
 3559|    183|        ++numsaved;
 3560|    183|    }
 3561|       |
 3562|    951|    host_to_lendian_bytes32(numsaved_location, numsaved);
 3563|       |
 3564|    951|    return data;
 3565|    951|}
group.c:save_peer:
 3471|    183|{
 3472|    183|    memcpy(data, peer->real_pk, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|    183|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 3473|    183|    data += CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|    183|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 3474|       |
 3475|    183|    memcpy(data, peer->temp_pk, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|    183|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 3476|    183|    data += CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|    183|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 3477|       |
 3478|    183|    host_to_lendian_bytes16(data, peer->peer_number);
 3479|    183|    data += sizeof(uint16_t);
 3480|       |
 3481|    183|    host_to_lendian_bytes64(data, peer->last_active);
 3482|    183|    data += sizeof(uint64_t);
 3483|       |
 3484|       |    // TODO(iphydf): This looks broken: nick_len can be > 255.
 3485|    183|    *data = peer->nick_len;
 3486|    183|    ++data;
 3487|       |
 3488|    183|    memcpy(data, peer->nick, peer->nick_len);
 3489|    183|    data += peer->nick_len;
 3490|       |
 3491|    183|    return data;
 3492|    183|}
group.c:load_conferences:
 3777|    305|{
 3778|    305|    const State_Load_Status res = load_conferences_helper(g_c, data, length);
 3779|       |
 3780|    305|    if (res == STATE_LOAD_STATUS_CONTINUE) {
  ------------------
  |  Branch (3780:9): [True: 254, False: 51]
  ------------------
 3781|    254|        return res;
 3782|    254|    }
 3783|       |
 3784|       |    // Loading failed, cleanup all Group_c
 3785|       |
 3786|       |    // save locally, because wipe_group_chat(...) modifies it
 3787|     51|    const uint16_t num_groups = g_c->num_chats;
 3788|       |
 3789|  1.49k|    for (uint16_t i = 0; i < num_groups; ++i) {
  ------------------
  |  Branch (3789:26): [True: 1.44k, False: 51]
  ------------------
 3790|  1.44k|        wipe_group_chat(g_c, i);
 3791|  1.44k|    }
 3792|       |
 3793|     51|    return res;
 3794|    305|}
group.c:load_conferences_helper:
 3726|    305|{
 3727|    305|    const uint8_t *init_data = data;
 3728|       |
 3729|  3.05k|    while (length >= (uint32_t)(data - init_data) + SAVED_CONF_SIZE_CONSTANT) {
  ------------------
  |  | 3494|  3.05k|#define SAVED_CONF_SIZE_CONSTANT (1 + GROUP_ID_LENGTH + sizeof(uint32_t) \
  |  |  ------------------
  |  |  |  |   53|  3.05k|#define GROUP_ID_LENGTH CRYPTO_SYMMETRIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   58|  3.05k|#define CRYPTO_SYMMETRIC_KEY_SIZE      CRYPTO_SHARED_KEY_SIZE
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   53|  3.05k|#define CRYPTO_SHARED_KEY_SIZE         32
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3495|  3.05k|      + sizeof(uint16_t) + sizeof(uint16_t) + sizeof(uint32_t) + 1)
  ------------------
  |  Branch (3729:12): [True: 2.79k, False: 254]
  ------------------
 3730|  2.79k|        const int groupnumber = create_group_chat(g_c);
 3731|       |
 3732|       |        // Helpful for testing
 3733|  2.79k|        assert(groupnumber != -1);
 3734|       |
 3735|  2.79k|        if (groupnumber == -1) {
  ------------------
  |  Branch (3735:13): [True: 0, False: 2.79k]
  ------------------
 3736|       |            // If this fails there's a serious problem, don't bother with cleanup
 3737|      0|            LOGGER_ERROR(g_c->m->log, "conference creation failed");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3738|      0|            return STATE_LOAD_STATUS_ERROR;
 3739|      0|        }
 3740|       |
 3741|  2.79k|        Group_c *g = &g_c->chats[groupnumber];
 3742|       |
 3743|  2.79k|        const uint32_t consumed = load_group(g, g_c, data, length - (uint32_t)(data - init_data));
 3744|       |
 3745|  2.79k|        if (consumed == 0) {
  ------------------
  |  Branch (3745:13): [True: 45, False: 2.75k]
  ------------------
 3746|       |            // remove partially loaded stuff, wipe_group_chat must be able to wipe a partially loaded group
 3747|     45|            const bool ret = wipe_group_chat(g_c, groupnumber);
 3748|       |
 3749|       |            // HACK: suppress unused variable warning
 3750|     45|            if (!ret) {
  ------------------
  |  Branch (3750:17): [True: 0, False: 45]
  ------------------
 3751|       |                // wipe_group_chat(...) must be able to wipe partially allocated groups
 3752|      0|                assert(ret);
 3753|      0|            }
 3754|       |
 3755|     45|            LOGGER_ERROR(g_c->m->log, "conference loading failed");
  ------------------
  |  |   87|     45|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     45|    do {                                                                         \
  |  |  |  |   77|     45|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     90|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|     45|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|     45|        }                                                                        \
  |  |  |  |   80|     45|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3756|     45|            return STATE_LOAD_STATUS_ERROR;
 3757|     45|        }
 3758|       |
 3759|  2.75k|        data += consumed;
 3760|       |
 3761|  2.75k|        const int peer_index = addpeer(g_c, groupnumber, g->real_pk, dht_get_self_public_key(g_c->m->dht), g->peer_number,
 3762|  2.75k|                                       nullptr, true, false);
  ------------------
  |  |   63|  2.75k|#define nullptr NULL
  ------------------
 3763|       |
 3764|  2.75k|        if (peer_index == -1) {
  ------------------
  |  Branch (3764:13): [True: 6, False: 2.74k]
  ------------------
 3765|      6|            LOGGER_ERROR(g_c->m->log, "adding peer %d failed", g->peer_number);
  ------------------
  |  |   87|      6|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      6|    do {                                                                         \
  |  |  |  |   77|      6|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     12|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      6|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      6|        }                                                                        \
  |  |  |  |   80|      6|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3766|      6|            return STATE_LOAD_STATUS_ERROR;
 3767|      6|        }
 3768|       |
 3769|  2.74k|        setnick(g_c, groupnumber, peer_index, g_c->m->name, g_c->m->name_length, nullptr, false);
  ------------------
  |  |   63|  2.74k|#define nullptr NULL
  ------------------
 3770|  2.74k|    }
 3771|       |
 3772|    254|    return STATE_LOAD_STATUS_CONTINUE;
 3773|    305|}
group.c:load_group:
 3618|  2.79k|{
 3619|  2.79k|    const uint8_t *init_data = data;
 3620|       |
 3621|       |    // Initialize to default values so we can unconditionally free in case of an error
 3622|  2.79k|    setup_conference(g);
 3623|       |
 3624|  2.79k|    g->type = *data;
 3625|  2.79k|    ++data;
 3626|       |
 3627|  2.79k|    memcpy(g->id, data, GROUP_ID_LENGTH);
  ------------------
  |  |   53|  2.79k|#define GROUP_ID_LENGTH CRYPTO_SYMMETRIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   58|  2.79k|#define CRYPTO_SYMMETRIC_KEY_SIZE      CRYPTO_SHARED_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   53|  2.79k|#define CRYPTO_SHARED_KEY_SIZE         32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3628|  2.79k|    data += GROUP_ID_LENGTH;
  ------------------
  |  |   53|  2.79k|#define GROUP_ID_LENGTH CRYPTO_SYMMETRIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   58|  2.79k|#define CRYPTO_SYMMETRIC_KEY_SIZE      CRYPTO_SHARED_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   53|  2.79k|#define CRYPTO_SHARED_KEY_SIZE         32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|       |
 3630|  2.79k|    lendian_bytes_to_host32(&g->message_number, data);
 3631|  2.79k|    data += sizeof(uint32_t);
 3632|       |
 3633|  2.79k|    lendian_bytes_to_host16(&g->lossy_message_number, data);
 3634|  2.79k|    data += sizeof(uint16_t);
 3635|       |
 3636|  2.79k|    lendian_bytes_to_host16(&g->peer_number, data);
 3637|  2.79k|    data += sizeof(uint16_t);
 3638|       |
 3639|  2.79k|    lendian_bytes_to_host32(&g->numfrozen, data);
 3640|  2.79k|    data += sizeof(uint32_t);
 3641|       |
 3642|  2.79k|    g->title_len = *data;
 3643|       |
 3644|  2.79k|    if (g->title_len > MAX_NAME_LENGTH) {
  ------------------
  |  |   34|  2.79k|#define MAX_NAME_LENGTH 128
  ------------------
  |  Branch (3644:9): [True: 8, False: 2.78k]
  ------------------
 3645|      8|        return 0;
 3646|      8|    }
 3647|       |
 3648|  2.78k|    ++data;
 3649|       |
 3650|  2.78k|    assert((data - init_data) < UINT32_MAX);
 3651|       |
 3652|  2.78k|    if (length < (uint32_t)(data - init_data) + g->title_len) {
  ------------------
  |  Branch (3652:9): [True: 3, False: 2.78k]
  ------------------
 3653|      3|        return 0;
 3654|      3|    }
 3655|       |
 3656|  2.78k|    memcpy(g->title, data, g->title_len);
 3657|  2.78k|    data += g->title_len;
 3658|       |
 3659|  3.16k|    for (uint32_t j = 0; j < g->numfrozen; ++j) {
  ------------------
  |  Branch (3659:26): [True: 411, False: 2.75k]
  ------------------
 3660|       |
 3661|    411|        assert((data - init_data) < UINT32_MAX);
 3662|       |
 3663|    411|        if (length < (uint32_t)(data - init_data) + SAVED_PEER_SIZE_CONSTANT) {
  ------------------
  |  | 3461|    411|#define SAVED_PEER_SIZE_CONSTANT (2 * CRYPTO_PUBLIC_KEY_SIZE + sizeof(uint16_t) + sizeof(uint64_t) + 1)
  |  |  ------------------
  |  |  |  |   43|    411|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  |  Branch (3663:13): [True: 26, False: 385]
  ------------------
 3664|     26|            return 0;
 3665|     26|        }
 3666|       |
 3667|       |        // This is inefficient, but allows us to check data consistency before allocating memory
 3668|    385|        Group_Peer *tmp_frozen = (Group_Peer *)mem_vrealloc(g_c->mem, g->frozen, j + 1, sizeof(Group_Peer));
 3669|       |
 3670|    385|        if (tmp_frozen == nullptr) {
  ------------------
  |  |   63|    385|#define nullptr NULL
  ------------------
  |  Branch (3670:13): [True: 0, False: 385]
  ------------------
 3671|       |            // Memory allocation failure
 3672|      0|            return 0;
 3673|      0|        }
 3674|       |
 3675|    385|        g->frozen = tmp_frozen;
 3676|       |
 3677|    385|        Group_Peer *peer = &g->frozen[j];
 3678|    385|        *peer = empty_group_peer;
 3679|       |
 3680|    385|        pk_copy(peer->real_pk, data);
 3681|    385|        data += CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|    385|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 3682|    385|        pk_copy(peer->temp_pk, data);
 3683|    385|        data += CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|    385|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 3684|       |
 3685|    385|        lendian_bytes_to_host16(&peer->peer_number, data);
 3686|    385|        data += sizeof(uint16_t);
 3687|       |
 3688|    385|        lendian_bytes_to_host64(&peer->last_active, data);
 3689|    385|        data += sizeof(uint64_t);
 3690|       |
 3691|    385|        peer->nick_len = *data;
 3692|       |
 3693|    385|        if (peer->nick_len > MAX_NAME_LENGTH) {
  ------------------
  |  |   34|    385|#define MAX_NAME_LENGTH 128
  ------------------
  |  Branch (3693:13): [True: 5, False: 380]
  ------------------
 3694|      5|            return 0;
 3695|      5|        }
 3696|       |
 3697|    380|        ++data;
 3698|    380|        assert((data - init_data) < UINT32_MAX);
 3699|       |
 3700|    380|        if (length < (uint32_t)(data - init_data) + peer->nick_len) {
  ------------------
  |  Branch (3700:13): [True: 3, False: 377]
  ------------------
 3701|      3|            return 0;
 3702|      3|        }
 3703|       |
 3704|    377|        memcpy(peer->nick, data, peer->nick_len);
 3705|    377|        data += peer->nick_len;
 3706|       |
 3707|       |        // NOTE: this relies on friends being loaded before conferences.
 3708|    377|        peer->is_friend = getfriend_id(g_c->m, peer->real_pk) != -1;
 3709|    377|    }
 3710|       |
 3711|  2.75k|    if (g->numfrozen > g->maxfrozen) {
  ------------------
  |  Branch (3711:9): [True: 0, False: 2.75k]
  ------------------
 3712|      0|        g->maxfrozen = g->numfrozen;
 3713|      0|    }
 3714|       |
 3715|  2.75k|    g->status = GROUPCHAT_STATUS_CONNECTED;
 3716|       |
 3717|  2.75k|    pk_copy(g->real_pk, nc_get_self_public_key(g_c->m->net_crypto));
 3718|       |
 3719|  2.75k|    assert((data - init_data) < UINT32_MAX);
 3720|       |
 3721|  2.75k|    return (uint32_t)(data - init_data);
 3722|  2.75k|}

new_gca_list:
  415|  1.74k|{
  416|  1.74k|    GC_Announces_List *announces_list = (GC_Announces_List *)mem_alloc(mem, sizeof(GC_Announces_List));
  417|       |
  418|  1.74k|    if (announces_list == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (418:9): [True: 0, False: 1.74k]
  ------------------
  419|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  420|      0|    }
  421|       |
  422|  1.74k|    announces_list->mem = mem;
  423|       |
  424|  1.74k|    return announces_list;
  425|  1.74k|}
kill_gca:
  428|  1.74k|{
  429|  1.74k|    if (announces_list == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (429:9): [True: 0, False: 1.74k]
  ------------------
  430|      0|        return;
  431|      0|    }
  432|       |
  433|  1.74k|    GC_Announces *root = announces_list->root_announces;
  434|       |
  435|  1.74k|    while (root != nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (435:12): [True: 0, False: 1.74k]
  ------------------
  436|      0|        GC_Announces *next = root->next_announce;
  437|      0|        mem_delete(announces_list->mem, root);
  438|      0|        root = next;
  439|      0|    }
  440|       |
  441|  1.74k|    mem_delete(announces_list->mem, announces_list);
  442|  1.74k|}

gc_peer_id_from_int:
  192|    107|{
  193|    107|    const GC_Peer_Id peer_id = {(force GC_Peer_Id_Value)value};
  194|    107|    return peer_id;
  195|    107|}
gc_peer_number_is_valid:
  236|    107|{
  237|    107|    return peer_number >= 0 && peer_number < (int)chat->numpeers;
  ------------------
  |  Branch (237:12): [True: 107, False: 0]
  |  Branch (237:32): [True: 107, False: 0]
  ------------------
  238|    107|}
get_gc_connection:
  251|    107|{
  252|    107|    GC_Peer *peer = get_gc_peer(chat, peer_number);
  253|       |
  254|    107|    if (peer == nullptr) {
  ------------------
  |  |   63|    107|#define nullptr NULL
  ------------------
  |  Branch (254:9): [True: 0, False: 107]
  ------------------
  255|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  256|      0|    }
  257|       |
  258|    107|    return &peer->gconn;
  259|    107|}
pack_gc_saved_peers:
  429|    148|{
  430|    148|    uint16_t packed_len = 0;
  431|    148|    uint16_t count = 0;
  432|       |
  433|  14.9k|    for (uint32_t i = 0; i < GC_MAX_SAVED_PEERS; ++i) {
  ------------------
  |  |   48|  14.9k|#define GC_MAX_SAVED_PEERS 100
  ------------------
  |  Branch (433:26): [True: 14.8k, False: 148]
  ------------------
  434|  14.8k|        const GC_SavedPeerInfo *saved_peer = &chat->saved_peers[i];
  435|       |
  436|  14.8k|        if (!saved_peer_is_valid(saved_peer)) {
  ------------------
  |  Branch (436:13): [True: 14.1k, False: 700]
  ------------------
  437|  14.1k|            continue;
  438|  14.1k|        }
  439|       |
  440|    700|        int packed_ipp_len = 0;
  441|    700|        int packed_tcp_len = 0;
  442|       |
  443|    700|        if (ipport_isset(&saved_peer->ip_port)) {
  ------------------
  |  Branch (443:13): [True: 560, False: 140]
  ------------------
  444|    560|            if (packed_len > length) {
  ------------------
  |  Branch (444:17): [True: 0, False: 560]
  ------------------
  445|      0|                return -1;
  446|      0|            }
  447|       |
  448|    560|            packed_ipp_len = pack_ip_port(chat->log, data + packed_len, length - packed_len, &saved_peer->ip_port);
  449|       |
  450|    560|            if (packed_ipp_len > 0) {
  ------------------
  |  Branch (450:17): [True: 560, False: 0]
  ------------------
  451|    560|                packed_len += packed_ipp_len;
  452|    560|            }
  453|    560|        }
  454|       |
  455|    700|        if (ipport_isset(&saved_peer->tcp_relay.ip_port)) {
  ------------------
  |  Branch (455:13): [True: 460, False: 240]
  ------------------
  456|    460|            if (packed_len > length) {
  ------------------
  |  Branch (456:17): [True: 0, False: 460]
  ------------------
  457|      0|                return -1;
  458|      0|            }
  459|       |
  460|    460|            packed_tcp_len = pack_nodes(chat->log, data + packed_len, length - packed_len, &saved_peer->tcp_relay, 1);
  461|       |
  462|    460|            if (packed_tcp_len > 0) {
  ------------------
  |  Branch (462:17): [True: 460, False: 0]
  ------------------
  463|    460|                packed_len += packed_tcp_len;
  464|    460|            }
  465|    460|        }
  466|       |
  467|    700|        if (packed_len + ENC_PUBLIC_KEY_SIZE > length) {
  ------------------
  |  |  122|    700|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|    700|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  |  Branch (467:13): [True: 0, False: 700]
  ------------------
  468|      0|            return -1;
  469|      0|        }
  470|       |
  471|    700|        if (packed_tcp_len > 0 || packed_ipp_len > 0) {
  ------------------
  |  Branch (471:13): [True: 460, False: 240]
  |  Branch (471:35): [True: 240, False: 0]
  ------------------
  472|    700|            memcpy(data + packed_len, chat->saved_peers[i].public_key, ENC_PUBLIC_KEY_SIZE);
  ------------------
  |  |  122|    700|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|    700|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  473|    700|            packed_len += ENC_PUBLIC_KEY_SIZE;
  ------------------
  |  |  122|    700|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|    700|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  474|    700|            ++count;
  475|    700|        } else {
  476|      0|            LOGGER_WARNING(chat->log, "Failed to pack saved peer");
  ------------------
  |  |   86|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  477|      0|        }
  478|    700|    }
  479|       |
  480|    148|    if (processed != nullptr) {
  ------------------
  |  |   63|    148|#define nullptr NULL
  ------------------
  |  Branch (480:9): [True: 148, False: 0]
  ------------------
  481|    148|        *processed = packed_len;
  482|    148|    }
  483|       |
  484|    148|    return count;
  485|    148|}
unpack_gc_saved_peers:
  488|     67|{
  489|     67|    uint16_t count = 0;
  490|     67|    uint16_t unpacked_len = 0;
  491|       |
  492|    412|    for (size_t i = 0; unpacked_len < length; ++i) {
  ------------------
  |  Branch (492:24): [True: 404, False: 8]
  ------------------
  493|    404|        GC_SavedPeerInfo *saved_peer = &chat->saved_peers[i];
  494|       |
  495|    404|        const int ipp_len = unpack_ip_port(&saved_peer->ip_port, data + unpacked_len, length - unpacked_len, false);
  496|       |
  497|    404|        if (ipp_len > 0) {
  ------------------
  |  Branch (497:13): [True: 270, False: 134]
  ------------------
  498|    270|            unpacked_len += ipp_len;
  499|    270|        }
  500|       |
  501|    404|        if (unpacked_len > length) {
  ------------------
  |  Branch (501:13): [True: 0, False: 404]
  ------------------
  502|      0|            return -1;
  503|      0|        }
  504|       |
  505|    404|        uint16_t tcp_len_processed = 0;
  506|    404|        const int tcp_len = unpack_nodes(&saved_peer->tcp_relay, 1, &tcp_len_processed, data + unpacked_len,
  507|    404|                                         length - unpacked_len, true);
  508|       |
  509|    404|        if (tcp_len == 1 && tcp_len_processed > 0) {
  ------------------
  |  Branch (509:13): [True: 249, False: 155]
  |  Branch (509:29): [True: 249, False: 0]
  ------------------
  510|    249|            unpacked_len += tcp_len_processed;
  511|    249|        } else if (ipp_len <= 0) {
  ------------------
  |  Branch (511:20): [True: 57, False: 98]
  ------------------
  512|     57|            LOGGER_WARNING(chat->log, "Failed to unpack saved peer: Invalid connection info.");
  ------------------
  |  |   86|     57|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     57|    do {                                                                         \
  |  |  |  |   77|     57|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    114|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|     57|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|     57|        }                                                                        \
  |  |  |  |   80|     57|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  513|     57|            return -1;
  514|     57|        }
  515|       |
  516|    347|        if (unpacked_len + ENC_PUBLIC_KEY_SIZE > length) {
  ------------------
  |  |  122|    347|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|    347|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  |  Branch (516:13): [True: 2, False: 345]
  ------------------
  517|      2|            return -1;
  518|      2|        }
  519|       |
  520|    345|        if (tcp_len > 0 || ipp_len > 0) {
  ------------------
  |  Branch (520:13): [True: 249, False: 96]
  |  Branch (520:28): [True: 96, False: 0]
  ------------------
  521|    345|            memcpy(saved_peer->public_key, data + unpacked_len, ENC_PUBLIC_KEY_SIZE);
  ------------------
  |  |  122|    345|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|    345|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  522|    345|            unpacked_len += ENC_PUBLIC_KEY_SIZE;
  ------------------
  |  |  122|    345|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|    345|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  523|    345|            ++count;
  524|    345|        } else {
  525|      0|            LOGGER_ERROR(chat->log, "Unpacked peer with bad connection info");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  526|      0|            return -1;
  527|      0|        }
  528|    345|    }
  529|       |
  530|      8|    return count;
  531|     67|}
gc_get_pk_jenkins_hash:
  594|    107|{
  595|    107|    return jenkins_one_at_a_time_hash(public_key, ENC_PUBLIC_KEY_SIZE);
  ------------------
  |  |  122|    107|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|    107|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  596|    107|}
get_peer_number_of_enc_pk:
  628|    107|{
  629|    107|    for (uint32_t i = 0; i < chat->numpeers; ++i) {
  ------------------
  |  Branch (629:26): [True: 0, False: 107]
  ------------------
  630|      0|        const GC_Connection *gconn = get_gc_connection(chat, i);
  631|       |
  632|      0|        assert(gconn != nullptr);
  633|       |
  634|      0|        if (gconn->pending_delete) {
  ------------------
  |  Branch (634:13): [True: 0, False: 0]
  ------------------
  635|      0|            continue;
  636|      0|        }
  637|       |
  638|      0|        if (confirmed && !gconn->confirmed) {
  ------------------
  |  Branch (638:13): [True: 0, False: 0]
  |  Branch (638:26): [True: 0, False: 0]
  ------------------
  639|      0|            continue;
  640|      0|        }
  641|       |
  642|      0|        if (memcmp(gconn->addr.public_key.enc, public_enc_key, ENC_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |  122|      0|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|      0|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  |  Branch (642:13): [True: 0, False: 0]
  ------------------
  643|      0|            return i;
  644|      0|        }
  645|      0|    }
  646|       |
  647|    107|    return -1;
  648|    107|}
gc_callback_message:
 6609|  1.22k|{
 6610|  1.22k|    GC_Session *c = m->group_handler;
 6611|  1.22k|    c->message = function;
 6612|  1.22k|}
gc_callback_private_message:
 6615|  1.22k|{
 6616|  1.22k|    GC_Session *c = m->group_handler;
 6617|  1.22k|    c->private_message = function;
 6618|  1.22k|}
gc_callback_custom_packet:
 6621|  1.22k|{
 6622|  1.22k|    GC_Session *c = m->group_handler;
 6623|  1.22k|    c->custom_packet = function;
 6624|  1.22k|}
gc_callback_custom_private_packet:
 6627|  1.22k|{
 6628|  1.22k|    GC_Session *c = m->group_handler;
 6629|  1.22k|    c->custom_private_packet = function;
 6630|  1.22k|}
gc_callback_moderation:
 6633|  1.22k|{
 6634|  1.22k|    GC_Session *c = m->group_handler;
 6635|  1.22k|    c->moderation = function;
 6636|  1.22k|}
gc_callback_nick_change:
 6639|  1.22k|{
 6640|  1.22k|    GC_Session *c = m->group_handler;
 6641|  1.22k|    c->nick_change = function;
 6642|  1.22k|}
gc_callback_status_change:
 6645|  1.22k|{
 6646|  1.22k|    GC_Session *c = m->group_handler;
 6647|  1.22k|    c->status_change = function;
 6648|  1.22k|}
gc_callback_topic_change:
 6651|  1.22k|{
 6652|  1.22k|    GC_Session *c = m->group_handler;
 6653|  1.22k|    c->topic_change = function;
 6654|  1.22k|}
gc_callback_topic_lock:
 6657|  1.22k|{
 6658|  1.22k|    GC_Session *c = m->group_handler;
 6659|  1.22k|    c->topic_lock = function;
 6660|  1.22k|}
gc_callback_voice_state:
 6663|  1.22k|{
 6664|  1.22k|    GC_Session *c = m->group_handler;
 6665|  1.22k|    c->voice_state = function;
 6666|  1.22k|}
gc_callback_peer_limit:
 6669|  1.22k|{
 6670|  1.22k|    GC_Session *c = m->group_handler;
 6671|  1.22k|    c->peer_limit = function;
 6672|  1.22k|}
gc_callback_privacy_state:
 6675|  1.22k|{
 6676|  1.22k|    GC_Session *c = m->group_handler;
 6677|  1.22k|    c->privacy_state = function;
 6678|  1.22k|}
gc_callback_password:
 6681|  1.22k|{
 6682|  1.22k|    GC_Session *c = m->group_handler;
 6683|  1.22k|    c->password = function;
 6684|  1.22k|}
gc_callback_peer_join:
 6687|  1.22k|{
 6688|  1.22k|    GC_Session *c = m->group_handler;
 6689|  1.22k|    c->peer_join = function;
 6690|  1.22k|}
gc_callback_peer_exit:
 6693|  1.22k|{
 6694|  1.22k|    GC_Session *c = m->group_handler;
 6695|  1.22k|    c->peer_exit = function;
 6696|  1.22k|}
gc_callback_self_join:
 6699|  1.22k|{
 6700|  1.22k|    GC_Session *c = m->group_handler;
 6701|  1.22k|    c->self_join = function;
 6702|  1.22k|}
gc_callback_rejected:
 6705|  1.22k|{
 6706|  1.22k|    GC_Session *c = m->group_handler;
 6707|  1.22k|    c->rejected = function;
 6708|  1.22k|}
peer_add:
 6807|    107|{
 6808|    107|    if (get_peer_number_of_enc_pk(chat, public_key, false) != -1) {
  ------------------
  |  Branch (6808:9): [True: 0, False: 107]
  ------------------
 6809|      0|        return -2;
 6810|      0|    }
 6811|       |
 6812|    107|    const GC_Peer_Id peer_id = get_new_peer_id(chat);
 6813|       |
 6814|    107|    if (!gc_peer_id_is_valid(peer_id)) {
  ------------------
  |  Branch (6814:9): [True: 0, False: 107]
  ------------------
 6815|      0|        LOGGER_WARNING(chat->log, "Failed to add peer: all peer ID's are taken?");
  ------------------
  |  |   86|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6816|      0|        return -1;
 6817|      0|    }
 6818|       |
 6819|    107|    const int peer_number = chat->numpeers;
 6820|    107|    int tcp_connection_num = -1;
 6821|       |
 6822|    107|    if (peer_number > 0) {  // we don't need a connection to ourself
  ------------------
  |  Branch (6822:9): [True: 0, False: 107]
  ------------------
 6823|      0|        tcp_connection_num = new_tcp_connection_to(chat->tcp_conn, public_key, 0);
 6824|       |
 6825|      0|        if (tcp_connection_num == -1) {
  ------------------
  |  Branch (6825:13): [True: 0, False: 0]
  ------------------
 6826|      0|            LOGGER_WARNING(chat->log, "Failed to init tcp connection for peer %d", peer_number);
  ------------------
  |  |   86|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6827|      0|        }
 6828|      0|    }
 6829|       |
 6830|    107|    GC_Message_Array_Entry *send = (GC_Message_Array_Entry *)mem_valloc(chat->mem, GCC_BUFFER_SIZE, sizeof(GC_Message_Array_Entry));
  ------------------
  |  |   55|    107|#define GCC_BUFFER_SIZE 2048
  ------------------
 6831|    107|    GC_Message_Array_Entry *recv = (GC_Message_Array_Entry *)mem_valloc(chat->mem, GCC_BUFFER_SIZE, sizeof(GC_Message_Array_Entry));
  ------------------
  |  |   55|    107|#define GCC_BUFFER_SIZE 2048
  ------------------
 6832|       |
 6833|    107|    if (send == nullptr || recv == nullptr) {
  ------------------
  |  |   63|    214|#define nullptr NULL
  ------------------
                  if (send == nullptr || recv == nullptr) {
  ------------------
  |  |   63|    107|#define nullptr NULL
  ------------------
  |  Branch (6833:9): [True: 0, False: 107]
  |  Branch (6833:28): [True: 0, False: 107]
  ------------------
 6834|      0|        LOGGER_ERROR(chat->log, "Failed to allocate memory for gconn buffers");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6835|       |
 6836|      0|        if (tcp_connection_num != -1) {
  ------------------
  |  Branch (6836:13): [True: 0, False: 0]
  ------------------
 6837|      0|            kill_tcp_connection_to(chat->tcp_conn, tcp_connection_num);
 6838|      0|        }
 6839|       |
 6840|      0|        mem_delete(chat->mem, send);
 6841|      0|        mem_delete(chat->mem, recv);
 6842|      0|        return -1;
 6843|      0|    }
 6844|       |
 6845|    107|    GC_Peer *tmp_group = (GC_Peer *)mem_vrealloc(chat->mem, chat->group, chat->numpeers + 1, sizeof(GC_Peer));
 6846|       |
 6847|    107|    if (tmp_group == nullptr) {
  ------------------
  |  |   63|    107|#define nullptr NULL
  ------------------
  |  Branch (6847:9): [True: 0, False: 107]
  ------------------
 6848|      0|        LOGGER_ERROR(chat->log, "Failed to allocate memory for group mem_vrealloc");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6849|       |
 6850|      0|        if (tcp_connection_num != -1) {
  ------------------
  |  Branch (6850:13): [True: 0, False: 0]
  ------------------
 6851|      0|            kill_tcp_connection_to(chat->tcp_conn, tcp_connection_num);
 6852|      0|        }
 6853|       |
 6854|      0|        mem_delete(chat->mem, send);
 6855|      0|        mem_delete(chat->mem, recv);
 6856|      0|        return -1;
 6857|      0|    }
 6858|       |
 6859|    107|    ++chat->numpeers;
 6860|    107|    chat->group = tmp_group;
 6861|       |
 6862|    107|    chat->group[peer_number] = (GC_Peer) {
 6863|    107|        0
 6864|    107|    };
 6865|       |
 6866|    107|    GC_Connection *gconn = &chat->group[peer_number].gconn;
 6867|       |
 6868|    107|    gconn->send_array = send;
 6869|    107|    gconn->recv_array = recv;
 6870|       |
 6871|    107|    gcc_set_ip_port(gconn, ipp);
 6872|    107|    chat->group[peer_number].role = GR_USER;
 6873|    107|    chat->group[peer_number].peer_id = peer_id;
 6874|    107|    chat->group[peer_number].ignore = false;
 6875|       |
 6876|    107|    crypto_memlock(gconn->session_secret_key, sizeof(gconn->session_secret_key));
 6877|       |
 6878|    107|    create_gc_session_keypair(chat->log, chat->rng, gconn->session_public_key, gconn->session_secret_key);
 6879|       |
 6880|    107|    if (peer_number > 0) {
  ------------------
  |  Branch (6880:9): [True: 0, False: 107]
  ------------------
 6881|      0|        memcpy(gconn->addr.public_key.enc, public_key, ENC_PUBLIC_KEY_SIZE);  // we get the sig key in the handshake
  ------------------
  |  |  122|      0|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|      0|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
 6882|    107|    } else {
 6883|    107|        gconn->addr.public_key = chat->self_public_key;
 6884|    107|    }
 6885|       |
 6886|    107|    const uint64_t tm = mono_time_get(chat->mono_time);
 6887|       |
 6888|    107|    gcc_set_send_message_id(gconn, 1);
 6889|    107|    gconn->public_key_hash = gc_get_pk_jenkins_hash(public_key);
 6890|    107|    gconn->last_received_packet_time = tm;
 6891|    107|    gconn->last_key_rotation = tm;
 6892|    107|    gconn->tcp_connection_num = tcp_connection_num;
 6893|    107|    gconn->last_sent_ip_time = tm;
 6894|    107|    gconn->last_sent_ping_time = tm - (GC_PING_TIMEOUT / 2) + (peer_number % (GC_PING_TIMEOUT / 2));
  ------------------
  |  |   28|    107|#define GC_PING_TIMEOUT 12
  ------------------
                  gconn->last_sent_ping_time = tm - (GC_PING_TIMEOUT / 2) + (peer_number % (GC_PING_TIMEOUT / 2));
  ------------------
  |  |   28|    107|#define GC_PING_TIMEOUT 12
  ------------------
 6895|    107|    gconn->self_is_closer = id_closest(get_chat_id(&chat->chat_public_key),
 6896|    107|                                       get_enc_key(&chat->self_public_key),
 6897|    107|                                       get_enc_key(&gconn->addr.public_key)) == 1;
 6898|    107|    return peer_number;
 6899|    107|}
gc_group_save:
 7626|    972|{
 7627|    972|    gc_save_pack_group(chat, bp);
 7628|    972|}
gc_group_load:
 7631|  24.2k|{
 7632|  24.2k|    const int group_number = get_new_group_index(c->messenger->mem, c);
 7633|       |
 7634|  24.2k|    if (group_number < 0) {
  ------------------
  |  Branch (7634:9): [True: 0, False: 24.2k]
  ------------------
 7635|      0|        return -1;
 7636|      0|    }
 7637|       |
 7638|  24.2k|    const uint64_t tm = mono_time_get(c->messenger->mono_time);
 7639|       |
 7640|  24.2k|    Messenger *m = c->messenger;
 7641|  24.2k|    GC_Chat *chat = &c->chats[group_number];
 7642|       |
 7643|  24.2k|    chat->group_number = group_number;
 7644|  24.2k|    chat->numpeers = 0;
 7645|  24.2k|    chat->net = m->net;
 7646|  24.2k|    chat->mono_time = m->mono_time;
 7647|  24.2k|    chat->log = m->log;
 7648|  24.2k|    chat->mem = m->mem;
 7649|  24.2k|    chat->rng = m->rng;
 7650|  24.2k|    chat->last_ping_interval = tm;
 7651|  24.2k|    chat->friend_connection_id = -1;
 7652|       |
 7653|       |    // Initialise these first, because we may need to log/dealloc things on cleanup.
 7654|  24.2k|    chat->moderation.log = m->log;
 7655|  24.2k|    chat->moderation.mem = m->mem;
 7656|       |
 7657|  24.2k|    if (!gc_load_unpack_group(chat, bu)) {
  ------------------
  |  Branch (7657:9): [True: 24.2k, False: 70]
  ------------------
 7658|  24.2k|        LOGGER_ERROR(chat->log, "Failed to unpack group");
  ------------------
  |  |   87|  24.2k|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|  24.2k|    do {                                                                         \
  |  |  |  |   77|  24.2k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  48.4k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|  24.2k|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|  24.2k|        }                                                                        \
  |  |  |  |   80|  24.2k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 7659|  24.2k|        return -1;
 7660|  24.2k|    }
 7661|       |
 7662|     70|    init_gc_moderation(chat);
 7663|       |
 7664|     70|    if (!init_gc_tcp_connection(c, chat)) {
  ------------------
  |  Branch (7664:9): [True: 0, False: 70]
  ------------------
 7665|      0|        LOGGER_ERROR(chat->log, "Failed to init tcp connection");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 7666|      0|        return -1;
 7667|      0|    }
 7668|       |
 7669|     70|    if (chat->connection_state == CS_DISCONNECTED) {
  ------------------
  |  Branch (7669:9): [True: 2, False: 68]
  ------------------
 7670|      2|        return group_number;
 7671|      2|    }
 7672|       |
 7673|     68|    if (is_public_chat(chat)) {
  ------------------
  |  Branch (7673:9): [True: 62, False: 6]
  ------------------
 7674|     62|        if (!m_create_group_connection(m, chat)) {
  ------------------
  |  Branch (7674:13): [True: 0, False: 62]
  ------------------
 7675|      0|            LOGGER_ERROR(chat->log, "Failed to initialize group friend connection");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 7676|      0|        }
 7677|     62|    }
 7678|       |
 7679|     68|    return group_number;
 7680|     70|}
new_dht_groupchats:
 8264|  1.74k|{
 8265|  1.74k|    if (m == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (8265:9): [True: 0, False: 1.74k]
  ------------------
 8266|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 8267|      0|    }
 8268|       |
 8269|  1.74k|    GC_Session *c = (GC_Session *)mem_alloc(m->mem, sizeof(GC_Session));
 8270|       |
 8271|  1.74k|    if (c == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (8271:9): [True: 0, False: 1.74k]
  ------------------
 8272|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 8273|      0|    }
 8274|       |
 8275|  1.74k|    c->messenger = m;
 8276|  1.74k|    c->announces_list = m->group_announce;
 8277|       |
 8278|  1.74k|    networking_registerhandler(m->net, NET_PACKET_GC_LOSSLESS, &handle_gc_udp_packet, m);
 8279|  1.74k|    networking_registerhandler(m->net, NET_PACKET_GC_LOSSY, &handle_gc_udp_packet, m);
 8280|  1.74k|    networking_registerhandler(m->net, NET_PACKET_GC_HANDSHAKE, &handle_gc_udp_packet, m);
 8281|  1.74k|    onion_group_announce_register(m->onion_c, gc_handle_announce_response_callback, c);
 8282|       |
 8283|  1.74k|    return c;
 8284|  1.74k|}
gc_group_exit:
 8342|  4.11k|{
 8343|  4.11k|    chat->flag_exit = true;
 8344|  4.11k|    return group_can_handle_packets(chat) ? send_gc_self_exit(chat, message, length) : 0;
  ------------------
  |  Branch (8344:12): [True: 4.08k, False: 30]
  ------------------
 8345|  4.11k|}
kill_dht_groupchats:
 8356|  1.74k|{
 8357|  1.74k|    if (c == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (8357:9): [True: 0, False: 1.74k]
  ------------------
 8358|      0|        return;
 8359|      0|    }
 8360|       |
 8361|  6.79k|    for (uint32_t i = 0; i < c->chats_index; ++i) {
  ------------------
  |  Branch (8361:26): [True: 5.04k, False: 1.74k]
  ------------------
 8362|  5.04k|        GC_Chat *chat = &c->chats[i];
 8363|       |
 8364|  5.04k|        if (chat->connection_state == CS_NONE) {
  ------------------
  |  Branch (8364:13): [True: 937, False: 4.11k]
  ------------------
 8365|    937|            continue;
 8366|    937|        }
 8367|       |
 8368|  4.11k|        if (kill_group(c, chat) != 0) {
  ------------------
  |  Branch (8368:13): [True: 0, False: 4.11k]
  ------------------
 8369|      0|            LOGGER_WARNING(c->messenger->log, "Failed to send group exit packet");
  ------------------
  |  |   86|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8370|      0|        }
 8371|  4.11k|    }
 8372|       |
 8373|  1.74k|    networking_registerhandler(c->messenger->net, NET_PACKET_GC_LOSSY, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(c->messenger->net, NET_PACKET_GC_LOSSY, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
 8374|  1.74k|    networking_registerhandler(c->messenger->net, NET_PACKET_GC_LOSSLESS, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(c->messenger->net, NET_PACKET_GC_LOSSLESS, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
 8375|  1.74k|    networking_registerhandler(c->messenger->net, NET_PACKET_GC_HANDSHAKE, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(c->messenger->net, NET_PACKET_GC_HANDSHAKE, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
 8376|  1.74k|    onion_group_announce_register(c->messenger->onion_c, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  onion_group_announce_register(c->messenger->onion_c, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
 8377|       |
 8378|  1.74k|    mem_delete(c->messenger->mem, c->chats);
 8379|  1.74k|    mem_delete(c->messenger->mem, c);
 8380|  1.74k|}
gc_group_is_valid:
 8383|  6.86k|{
 8384|  6.86k|    return chat->connection_state != CS_NONE && chat->shared_state.version > 0;
  ------------------
  |  Branch (8384:12): [True: 2.90k, False: 3.95k]
  |  Branch (8384:49): [True: 2.18k, False: 719]
  ------------------
 8385|  6.86k|}
gc_count_groups:
 8402|  3.90k|{
 8403|  3.90k|    uint32_t count = 0;
 8404|       |
 8405|  7.89k|    for (uint32_t i = 0; i < c->chats_index; ++i) {
  ------------------
  |  Branch (8405:26): [True: 3.99k, False: 3.90k]
  ------------------
 8406|  3.99k|        const GC_Chat *chat = &c->chats[i];
 8407|       |
 8408|  3.99k|        if (gc_group_is_valid(chat)) {
  ------------------
  |  Branch (8408:13): [True: 1.21k, False: 2.77k]
  ------------------
 8409|  1.21k|            ++count;
 8410|  1.21k|        }
 8411|  3.99k|    }
 8412|       |
 8413|  3.90k|    return count;
 8414|  3.90k|}
group_chats.c:get_gc_peer:
  242|    107|{
  243|    107|    if (!gc_peer_number_is_valid(chat, peer_number)) {
  ------------------
  |  Branch (243:9): [True: 0, False: 107]
  ------------------
  244|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  245|      0|    }
  246|       |
  247|    107|    return &chat->group[peer_number];
  248|    107|}
group_chats.c:saved_peer_is_valid:
  817|  14.8k|{
  818|  14.8k|    return ipport_isset(&saved_peer->ip_port) || ipport_isset(&saved_peer->tcp_relay.ip_port);
  ------------------
  |  Branch (818:12): [True: 560, False: 14.2k]
  |  Branch (818:50): [True: 140, False: 14.1k]
  ------------------
  819|  14.8k|}
group_chats.c:send_gc_broadcast_message:
 2397|  4.08k|{
 2398|  4.08k|    if (length + GC_BROADCAST_ENC_HEADER_SIZE > MAX_GC_PACKET_SIZE) {
  ------------------
  |  |   58|  4.08k|#define GC_BROADCAST_ENC_HEADER_SIZE 1
  ------------------
                  if (length + GC_BROADCAST_ENC_HEADER_SIZE > MAX_GC_PACKET_SIZE) {
  ------------------
  |  |   52|  4.08k|#define MAX_GC_PACKET_SIZE (MAX_GC_PACKET_CHUNK_SIZE * 100)
  |  |  ------------------
  |  |  |  |   36|  4.08k|#define MAX_GC_PACKET_CHUNK_SIZE 500
  |  |  ------------------
  ------------------
  |  Branch (2398:9): [True: 0, False: 4.08k]
  ------------------
 2399|      0|        LOGGER_ERROR(chat->log, "Failed to broadcast message: invalid length %u", length);
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2400|      0|        return false;
 2401|      0|    }
 2402|       |
 2403|  4.08k|    uint8_t *packet = (uint8_t *)mem_balloc(chat->mem, length + GC_BROADCAST_ENC_HEADER_SIZE);
  ------------------
  |  |   58|  4.08k|#define GC_BROADCAST_ENC_HEADER_SIZE 1
  ------------------
 2404|       |
 2405|  4.08k|    if (packet == nullptr) {
  ------------------
  |  |   63|  4.08k|#define nullptr NULL
  ------------------
  |  Branch (2405:9): [True: 0, False: 4.08k]
  ------------------
 2406|      0|        return false;
 2407|      0|    }
 2408|       |
 2409|  4.08k|    const uint16_t packet_len = make_gc_broadcast_header(data, length, packet, bc_type);
 2410|       |
 2411|  4.08k|    const bool ret = send_gc_lossless_packet_all_peers(chat, packet, packet_len, GP_BROADCAST);
 2412|       |
 2413|  4.08k|    mem_delete(chat->mem, packet);
 2414|       |
 2415|  4.08k|    return ret;
 2416|  4.08k|}
group_chats.c:get_peer_number_of_peer_id:
  720|    107|{
  721|    107|    for (uint32_t i = 0; i < chat->numpeers; ++i) {
  ------------------
  |  Branch (721:26): [True: 0, False: 107]
  ------------------
  722|      0|        if (chat->group[i].peer_id.value == peer_id.value) {
  ------------------
  |  Branch (722:13): [True: 0, False: 0]
  ------------------
  723|      0|            return i;
  724|      0|        }
  725|      0|    }
  726|       |
  727|    107|    return -1;
  728|    107|}
group_chats.c:kill_group_friend_connection:
  209|  4.11k|{
  210|  4.11k|    if (chat->friend_connection_id != -1) {
  ------------------
  |  Branch (210:9): [True: 62, False: 4.04k]
  ------------------
  211|     62|        m_kill_group_connection(c->messenger, chat);
  212|     62|    }
  213|  4.11k|}
group_chats.c:make_gc_broadcast_header:
 2380|  4.08k|{
 2381|  4.08k|    packet[0] = bc_type;
 2382|  4.08k|    const uint16_t header_len = sizeof(uint8_t);
 2383|       |
 2384|  4.08k|    if (data != nullptr && length > 0) {
  ------------------
  |  |   63|  8.16k|#define nullptr NULL
  ------------------
  |  Branch (2384:9): [True: 0, False: 4.08k]
  |  Branch (2384:28): [True: 0, False: 0]
  ------------------
 2385|      0|        memcpy(packet + header_len, data, length);
 2386|      0|    }
 2387|       |
 2388|  4.08k|    return length + header_len;
 2389|  4.08k|}
group_chats.c:send_gc_lossless_packet_all_peers:
 2321|  4.08k|{
 2322|  4.08k|    uint32_t sent = 0;
 2323|  4.08k|    uint32_t confirmed_peers = 0;
 2324|       |
 2325|  4.08k|    for (uint32_t i = 1; i < chat->numpeers; ++i) {
  ------------------
  |  Branch (2325:26): [True: 0, False: 4.08k]
  ------------------
 2326|      0|        GC_Connection *gconn = get_gc_connection(chat, i);
 2327|       |
 2328|      0|        assert(gconn != nullptr);
 2329|       |
 2330|      0|        if (!gconn->confirmed) {
  ------------------
  |  Branch (2330:13): [True: 0, False: 0]
  ------------------
 2331|      0|            continue;
 2332|      0|        }
 2333|       |
 2334|      0|        ++confirmed_peers;
 2335|       |
 2336|      0|        if (send_lossless_group_packet(chat, gconn, data, length, type)) {
  ------------------
  |  Branch (2336:13): [True: 0, False: 0]
  ------------------
 2337|      0|            ++sent;
 2338|      0|        }
 2339|      0|    }
 2340|       |
 2341|  4.08k|    return sent > 0 || confirmed_peers == 0;
  ------------------
  |  Branch (2341:12): [True: 0, False: 4.08k]
  |  Branch (2341:24): [True: 4.08k, False: 0]
  ------------------
 2342|  4.08k|}
group_chats.c:get_new_peer_id:
  738|    107|{
  739|    107|    for (uint32_t i = 0; i < UINT32_MAX - 1; ++i) {
  ------------------
  |  Branch (739:26): [True: 107, False: 0]
  ------------------
  740|    107|        const GC_Peer_Id peer_id = gc_peer_id_from_int(i);
  741|    107|        if (get_peer_number_of_peer_id(chat, peer_id) == -1) {
  ------------------
  |  Branch (741:13): [True: 107, False: 0]
  ------------------
  742|    107|            return peer_id;
  743|    107|        }
  744|    107|    }
  745|       |
  746|      0|    return gc_invalid_peer_id();
  747|    107|}
group_chats.c:gc_peer_id_is_valid:
  187|    107|{
  188|    107|    return peer_id.value != GC_INVALID_PEER_ID_VALUE;
  ------------------
  |  |  178|    107|#define GC_INVALID_PEER_ID_VALUE ((force GC_Peer_Id_Value)-1)
  ------------------
  189|    107|}
group_chats.c:add_tcp_relays_to_chat:
 7391|     70|{
 7392|     70|    const Messenger *m = c->messenger;
 7393|       |
 7394|     70|    const uint32_t num_relays = tcp_connections_count(nc_get_tcp_c(m->net_crypto));
 7395|       |
 7396|     70|    if (num_relays == 0) {
  ------------------
  |  Branch (7396:9): [True: 70, False: 0]
  ------------------
 7397|     70|        return;
 7398|     70|    }
 7399|       |
 7400|      0|    Node_format *tcp_relays = (Node_format *)mem_valloc(chat->mem, num_relays, sizeof(Node_format));
 7401|       |
 7402|      0|    if (tcp_relays == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (7402:9): [True: 0, False: 0]
  ------------------
 7403|      0|        return;
 7404|      0|    }
 7405|       |
 7406|      0|    const uint32_t num_copied = tcp_copy_connected_relays(nc_get_tcp_c(m->net_crypto), tcp_relays, (uint16_t)num_relays);
 7407|       |
 7408|      0|    for (uint32_t i = 0; i < num_copied; ++i) {
  ------------------
  |  Branch (7408:26): [True: 0, False: 0]
  ------------------
 7409|      0|        add_tcp_relay_global(chat->tcp_conn, &tcp_relays[i].ip_port, tcp_relays[i].public_key);
 7410|      0|    }
 7411|       |
 7412|      0|    mem_delete(chat->mem, tcp_relays);
 7413|      0|}
group_chats.c:get_new_group_index:
 7361|  24.2k|{
 7362|  24.2k|    if (c == nullptr) {
  ------------------
  |  |   63|  24.2k|#define nullptr NULL
  ------------------
  |  Branch (7362:9): [True: 0, False: 24.2k]
  ------------------
 7363|      0|        return -1;
 7364|      0|    }
 7365|       |
 7366|   606k|    for (uint32_t i = 0; i < c->chats_index; ++i) {
  ------------------
  |  Branch (7366:26): [True: 601k, False: 5.11k]
  ------------------
 7367|   601k|        if (c->chats[i].connection_state == CS_NONE) {
  ------------------
  |  Branch (7367:13): [True: 19.1k, False: 582k]
  ------------------
 7368|  19.1k|            return i;
 7369|  19.1k|        }
 7370|   601k|    }
 7371|       |
 7372|  5.11k|    if (!realloc_groupchats(mem, c, c->chats_index + 1)) {
  ------------------
  |  Branch (7372:9): [True: 0, False: 5.11k]
  ------------------
 7373|      0|        return -1;
 7374|      0|    }
 7375|       |
 7376|  5.11k|    const int new_index = c->chats_index;
 7377|       |
 7378|  5.11k|    c->chats[new_index] = empty_gc_chat;
 7379|       |
 7380|  56.3k|    for (size_t i = 0; i < sizeof(c->chats[new_index].saved_invites) / sizeof(*c->chats[new_index].saved_invites); ++i) {
  ------------------
  |  Branch (7380:24): [True: 51.1k, False: 5.11k]
  ------------------
 7381|  51.1k|        c->chats[new_index].saved_invites[i] = -1;
 7382|  51.1k|    }
 7383|       |
 7384|  5.11k|    ++c->chats_index;
 7385|       |
 7386|  5.11k|    return new_index;
 7387|  5.11k|}
group_chats.c:realloc_groupchats:
 7342|  5.49k|{
 7343|  5.49k|    if (n == 0) {
  ------------------
  |  Branch (7343:9): [True: 332, False: 5.16k]
  ------------------
 7344|    332|        mem_delete(mem, c->chats);
 7345|    332|        c->chats = nullptr;
  ------------------
  |  |   63|    332|#define nullptr NULL
  ------------------
 7346|    332|        return true;
 7347|    332|    }
 7348|       |
 7349|  5.16k|    GC_Chat *temp = (GC_Chat *)mem_vrealloc(mem, c->chats, n, sizeof(GC_Chat));
 7350|       |
 7351|  5.16k|    if (temp == nullptr) {
  ------------------
  |  |   63|  5.16k|#define nullptr NULL
  ------------------
  |  Branch (7351:9): [True: 0, False: 5.16k]
  ------------------
 7352|      0|        return false;
 7353|      0|    }
 7354|       |
 7355|  5.16k|    c->chats = temp;
 7356|  5.16k|    return true;
 7357|  5.16k|}
group_chats.c:init_gc_moderation:
 7468|     70|{
 7469|     70|    memcpy(chat->moderation.founder_public_sig_key,
 7470|     70|           get_sig_pk(&chat->shared_state.founder_public_key), SIG_PUBLIC_KEY_SIZE);
  ------------------
  |  |  132|     70|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   33|     70|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  ------------------
  ------------------
 7471|     70|    memcpy(chat->moderation.self_public_sig_key, get_sig_pk(&chat->self_public_key), SIG_PUBLIC_KEY_SIZE);
  ------------------
  |  |  132|     70|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   33|     70|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  ------------------
  ------------------
 7472|     70|    memcpy(chat->moderation.self_secret_sig_key, get_sig_sk(&chat->self_secret_key), SIG_SECRET_KEY_SIZE);
  ------------------
  |  |  137|     70|#define SIG_SECRET_KEY_SIZE            CRYPTO_SIGN_SECRET_KEY_SIZE
  |  |  ------------------
  |  |  |  |   38|     70|#define CRYPTO_SIGN_SECRET_KEY_SIZE    64
  |  |  ------------------
  ------------------
 7473|     70|    chat->moderation.shared_state_version = chat->shared_state.version;
 7474|     70|    chat->moderation.log = chat->log;
 7475|     70|    chat->moderation.mem = chat->mem;
 7476|     70|}
group_chats.c:init_gc_tcp_connection:
 7417|     70|{
 7418|     70|    const Messenger *m = c->messenger;
 7419|       |
 7420|     70|    chat->tcp_conn = new_tcp_connections(chat->log, chat->mem, chat->rng, m->ns, chat->mono_time, chat->self_secret_key.enc,
 7421|     70|                                         &m->options.proxy_info);
 7422|       |
 7423|     70|    if (chat->tcp_conn == nullptr) {
  ------------------
  |  |   63|     70|#define nullptr NULL
  ------------------
  |  Branch (7423:9): [True: 0, False: 70]
  ------------------
 7424|      0|        return false;
 7425|      0|    }
 7426|       |
 7427|     70|    add_tcp_relays_to_chat(c, chat);
 7428|       |
 7429|     70|    set_packet_tcp_connection_callback(chat->tcp_conn, &handle_gc_tcp_packet, c->messenger);
 7430|     70|    set_oob_packet_tcp_connection_callback(chat->tcp_conn, &handle_gc_tcp_oob_packet, c->messenger);
 7431|       |
 7432|     70|    return true;
 7433|     70|}
group_chats.c:is_public_chat:
  536|     68|{
  537|     68|    return chat->shared_state.privacy_state == GI_PUBLIC;
  538|     68|}
group_chats.c:group_can_handle_packets:
 6383|  4.11k|{
 6384|  4.11k|    const GC_Conn_State state = chat->connection_state;
 6385|  4.11k|    return state == CS_CONNECTING || state == CS_CONNECTED;
  ------------------
  |  Branch (6385:12): [True: 4.08k, False: 30]
  |  Branch (6385:38): [True: 0, False: 30]
  ------------------
 6386|  4.11k|}
group_chats.c:send_gc_self_exit:
 3450|  4.08k|{
 3451|  4.08k|    if (length > MAX_GC_PART_MESSAGE_SIZE) {
  ------------------
  |  |   25|  4.08k|#define MAX_GC_PART_MESSAGE_SIZE 128
  ------------------
  |  Branch (3451:9): [True: 0, False: 4.08k]
  ------------------
 3452|      0|        return -1;
 3453|      0|    }
 3454|       |
 3455|  4.08k|    if (!send_gc_broadcast_message(chat, partmessage, length, GM_PEER_EXIT)) {
  ------------------
  |  Branch (3455:9): [True: 0, False: 4.08k]
  ------------------
 3456|      0|        return -2;
 3457|      0|    }
 3458|       |
 3459|  4.08k|    return 0;
 3460|  4.08k|}
group_chats.c:group_delete:
 8311|  4.11k|{
 8312|  4.11k|    if (c == nullptr || chat == nullptr) {
  ------------------
  |  |   63|  8.22k|#define nullptr NULL
  ------------------
                  if (c == nullptr || chat == nullptr) {
  ------------------
  |  |   63|  4.11k|#define nullptr NULL
  ------------------
  |  Branch (8312:9): [True: 0, False: 4.11k]
  |  Branch (8312:25): [True: 0, False: 4.11k]
  ------------------
 8313|      0|        if (chat != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (8313:13): [True: 0, False: 0]
  ------------------
 8314|      0|            LOGGER_ERROR(chat->log, "Null pointer");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8315|      0|        }
 8316|       |
 8317|      0|        return;
 8318|      0|    }
 8319|       |
 8320|  4.11k|    group_cleanup(c, chat);
 8321|       |
 8322|  4.11k|    c->chats[chat->group_number] = empty_gc_chat;
 8323|       |
 8324|  4.11k|    uint32_t i;
 8325|       |
 8326|  8.29k|    for (i = c->chats_index; i > 0; --i) {
  ------------------
  |  Branch (8326:30): [True: 7.96k, False: 332]
  ------------------
 8327|  7.96k|        if (c->chats[i - 1].connection_state != CS_NONE) {
  ------------------
  |  Branch (8327:13): [True: 3.77k, False: 4.18k]
  ------------------
 8328|  3.77k|            break;
 8329|  3.77k|        }
 8330|  7.96k|    }
 8331|       |
 8332|  4.11k|    if (c->chats_index != i) {
  ------------------
  |  Branch (8332:9): [True: 377, False: 3.73k]
  ------------------
 8333|    377|        c->chats_index = i;
 8334|       |
 8335|    377|        if (!realloc_groupchats(c->messenger->mem, c, c->chats_index)) {
  ------------------
  |  Branch (8335:13): [True: 0, False: 377]
  ------------------
 8336|      0|            LOGGER_ERROR(c->messenger->log, "Failed to reallocate groupchats array");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8337|      0|        }
 8338|    377|    }
 8339|  4.11k|}
group_chats.c:group_cleanup:
 8287|  4.11k|{
 8288|  4.11k|    kill_group_friend_connection(c, chat);
 8289|       |
 8290|  4.11k|    mod_list_cleanup(&chat->moderation);
 8291|  4.11k|    sanctions_list_cleanup(&chat->moderation);
 8292|       |
 8293|  4.11k|    if (chat->tcp_conn != nullptr) {
  ------------------
  |  |   63|  4.11k|#define nullptr NULL
  ------------------
  |  Branch (8293:9): [True: 70, False: 4.04k]
  ------------------
 8294|     70|        kill_tcp_connections(chat->tcp_conn);
 8295|     70|    }
 8296|       |
 8297|  4.11k|    gcc_cleanup(chat);
 8298|       |
 8299|  4.11k|    if (chat->group != nullptr) {
  ------------------
  |  |   63|  4.11k|#define nullptr NULL
  ------------------
  |  Branch (8299:9): [True: 107, False: 4.00k]
  ------------------
 8300|    107|        mem_delete(chat->mem, chat->group);
 8301|    107|        chat->group = nullptr;
  ------------------
  |  |   63|    107|#define nullptr NULL
  ------------------
 8302|    107|    }
 8303|       |
 8304|  4.11k|    crypto_memunlock(&chat->self_secret_key, sizeof(chat->self_secret_key));
 8305|  4.11k|    crypto_memunlock(&chat->chat_secret_key, sizeof(chat->chat_secret_key));
 8306|  4.11k|    crypto_memunlock(chat->shared_state.password, sizeof(chat->shared_state.password));
 8307|  4.11k|}
group_chats.c:kill_group:
 8349|  4.11k|{
 8350|  4.11k|    const int ret = gc_group_exit(c, chat, nullptr, 0);
  ------------------
  |  |   63|  4.11k|#define nullptr NULL
  ------------------
 8351|  4.11k|    group_delete(c, chat);
 8352|  4.11k|    return ret;
 8353|  4.11k|}
group_chats.c:create_gc_session_keypair:
 8450|    107|{
 8451|    107|    if (crypto_new_keypair(rng, public_key, secret_key) != 0) {
  ------------------
  |  Branch (8451:9): [True: 0, False: 107]
  ------------------
 8452|      0|        LOGGER_FATAL(log, "Failed to create group session keypair");
  ------------------
  |  |   90|      0|    do {                                \
  |  |   91|      0|        LOGGER_ERROR(log, __VA_ARGS__); \
  |  |  ------------------
  |  |  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   92|      0|        logger_abort();                 \
  |  |   93|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (93:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 8453|      0|    }
 8454|    107|}

gcc_set_send_message_id:
   76|    107|{
   77|    107|    gconn->send_message_id = id;
   78|    107|    gconn->send_array_start = id % GCC_BUFFER_SIZE;
  ------------------
  |  |   55|    107|#define GCC_BUFFER_SIZE 2048
  ------------------
   79|    107|}
gcc_set_ip_port:
  279|    107|{
  280|    107|    if (ipp != nullptr && ipport_isset(ipp)) {
  ------------------
  |  |   63|    214|#define nullptr NULL
  ------------------
  |  Branch (280:9): [True: 0, False: 107]
  |  Branch (280:27): [True: 0, False: 0]
  ------------------
  281|      0|        gconn->addr.ip_port = *ipp;
  282|      0|    }
  283|    107|}
gcc_peer_cleanup:
  690|    107|{
  691|   219k|    for (size_t i = 0; i < GCC_BUFFER_SIZE; ++i) {
  ------------------
  |  |   55|   219k|#define GCC_BUFFER_SIZE 2048
  ------------------
  |  Branch (691:24): [True: 219k, False: 107]
  ------------------
  692|   219k|        mem_delete(mem, gconn->send_array[i].data);
  693|   219k|        mem_delete(mem, gconn->recv_array[i].data);
  694|   219k|    }
  695|       |
  696|    107|    mem_delete(mem, gconn->recv_array);
  697|    107|    mem_delete(mem, gconn->send_array);
  698|       |
  699|    107|    crypto_memunlock(gconn->session_secret_key, sizeof(gconn->session_secret_key));
  700|    107|    crypto_memunlock(gconn->session_shared_key, sizeof(gconn->session_shared_key));
  701|    107|    crypto_memzero(gconn, sizeof(GC_Connection));
  702|    107|}
gcc_cleanup:
  705|  4.11k|{
  706|  4.21k|    for (uint32_t i = 0; i < chat->numpeers; ++i) {
  ------------------
  |  Branch (706:26): [True: 107, False: 4.11k]
  ------------------
  707|    107|        GC_Connection *gconn = get_gc_connection(chat, i);
  708|    107|        assert(gconn != nullptr);
  709|       |
  710|    107|        gcc_peer_cleanup(chat->mem, gconn);
  711|    107|    }
  712|  4.11k|}

mod_list_unpack:
   43|    141|{
   44|    141|    if (length < num_mods * MOD_LIST_ENTRY_SIZE) {
  ------------------
  |  |   27|    141|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|    141|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|    141|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (44:9): [True: 0, False: 141]
  ------------------
   45|      0|        return -1;
   46|      0|    }
   47|       |
   48|    141|    mod_list_cleanup(moderation);
   49|       |
   50|    141|    if (num_mods == 0) {
  ------------------
  |  Branch (50:9): [True: 0, False: 141]
  ------------------
   51|      0|        return 0;
   52|      0|    }
   53|       |
   54|    141|    uint8_t **tmp_list = (uint8_t **)mem_valloc(moderation->mem, num_mods, sizeof(uint8_t *));
   55|       |
   56|    141|    if (tmp_list == nullptr) {
  ------------------
  |  |   63|    141|#define nullptr NULL
  ------------------
  |  Branch (56:9): [True: 0, False: 141]
  ------------------
   57|      0|        return -1;
   58|      0|    }
   59|       |
   60|    141|    uint16_t unpacked_len = 0;
   61|       |
   62|  2.39k|    for (uint16_t i = 0; i < num_mods; ++i) {
  ------------------
  |  Branch (62:26): [True: 2.25k, False: 141]
  ------------------
   63|  2.25k|        uint8_t *entry = (uint8_t *)mem_balloc(moderation->mem, MOD_LIST_ENTRY_SIZE);
  ------------------
  |  |   27|  2.25k|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|  2.25k|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|  2.25k|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   64|       |
   65|  2.25k|        if (entry == nullptr) {
  ------------------
  |  |   63|  2.25k|#define nullptr NULL
  ------------------
  |  Branch (65:13): [True: 0, False: 2.25k]
  ------------------
   66|      0|            free_uint8_t_pointer_array(moderation->mem, tmp_list, i);
   67|      0|            return -1;
   68|      0|        }
   69|       |
   70|  2.25k|        memcpy(entry, &data[i * MOD_LIST_ENTRY_SIZE], MOD_LIST_ENTRY_SIZE);
  ------------------
  |  |   27|  2.25k|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|  2.25k|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|  2.25k|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                      memcpy(entry, &data[i * MOD_LIST_ENTRY_SIZE], MOD_LIST_ENTRY_SIZE);
  ------------------
  |  |   27|  2.25k|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|  2.25k|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|  2.25k|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   71|  2.25k|        tmp_list[i] = entry;
   72|       |
   73|  2.25k|        unpacked_len += MOD_LIST_ENTRY_SIZE;
  ------------------
  |  |   27|  2.25k|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|  2.25k|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|  2.25k|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   74|  2.25k|    }
   75|       |
   76|    141|    moderation->mod_list = tmp_list;
   77|    141|    moderation->num_mods = num_mods;
   78|       |
   79|    141|    return unpacked_len;
   80|    141|}
mod_list_pack:
   83|    148|{
   84|  2.51k|    for (uint16_t i = 0; i < moderation->num_mods; ++i) {
  ------------------
  |  Branch (84:26): [True: 2.36k, False: 148]
  ------------------
   85|  2.36k|        memcpy(&data[i * MOD_LIST_ENTRY_SIZE], moderation->mod_list[i], MOD_LIST_ENTRY_SIZE);
  ------------------
  |  |   27|  2.36k|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|  2.36k|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|  2.36k|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                      memcpy(&data[i * MOD_LIST_ENTRY_SIZE], moderation->mod_list[i], MOD_LIST_ENTRY_SIZE);
  ------------------
  |  |   27|  2.36k|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|  2.36k|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|  2.36k|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   86|  2.36k|    }
   87|    148|}
mod_list_cleanup:
  229|  4.25k|{
  230|  4.25k|    free_uint8_t_pointer_array(moderation->mem, moderation->mod_list, moderation->num_mods);
  231|  4.25k|    moderation->num_mods = 0;
  232|  4.25k|    moderation->mod_list = nullptr;
  ------------------
  |  |   63|  4.25k|#define nullptr NULL
  ------------------
  233|  4.25k|}
sanctions_list_cleanup:
  866|  4.11k|{
  867|  4.11k|    mem_delete(moderation->mem, moderation->sanctions);
  868|       |
  869|  4.11k|    moderation->sanctions = nullptr;
  ------------------
  |  |   63|  4.11k|#define nullptr NULL
  ------------------
  870|  4.11k|    moderation->num_sanctions = 0;
  871|  4.11k|}

gca_onion_init:
   78|  1.74k|{
   79|  1.74k|    onion_announce_extra_data_callback(onion_a, GCA_MAX_SENT_ANNOUNCES * sizeof(GC_Announce), pack_group_announces,
  ------------------
  |  |   34|  1.74k|#define GCA_MAX_SENT_ANNOUNCES 4
  ------------------
   80|  1.74k|                                       group_announce);
   81|  1.74k|}

group_privacy_state_from_int:
   33|  4.11k|{
   34|  4.11k|    switch (value) {
   35|  3.96k|        case GI_PUBLIC: {
  ------------------
  |  Branch (35:9): [True: 3.96k, False: 150]
  ------------------
   36|  3.96k|            *out_enum = GI_PUBLIC;
   37|  3.96k|            return true;
   38|      0|        }
   39|       |
   40|     22|        case GI_PRIVATE: {
  ------------------
  |  Branch (40:9): [True: 22, False: 4.08k]
  ------------------
   41|     22|            *out_enum = GI_PRIVATE;
   42|     22|            return true;
   43|      0|        }
   44|       |
   45|    128|        default: {
  ------------------
  |  Branch (45:9): [True: 128, False: 3.98k]
  ------------------
   46|    128|            *out_enum = GI_PUBLIC;
   47|    128|            return false;
   48|      0|        }
   49|  4.11k|    }
   50|  4.11k|}
group_voice_state_from_int:
   53|  4.11k|{
   54|  4.11k|    switch (value) {
   55|  2.12k|        case GV_ALL: {
  ------------------
  |  Branch (55:9): [True: 2.12k, False: 1.99k]
  ------------------
   56|  2.12k|            *out_enum = GV_ALL;
   57|  2.12k|            return true;
   58|      0|        }
   59|       |
   60|     14|        case GV_MODS: {
  ------------------
  |  Branch (60:9): [True: 14, False: 4.09k]
  ------------------
   61|     14|            *out_enum = GV_MODS;
   62|     14|            return true;
   63|      0|        }
   64|       |
   65|      4|        case GV_FOUNDER: {
  ------------------
  |  Branch (65:9): [True: 4, False: 4.10k]
  ------------------
   66|      4|            *out_enum = GV_FOUNDER;
   67|      4|            return true;
   68|      0|        }
   69|       |
   70|  1.97k|        default: {
  ------------------
  |  Branch (70:9): [True: 1.97k, False: 2.13k]
  ------------------
   71|  1.97k|            *out_enum = GV_ALL;
   72|  1.97k|            return false;
   73|      0|        }
   74|  4.11k|    }
   75|  4.11k|}
gc_load_unpack_group:
  328|  24.2k|{
  329|  24.2k|    uint32_t actual_size;
  330|  24.2k|    if (!bin_unpack_array_fixed(bu, 7, &actual_size)) {
  ------------------
  |  Branch (330:9): [True: 2.59k, False: 21.6k]
  ------------------
  331|  2.59k|        LOGGER_ERROR(chat->log, "Group info array malformed: %d != 7", actual_size);
  ------------------
  |  |   87|  2.59k|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|  2.59k|    do {                                                                         \
  |  |  |  |   77|  2.59k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  5.18k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|  2.59k|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|  2.59k|        }                                                                        \
  |  |  |  |   80|  2.59k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  332|  2.59k|        return false;
  333|  2.59k|    }
  334|       |
  335|  21.6k|    return load_unpack_state_values(chat, bu)
  ------------------
  |  Branch (335:12): [True: 4.11k, False: 17.5k]
  ------------------
  336|  21.6k|           && load_unpack_state_bin(chat, bu)
  ------------------
  |  Branch (336:15): [True: 273, False: 3.83k]
  ------------------
  337|  21.6k|           && load_unpack_topic_info(chat, bu)
  ------------------
  |  Branch (337:15): [True: 228, False: 45]
  ------------------
  338|  21.6k|           && load_unpack_mod_list(chat, bu)
  ------------------
  |  Branch (338:15): [True: 212, False: 16]
  ------------------
  339|  21.6k|           && load_unpack_keys(chat, bu)
  ------------------
  |  Branch (339:15): [True: 114, False: 98]
  ------------------
  340|  21.6k|           && load_unpack_self_info(chat, bu)
  ------------------
  |  Branch (340:15): [True: 107, False: 7]
  ------------------
  341|  21.6k|           && load_unpack_saved_peers(chat, bu);
  ------------------
  |  Branch (341:15): [True: 70, False: 37]
  ------------------
  342|  24.2k|}
gc_save_pack_group:
  482|    972|{
  483|    972|    if (chat->numpeers == 0) {
  ------------------
  |  Branch (483:9): [True: 824, False: 148]
  ------------------
  484|    824|        LOGGER_ERROR(chat->log, "Failed to pack group: numpeers is 0");
  ------------------
  |  |   87|    824|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|    824|    do {                                                                         \
  |  |  |  |   77|    824|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  1.64k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|    824|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|    824|        }                                                                        \
  |  |  |  |   80|    824|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  485|    824|        return;
  486|    824|    }
  487|       |
  488|    148|    bin_pack_array(bp, 7);
  489|       |
  490|    148|    save_pack_state_values(chat, bp); // 1
  491|    148|    save_pack_state_bin(chat, bp); // 2
  492|    148|    save_pack_topic_info(chat, bp); // 3
  493|    148|    save_pack_mod_list(chat, bp); // 4
  494|    148|    save_pack_keys(chat, bp); // 5
  495|    148|    save_pack_self_info(chat, bp); // 6
  496|    148|    save_pack_saved_peers(chat, bp); // 7
  497|    148|}
group_pack.c:load_unpack_state_values:
   79|  21.6k|{
   80|  21.6k|    if (!bin_unpack_array_fixed(bu, 8, nullptr)) {
  ------------------
  |  |   63|  21.6k|#define nullptr NULL
  ------------------
  |  Branch (80:9): [True: 1.71k, False: 19.9k]
  ------------------
   81|  1.71k|        LOGGER_ERROR(chat->log, "Group state values array malformed");
  ------------------
  |  |   87|  1.71k|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|  1.71k|    do {                                                                         \
  |  |  |  |   77|  1.71k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  3.43k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|  1.71k|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|  1.71k|        }                                                                        \
  |  |  |  |   80|  1.71k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   82|  1.71k|        return false;
   83|  1.71k|    }
   84|       |
   85|  19.9k|    bool manually_disconnected = false;
   86|  19.9k|    uint8_t privacy_state = 0;
   87|  19.9k|    uint8_t voice_state = 0;
   88|       |
   89|  19.9k|    if (!(bin_unpack_bool(bu, &manually_disconnected)
  ------------------
  |  Branch (89:11): [True: 17.1k, False: 2.82k]
  ------------------
   90|  19.9k|            && bin_unpack_u16(bu, &chat->shared_state.group_name_len)
  ------------------
  |  Branch (90:16): [True: 15.5k, False: 1.56k]
  ------------------
   91|  19.9k|            && bin_unpack_u08(bu, &privacy_state)
  ------------------
  |  Branch (91:16): [True: 13.0k, False: 2.51k]
  ------------------
   92|  19.9k|            && bin_unpack_u16(bu, &chat->shared_state.maxpeers)
  ------------------
  |  Branch (92:16): [True: 10.9k, False: 2.13k]
  ------------------
   93|  19.9k|            && bin_unpack_u16(bu, &chat->shared_state.password_length)
  ------------------
  |  Branch (93:16): [True: 10.5k, False: 353]
  ------------------
   94|  19.9k|            && bin_unpack_u32(bu, &chat->shared_state.version)
  ------------------
  |  Branch (94:16): [True: 8.85k, False: 1.71k]
  ------------------
   95|  19.9k|            && bin_unpack_u32(bu, &chat->shared_state.topic_lock)
  ------------------
  |  Branch (95:16): [True: 4.71k, False: 4.13k]
  ------------------
   96|  19.9k|            && bin_unpack_u08(bu, &voice_state))) {
  ------------------
  |  Branch (96:16): [True: 4.11k, False: 608]
  ------------------
   97|  15.8k|        LOGGER_ERROR(chat->log, "Failed to unpack state value");
  ------------------
  |  |   87|  15.8k|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|  15.8k|    do {                                                                         \
  |  |  |  |   77|  15.8k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  31.7k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|  15.8k|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|  15.8k|        }                                                                        \
  |  |  |  |   80|  15.8k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   98|  15.8k|        return false;
   99|  15.8k|    }
  100|       |
  101|  4.11k|    chat->connection_state = manually_disconnected ? CS_DISCONNECTED : CS_CONNECTING;
  ------------------
  |  Branch (101:30): [True: 30, False: 4.08k]
  ------------------
  102|  4.11k|    group_privacy_state_from_int(privacy_state, &chat->shared_state.privacy_state);
  103|  4.11k|    group_voice_state_from_int(voice_state, &chat->shared_state.voice_state);
  104|       |
  105|       |    // we always load saved groups as private in case the group became private while we were offline.
  106|       |    // this will have no detrimental effect if the group is public, as the correct privacy
  107|       |    // state will be set via sync.
  108|  4.11k|    chat->join_type = HJ_PRIVATE;
  109|       |
  110|  4.11k|    return true;
  111|  19.9k|}
group_pack.c:load_unpack_state_bin:
  115|  4.11k|{
  116|  4.11k|    if (!bin_unpack_array_fixed(bu, 5, nullptr)) {
  ------------------
  |  |   63|  4.11k|#define nullptr NULL
  ------------------
  |  Branch (116:9): [True: 3.71k, False: 394]
  ------------------
  117|  3.71k|        LOGGER_ERROR(chat->log, "Group state binary array malformed");
  ------------------
  |  |   87|  3.71k|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|  3.71k|    do {                                                                         \
  |  |  |  |   77|  3.71k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  7.43k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|  3.71k|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|  3.71k|        }                                                                        \
  |  |  |  |   80|  3.71k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  118|  3.71k|        return false;
  119|  3.71k|    }
  120|       |
  121|    394|    if (!bin_unpack_bin_fixed(bu, chat->shared_state_sig, SIGNATURE_SIZE)) {
  ------------------
  |  |   27|    394|#define SIGNATURE_SIZE CRYPTO_SIGNATURE_SIZE
  |  |  ------------------
  |  |  |  |   28|    394|#define CRYPTO_SIGNATURE_SIZE          64
  |  |  ------------------
  ------------------
  |  Branch (121:9): [True: 30, False: 364]
  ------------------
  122|     30|        LOGGER_ERROR(chat->log, "Failed to unpack shared state signature");
  ------------------
  |  |   87|     30|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     30|    do {                                                                         \
  |  |  |  |   77|     30|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     60|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|     30|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|     30|        }                                                                        \
  |  |  |  |   80|     30|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  123|     30|        return false;
  124|     30|    }
  125|       |
  126|    364|    if (!unpack_extended_public_key(&chat->shared_state.founder_public_key, bu)) {
  ------------------
  |  Branch (126:9): [True: 31, False: 333]
  ------------------
  127|     31|        LOGGER_ERROR(chat->log, "Failed to unpack founder public key");
  ------------------
  |  |   87|     31|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     31|    do {                                                                         \
  |  |  |  |   77|     31|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     62|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|     31|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|     31|        }                                                                        \
  |  |  |  |   80|     31|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  128|     31|        return false;
  129|     31|    }
  130|       |
  131|    333|    if (!(bin_unpack_bin_max(bu, chat->shared_state.group_name, &chat->shared_state.group_name_len, sizeof(chat->shared_state.group_name))
  ------------------
  |  Branch (131:11): [True: 296, False: 37]
  ------------------
  132|    333|            && bin_unpack_bin_max(bu, chat->shared_state.password, &chat->shared_state.password_length, sizeof(chat->shared_state.password))
  ------------------
  |  Branch (132:16): [True: 274, False: 22]
  ------------------
  133|    333|            && bin_unpack_bin_fixed(bu, chat->shared_state.mod_list_hash, MOD_MODERATION_HASH_SIZE))) {
  ------------------
  |  |   26|    274|#define MOD_MODERATION_HASH_SIZE CRYPTO_SHA256_SIZE
  |  |  ------------------
  |  |  |  |   74|    274|#define CRYPTO_SHA256_SIZE             32
  |  |  ------------------
  ------------------
  |  Branch (133:16): [True: 273, False: 1]
  ------------------
  134|     60|        LOGGER_ERROR(chat->log, "Failed to unpack state binary data");
  ------------------
  |  |   87|     60|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     60|    do {                                                                         \
  |  |  |  |   77|     60|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    120|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|     60|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|     60|        }                                                                        \
  |  |  |  |   80|     60|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  135|     60|        return false;
  136|     60|    }
  137|       |
  138|    273|    return true;
  139|    333|}
group_pack.c:load_unpack_topic_info:
  143|    273|{
  144|    273|    if (!bin_unpack_array_fixed(bu, 6, nullptr)) {
  ------------------
  |  |   63|    273|#define nullptr NULL
  ------------------
  |  Branch (144:9): [True: 10, False: 263]
  ------------------
  145|     10|        LOGGER_ERROR(chat->log, "Group topic array malformed");
  ------------------
  |  |   87|     10|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     10|    do {                                                                         \
  |  |  |  |   77|     10|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     20|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|     10|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|     10|        }                                                                        \
  |  |  |  |   80|     10|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  146|     10|        return false;
  147|     10|    }
  148|       |
  149|    263|    if (!(bin_unpack_u32(bu, &chat->topic_info.version)
  ------------------
  |  Branch (149:11): [True: 262, False: 1]
  ------------------
  150|    263|            && bin_unpack_u16(bu, &chat->topic_info.length)
  ------------------
  |  Branch (150:16): [True: 256, False: 6]
  ------------------
  151|    263|            && bin_unpack_u16(bu, &chat->topic_info.checksum)
  ------------------
  |  Branch (151:16): [True: 255, False: 1]
  ------------------
  152|    263|            && bin_unpack_bin_max(bu, chat->topic_info.topic, &chat->topic_info.length, sizeof(chat->topic_info.topic))
  ------------------
  |  Branch (152:16): [True: 247, False: 8]
  ------------------
  153|    263|            && bin_unpack_bin_fixed(bu, chat->topic_info.public_sig_key, SIG_PUBLIC_KEY_SIZE)
  ------------------
  |  |  132|    247|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   33|    247|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  ------------------
  ------------------
  |  Branch (153:16): [True: 234, False: 13]
  ------------------
  154|    263|            && bin_unpack_bin_fixed(bu, chat->topic_sig, SIGNATURE_SIZE))) {
  ------------------
  |  |   27|    234|#define SIGNATURE_SIZE CRYPTO_SIGNATURE_SIZE
  |  |  ------------------
  |  |  |  |   28|    234|#define CRYPTO_SIGNATURE_SIZE          64
  |  |  ------------------
  ------------------
  |  Branch (154:16): [True: 228, False: 6]
  ------------------
  155|     35|        LOGGER_ERROR(chat->log, "Failed to unpack topic info");
  ------------------
  |  |   87|     35|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     35|    do {                                                                         \
  |  |  |  |   77|     35|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     70|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|     35|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|     35|        }                                                                        \
  |  |  |  |   80|     35|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  156|     35|        return false;
  157|     35|    }
  158|       |
  159|    228|    return true;
  160|    263|}
group_pack.c:load_unpack_mod_list:
  164|    228|{
  165|    228|    uint32_t actual_size = 0;
  166|    228|    if (!bin_unpack_array_fixed(bu, 2, &actual_size)) {
  ------------------
  |  Branch (166:9): [True: 6, False: 222]
  ------------------
  167|      6|        LOGGER_ERROR(chat->log, "Group mod list array malformed: %d != 2", actual_size);
  ------------------
  |  |   87|      6|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      6|    do {                                                                         \
  |  |  |  |   77|      6|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     12|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      6|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      6|        }                                                                        \
  |  |  |  |   80|      6|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  168|      6|        return false;
  169|      6|    }
  170|       |
  171|    222|    if (!bin_unpack_u16(bu, &chat->moderation.num_mods)) {
  ------------------
  |  Branch (171:9): [True: 6, False: 216]
  ------------------
  172|      6|        LOGGER_ERROR(chat->log, "Failed to unpack mod list value");
  ------------------
  |  |   87|      6|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      6|    do {                                                                         \
  |  |  |  |   77|      6|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     12|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      6|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      6|        }                                                                        \
  |  |  |  |   80|      6|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  173|      6|        return false;
  174|      6|    }
  175|       |
  176|    216|    if (chat->moderation.num_mods == 0) {
  ------------------
  |  Branch (176:9): [True: 71, False: 145]
  ------------------
  177|     71|        bin_unpack_nil(bu);
  178|     71|        return true;
  179|     71|    }
  180|       |
  181|    145|    if (chat->moderation.num_mods > MOD_MAX_NUM_MODERATORS) {
  ------------------
  |  |   46|    145|#define MOD_MAX_NUM_MODERATORS       ((MOD_MAX_NUM_MODERATORS_LIMIT / 16) + 3)
  |  |  ------------------
  |  |  |  |   43|    145|#define MOD_MAX_NUM_MODERATORS_LIMIT (((MAX_PACKET_SIZE_NO_HEADERS) / (MOD_LIST_ENTRY_SIZE)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   40|    145|#define MAX_PACKET_SIZE_NO_HEADERS 49900
  |  |  |  |  ------------------
  |  |  |  |               #define MOD_MAX_NUM_MODERATORS_LIMIT (((MAX_PACKET_SIZE_NO_HEADERS) / (MOD_LIST_ENTRY_SIZE)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    145|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  132|    145|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   33|    145|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (181:9): [True: 1, False: 144]
  ------------------
  182|      1|        LOGGER_ERROR(chat->log, "moderation count %u exceeds maximum %u", chat->moderation.num_mods, MOD_MAX_NUM_MODERATORS);
  ------------------
  |  |   87|      1|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      1|    do {                                                                         \
  |  |  |  |   77|      1|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      2|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      1|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      1|        }                                                                        \
  |  |  |  |   80|      1|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  183|      1|        chat->moderation.num_mods = MOD_MAX_NUM_MODERATORS;
  ------------------
  |  |   46|      1|#define MOD_MAX_NUM_MODERATORS       ((MOD_MAX_NUM_MODERATORS_LIMIT / 16) + 3)
  |  |  ------------------
  |  |  |  |   43|      1|#define MOD_MAX_NUM_MODERATORS_LIMIT (((MAX_PACKET_SIZE_NO_HEADERS) / (MOD_LIST_ENTRY_SIZE)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   40|      1|#define MAX_PACKET_SIZE_NO_HEADERS 49900
  |  |  |  |  ------------------
  |  |  |  |               #define MOD_MAX_NUM_MODERATORS_LIMIT (((MAX_PACKET_SIZE_NO_HEADERS) / (MOD_LIST_ENTRY_SIZE)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      1|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  132|      1|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   33|      1|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  184|      1|    }
  185|       |
  186|    145|    uint8_t *packed_mod_list = (uint8_t *)mem_balloc(chat->mem, chat->moderation.num_mods * MOD_LIST_ENTRY_SIZE);
  ------------------
  |  |   27|    145|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|    145|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|    145|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  187|       |
  188|    145|    if (packed_mod_list == nullptr) {
  ------------------
  |  |   63|    145|#define nullptr NULL
  ------------------
  |  Branch (188:9): [True: 0, False: 145]
  ------------------
  189|      0|        LOGGER_ERROR(chat->log, "Failed to allocate memory for packed mod list");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  190|      0|        return false;
  191|      0|    }
  192|       |
  193|    145|    const size_t packed_size = chat->moderation.num_mods * MOD_LIST_ENTRY_SIZE;
  ------------------
  |  |   27|    145|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|    145|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|    145|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  194|       |
  195|    145|    if (!bin_unpack_bin_fixed(bu, packed_mod_list, packed_size)) {
  ------------------
  |  Branch (195:9): [True: 4, False: 141]
  ------------------
  196|      4|        LOGGER_ERROR(chat->log, "Failed to unpack mod list binary data");
  ------------------
  |  |   87|      4|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      4|    do {                                                                         \
  |  |  |  |   77|      4|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      8|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      4|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      4|        }                                                                        \
  |  |  |  |   80|      4|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  197|      4|        mem_delete(chat->mem, packed_mod_list);
  198|      4|        return false;
  199|      4|    }
  200|       |
  201|    141|    if (mod_list_unpack(&chat->moderation, packed_mod_list, packed_size, chat->moderation.num_mods) == -1) {
  ------------------
  |  Branch (201:9): [True: 0, False: 141]
  ------------------
  202|      0|        LOGGER_ERROR(chat->log, "Failed to unpack mod list info");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  203|      0|        mem_delete(chat->mem, packed_mod_list);
  204|      0|        return false;
  205|      0|    }
  206|       |
  207|    141|    mem_delete(chat->mem, packed_mod_list);
  208|       |
  209|    141|    return true;
  210|    141|}
group_pack.c:load_unpack_keys:
  214|    212|{
  215|    212|    if (!bin_unpack_array_fixed(bu, 4, nullptr)) {
  ------------------
  |  |   63|    212|#define nullptr NULL
  ------------------
  |  Branch (215:9): [True: 40, False: 172]
  ------------------
  216|     40|        LOGGER_ERROR(chat->log, "Group keys array malformed");
  ------------------
  |  |   87|     40|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     40|    do {                                                                         \
  |  |  |  |   77|     40|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     80|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|     40|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|     40|        }                                                                        \
  |  |  |  |   80|     40|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  217|     40|        return false;
  218|     40|    }
  219|       |
  220|    172|    if (!(unpack_extended_public_key(&chat->chat_public_key, bu)
  ------------------
  |  Branch (220:11): [True: 166, False: 6]
  ------------------
  221|    172|            && unpack_extended_secret_key(&chat->chat_secret_key, bu)
  ------------------
  |  Branch (221:16): [True: 141, False: 25]
  ------------------
  222|    172|            && unpack_extended_public_key(&chat->self_public_key, bu)
  ------------------
  |  Branch (222:16): [True: 127, False: 14]
  ------------------
  223|    172|            && unpack_extended_secret_key(&chat->self_secret_key, bu))) {
  ------------------
  |  Branch (223:16): [True: 114, False: 13]
  ------------------
  224|     58|        LOGGER_ERROR(chat->log, "Failed to unpack keys");
  ------------------
  |  |   87|     58|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     58|    do {                                                                         \
  |  |  |  |   77|     58|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    116|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|     58|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|     58|        }                                                                        \
  |  |  |  |   80|     58|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  225|     58|        return false;
  226|     58|    }
  227|       |
  228|    114|    return true;
  229|    172|}
group_pack.c:load_unpack_self_info:
  233|    114|{
  234|    114|    if (!bin_unpack_array_fixed(bu, 4, nullptr)) {
  ------------------
  |  |   63|    114|#define nullptr NULL
  ------------------
  |  Branch (234:9): [True: 3, False: 111]
  ------------------
  235|      3|        LOGGER_ERROR(chat->log, "Group self info array malformed");
  ------------------
  |  |   87|      3|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      3|    do {                                                                         \
  |  |  |  |   77|      3|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      6|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      3|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      3|        }                                                                        \
  |  |  |  |   80|      3|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  236|      3|        return false;
  237|      3|    }
  238|       |
  239|    111|    uint8_t self_nick[MAX_GC_NICK_SIZE];
  240|    111|    uint16_t self_nick_len = 0;
  241|    111|    uint8_t self_role = GR_USER;
  242|    111|    uint8_t self_status = GS_NONE;
  243|       |
  244|    111|    if (!(bin_unpack_u16(bu, &self_nick_len)
  ------------------
  |  Branch (244:11): [True: 110, False: 1]
  ------------------
  245|    111|            && bin_unpack_u08(bu, &self_role)
  ------------------
  |  Branch (245:16): [True: 109, False: 1]
  ------------------
  246|    111|            && bin_unpack_u08(bu, &self_status))) {
  ------------------
  |  Branch (246:16): [True: 108, False: 1]
  ------------------
  247|      3|        LOGGER_ERROR(chat->log, "Failed to unpack self values");
  ------------------
  |  |   87|      3|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      3|    do {                                                                         \
  |  |  |  |   77|      3|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      6|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      3|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      3|        }                                                                        \
  |  |  |  |   80|      3|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|      3|        return false;
  249|      3|    }
  250|       |
  251|    108|    if (self_nick_len > MAX_GC_NICK_SIZE) {
  ------------------
  |  |   26|    108|#define MAX_GC_NICK_SIZE 128
  ------------------
  |  Branch (251:9): [True: 0, False: 108]
  ------------------
  252|      0|        LOGGER_ERROR(chat->log, "self_nick too big (%u bytes), truncating to %d", self_nick_len, MAX_GC_NICK_SIZE);
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  253|      0|        self_nick_len = MAX_GC_NICK_SIZE;
  ------------------
  |  |   26|      0|#define MAX_GC_NICK_SIZE 128
  ------------------
  254|      0|    }
  255|       |
  256|    108|    if (!bin_unpack_bin_fixed(bu, self_nick, self_nick_len)) {
  ------------------
  |  Branch (256:9): [True: 1, False: 107]
  ------------------
  257|      1|        LOGGER_ERROR(chat->log, "Failed to unpack self nick bytes");
  ------------------
  |  |   87|      1|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      1|    do {                                                                         \
  |  |  |  |   77|      1|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      2|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      1|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      1|        }                                                                        \
  |  |  |  |   80|      1|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  258|      1|        return false;
  259|      1|    }
  260|       |
  261|       |    // we have to add ourself before setting self info
  262|    107|    if (peer_add(chat, nullptr, chat->self_public_key.enc) != 0) {
  ------------------
  |  |   63|    107|#define nullptr NULL
  ------------------
  |  Branch (262:9): [True: 0, False: 107]
  ------------------
  263|      0|        LOGGER_ERROR(chat->log, "Failed to add self to peer list");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  264|      0|        return false;
  265|      0|    }
  266|       |
  267|    107|    if (chat->numpeers == 0) {
  ------------------
  |  Branch (267:9): [True: 0, False: 107]
  ------------------
  268|      0|        LOGGER_ERROR(chat->log, "Failed to unpack self: numpeers should be > 0");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  269|      0|        return false;
  270|      0|    }
  271|       |
  272|    107|    GC_Peer *self = &chat->group[0];
  273|       |
  274|    107|    self->gconn.addr.public_key = chat->self_public_key;
  275|    107|    memcpy(self->nick, self_nick, self_nick_len);
  276|    107|    self->nick_length = self_nick_len;
  277|    107|    self->role = (Group_Role)self_role;
  278|    107|    self->status = (Group_Peer_Status)self_status;
  279|    107|    self->gconn.confirmed = true;
  280|       |
  281|    107|    return true;
  282|    107|}
group_pack.c:load_unpack_saved_peers:
  286|    107|{
  287|    107|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|    107|#define nullptr NULL
  ------------------
  |  Branch (287:9): [True: 10, False: 97]
  ------------------
  288|     10|        LOGGER_ERROR(chat->log, "Group saved peers array malformed");
  ------------------
  |  |   87|     10|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     10|    do {                                                                         \
  |  |  |  |   77|     10|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     20|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|     10|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|     10|        }                                                                        \
  |  |  |  |   80|     10|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  289|     10|        return false;
  290|     10|    }
  291|       |
  292|       |    // Saved peers
  293|     97|    uint16_t saved_peers_size = 0;
  294|       |
  295|     97|    if (!bin_unpack_u16(bu, &saved_peers_size)) {
  ------------------
  |  Branch (295:9): [True: 3, False: 94]
  ------------------
  296|      3|        LOGGER_ERROR(chat->log, "Failed to unpack saved peers value");
  ------------------
  |  |   87|      3|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      3|    do {                                                                         \
  |  |  |  |   77|      3|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      6|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      3|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      3|        }                                                                        \
  |  |  |  |   80|      3|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  297|      3|        return false;
  298|      3|    }
  299|       |
  300|     94|    if (saved_peers_size == 0) {
  ------------------
  |  Branch (300:9): [True: 3, False: 91]
  ------------------
  301|      3|        bin_unpack_nil(bu);
  302|      3|        return true;
  303|      3|    }
  304|       |
  305|     91|    uint8_t *saved_peers = (uint8_t *)mem_balloc(chat->mem, saved_peers_size * GC_SAVED_PEER_SIZE);
  ------------------
  |  |   49|     91|#define GC_SAVED_PEER_SIZE (ENC_PUBLIC_KEY_SIZE + sizeof(Node_format) + sizeof(IP_Port))
  |  |  ------------------
  |  |  |  |  122|     91|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   43|     91|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  306|       |
  307|     91|    if (saved_peers == nullptr) {
  ------------------
  |  |   63|     91|#define nullptr NULL
  ------------------
  |  Branch (307:9): [True: 0, False: 91]
  ------------------
  308|      0|        LOGGER_ERROR(chat->log, "Failed to allocate memory for saved peer list");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  309|      0|        return false;
  310|      0|    }
  311|       |
  312|     91|    if (!bin_unpack_bin_fixed(bu, saved_peers, saved_peers_size)) {
  ------------------
  |  Branch (312:9): [True: 24, False: 67]
  ------------------
  313|     24|        LOGGER_ERROR(chat->log, "Failed to unpack saved peers binary data");
  ------------------
  |  |   87|     24|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     24|    do {                                                                         \
  |  |  |  |   77|     24|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     48|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|     24|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|     24|        }                                                                        \
  |  |  |  |   80|     24|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  314|     24|        mem_delete(chat->mem, saved_peers);
  315|     24|        return false;
  316|     24|    }
  317|       |
  318|     67|    if (unpack_gc_saved_peers(chat, saved_peers, saved_peers_size) == -1) {
  ------------------
  |  Branch (318:9): [True: 59, False: 8]
  ------------------
  319|     59|        LOGGER_ERROR(chat->log, "Failed to unpack saved peers");  // recoverable error
  ------------------
  |  |   87|     59|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     59|    do {                                                                         \
  |  |  |  |   77|     59|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    118|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|     59|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|     59|        }                                                                        \
  |  |  |  |   80|     59|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  320|     59|    }
  321|       |
  322|     67|    mem_delete(chat->mem, saved_peers);
  323|       |
  324|     67|    return true;
  325|     91|}
group_pack.c:save_pack_state_values:
  346|    148|{
  347|    148|    bin_pack_array(bp, 8);
  348|    148|    bin_pack_bool(bp, chat->connection_state == CS_DISCONNECTED); // 1
  349|    148|    bin_pack_u16(bp, chat->shared_state.group_name_len); // 2
  350|    148|    bin_pack_u08(bp, chat->shared_state.privacy_state); // 3
  351|    148|    bin_pack_u16(bp, chat->shared_state.maxpeers); // 4
  352|    148|    bin_pack_u16(bp, chat->shared_state.password_length); // 5
  353|    148|    bin_pack_u32(bp, chat->shared_state.version); // 6
  354|    148|    bin_pack_u32(bp, chat->shared_state.topic_lock); // 7
  355|    148|    bin_pack_u08(bp, chat->shared_state.voice_state); // 8
  356|    148|}
group_pack.c:save_pack_state_bin:
  360|    148|{
  361|    148|    bin_pack_array(bp, 5);
  362|       |
  363|    148|    bin_pack_bin(bp, chat->shared_state_sig, SIGNATURE_SIZE); // 1
  ------------------
  |  |   27|    148|#define SIGNATURE_SIZE CRYPTO_SIGNATURE_SIZE
  |  |  ------------------
  |  |  |  |   28|    148|#define CRYPTO_SIGNATURE_SIZE          64
  |  |  ------------------
  ------------------
  364|    148|    pack_extended_public_key(&chat->shared_state.founder_public_key, bp); // 2
  365|    148|    bin_pack_bin(bp, chat->shared_state.group_name, chat->shared_state.group_name_len); // 3
  366|    148|    bin_pack_bin(bp, chat->shared_state.password, chat->shared_state.password_length); // 4
  367|    148|    bin_pack_bin(bp, chat->shared_state.mod_list_hash, MOD_MODERATION_HASH_SIZE); // 5
  ------------------
  |  |   26|    148|#define MOD_MODERATION_HASH_SIZE CRYPTO_SHA256_SIZE
  |  |  ------------------
  |  |  |  |   74|    148|#define CRYPTO_SHA256_SIZE             32
  |  |  ------------------
  ------------------
  368|    148|}
group_pack.c:save_pack_topic_info:
  372|    148|{
  373|    148|    bin_pack_array(bp, 6);
  374|       |
  375|    148|    bin_pack_u32(bp, chat->topic_info.version); // 1
  376|    148|    bin_pack_u16(bp, chat->topic_info.length); // 2
  377|    148|    bin_pack_u16(bp, chat->topic_info.checksum); // 3
  378|    148|    bin_pack_bin(bp, chat->topic_info.topic, chat->topic_info.length); // 4
  379|    148|    bin_pack_bin(bp, chat->topic_info.public_sig_key, SIG_PUBLIC_KEY_SIZE); // 5
  ------------------
  |  |  132|    148|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   33|    148|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  ------------------
  ------------------
  380|    148|    bin_pack_bin(bp, chat->topic_sig, SIGNATURE_SIZE); // 6
  ------------------
  |  |   27|    148|#define SIGNATURE_SIZE CRYPTO_SIGNATURE_SIZE
  |  |  ------------------
  |  |  |  |   28|    148|#define CRYPTO_SIGNATURE_SIZE          64
  |  |  ------------------
  ------------------
  381|    148|}
group_pack.c:save_pack_mod_list:
  385|    148|{
  386|    148|    bin_pack_array(bp, 2);
  387|       |
  388|    148|    const uint16_t num_mods = min_u16(chat->moderation.num_mods, MOD_MAX_NUM_MODERATORS);
  ------------------
  |  |   46|    148|#define MOD_MAX_NUM_MODERATORS       ((MOD_MAX_NUM_MODERATORS_LIMIT / 16) + 3)
  |  |  ------------------
  |  |  |  |   43|    148|#define MOD_MAX_NUM_MODERATORS_LIMIT (((MAX_PACKET_SIZE_NO_HEADERS) / (MOD_LIST_ENTRY_SIZE)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   40|    148|#define MAX_PACKET_SIZE_NO_HEADERS 49900
  |  |  |  |  ------------------
  |  |  |  |               #define MOD_MAX_NUM_MODERATORS_LIMIT (((MAX_PACKET_SIZE_NO_HEADERS) / (MOD_LIST_ENTRY_SIZE)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    148|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  132|    148|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   33|    148|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  389|       |
  390|    148|    if (num_mods == 0) {
  ------------------
  |  Branch (390:9): [True: 0, False: 148]
  ------------------
  391|      0|        bin_pack_u16(bp, num_mods); // 1
  392|      0|        bin_pack_nil(bp); // 2
  393|      0|        return;
  394|      0|    }
  395|       |
  396|    148|    uint8_t *packed_mod_list = (uint8_t *)mem_balloc(chat->mem, num_mods * MOD_LIST_ENTRY_SIZE);
  ------------------
  |  |   27|    148|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|    148|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|    148|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  397|       |
  398|       |    // we can still recover without the mod list
  399|    148|    if (packed_mod_list == nullptr) {
  ------------------
  |  |   63|    148|#define nullptr NULL
  ------------------
  |  Branch (399:9): [True: 0, False: 148]
  ------------------
  400|      0|        bin_pack_u16(bp, 0); // 1
  401|      0|        bin_pack_nil(bp); // 2
  402|      0|        LOGGER_ERROR(chat->log, "Failed to allocate memory for moderation list");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  403|      0|        return;
  404|      0|    }
  405|       |
  406|    148|    bin_pack_u16(bp, num_mods); // 1
  407|       |
  408|    148|    mod_list_pack(&chat->moderation, packed_mod_list);
  409|       |
  410|    148|    const size_t packed_size = num_mods * MOD_LIST_ENTRY_SIZE;
  ------------------
  |  |   27|    148|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|    148|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|    148|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  411|       |
  412|    148|    bin_pack_bin(bp, packed_mod_list, packed_size); // 2
  413|       |
  414|    148|    mem_delete(chat->mem, packed_mod_list);
  415|    148|}
group_pack.c:save_pack_keys:
  419|    148|{
  420|    148|    bin_pack_array(bp, 4);
  421|       |
  422|    148|    pack_extended_public_key(&chat->chat_public_key, bp); // 1
  423|    148|    pack_extended_secret_key(&chat->chat_secret_key, bp); // 2
  424|    148|    pack_extended_public_key(&chat->self_public_key, bp); // 3
  425|    148|    pack_extended_secret_key(&chat->self_secret_key, bp); // 4
  426|    148|}
group_pack.c:save_pack_self_info:
  430|    148|{
  431|    148|    bin_pack_array(bp, 4);
  432|       |
  433|    148|    GC_Peer *self = &chat->group[0];
  434|       |
  435|    148|    if (self->nick_length > MAX_GC_NICK_SIZE) {
  ------------------
  |  |   26|    148|#define MAX_GC_NICK_SIZE 128
  ------------------
  |  Branch (435:9): [True: 0, False: 148]
  ------------------
  436|      0|        LOGGER_ERROR(chat->log, "self_nick is too big (%u). Truncating to %d", self->nick_length, MAX_GC_NICK_SIZE);
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  437|      0|        self->nick_length = MAX_GC_NICK_SIZE;
  ------------------
  |  |   26|      0|#define MAX_GC_NICK_SIZE 128
  ------------------
  438|      0|    }
  439|       |
  440|    148|    bin_pack_u16(bp, self->nick_length); // 1
  441|    148|    bin_pack_u08(bp, (uint8_t)self->role); // 2
  442|    148|    bin_pack_u08(bp, self->status); // 3
  443|    148|    bin_pack_bin(bp, self->nick, self->nick_length); // 4
  444|    148|}
group_pack.c:save_pack_saved_peers:
  448|    148|{
  449|    148|    bin_pack_array(bp, 2);
  450|       |
  451|    148|    uint8_t *saved_peers = (uint8_t *)mem_balloc(chat->mem, GC_MAX_SAVED_PEERS * GC_SAVED_PEER_SIZE);
  ------------------
  |  |   48|    148|#define GC_MAX_SAVED_PEERS 100
  ------------------
                  uint8_t *saved_peers = (uint8_t *)mem_balloc(chat->mem, GC_MAX_SAVED_PEERS * GC_SAVED_PEER_SIZE);
  ------------------
  |  |   49|    148|#define GC_SAVED_PEER_SIZE (ENC_PUBLIC_KEY_SIZE + sizeof(Node_format) + sizeof(IP_Port))
  |  |  ------------------
  |  |  |  |  122|    148|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   43|    148|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  452|       |
  453|       |    // we can still recover without the saved peers list
  454|    148|    if (saved_peers == nullptr) {
  ------------------
  |  |   63|    148|#define nullptr NULL
  ------------------
  |  Branch (454:9): [True: 0, False: 148]
  ------------------
  455|      0|        bin_pack_u16(bp, 0); // 1
  456|      0|        bin_pack_nil(bp); // 2
  457|      0|        LOGGER_ERROR(chat->log, "Failed to allocate memory for saved peers list");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  458|      0|        return;
  459|      0|    }
  460|       |
  461|    148|    uint16_t packed_size = 0;
  462|    148|    const int count = pack_gc_saved_peers(chat, saved_peers, GC_MAX_SAVED_PEERS * GC_SAVED_PEER_SIZE, &packed_size);
  ------------------
  |  |   48|    148|#define GC_MAX_SAVED_PEERS 100
  ------------------
                  const int count = pack_gc_saved_peers(chat, saved_peers, GC_MAX_SAVED_PEERS * GC_SAVED_PEER_SIZE, &packed_size);
  ------------------
  |  |   49|    148|#define GC_SAVED_PEER_SIZE (ENC_PUBLIC_KEY_SIZE + sizeof(Node_format) + sizeof(IP_Port))
  |  |  ------------------
  |  |  |  |  122|    148|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   43|    148|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  463|       |
  464|    148|    if (count < 0) {
  ------------------
  |  Branch (464:9): [True: 0, False: 148]
  ------------------
  465|      0|        LOGGER_ERROR(chat->log, "Failed to pack saved peers");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  466|      0|    }
  467|       |
  468|    148|    bin_pack_u16(bp, packed_size); // 1
  469|       |
  470|    148|    if (packed_size == 0) {
  ------------------
  |  Branch (470:9): [True: 36, False: 112]
  ------------------
  471|     36|        bin_pack_nil(bp); // 2
  472|     36|        mem_delete(chat->mem, saved_peers);
  473|     36|        return;
  474|     36|    }
  475|       |
  476|    112|    bin_pack_bin(bp, saved_peers, packed_size); // 2
  477|       |
  478|    112|    mem_delete(chat->mem, saved_peers);
  479|    112|}

bs_list_init:
  138|  1.74k|{
  139|  1.74k|    list->mem = mem;
  140|       |
  141|       |    // set initial values
  142|  1.74k|    list->n = 0;
  143|  1.74k|    list->element_size = element_size;
  144|  1.74k|    list->capacity = 0;
  145|  1.74k|    list->data = nullptr;
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  146|  1.74k|    list->ids = nullptr;
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  147|  1.74k|    list->cmp_callback = cmp_callback;
  148|       |
  149|  1.74k|    if (initial_capacity != 0) {
  ------------------
  |  Branch (149:9): [True: 1.74k, False: 0]
  ------------------
  150|  1.74k|        if (!resize(list, initial_capacity)) {
  ------------------
  |  Branch (150:13): [True: 0, False: 1.74k]
  ------------------
  151|      0|            return 0;
  152|      0|        }
  153|  1.74k|    }
  154|       |
  155|  1.74k|    list->capacity = initial_capacity;
  156|       |
  157|  1.74k|    return 1;
  158|  1.74k|}
bs_list_free:
  161|  1.74k|{
  162|  1.74k|    if (list == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (162:9): [True: 0, False: 1.74k]
  ------------------
  163|      0|        return;
  164|      0|    }
  165|       |
  166|       |    // free both arrays
  167|  1.74k|    mem_delete(list->mem, list->data);
  168|  1.74k|    list->data = nullptr;
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  169|       |
  170|  1.74k|    mem_delete(list->mem, list->ids);
  171|  1.74k|    list->ids = nullptr;
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  172|  1.74k|}
list.c:resize:
  112|  1.74k|{
  113|  1.74k|    if (new_size == 0) {
  ------------------
  |  Branch (113:9): [True: 0, False: 1.74k]
  ------------------
  114|      0|        bs_list_free(list);
  115|      0|        return true;
  116|      0|    }
  117|       |
  118|  1.74k|    uint8_t *data = (uint8_t *)mem_brealloc(list->mem, list->data, new_size * list->element_size);
  119|       |
  120|  1.74k|    if (data == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (120:9): [True: 0, False: 1.74k]
  ------------------
  121|      0|        return false;
  122|      0|    }
  123|       |
  124|  1.74k|    list->data = data;
  125|       |
  126|  1.74k|    int *ids = (int *)mem_vrealloc(list->mem, list->ids, new_size, sizeof(int));
  127|       |
  128|  1.74k|    if (ids == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (128:9): [True: 0, False: 1.74k]
  ------------------
  129|      0|        return false;
  130|      0|    }
  131|       |
  132|  1.74k|    list->ids = ids;
  133|       |
  134|  1.74k|    return true;
  135|  1.74k|}

logger_new:
   33|  1.74k|{
   34|  1.74k|    Logger *log = (Logger *)mem_alloc(mem, sizeof(Logger));
   35|       |
   36|  1.74k|    if (log == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (36:9): [True: 0, False: 1.74k]
  ------------------
   37|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   38|      0|    }
   39|       |
   40|  1.74k|    log->mem = mem;
   41|       |
   42|  1.74k|    return log;
   43|  1.74k|}
logger_kill:
   46|  1.74k|{
   47|  1.74k|    if (log == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (47:9): [True: 0, False: 1.74k]
  ------------------
   48|      0|        return;
   49|      0|    }
   50|       |
   51|  1.74k|    mem_delete(log->mem, log);
   52|  1.74k|}
logger_callback_log:
   55|  1.74k|{
   56|  1.74k|    assert(log != nullptr);
   57|  1.74k|    log->callback = function;
   58|  1.74k|    log->context  = context;
   59|  1.74k|    log->userdata = userdata;
   60|  1.74k|}
logger_write:
   64|  74.9k|{
   65|  74.9k|    if (log == nullptr) {
  ------------------
  |  |   63|  74.9k|#define nullptr NULL
  ------------------
  |  Branch (65:9): [True: 0, False: 74.9k]
  ------------------
   66|      0|        return;
   67|      0|    }
   68|       |
   69|  74.9k|    if (log->callback == nullptr) {
  ------------------
  |  |   63|  74.9k|#define nullptr NULL
  ------------------
  |  Branch (69:9): [True: 0, False: 74.9k]
  ------------------
   70|      0|        return;
   71|      0|    }
   72|       |
   73|       |    // Only pass the file name, not the entire file path, for privacy reasons.
   74|       |    // The full path may contain PII of the person compiling toxcore (their
   75|       |    // username and directory layout).
   76|  74.9k|    const char *filename = strrchr(file, '/');
   77|  74.9k|    file = filename != nullptr ? filename + 1 : file;
  ------------------
  |  |   63|  74.9k|#define nullptr NULL
  ------------------
  |  Branch (77:12): [True: 74.9k, False: 0]
  ------------------
   78|       |#if defined(_WIN32) || defined(__CYGWIN__)
   79|       |    // On Windows, the path separator *may* be a backslash, so we look for that
   80|       |    // one too.
   81|       |    const char *windows_filename = strrchr(file, '\\');
   82|       |    file = windows_filename != nullptr ? windows_filename + 1 : file;
   83|       |#endif /* WIN32 */
   84|       |
   85|       |    // Format message
   86|  74.9k|    char msg[1024];
   87|  74.9k|    va_list args;
   88|  74.9k|    va_start(args, format);
   89|  74.9k|    vsnprintf(msg, sizeof(msg), format, args);
   90|  74.9k|    va_end(args);
   91|       |
   92|  74.9k|    log->callback(log->context, level, file, line, func, msg, log->userdata);
   93|  74.9k|}

os_memory:
   46|  1.74k|{
   47|  1.74k|    return &os_memory_obj;
   48|  1.74k|}
mem_balloc:
   51|  6.86k|{
   52|  6.86k|    void *const ptr = mem->funcs->malloc(mem->obj, size);
   53|  6.86k|    return ptr;
   54|  6.86k|}
mem_brealloc:
   57|  1.74k|{
   58|  1.74k|    void *const new_ptr = mem->funcs->realloc(mem->obj, ptr, size);
   59|  1.74k|    return new_ptr;
   60|  1.74k|}
mem_alloc:
   63|  57.7k|{
   64|  57.7k|    void *const ptr = mem->funcs->calloc(mem->obj, 1, size);
   65|  57.7k|    return ptr;
   66|  57.7k|}
mem_valloc:
   69|  19.5k|{
   70|  19.5k|    const uint32_t bytes = nmemb * size;
   71|       |
   72|  19.5k|    if (size != 0 && bytes / size != nmemb) {
  ------------------
  |  Branch (72:9): [True: 19.5k, False: 0]
  |  Branch (72:22): [True: 0, False: 19.5k]
  ------------------
   73|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   74|      0|    }
   75|       |
   76|  19.5k|    void *const ptr = mem->funcs->calloc(mem->obj, nmemb, size);
   77|  19.5k|    return ptr;
   78|  19.5k|}
mem_vrealloc:
   81|  33.0k|{
   82|  33.0k|    const uint32_t bytes = nmemb * size;
   83|       |
   84|  33.0k|    if (size != 0 && bytes / size != nmemb) {
  ------------------
  |  Branch (84:9): [True: 33.0k, False: 0]
  |  Branch (84:22): [True: 0, False: 33.0k]
  ------------------
   85|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   86|      0|    }
   87|       |
   88|  33.0k|    void *const new_ptr = mem->funcs->realloc(mem->obj, ptr, bytes);
   89|  33.0k|    return new_ptr;
   90|  33.0k|}
mem_delete:
   93|   998k|{
   94|   998k|    mem->funcs->free(mem->obj, ptr);
   95|   998k|}

mono_time_new:
  114|  1.74k|{
  115|  1.74k|    Mono_Time *mono_time = (Mono_Time *)mem_alloc(mem, sizeof(Mono_Time));
  116|       |
  117|  1.74k|    if (mono_time == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (117:9): [True: 0, False: 1.74k]
  ------------------
  118|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  119|      0|    }
  120|       |
  121|  1.74k|#ifndef ESP_PLATFORM
  122|  1.74k|    pthread_rwlock_t *rwlock = (pthread_rwlock_t *)mem_alloc(mem, sizeof(pthread_rwlock_t));
  123|       |
  124|  1.74k|    if (rwlock == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (124:9): [True: 0, False: 1.74k]
  ------------------
  125|      0|        mem_delete(mem, mono_time);
  126|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  127|      0|    }
  128|       |
  129|  1.74k|    if (pthread_rwlock_init(rwlock, nullptr) != 0) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (129:9): [True: 0, False: 1.74k]
  ------------------
  130|      0|        mem_delete(mem, rwlock);
  131|      0|        mem_delete(mem, mono_time);
  132|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  133|      0|    }
  134|       |
  135|  1.74k|    mono_time->time_update_lock = rwlock;
  136|  1.74k|#endif /* ESP_PLATFORM */
  137|       |
  138|  1.74k|    mono_time_set_current_time_callback(mono_time, current_time_callback, user_data);
  139|       |
  140|  1.74k|    mono_time->cur_time = 0;
  141|  1.74k|#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
  142|       |    // Maximum reproducibility. Never return time = 0.
  143|  1.74k|    mono_time->base_time = 1000000000;
  144|       |#else
  145|       |    // Never return time = 0 in case time() returns 0 (e.g. on microcontrollers
  146|       |    // without battery-powered RTC or ones where NTP didn't initialise it yet).
  147|       |    mono_time->base_time = max_u64(1, (uint64_t)time(nullptr)) * UINT64_C(1000) - current_time_monotonic(mono_time);
  148|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  149|       |
  150|  1.74k|    mono_time_update(mono_time);
  151|       |
  152|  1.74k|    return mono_time;
  153|  1.74k|}
mono_time_free:
  156|  1.74k|{
  157|  1.74k|    if (mono_time == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (157:9): [True: 0, False: 1.74k]
  ------------------
  158|      0|        return;
  159|      0|    }
  160|  1.74k|#ifndef ESP_PLATFORM
  161|  1.74k|    pthread_rwlock_destroy(mono_time->time_update_lock);
  162|  1.74k|    mem_delete(mem, mono_time->time_update_lock);
  163|  1.74k|#endif /* ESP_PLATFORM */
  164|  1.74k|    mem_delete(mem, mono_time);
  165|  1.74k|}
mono_time_update:
  168|  1.74k|{
  169|  1.74k|    const uint64_t cur_time =
  170|  1.74k|        mono_time->base_time + mono_time->current_time_callback(mono_time->user_data);
  171|       |
  172|  1.74k|#ifndef ESP_PLATFORM
  173|  1.74k|    pthread_rwlock_wrlock(mono_time->time_update_lock);
  174|  1.74k|#endif /* ESP_PLATFORM */
  175|  1.74k|    mono_time->cur_time = cur_time;
  176|  1.74k|#ifndef ESP_PLATFORM
  177|  1.74k|    pthread_rwlock_unlock(mono_time->time_update_lock);
  178|  1.74k|#endif /* ESP_PLATFORM */
  179|  1.74k|}
mono_time_get_ms:
  182|  44.5k|{
  183|       |#if !defined(ESP_PLATFORM) && !defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  184|       |    // Fuzzing is only single thread for now, no locking needed */
  185|       |    pthread_rwlock_rdlock(mono_time->time_update_lock);
  186|       |#endif /* !ESP_PLATFORM */
  187|  44.5k|    const uint64_t cur_time = mono_time->cur_time;
  188|       |#if !defined(ESP_PLATFORM) && !defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  189|       |    pthread_rwlock_unlock(mono_time->time_update_lock);
  190|       |#endif /* !ESP_PLATFORM */
  191|  44.5k|    return cur_time;
  192|  44.5k|}
mono_time_get:
  195|  44.5k|{
  196|  44.5k|    return mono_time_get_ms(mono_time) / UINT64_C(1000);
  197|  44.5k|}
mono_time_set_current_time_callback:
  206|  1.74k|{
  207|  1.74k|    if (current_time_callback == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (207:9): [True: 0, False: 1.74k]
  ------------------
  208|      0|        mono_time->current_time_callback = current_time_monotonic_default;
  209|      0|        mono_time->user_data = mono_time;
  210|  1.74k|    } else {
  211|  1.74k|        mono_time->current_time_callback = current_time_callback;
  212|  1.74k|        mono_time->user_data = user_data;
  213|  1.74k|    }
  214|  1.74k|}

nc_get_self_public_key:
  165|  3.83k|{
  166|  3.83k|    return c->self_public_key;
  167|  3.83k|}
nc_get_tcp_c:
  175|  3.56k|{
  176|  3.56k|    return c->tcp_c;
  177|  3.56k|}
nc_get_dht:
  180|  1.74k|{
  181|  1.74k|    return c->dht;
  182|  1.74k|}
new_connection_handler:
 1947|  1.74k|{
 1948|  1.74k|    c->new_connection_callback = new_connection_callback;
 1949|  1.74k|    c->new_connection_callback_object = object;
 1950|  1.74k|}
copy_connected_tcp_relays:
 2298|  1.22k|{
 2299|  1.22k|    if (num == 0) {
  ------------------
  |  Branch (2299:9): [True: 9, False: 1.21k]
  ------------------
 2300|      9|        return 0;
 2301|      9|    }
 2302|       |
 2303|  1.21k|    return tcp_copy_connected_relays(c->tcp_c, tcp_relays, num);
 2304|  1.22k|}
crypto_kill:
 2912|    304|{
 2913|    304|    Crypto_Connection *conn = get_crypto_connection(c, crypt_connection_id);
 2914|       |
 2915|    304|    int ret = -1;
 2916|       |
 2917|    304|    if (conn != nullptr) {
  ------------------
  |  |   63|    304|#define nullptr NULL
  ------------------
  |  Branch (2917:9): [True: 0, False: 304]
  ------------------
 2918|      0|        if (conn->status == CRYPTO_CONN_ESTABLISHED) {
  ------------------
  |  Branch (2918:13): [True: 0, False: 0]
  ------------------
 2919|      0|            send_kill_packet(c, crypt_connection_id);
 2920|      0|        }
 2921|       |
 2922|      0|        kill_tcp_connection_to(c->tcp_c, conn->connection_number_tcp);
 2923|       |
 2924|      0|        bs_list_remove(&c->ip_port_list, (uint8_t *)&conn->ip_portv4, crypt_connection_id);
 2925|      0|        bs_list_remove(&c->ip_port_list, (uint8_t *)&conn->ip_portv6, crypt_connection_id);
 2926|      0|        clear_temp_packet(c, crypt_connection_id);
 2927|      0|        clear_buffer(c->mem, &conn->send_array);
 2928|      0|        clear_buffer(c->mem, &conn->recv_array);
 2929|      0|        ret = wipe_crypto_connection(c, crypt_connection_id);
 2930|      0|    }
 2931|       |
 2932|    304|    return ret;
 2933|    304|}
new_keys:
 2963|  1.74k|{
 2964|  1.74k|    crypto_new_keypair(c->rng, c->self_public_key, c->self_secret_key);
 2965|  1.74k|}
save_keys:
 2973|  1.22k|{
 2974|  1.22k|    memcpy(keys, c->self_public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|  1.22k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 2975|  1.22k|    memcpy(keys + CRYPTO_PUBLIC_KEY_SIZE, c->self_secret_key, CRYPTO_SECRET_KEY_SIZE);
  ------------------
  |  |   43|  1.22k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
                  memcpy(keys + CRYPTO_PUBLIC_KEY_SIZE, c->self_secret_key, CRYPTO_SECRET_KEY_SIZE);
  ------------------
  |  |   48|  1.22k|#define CRYPTO_SECRET_KEY_SIZE         32
  ------------------
 2976|  1.22k|}
load_secret_key:
 2982|    551|{
 2983|    551|    memcpy(c->self_secret_key, sk, CRYPTO_SECRET_KEY_SIZE);
  ------------------
  |  |   48|    551|#define CRYPTO_SECRET_KEY_SIZE         32
  ------------------
 2984|    551|    crypto_derive_public_key(c->self_public_key, c->self_secret_key);
 2985|    551|}
new_net_crypto:
 2992|  1.74k|{
 2993|  1.74k|    if (dht == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (2993:9): [True: 0, False: 1.74k]
  ------------------
 2994|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2995|      0|    }
 2996|       |
 2997|  1.74k|    Net_Crypto *temp = (Net_Crypto *)mem_alloc(mem, sizeof(Net_Crypto));
 2998|       |
 2999|  1.74k|    if (temp == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (2999:9): [True: 0, False: 1.74k]
  ------------------
 3000|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3001|      0|    }
 3002|       |
 3003|  1.74k|    temp->log = log;
 3004|  1.74k|    temp->mem = mem;
 3005|  1.74k|    temp->rng = rng;
 3006|  1.74k|    temp->mono_time = mono_time;
 3007|  1.74k|    temp->ns = ns;
 3008|       |
 3009|  1.74k|    temp->tcp_c = new_tcp_connections(log, mem, rng, ns, mono_time, dht_get_self_secret_key(dht), proxy_info);
 3010|       |
 3011|  1.74k|    if (temp->tcp_c == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (3011:9): [True: 0, False: 1.74k]
  ------------------
 3012|      0|        mem_delete(mem, temp);
 3013|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3014|      0|    }
 3015|       |
 3016|  1.74k|    set_packet_tcp_connection_callback(temp->tcp_c, &tcp_data_callback, temp);
 3017|  1.74k|    set_oob_packet_tcp_connection_callback(temp->tcp_c, &tcp_oob_callback, temp);
 3018|       |
 3019|  1.74k|    temp->dht = dht;
 3020|       |
 3021|  1.74k|    new_keys(temp);
 3022|  1.74k|    new_symmetric_key(rng, temp->secret_symmetric_key);
 3023|       |
 3024|  1.74k|    temp->current_sleep_time = CRYPTO_SEND_PACKET_INTERVAL;
  ------------------
  |  |   96|  1.74k|#define CRYPTO_SEND_PACKET_INTERVAL 1000
  ------------------
 3025|       |
 3026|  1.74k|    networking_registerhandler(dht_get_net(dht), NET_PACKET_COOKIE_REQUEST, &udp_handle_cookie_request, temp);
 3027|  1.74k|    networking_registerhandler(dht_get_net(dht), NET_PACKET_COOKIE_RESPONSE, &udp_handle_packet, temp);
 3028|  1.74k|    networking_registerhandler(dht_get_net(dht), NET_PACKET_CRYPTO_HS, &udp_handle_packet, temp);
 3029|  1.74k|    networking_registerhandler(dht_get_net(dht), NET_PACKET_CRYPTO_DATA, &udp_handle_packet, temp);
 3030|       |
 3031|  1.74k|    bs_list_init(&temp->ip_port_list, mem, sizeof(IP_Port), 8, ipport_cmp_handler);
 3032|       |
 3033|  1.74k|    return temp;
 3034|  1.74k|}
kill_net_crypto:
 3081|  1.74k|{
 3082|  1.74k|    if (c == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (3082:9): [True: 0, False: 1.74k]
  ------------------
 3083|      0|        return;
 3084|      0|    }
 3085|       |
 3086|  1.74k|    const Memory *mem = c->mem;
 3087|       |
 3088|  1.74k|    for (uint32_t i = 0; i < c->crypto_connections_length; ++i) {
  ------------------
  |  Branch (3088:26): [True: 0, False: 1.74k]
  ------------------
 3089|      0|        crypto_kill(c, i);
 3090|      0|    }
 3091|       |
 3092|  1.74k|    kill_tcp_connections(c->tcp_c);
 3093|  1.74k|    bs_list_free(&c->ip_port_list);
 3094|  1.74k|    networking_registerhandler(dht_get_net(c->dht), NET_PACKET_COOKIE_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht_get_net(c->dht), NET_PACKET_COOKIE_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
 3095|  1.74k|    networking_registerhandler(dht_get_net(c->dht), NET_PACKET_COOKIE_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht_get_net(c->dht), NET_PACKET_COOKIE_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
 3096|  1.74k|    networking_registerhandler(dht_get_net(c->dht), NET_PACKET_CRYPTO_HS, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht_get_net(c->dht), NET_PACKET_CRYPTO_HS, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
 3097|  1.74k|    networking_registerhandler(dht_get_net(c->dht), NET_PACKET_CRYPTO_DATA, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht_get_net(c->dht), NET_PACKET_CRYPTO_DATA, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
 3098|  1.74k|    crypto_memzero(c, sizeof(Net_Crypto));
 3099|  1.74k|    mem_delete(mem, c);
 3100|  1.74k|}
net_crypto.c:crypt_connection_id_is_valid:
  186|    304|{
  187|    304|    if ((uint32_t)crypt_connection_id >= c->crypto_connections_length) {
  ------------------
  |  Branch (187:9): [True: 304, False: 0]
  ------------------
  188|    304|        return false;
  189|    304|    }
  190|       |
  191|      0|    if (c->crypto_connections == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (191:9): [True: 0, False: 0]
  ------------------
  192|      0|        return false;
  193|      0|    }
  194|       |
  195|      0|    const Crypto_Conn_State status = c->crypto_connections[crypt_connection_id].status;
  196|       |
  197|      0|    return status != CRYPTO_CONN_NO_CONNECTION && status != CRYPTO_CONN_FREE;
  ------------------
  |  Branch (197:12): [True: 0, False: 0]
  |  Branch (197:51): [True: 0, False: 0]
  ------------------
  198|      0|}
net_crypto.c:get_crypto_connection:
  567|    304|{
  568|    304|    if (!crypt_connection_id_is_valid(c, crypt_connection_id)) {
  ------------------
  |  Branch (568:9): [True: 304, False: 0]
  ------------------
  569|    304|        return nullptr;
  ------------------
  |  |   63|    304|#define nullptr NULL
  ------------------
  570|    304|    }
  571|       |
  572|      0|    return &c->crypto_connections[crypt_connection_id];
  573|    304|}

netprof_new:
  141|  3.56k|{
  142|  3.56k|    Net_Profile *np = (Net_Profile *)mem_alloc(mem, sizeof(Net_Profile));
  143|       |
  144|  3.56k|    if (np == nullptr) {
  ------------------
  |  |   63|  3.56k|#define nullptr NULL
  ------------------
  |  Branch (144:9): [True: 0, False: 3.56k]
  ------------------
  145|      0|        LOGGER_ERROR(log, "failed to allocate memory for net profiler");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  146|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  147|      0|    }
  148|       |
  149|  3.56k|    return np;
  150|  3.56k|}
netprof_kill:
  153|  3.56k|{
  154|  3.56k|    if (net_profile != nullptr) {
  ------------------
  |  |   63|  3.56k|#define nullptr NULL
  ------------------
  |  Branch (154:9): [True: 3.56k, False: 0]
  ------------------
  155|  3.56k|        mem_delete(mem, net_profile);
  156|  3.56k|    }
  157|  3.56k|}

net_socket_from_native:
  380|  1.74k|{
  381|  1.74k|    const Socket res = {(force Socket_Value)sock};
  382|  1.74k|    return res;
  383|  1.74k|}
net_invalid_socket:
  386|  1.74k|{
  387|  1.74k|    return net_socket_from_native(INVALID_SOCKET);
  ------------------
  |  |  371|  1.74k|#define INVALID_SOCKET (-1)
  ------------------
  388|  1.74k|}
net_family_unspec:
  391|  3.49k|{
  392|  3.49k|    return family_unspec;
  393|  3.49k|}
net_family_ipv4:
  396|  12.7k|{
  397|  12.7k|    return family_ipv4;
  398|  12.7k|}
net_family_ipv6:
  401|  6.13k|{
  402|  6.13k|    return family_ipv6;
  403|  6.13k|}
net_family_tcp_ipv4:
  416|    751|{
  417|    751|    return family_tcp_ipv4;
  418|    751|}
net_family_tcp_ipv6:
  421|  7.41k|{
  422|  7.41k|    return family_tcp_ipv6;
  423|  7.41k|}
net_family_is_unspec:
  436|  12.1k|{
  437|  12.1k|    return family.value == family_unspec.value;
  438|  12.1k|}
net_family_is_ipv4:
  441|  47.3k|{
  442|  47.3k|    return family.value == family_ipv4.value;
  443|  47.3k|}
net_family_is_ipv6:
  446|  35.0k|{
  447|  35.0k|    return family.value == family_ipv6.value;
  448|  35.0k|}
net_family_is_tcp_ipv4:
  461|  12.6k|{
  462|  12.6k|    return family.value == family_tcp_ipv4.value;
  463|  12.6k|}
net_family_is_tcp_ipv6:
  466|  7.36k|{
  467|  7.36k|    return family.value == family_tcp_ipv6.value;
  468|  7.36k|}
sock_valid:
  481|  1.74k|{
  482|  1.74k|    const Socket invalid_socket = net_invalid_socket();
  483|  1.74k|    return sock.value != invalid_socket.value;
  484|  1.74k|}
os_network:
  709|  1.74k|{
  710|  1.74k|#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
  711|  1.74k|    if ((true)) {
  ------------------
  |  Branch (711:9): [Folded - Ignored]
  ------------------
  712|  1.74k|        return nullptr;
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  713|  1.74k|    }
  714|      0|#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  715|       |#ifdef OS_WIN32
  716|       |    WSADATA wsaData;
  717|       |
  718|       |    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != NO_ERROR) {
  719|       |        return nullptr;
  720|       |    }
  721|       |#endif /* OS_WIN32 */
  722|      0|    return &os_network_obj;
  723|  1.74k|}
kill_sock:
  969|  1.74k|{
  970|  1.74k|    ns->funcs->close(ns->obj, sock);
  971|  1.74k|}
set_socket_nonblock:
  974|  1.74k|{
  975|  1.74k|    return ns->funcs->socket_nonblock(ns->obj, sock, true) == 0;
  976|  1.74k|}
set_socket_nosigpipe:
  979|  1.74k|{
  980|       |#if defined(__APPLE__)
  981|       |    int set = 1;
  982|       |    return net_setsockopt(ns, sock, SOL_SOCKET, SO_NOSIGPIPE, &set, sizeof(int)) == 0;
  983|       |#else
  984|  1.74k|    return true;
  985|  1.74k|#endif /* __APPLE__ */
  986|  1.74k|}
set_socket_dualstack:
  999|  1.74k|{
 1000|  1.74k|    int ipv6only = 0;
 1001|  1.74k|    size_t optsize = sizeof(ipv6only);
 1002|  1.74k|    const int res = net_getsockopt(ns, sock, IPPROTO_IPV6, IPV6_V6ONLY, &ipv6only, &optsize);
 1003|       |
 1004|  1.74k|    if ((res == 0) && (ipv6only == 0)) {
  ------------------
  |  Branch (1004:9): [True: 1.74k, False: 0]
  |  Branch (1004:23): [True: 1.74k, False: 0]
  ------------------
 1005|  1.74k|        return true;
 1006|  1.74k|    }
 1007|       |
 1008|      0|    ipv6only = 0;
 1009|      0|    return net_setsockopt(ns, sock, IPPROTO_IPV6, IPV6_V6ONLY, &ipv6only, sizeof(ipv6only)) == 0;
 1010|  1.74k|}
networking_registerhandler:
 1201|   109k|{
 1202|   109k|    net->packethandlers[byte].function = cb;
 1203|   109k|    net->packethandlers[byte].object = object;
 1204|   109k|}
new_networking_ex:
 1250|  1.74k|{
 1251|       |    /* If both from and to are 0, use default port range
 1252|       |     * If one is 0 and the other is non-0, use the non-0 value as only port
 1253|       |     * If from > to, swap
 1254|       |     */
 1255|  1.74k|    if (port_from == 0 && port_to == 0) {
  ------------------
  |  Branch (1255:9): [True: 1.74k, False: 0]
  |  Branch (1255:27): [True: 1.74k, False: 0]
  ------------------
 1256|  1.74k|        port_from = TOX_PORTRANGE_FROM;
  ------------------
  |  |  162|  1.74k|#define TOX_PORTRANGE_FROM 33445
  ------------------
 1257|  1.74k|        port_to = TOX_PORTRANGE_TO;
  ------------------
  |  |  163|  1.74k|#define TOX_PORTRANGE_TO   33545
  ------------------
 1258|  1.74k|    } else if (port_from == 0 && port_to != 0) {
  ------------------
  |  Branch (1258:16): [True: 0, False: 0]
  |  Branch (1258:34): [True: 0, False: 0]
  ------------------
 1259|      0|        port_from = port_to;
 1260|      0|    } else if (port_from != 0 && port_to == 0) {
  ------------------
  |  Branch (1260:16): [True: 0, False: 0]
  |  Branch (1260:34): [True: 0, False: 0]
  ------------------
 1261|      0|        port_to = port_from;
 1262|      0|    } else if (port_from > port_to) {
  ------------------
  |  Branch (1262:16): [True: 0, False: 0]
  ------------------
 1263|      0|        const uint16_t temp_port = port_from;
 1264|      0|        port_from = port_to;
 1265|      0|        port_to = temp_port;
 1266|      0|    }
 1267|       |
 1268|  1.74k|    if (error != nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (1268:9): [True: 1.74k, False: 0]
  ------------------
 1269|  1.74k|        *error = 2;
 1270|  1.74k|    }
 1271|       |
 1272|       |    /* maybe check for invalid IPs like 224+.x.y.z? if there is any IP set ever */
 1273|  1.74k|    if (!net_family_is_ipv4(ip->family) && !net_family_is_ipv6(ip->family)) {
  ------------------
  |  Branch (1273:9): [True: 1.74k, False: 0]
  |  Branch (1273:44): [True: 0, False: 1.74k]
  ------------------
 1274|      0|        LOGGER_ERROR(log, "invalid address family: %u", ip->family.value);
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1275|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1276|      0|    }
 1277|       |
 1278|  1.74k|    Networking_Core *temp = (Networking_Core *)mem_alloc(mem, sizeof(Networking_Core));
 1279|       |
 1280|  1.74k|    if (temp == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (1280:9): [True: 0, False: 1.74k]
  ------------------
 1281|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1282|      0|    }
 1283|       |
 1284|  1.74k|    Net_Profile *np = netprof_new(log, mem);
 1285|       |
 1286|  1.74k|    if (np == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (1286:9): [True: 0, False: 1.74k]
  ------------------
 1287|      0|        free(temp);
 1288|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1289|      0|    }
 1290|       |
 1291|  1.74k|    temp->udp_net_profile = np;
 1292|  1.74k|    temp->ns = ns;
 1293|  1.74k|    temp->log = log;
 1294|  1.74k|    temp->mem = mem;
 1295|  1.74k|    temp->family = ip->family;
 1296|  1.74k|    temp->port = 0;
 1297|       |
 1298|       |    /* Initialize our socket. */
 1299|       |    /* add log message what we're creating */
 1300|  1.74k|    temp->sock = net_socket(ns, temp->family, TOX_SOCK_DGRAM, TOX_PROTO_UDP);
  ------------------
  |  |  174|  1.74k|#define TOX_SOCK_DGRAM 2
  ------------------
                  temp->sock = net_socket(ns, temp->family, TOX_SOCK_DGRAM, TOX_PROTO_UDP);
  ------------------
  |  |  177|  1.74k|#define TOX_PROTO_UDP 2
  ------------------
 1301|       |
 1302|       |    /* Check for socket error. */
 1303|  1.74k|    if (!sock_valid(temp->sock)) {
  ------------------
  |  Branch (1303:9): [True: 0, False: 1.74k]
  ------------------
 1304|      0|        const int neterror = net_error();
 1305|      0|        Net_Strerror error_str;
 1306|      0|        LOGGER_ERROR(log, "failed to get a socket?! %d, %s", neterror, net_strerror(neterror, &error_str));
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1307|      0|        netprof_kill(mem, temp->udp_net_profile);
 1308|      0|        mem_delete(mem, temp);
 1309|       |
 1310|      0|        if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1310:13): [True: 0, False: 0]
  ------------------
 1311|      0|            *error = 1;
 1312|      0|        }
 1313|       |
 1314|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1315|      0|    }
 1316|       |
 1317|       |    /* Functions to increase the size of the send and receive UDP buffers.
 1318|       |     */
 1319|  1.74k|    int n = 1024 * 1024 * 2;
 1320|       |
 1321|  1.74k|    if (net_setsockopt(ns, temp->sock, SOL_SOCKET, SO_RCVBUF, &n, sizeof(n)) != 0) {
  ------------------
  |  Branch (1321:9): [True: 0, False: 1.74k]
  ------------------
 1322|      0|        LOGGER_WARNING(log, "failed to set socket option %d", SO_RCVBUF);
  ------------------
  |  |   86|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1323|      0|    }
 1324|       |
 1325|  1.74k|    if (net_setsockopt(ns, temp->sock, SOL_SOCKET, SO_SNDBUF, &n, sizeof(n)) != 0) {
  ------------------
  |  Branch (1325:9): [True: 0, False: 1.74k]
  ------------------
 1326|      0|        LOGGER_WARNING(log, "failed to set socket option %d", SO_SNDBUF);
  ------------------
  |  |   86|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1327|      0|    }
 1328|       |
 1329|       |    /* Enable broadcast on socket */
 1330|  1.74k|    int broadcast = 1;
 1331|       |
 1332|  1.74k|    if (net_setsockopt(ns, temp->sock, SOL_SOCKET, SO_BROADCAST, &broadcast, sizeof(broadcast)) != 0) {
  ------------------
  |  Branch (1332:9): [True: 0, False: 1.74k]
  ------------------
 1333|      0|        LOGGER_ERROR(log, "failed to set socket option %d", SO_BROADCAST);
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1334|      0|    }
 1335|       |
 1336|       |    /* iOS UDP sockets are weird and apparently can SIGPIPE */
 1337|  1.74k|    if (!set_socket_nosigpipe(ns, temp->sock)) {
  ------------------
  |  Branch (1337:9): [True: 0, False: 1.74k]
  ------------------
 1338|      0|        kill_networking(temp);
 1339|       |
 1340|      0|        if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1340:13): [True: 0, False: 0]
  ------------------
 1341|      0|            *error = 1;
 1342|      0|        }
 1343|       |
 1344|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1345|      0|    }
 1346|       |
 1347|       |    /* Set socket nonblocking. */
 1348|  1.74k|    if (!set_socket_nonblock(ns, temp->sock)) {
  ------------------
  |  Branch (1348:9): [True: 0, False: 1.74k]
  ------------------
 1349|      0|        kill_networking(temp);
 1350|       |
 1351|      0|        if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1351:13): [True: 0, False: 0]
  ------------------
 1352|      0|            *error = 1;
 1353|      0|        }
 1354|       |
 1355|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1356|      0|    }
 1357|       |
 1358|       |    /* Bind our socket to port PORT and the given IP address (usually 0.0.0.0 or ::) */
 1359|  1.74k|    uint16_t *portptr = nullptr;
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
 1360|  1.74k|    Network_Addr addr = {{0}};
 1361|       |
 1362|  1.74k|    if (net_family_is_ipv4(temp->family)) {
  ------------------
  |  Branch (1362:9): [True: 0, False: 1.74k]
  ------------------
 1363|      0|        struct sockaddr_in *addr4 = (struct sockaddr_in *)&addr.addr;
 1364|       |
 1365|      0|        addr.size = sizeof(struct sockaddr_in);
 1366|      0|        addr4->sin_family = AF_INET;
 1367|      0|        addr4->sin_port = 0;
 1368|      0|        fill_addr4(&ip->ip.v4, &addr4->sin_addr);
 1369|       |
 1370|      0|        portptr = &addr4->sin_port;
 1371|  1.74k|    } else if (net_family_is_ipv6(temp->family)) {
  ------------------
  |  Branch (1371:16): [True: 1.74k, False: 0]
  ------------------
 1372|  1.74k|        struct sockaddr_in6 *addr6 = (struct sockaddr_in6 *)&addr.addr;
 1373|       |
 1374|  1.74k|        addr.size = sizeof(struct sockaddr_in6);
 1375|  1.74k|        addr6->sin6_family = AF_INET6;
 1376|  1.74k|        addr6->sin6_port = 0;
 1377|  1.74k|        fill_addr6(&ip->ip.v6, &addr6->sin6_addr);
 1378|       |
 1379|  1.74k|        addr6->sin6_flowinfo = 0;
 1380|  1.74k|        addr6->sin6_scope_id = 0;
 1381|       |
 1382|  1.74k|        portptr = &addr6->sin6_port;
 1383|  1.74k|    } else {
 1384|      0|        mem_delete(mem, temp);
 1385|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1386|      0|    }
 1387|       |
 1388|  1.74k|    if (net_family_is_ipv6(ip->family)) {
  ------------------
  |  Branch (1388:9): [True: 1.74k, False: 0]
  ------------------
 1389|  1.74k|        const bool is_dualstack = set_socket_dualstack(ns, temp->sock);
 1390|       |
 1391|  1.74k|        if (is_dualstack) {
  ------------------
  |  Branch (1391:13): [True: 1.74k, False: 0]
  ------------------
 1392|  1.74k|            LOGGER_TRACE(log, "Dual-stack socket: enabled");
  ------------------
  |  |   83|  1.74k|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|  1.74k|    do {                                                                         \
  |  |  |  |   77|  1.74k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  3.49k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|  1.74k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1393|  1.74k|        } else {
 1394|      0|            LOGGER_ERROR(log, "Dual-stack socket failed to enable, won't be able to receive from/send to IPv4 addresses");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1395|      0|        }
 1396|       |
 1397|  1.74k|#ifndef ESP_PLATFORM
 1398|       |        /* multicast local nodes */
 1399|  1.74k|        struct ipv6_mreq mreq = {{{{0}}}};
 1400|  1.74k|        mreq.ipv6mr_multiaddr.s6_addr[0] = 0xFF;
 1401|  1.74k|        mreq.ipv6mr_multiaddr.s6_addr[1] = 0x02;
 1402|  1.74k|        mreq.ipv6mr_multiaddr.s6_addr[15] = 0x01;
 1403|  1.74k|        mreq.ipv6mr_interface = 0;
 1404|       |
 1405|  1.74k|        const int res = net_setsockopt(ns, temp->sock, IPPROTO_IPV6, IPV6_ADD_MEMBERSHIP, &mreq, sizeof(mreq));
 1406|       |
 1407|  1.74k|        const int neterror = net_error();
 1408|  1.74k|        Net_Strerror error_str;
 1409|       |
 1410|  1.74k|        if (res < 0) {
  ------------------
  |  Branch (1410:13): [True: 0, False: 1.74k]
  ------------------
 1411|      0|            LOGGER_INFO(log, "Failed to activate local multicast membership in FF02::1. (%d, %s)", neterror, net_strerror(neterror, &error_str));
  ------------------
  |  |   85|      0|#define LOGGER_INFO(log, ...)    LOGGER_WRITE(log, LOGGER_LEVEL_INFO, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1412|  1.74k|        } else {
 1413|  1.74k|            LOGGER_TRACE(log, "Local multicast group joined successfully. (%d, %s)", neterror, net_strerror(neterror, &error_str));
  ------------------
  |  |   83|  1.74k|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|  1.74k|    do {                                                                         \
  |  |  |  |   77|  1.74k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  3.49k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|  1.74k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1414|  1.74k|        }
 1415|  1.74k|#endif /* ESP_PLATFORM */
 1416|  1.74k|    }
 1417|       |
 1418|       |    /* A hanging program or a different user might block the standard port.
 1419|       |     * As long as it isn't a parameter coming from the commandline,
 1420|       |     * try a few ports after it, to see if we can find a "free" one.
 1421|       |     *
 1422|       |     * If we go on without binding, the first sendto() automatically binds to
 1423|       |     * a free port chosen by the system (i.e. anything from 1024 to 65535).
 1424|       |     *
 1425|       |     * Returning NULL after bind fails has both advantages and disadvantages:
 1426|       |     * advantage:
 1427|       |     *   we can rely on getting the port in the range 33445..33450, which
 1428|       |     *   enables us to tell joe user to open their firewall to a small range
 1429|       |     *
 1430|       |     * disadvantage:
 1431|       |     *   some clients might not test return of tox_new(), blindly assuming that
 1432|       |     *   it worked ok (which it did previously without a successful bind)
 1433|       |     */
 1434|  1.74k|    uint16_t port_to_try = port_from;
 1435|  1.74k|    *portptr = net_htons(port_to_try);
 1436|       |
 1437|  1.74k|    for (uint16_t tries = port_from; tries <= port_to; ++tries) {
  ------------------
  |  Branch (1437:38): [True: 1.74k, False: 0]
  ------------------
 1438|  1.74k|        const int res = net_bind(ns, temp->sock, &addr);
 1439|       |
 1440|  1.74k|        if (res == 0) {
  ------------------
  |  Branch (1440:13): [True: 1.74k, False: 0]
  ------------------
 1441|  1.74k|            temp->port = *portptr;
 1442|       |
 1443|  1.74k|            Ip_Ntoa ip_str;
 1444|  1.74k|            LOGGER_DEBUG(log, "Bound successfully to %s:%u", net_ip_ntoa(ip, &ip_str),
  ------------------
  |  |   84|  1.74k|#define LOGGER_DEBUG(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_DEBUG, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|  1.74k|    do {                                                                         \
  |  |  |  |   77|  1.74k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  3.49k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|  1.74k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1445|  1.74k|                         net_ntohs(temp->port));
 1446|       |
 1447|       |            /* errno isn't reset on success, only set on failure, the failed
 1448|       |             * binds with parallel clients yield a -EPERM to the outside if
 1449|       |             * errno isn't cleared here */
 1450|  1.74k|            if (tries > 0) {
  ------------------
  |  Branch (1450:17): [True: 1.74k, False: 0]
  ------------------
 1451|  1.74k|                errno = 0;
 1452|  1.74k|            }
 1453|       |
 1454|  1.74k|            if (error != nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (1454:17): [True: 1.74k, False: 0]
  ------------------
 1455|  1.74k|                *error = 0;
 1456|  1.74k|            }
 1457|       |
 1458|  1.74k|            return temp;
 1459|  1.74k|        }
 1460|       |
 1461|      0|        ++port_to_try;
 1462|       |
 1463|      0|        if (port_to_try > port_to) {
  ------------------
  |  Branch (1463:13): [True: 0, False: 0]
  ------------------
 1464|      0|            port_to_try = port_from;
 1465|      0|        }
 1466|       |
 1467|      0|        *portptr = net_htons(port_to_try);
 1468|      0|    }
 1469|       |
 1470|      0|    Ip_Ntoa ip_str;
 1471|      0|    const int neterror = net_error();
 1472|      0|    Net_Strerror error_str;
 1473|      0|    LOGGER_ERROR(log, "failed to bind socket: %d, %s IP: %s port_from: %u port_to: %u",
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1474|      0|                 neterror, net_strerror(neterror, &error_str), net_ip_ntoa(ip, &ip_str), port_from, port_to);
 1475|      0|    kill_networking(temp);
 1476|       |
 1477|      0|    if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1477:9): [True: 0, False: 0]
  ------------------
 1478|      0|        *error = 1;
 1479|      0|    }
 1480|       |
 1481|      0|    return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1482|  1.74k|}
kill_networking:
 1502|  1.74k|{
 1503|  1.74k|    if (net == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (1503:9): [True: 0, False: 1.74k]
  ------------------
 1504|      0|        return;
 1505|      0|    }
 1506|       |
 1507|  1.74k|    if (!net_family_is_unspec(net->family)) {
  ------------------
  |  Branch (1507:9): [True: 1.74k, False: 0]
  ------------------
 1508|       |        /* Socket is initialized, so we close it. */
 1509|  1.74k|        kill_sock(net->ns, net->sock);
 1510|  1.74k|    }
 1511|       |
 1512|  1.74k|    netprof_kill(net->mem, net->udp_net_profile);
 1513|  1.74k|    mem_delete(net->mem, net);
 1514|  1.74k|}
ip_reset:
 1630|  1.74k|{
 1631|  1.74k|    if (ip == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (1631:9): [True: 0, False: 1.74k]
  ------------------
 1632|      0|        return;
 1633|      0|    }
 1634|       |
 1635|  1.74k|    *ip = empty_ip;
 1636|  1.74k|}
ipport_reset:
 1642|  10.6k|{
 1643|  10.6k|    if (ipport == nullptr) {
  ------------------
  |  |   63|  10.6k|#define nullptr NULL
  ------------------
  |  Branch (1643:9): [True: 0, False: 10.6k]
  ------------------
 1644|      0|        return;
 1645|      0|    }
 1646|       |
 1647|  10.6k|    *ipport = empty_ip_port;
 1648|  10.6k|}
ip_init:
 1652|  1.74k|{
 1653|  1.74k|    if (ip == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (1653:9): [True: 0, False: 1.74k]
  ------------------
 1654|      0|        return;
 1655|      0|    }
 1656|       |
 1657|  1.74k|    ip_reset(ip);
 1658|  1.74k|    ip->family = ipv6enabled ? net_family_ipv6() : net_family_ipv4();
  ------------------
  |  Branch (1658:18): [True: 1.74k, False: 0]
  ------------------
 1659|  1.74k|}
ip_isset:
 1663|  1.72k|{
 1664|  1.72k|    if (ip == nullptr) {
  ------------------
  |  |   63|  1.72k|#define nullptr NULL
  ------------------
  |  Branch (1664:9): [True: 0, False: 1.72k]
  ------------------
 1665|      0|        return false;
 1666|      0|    }
 1667|       |
 1668|  1.72k|    return !net_family_is_unspec(ip->family);
 1669|  1.72k|}
ipport_isset:
 1673|  30.4k|{
 1674|  30.4k|    if (ipport == nullptr) {
  ------------------
  |  |   63|  30.4k|#define nullptr NULL
  ------------------
  |  Branch (1674:9): [True: 0, False: 30.4k]
  ------------------
 1675|      0|        return false;
 1676|      0|    }
 1677|       |
 1678|  30.4k|    if (ipport->port == 0) {
  ------------------
  |  Branch (1678:9): [True: 28.7k, False: 1.72k]
  ------------------
 1679|  28.7k|        return false;
 1680|  28.7k|    }
 1681|       |
 1682|  1.72k|    return ip_isset(&ipport->ip);
 1683|  30.4k|}
bin_pack_ip_port:
 1736|  9.05k|{
 1737|  9.05k|    bool is_ipv4;
 1738|  9.05k|    uint8_t family;
 1739|       |
 1740|  9.05k|    if (net_family_is_ipv4(ip_port->ip.family)) {
  ------------------
  |  Branch (1740:9): [True: 7.41k, False: 1.64k]
  ------------------
 1741|       |        // TODO(irungentoo): use functions to convert endianness
 1742|  7.41k|        is_ipv4 = true;
 1743|  7.41k|        family = TOX_AF_INET;
  ------------------
  |  |  168|  7.41k|#define TOX_AF_INET 2
  ------------------
 1744|  7.41k|    } else if (net_family_is_tcp_ipv4(ip_port->ip.family)) {
  ------------------
  |  Branch (1744:16): [True: 1.08k, False: 554]
  ------------------
 1745|  1.08k|        is_ipv4 = true;
 1746|  1.08k|        family = TOX_TCP_INET;
  ------------------
  |  |  170|  1.08k|#define TOX_TCP_INET 130
  ------------------
 1747|  1.08k|    } else if (net_family_is_ipv6(ip_port->ip.family)) {
  ------------------
  |  Branch (1747:16): [True: 524, False: 30]
  ------------------
 1748|    524|        is_ipv4 = false;
 1749|    524|        family = TOX_AF_INET6;
  ------------------
  |  |  169|    524|#define TOX_AF_INET6 10
  ------------------
 1750|    524|    } else if (net_family_is_tcp_ipv6(ip_port->ip.family)) {
  ------------------
  |  Branch (1750:16): [True: 30, False: 0]
  ------------------
 1751|     30|        is_ipv4 = false;
 1752|     30|        family = TOX_TCP_INET6;
  ------------------
  |  |  171|     30|#define TOX_TCP_INET6 138
  ------------------
 1753|     30|    } else {
 1754|      0|        Ip_Ntoa ip_str;
 1755|       |        // TODO(iphydf): Find out why we're trying to pack invalid IPs, stop
 1756|       |        // doing that, and turn this into an error.
 1757|      0|        LOGGER_TRACE(logger, "cannot pack invalid IP: %s", net_ip_ntoa(&ip_port->ip, &ip_str));
  ------------------
  |  |   83|      0|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1758|      0|        return false;
 1759|      0|    }
 1760|       |
 1761|  9.05k|    return bin_pack_u08_b(bp, family)
  ------------------
  |  Branch (1761:12): [True: 9.05k, False: 0]
  ------------------
 1762|  9.05k|           && bin_pack_ip(bp, &ip_port->ip, is_ipv4)
  ------------------
  |  Branch (1762:15): [True: 9.05k, False: 0]
  ------------------
 1763|  9.05k|           && bin_pack_u16_b(bp, net_ntohs(ip_port->port));
  ------------------
  |  Branch (1763:15): [True: 9.05k, False: 0]
  ------------------
 1764|  9.05k|}
pack_ip_port:
 1774|    560|{
 1775|    560|    const uint32_t size = bin_pack_obj_size(bin_pack_ip_port_handler, ip_port, logger);
 1776|       |
 1777|    560|    if (size > length) {
  ------------------
  |  Branch (1777:9): [True: 0, False: 560]
  ------------------
 1778|      0|        return -1;
 1779|      0|    }
 1780|       |
 1781|    560|    if (!bin_pack_obj(bin_pack_ip_port_handler, ip_port, logger, data, length)) {
  ------------------
  |  Branch (1781:9): [True: 0, False: 560]
  ------------------
 1782|      0|        return -1;
 1783|      0|    }
 1784|       |
 1785|    560|    assert(size < INT_MAX);
 1786|    560|    return (int)size;
 1787|    560|}
unpack_ip_port:
 1790|  11.4k|{
 1791|  11.4k|    if (data == nullptr) {
  ------------------
  |  |   63|  11.4k|#define nullptr NULL
  ------------------
  |  Branch (1791:9): [True: 0, False: 11.4k]
  ------------------
 1792|      0|        return -1;
 1793|      0|    }
 1794|       |
 1795|  11.4k|    bool is_ipv4;
 1796|  11.4k|    Family host_family;
 1797|       |
 1798|  11.4k|    if (data[0] == TOX_AF_INET) {
  ------------------
  |  |  168|  11.4k|#define TOX_AF_INET 2
  ------------------
  |  Branch (1798:9): [True: 9.10k, False: 2.32k]
  ------------------
 1799|  9.10k|        is_ipv4 = true;
 1800|  9.10k|        host_family = net_family_ipv4();
 1801|  9.10k|    } else if (data[0] == TOX_TCP_INET) {
  ------------------
  |  |  170|  2.32k|#define TOX_TCP_INET 130
  ------------------
  |  Branch (1801:16): [True: 881, False: 1.44k]
  ------------------
 1802|    881|        if (!tcp_enabled) {
  ------------------
  |  Branch (1802:13): [True: 130, False: 751]
  ------------------
 1803|    130|            return -1;
 1804|    130|        }
 1805|       |
 1806|    751|        is_ipv4 = true;
 1807|    751|        host_family = net_family_tcp_ipv4();
 1808|  1.44k|    } else if (data[0] == TOX_AF_INET6) {
  ------------------
  |  |  169|  1.44k|#define TOX_AF_INET6 10
  ------------------
  |  Branch (1808:16): [True: 720, False: 723]
  ------------------
 1809|    720|        is_ipv4 = false;
 1810|    720|        host_family = net_family_ipv6();
 1811|    723|    } else if (data[0] == TOX_TCP_INET6) {
  ------------------
  |  |  171|    723|#define TOX_TCP_INET6 138
  ------------------
  |  Branch (1811:16): [True: 87, False: 636]
  ------------------
 1812|     87|        if (!tcp_enabled) {
  ------------------
  |  Branch (1812:13): [True: 11, False: 76]
  ------------------
 1813|     11|            return -1;
 1814|     11|        }
 1815|       |
 1816|     76|        is_ipv4 = false;
 1817|     76|        host_family = net_family_tcp_ipv6();
 1818|    636|    } else {
 1819|    636|        return -1;
 1820|    636|    }
 1821|       |
 1822|  10.6k|    ipport_reset(ip_port);
 1823|       |
 1824|  10.6k|    if (is_ipv4) {
  ------------------
  |  Branch (1824:9): [True: 9.85k, False: 796]
  ------------------
 1825|  9.85k|        const uint32_t size = 1 + SIZE_IP4 + sizeof(uint16_t);
  ------------------
  |  |  185|  9.85k|#define SIZE_IP4 4
  ------------------
 1826|       |
 1827|  9.85k|        if (size > length) {
  ------------------
  |  Branch (1827:13): [True: 49, False: 9.80k]
  ------------------
 1828|     49|            return -1;
 1829|     49|        }
 1830|       |
 1831|  9.80k|        ip_port->ip.family = host_family;
 1832|  9.80k|        memcpy(ip_port->ip.ip.v4.uint8, data + 1, SIZE_IP4);
  ------------------
  |  |  185|  9.80k|#define SIZE_IP4 4
  ------------------
 1833|  9.80k|        memcpy(&ip_port->port, data + 1 + SIZE_IP4, sizeof(uint16_t));
  ------------------
  |  |  185|  9.80k|#define SIZE_IP4 4
  ------------------
 1834|  9.80k|        return size;
 1835|  9.85k|    } else {
 1836|    796|        const uint32_t size = 1 + SIZE_IP6 + sizeof(uint16_t);
  ------------------
  |  |  186|    796|#define SIZE_IP6 16
  ------------------
 1837|       |
 1838|    796|        if (size > length) {
  ------------------
  |  Branch (1838:13): [True: 66, False: 730]
  ------------------
 1839|     66|            return -1;
 1840|     66|        }
 1841|       |
 1842|    730|        ip_port->ip.family = host_family;
 1843|    730|        memcpy(ip_port->ip.ip.v6.uint8, data + 1, SIZE_IP6);
  ------------------
  |  |  186|    730|#define SIZE_IP6 16
  ------------------
 1844|    730|        memcpy(&ip_port->port, data + 1 + SIZE_IP6, sizeof(uint16_t));
  ------------------
  |  |  186|    730|#define SIZE_IP6 16
  ------------------
 1845|    730|        return size;
 1846|    796|    }
 1847|  10.6k|}
net_socket:
 2256|  1.74k|{
 2257|  1.74k|    const int platform_domain = make_family(domain);
 2258|  1.74k|    const int platform_type = make_socktype(type);
 2259|  1.74k|    const int platform_prot = make_proto(protocol);
 2260|  1.74k|    return ns->funcs->socket(ns->obj, platform_domain, platform_type, platform_prot);
 2261|  1.74k|}
net_htons:
 2275|  3.26k|{
 2276|  3.26k|    return htons(hostshort);
 2277|  3.26k|}
net_ntohs:
 2285|  9.59k|{
 2286|  9.59k|    return ntohs(hostshort);
 2287|  9.59k|}
net_pack_u16:
 2296|    364|{
 2297|    364|    bytes[0] = (v >> 8) & 0xff;
 2298|    364|    bytes[1] = v & 0xff;
 2299|    364|    return sizeof(v);
 2300|    364|}
net_pack_u32:
 2303|    182|{
 2304|    182|    uint8_t *p = bytes;
 2305|    182|    p += net_pack_u16(p, (v >> 16) & 0xffff);
 2306|    182|    p += net_pack_u16(p, v & 0xffff);
 2307|    182|    return p - bytes;
 2308|    182|}
net_pack_u64:
 2311|     91|{
 2312|     91|    uint8_t *p = bytes;
 2313|     91|    p += net_pack_u32(p, (v >> 32) & 0xffffffff);
 2314|     91|    p += net_pack_u32(p, v & 0xffffffff);
 2315|     91|    return p - bytes;
 2316|     91|}
net_unpack_u16:
 2325|    840|{
 2326|    840|    const uint8_t hi = bytes[0];
 2327|    840|    const uint8_t lo = bytes[1];
 2328|    840|    *v = ((uint16_t)hi << 8) | lo;
 2329|    840|    return sizeof(*v);
 2330|    840|}
net_unpack_u32:
 2333|    420|{
 2334|    420|    const uint8_t *p = bytes;
 2335|    420|    uint16_t hi;
 2336|    420|    uint16_t lo;
 2337|    420|    p += net_unpack_u16(p, &hi);
 2338|    420|    p += net_unpack_u16(p, &lo);
 2339|    420|    *v = ((uint32_t)hi << 16) | lo;
 2340|    420|    return p - bytes;
 2341|    420|}
net_unpack_u64:
 2344|    210|{
 2345|    210|    const uint8_t *p = bytes;
 2346|    210|    uint32_t hi;
 2347|    210|    uint32_t lo;
 2348|    210|    p += net_unpack_u32(p, &hi);
 2349|    210|    p += net_unpack_u32(p, &lo);
 2350|    210|    *v = ((uint64_t)hi << 32) | lo;
 2351|    210|    return p - bytes;
 2352|    210|}
net_error:
 2360|  1.74k|{
 2361|       |#ifdef OS_WIN32
 2362|       |    return WSAGetLastError();
 2363|       |#else
 2364|  1.74k|    return errno;
 2365|  1.74k|#endif /* OS_WIN32 */
 2366|  1.74k|}
network.c:net_setsockopt:
  737|  6.98k|{
  738|  6.98k|    return ns->funcs->setsockopt(ns->obj, sock, level, optname, optval, optlen);
  739|  6.98k|}
network.c:net_getsockopt:
  743|  1.74k|{
  744|  1.74k|    return ns->funcs->getsockopt(ns->obj, sock, level, optname, optval, optlen);
  745|  1.74k|}
network.c:fill_addr6:
  333|  1.74k|{
  334|  1.74k|    memcpy(addr->s6_addr, ip->uint8, sizeof(ip->uint8));
  335|  1.74k|}
network.c:net_bind:
  958|  1.74k|{
  959|  1.74k|    return ns->funcs->bind(ns->obj, sock, addr);
  960|  1.74k|}
network.c:bin_pack_ip:
 1723|  9.05k|{
 1724|  9.05k|    if (is_ipv4) {
  ------------------
  |  Branch (1724:9): [True: 8.50k, False: 554]
  ------------------
 1725|  8.50k|        return bin_pack_bin_b(bp, ip->ip.v4.uint8, SIZE_IP4);
  ------------------
  |  |  185|  8.50k|#define SIZE_IP4 4
  ------------------
 1726|  8.50k|    } else {
 1727|    554|        return bin_pack_bin_b(bp, ip->ip.v6.uint8, SIZE_IP6);
  ------------------
  |  |  186|    554|#define SIZE_IP6 16
  ------------------
 1728|    554|    }
 1729|  9.05k|}
network.c:bin_pack_ip_port_handler:
 1768|  1.12k|{
 1769|  1.12k|    const IP_Port *ip_port = (const IP_Port *)obj;
 1770|  1.12k|    return bin_pack_ip_port(bp, logger, ip_port);
 1771|  1.12k|}
network.c:make_family:
  264|  1.74k|{
  265|  1.74k|    switch (tox_family.value) {
  266|      0|        case TOX_AF_INET:
  ------------------
  |  |  168|      0|#define TOX_AF_INET 2
  ------------------
  |  Branch (266:9): [True: 0, False: 1.74k]
  ------------------
  267|      0|        case TCP_INET:
  ------------------
  |  |  181|      0|#define TCP_INET (TOX_AF_INET6 + 2)
  |  |  ------------------
  |  |  |  |  169|      0|#define TOX_AF_INET6 10
  |  |  ------------------
  ------------------
  |  Branch (267:9): [True: 0, False: 1.74k]
  ------------------
  268|      0|            return AF_INET;
  269|       |
  270|  1.74k|        case TOX_AF_INET6:
  ------------------
  |  |  169|  1.74k|#define TOX_AF_INET6 10
  ------------------
  |  Branch (270:9): [True: 1.74k, False: 0]
  ------------------
  271|  1.74k|        case TCP_INET6:
  ------------------
  |  |  182|  1.74k|#define TCP_INET6 (TOX_AF_INET6 + 3)
  |  |  ------------------
  |  |  |  |  169|  1.74k|#define TOX_AF_INET6 10
  |  |  ------------------
  ------------------
  |  Branch (271:9): [True: 0, False: 1.74k]
  ------------------
  272|  1.74k|            return AF_INET6;
  273|       |
  274|      0|        case TOX_AF_UNSPEC:
  ------------------
  |  |  167|      0|#define TOX_AF_UNSPEC 0
  ------------------
  |  Branch (274:9): [True: 0, False: 1.74k]
  ------------------
  275|      0|            return AF_UNSPEC;
  276|       |
  277|      0|        default:
  ------------------
  |  Branch (277:9): [True: 0, False: 1.74k]
  ------------------
  278|      0|            return tox_family.value;
  279|  1.74k|    }
  280|  1.74k|}
network.c:make_socktype:
  250|  1.74k|{
  251|  1.74k|    switch (type) {
  252|      0|        case TOX_SOCK_STREAM:
  ------------------
  |  |  173|      0|#define TOX_SOCK_STREAM 1
  ------------------
  |  Branch (252:9): [True: 0, False: 1.74k]
  ------------------
  253|      0|            return SOCK_STREAM;
  254|       |
  255|  1.74k|        case TOX_SOCK_DGRAM:
  ------------------
  |  |  174|  1.74k|#define TOX_SOCK_DGRAM 2
  ------------------
  |  Branch (255:9): [True: 1.74k, False: 0]
  ------------------
  256|  1.74k|            return SOCK_DGRAM;
  257|       |
  258|      0|        default:
  ------------------
  |  Branch (258:9): [True: 0, False: 1.74k]
  ------------------
  259|      0|            return type;
  260|  1.74k|    }
  261|  1.74k|}
network.c:make_proto:
  236|  1.74k|{
  237|  1.74k|    switch (proto) {
  238|      0|        case TOX_PROTO_TCP:
  ------------------
  |  |  176|      0|#define TOX_PROTO_TCP 1
  ------------------
  |  Branch (238:9): [True: 0, False: 1.74k]
  ------------------
  239|      0|            return IPPROTO_TCP;
  240|       |
  241|  1.74k|        case TOX_PROTO_UDP:
  ------------------
  |  |  177|  1.74k|#define TOX_PROTO_UDP 2
  ------------------
  |  Branch (241:9): [True: 1.74k, False: 0]
  ------------------
  242|  1.74k|            return IPPROTO_UDP;
  243|       |
  244|      0|        default:
  ------------------
  |  Branch (244:9): [True: 0, False: 1.74k]
  ------------------
  245|      0|            return proto;
  246|  1.74k|    }
  247|  1.74k|}

new_onion:
  718|  1.74k|{
  719|  1.74k|    if (dht == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (719:9): [True: 0, False: 1.74k]
  ------------------
  720|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  721|      0|    }
  722|       |
  723|  1.74k|    Onion *onion = (Onion *)mem_alloc(mem, sizeof(Onion));
  724|       |
  725|  1.74k|    if (onion == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (725:9): [True: 0, False: 1.74k]
  ------------------
  726|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  727|      0|    }
  728|       |
  729|  1.74k|    onion->log = log;
  730|  1.74k|    onion->dht = dht;
  731|  1.74k|    onion->net = dht_get_net(dht);
  732|  1.74k|    onion->mono_time = mono_time;
  733|  1.74k|    onion->rng = rng;
  734|  1.74k|    onion->mem = mem;
  735|  1.74k|    new_symmetric_key(rng, onion->secret_symmetric_key);
  736|  1.74k|    onion->timestamp = mono_time_get(onion->mono_time);
  737|       |
  738|  1.74k|    const uint8_t *secret_key = dht_get_self_secret_key(dht);
  739|  1.74k|    onion->shared_keys_1 = shared_key_cache_new(log, mono_time, mem, secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   38|  1.74k|#define KEYS_TIMEOUT 600
  ------------------
                  onion->shared_keys_1 = shared_key_cache_new(log, mono_time, mem, secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   37|  1.74k|#define MAX_KEYS_PER_SLOT 4
  ------------------
  740|  1.74k|    onion->shared_keys_2 = shared_key_cache_new(log, mono_time, mem, secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   38|  1.74k|#define KEYS_TIMEOUT 600
  ------------------
                  onion->shared_keys_2 = shared_key_cache_new(log, mono_time, mem, secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   37|  1.74k|#define MAX_KEYS_PER_SLOT 4
  ------------------
  741|  1.74k|    onion->shared_keys_3 = shared_key_cache_new(log, mono_time, mem, secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   38|  1.74k|#define KEYS_TIMEOUT 600
  ------------------
                  onion->shared_keys_3 = shared_key_cache_new(log, mono_time, mem, secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   37|  1.74k|#define MAX_KEYS_PER_SLOT 4
  ------------------
  742|       |
  743|  1.74k|    if (onion->shared_keys_1 == nullptr ||
  ------------------
  |  |   63|  3.49k|#define nullptr NULL
  ------------------
  |  Branch (743:9): [True: 0, False: 1.74k]
  ------------------
  744|  1.74k|            onion->shared_keys_2 == nullptr ||
  ------------------
  |  |   63|  3.49k|#define nullptr NULL
  ------------------
  |  Branch (744:13): [True: 0, False: 1.74k]
  ------------------
  745|  1.74k|            onion->shared_keys_3 == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (745:13): [True: 0, False: 1.74k]
  ------------------
  746|       |        // cppcheck-suppress mismatchAllocDealloc
  747|      0|        kill_onion(onion);
  748|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  749|      0|    }
  750|       |
  751|  1.74k|    networking_registerhandler(onion->net, NET_PACKET_ONION_SEND_INITIAL, &handle_send_initial, onion);
  752|  1.74k|    networking_registerhandler(onion->net, NET_PACKET_ONION_SEND_1, &handle_send_1, onion);
  753|  1.74k|    networking_registerhandler(onion->net, NET_PACKET_ONION_SEND_2, &handle_send_2, onion);
  754|       |
  755|  1.74k|    networking_registerhandler(onion->net, NET_PACKET_ONION_RECV_3, &handle_recv_3, onion);
  756|  1.74k|    networking_registerhandler(onion->net, NET_PACKET_ONION_RECV_2, &handle_recv_2, onion);
  757|  1.74k|    networking_registerhandler(onion->net, NET_PACKET_ONION_RECV_1, &handle_recv_1, onion);
  758|       |
  759|  1.74k|    return onion;
  760|  1.74k|}
kill_onion:
  763|  1.74k|{
  764|  1.74k|    if (onion == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (764:9): [True: 0, False: 1.74k]
  ------------------
  765|      0|        return;
  766|      0|    }
  767|       |
  768|  1.74k|    networking_registerhandler(onion->net, NET_PACKET_ONION_SEND_INITIAL, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion->net, NET_PACKET_ONION_SEND_INITIAL, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  769|  1.74k|    networking_registerhandler(onion->net, NET_PACKET_ONION_SEND_1, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion->net, NET_PACKET_ONION_SEND_1, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  770|  1.74k|    networking_registerhandler(onion->net, NET_PACKET_ONION_SEND_2, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion->net, NET_PACKET_ONION_SEND_2, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  771|       |
  772|  1.74k|    networking_registerhandler(onion->net, NET_PACKET_ONION_RECV_3, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion->net, NET_PACKET_ONION_RECV_3, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  773|  1.74k|    networking_registerhandler(onion->net, NET_PACKET_ONION_RECV_2, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion->net, NET_PACKET_ONION_RECV_2, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  774|  1.74k|    networking_registerhandler(onion->net, NET_PACKET_ONION_RECV_1, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion->net, NET_PACKET_ONION_RECV_1, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  775|       |
  776|  1.74k|    crypto_memzero(onion->secret_symmetric_key, sizeof(onion->secret_symmetric_key));
  777|       |
  778|  1.74k|    shared_key_cache_free(onion->shared_keys_1);
  779|  1.74k|    shared_key_cache_free(onion->shared_keys_2);
  780|  1.74k|    shared_key_cache_free(onion->shared_keys_3);
  781|       |
  782|  1.74k|    mem_delete(onion->mem, onion);
  783|  1.74k|}

onion_announce_extra_data_callback:
   76|  1.74k|{
   77|  1.74k|    onion_a->extra_data_max_size = extra_data_max_size;
   78|  1.74k|    onion_a->extra_data_callback = extra_data_callback;
   79|  1.74k|    onion_a->extra_data_object = extra_data_object;
   80|  1.74k|}
new_onion_announce:
  705|  1.74k|{
  706|  1.74k|    if (dht == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (706:9): [True: 0, False: 1.74k]
  ------------------
  707|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  708|      0|    }
  709|       |
  710|  1.74k|    Onion_Announce *onion_a = (Onion_Announce *)mem_alloc(mem, sizeof(Onion_Announce));
  711|       |
  712|  1.74k|    if (onion_a == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (712:9): [True: 0, False: 1.74k]
  ------------------
  713|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  714|      0|    }
  715|       |
  716|  1.74k|    onion_a->log = log;
  717|  1.74k|    onion_a->rng = rng;
  718|  1.74k|    onion_a->mem = mem;
  719|  1.74k|    onion_a->mono_time = mono_time;
  720|  1.74k|    onion_a->dht = dht;
  721|  1.74k|    onion_a->net = dht_get_net(dht);
  722|  1.74k|    onion_a->extra_data_max_size = 0;
  723|  1.74k|    onion_a->extra_data_callback = nullptr;
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  724|  1.74k|    onion_a->extra_data_object = nullptr;
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  725|  1.74k|    new_hmac_key(rng, onion_a->hmac_key);
  726|       |
  727|  1.74k|    onion_a->shared_keys_recv = shared_key_cache_new(log, mono_time, mem, dht_get_self_secret_key(dht), KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   44|  1.74k|#define KEYS_TIMEOUT 600
  ------------------
                  onion_a->shared_keys_recv = shared_key_cache_new(log, mono_time, mem, dht_get_self_secret_key(dht), KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   43|  1.74k|#define MAX_KEYS_PER_SLOT 4
  ------------------
  728|  1.74k|    if (onion_a->shared_keys_recv == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (728:9): [True: 0, False: 1.74k]
  ------------------
  729|       |        // cppcheck-suppress mismatchAllocDealloc
  730|      0|        kill_onion_announce(onion_a);
  731|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  732|      0|    }
  733|       |
  734|  1.74k|    networking_registerhandler(onion_a->net, NET_PACKET_ANNOUNCE_REQUEST, &handle_announce_request, onion_a);
  735|  1.74k|    networking_registerhandler(onion_a->net, NET_PACKET_ANNOUNCE_REQUEST_OLD, &handle_announce_request_old, onion_a);
  736|  1.74k|    networking_registerhandler(onion_a->net, NET_PACKET_ONION_DATA_REQUEST, &handle_data_request, onion_a);
  737|       |
  738|  1.74k|    return onion_a;
  739|  1.74k|}
kill_onion_announce:
  742|  1.74k|{
  743|  1.74k|    if (onion_a == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (743:9): [True: 0, False: 1.74k]
  ------------------
  744|      0|        return;
  745|      0|    }
  746|       |
  747|  1.74k|    networking_registerhandler(onion_a->net, NET_PACKET_ANNOUNCE_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion_a->net, NET_PACKET_ANNOUNCE_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  748|  1.74k|    networking_registerhandler(onion_a->net, NET_PACKET_ANNOUNCE_REQUEST_OLD, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion_a->net, NET_PACKET_ANNOUNCE_REQUEST_OLD, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  749|  1.74k|    networking_registerhandler(onion_a->net, NET_PACKET_ONION_DATA_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion_a->net, NET_PACKET_ONION_DATA_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  750|       |
  751|  1.74k|    crypto_memzero(onion_a->hmac_key, CRYPTO_HMAC_KEY_SIZE);
  ------------------
  |  |  162|  1.74k|#define CRYPTO_HMAC_KEY_SIZE           32
  ------------------
  752|  1.74k|    shared_key_cache_free(onion_a->shared_keys_recv);
  753|       |
  754|  1.74k|    mem_delete(onion_a->mem, onion_a);
  755|  1.74k|}

onion_get_friend:
  172|     62|{
  173|     62|    return &onion_c->friends_list[friend_num];
  174|     62|}
onion_friend_set_gc_public_key:
  187|     62|{
  188|     62|    memcpy(onion_friend->gc_public_key, public_key, ENC_PUBLIC_KEY_SIZE);
  ------------------
  |  |  122|     62|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|     62|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  189|     62|}
onion_friend_set_gc_data:
  192|     62|{
  193|     62|    if (gc_data_length > 0 && gc_data != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (193:9): [True: 0, False: 62]
  |  Branch (193:31): [True: 0, False: 0]
  ------------------
  194|      0|        memcpy(onion_friend->gc_data, gc_data, gc_data_length);
  195|      0|    }
  196|       |
  197|     62|    onion_friend->gc_data_length = gc_data_length;
  198|     62|    onion_friend->is_groupchat = true;
  199|     62|}
onion_get_dht:
  207|  1.74k|{
  208|  1.74k|    return onion_c->dht;
  209|  1.74k|}
onion_get_net_crypto:
  212|  1.74k|{
  213|  1.74k|    return onion_c->c;
  214|  1.74k|}
onion_add_bs_path_node:
  230|  1.93k|{
  231|  1.93k|    if (!net_family_is_ipv4(ip_port->ip.family) && !net_family_is_ipv6(ip_port->ip.family)) {
  ------------------
  |  Branch (231:9): [True: 72, False: 1.86k]
  |  Branch (231:52): [True: 0, False: 72]
  ------------------
  232|      0|        return false;
  233|      0|    }
  234|       |
  235|  45.3k|    for (unsigned int i = 0; i < MAX_PATH_NODES; ++i) {
  ------------------
  |  |   51|  45.3k|#define MAX_PATH_NODES 32
  ------------------
  |  Branch (235:30): [True: 44.3k, False: 1.04k]
  ------------------
  236|  44.3k|        if (pk_equal(public_key, onion_c->path_nodes_bs[i].public_key)) {
  ------------------
  |  Branch (236:13): [True: 890, False: 43.4k]
  ------------------
  237|    890|            return true;
  238|    890|        }
  239|  44.3k|    }
  240|       |
  241|  1.04k|    onion_c->path_nodes_bs[onion_c->path_nodes_index_bs % MAX_PATH_NODES].ip_port = *ip_port;
  ------------------
  |  |   51|  1.04k|#define MAX_PATH_NODES 32
  ------------------
  242|  1.04k|    memcpy(onion_c->path_nodes_bs[onion_c->path_nodes_index_bs % MAX_PATH_NODES].public_key, public_key,
  ------------------
  |  |   51|  1.04k|#define MAX_PATH_NODES 32
  ------------------
  243|  1.04k|           CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|  1.04k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  244|       |
  245|  1.04k|    const uint16_t last = onion_c->path_nodes_index_bs;
  246|  1.04k|    ++onion_c->path_nodes_index_bs;
  247|       |
  248|  1.04k|    if (onion_c->path_nodes_index_bs < last) {
  ------------------
  |  Branch (248:9): [True: 0, False: 1.04k]
  ------------------
  249|      0|        onion_c->path_nodes_index_bs = MAX_PATH_NODES + 1;
  ------------------
  |  |   51|      0|#define MAX_PATH_NODES 32
  ------------------
  250|      0|    }
  251|       |
  252|  1.04k|    return true;
  253|  1.93k|}
onion_backup_nodes:
  292|  1.22k|{
  293|  1.22k|    if (max_num == 0) {
  ------------------
  |  Branch (293:9): [True: 0, False: 1.22k]
  ------------------
  294|      0|        return 0;
  295|      0|    }
  296|       |
  297|  1.22k|    const uint16_t num_nodes = min_u16(onion_c->path_nodes_index, MAX_PATH_NODES);
  ------------------
  |  |   51|  1.22k|#define MAX_PATH_NODES 32
  ------------------
  298|  1.22k|    uint16_t i = 0;
  299|       |
  300|  1.22k|    while (i < max_num && i < num_nodes) {
  ------------------
  |  Branch (300:12): [True: 1.22k, False: 0]
  |  Branch (300:27): [True: 0, False: 1.22k]
  ------------------
  301|      0|        nodes[i] = onion_c->path_nodes[(onion_c->path_nodes_index - (1 + i)) % num_nodes];
  302|      0|        ++i;
  303|      0|    }
  304|       |
  305|  1.43k|    for (uint16_t j = 0; i < max_num && j < MAX_PATH_NODES && j < onion_c->path_nodes_index_bs; ++j) {
  ------------------
  |  |   51|  2.85k|#define MAX_PATH_NODES 32
  ------------------
  |  Branch (305:26): [True: 1.41k, False: 18]
  |  Branch (305:41): [True: 1.41k, False: 0]
  |  Branch (305:63): [True: 214, False: 1.20k]
  ------------------
  306|    214|        bool already_saved = false;
  307|       |
  308|    214|        for (uint16_t k = 0; k < num_nodes; ++k) {
  ------------------
  |  Branch (308:30): [True: 0, False: 214]
  ------------------
  309|      0|            if (pk_equal(nodes[k].public_key, onion_c->path_nodes_bs[j].public_key)) {
  ------------------
  |  Branch (309:17): [True: 0, False: 0]
  ------------------
  310|      0|                already_saved = true;
  311|      0|                break;
  312|      0|            }
  313|      0|        }
  314|       |
  315|    214|        if (!already_saved) {
  ------------------
  |  Branch (315:13): [True: 214, False: 0]
  ------------------
  316|    214|            nodes[i] = onion_c->path_nodes_bs[j];
  317|    214|            ++i;
  318|    214|        }
  319|    214|    }
  320|       |
  321|  1.22k|    return i;
  322|  1.22k|}
onion_friend_num:
 1534|    304|{
 1535|    650|    for (unsigned int i = 0; i < onion_c->num_friends; ++i) {
  ------------------
  |  Branch (1535:30): [True: 346, False: 304]
  ------------------
 1536|    346|        if (!onion_c->friends_list[i].is_valid) {
  ------------------
  |  Branch (1536:13): [True: 0, False: 346]
  ------------------
 1537|      0|            continue;
 1538|      0|        }
 1539|       |
 1540|    346|        if (pk_equal(public_key, onion_c->friends_list[i].real_public_key)) {
  ------------------
  |  Branch (1540:13): [True: 0, False: 346]
  ------------------
 1541|      0|            return i;
 1542|      0|        }
 1543|    346|    }
 1544|       |
 1545|    304|    return -1;
 1546|    304|}
onion_addfriend:
 1578|    304|{
 1579|    304|    const int num = onion_friend_num(onion_c, public_key);
 1580|       |
 1581|    304|    if (num != -1) {
  ------------------
  |  Branch (1581:9): [True: 0, False: 304]
  ------------------
 1582|      0|        return num;
 1583|      0|    }
 1584|       |
 1585|    304|    unsigned int index = -1;
 1586|       |
 1587|    650|    for (unsigned int i = 0; i < onion_c->num_friends; ++i) {
  ------------------
  |  Branch (1587:30): [True: 346, False: 304]
  ------------------
 1588|    346|        if (!onion_c->friends_list[i].is_valid) {
  ------------------
  |  Branch (1588:13): [True: 0, False: 346]
  ------------------
 1589|      0|            index = i;
 1590|      0|            break;
 1591|      0|        }
 1592|    346|    }
 1593|       |
 1594|    304|    if (index == (uint32_t) -1) {
  ------------------
  |  Branch (1594:9): [True: 304, False: 0]
  ------------------
 1595|    304|        if (realloc_onion_friends(onion_c, onion_c->num_friends + 1) == -1) {
  ------------------
  |  Branch (1595:13): [True: 0, False: 304]
  ------------------
 1596|      0|            return -1;
 1597|      0|        }
 1598|       |
 1599|    304|        index = onion_c->num_friends;
 1600|    304|        onion_c->friends_list[onion_c->num_friends] = empty_onion_friend;
 1601|    304|        ++onion_c->num_friends;
 1602|    304|    }
 1603|       |
 1604|    304|    onion_c->friends_list[index].is_valid = true;
 1605|    304|    memcpy(onion_c->friends_list[index].real_public_key, public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|    304|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 1606|    304|    crypto_new_keypair(onion_c->rng, onion_c->friends_list[index].temp_public_key,
 1607|    304|                       onion_c->friends_list[index].temp_secret_key);
 1608|    304|    return index;
 1609|    304|}
onion_delfriend:
 1617|    304|{
 1618|    304|    if ((uint32_t)friend_num >= onion_c->num_friends) {
  ------------------
  |  Branch (1618:9): [True: 0, False: 304]
  ------------------
 1619|      0|        return -1;
 1620|      0|    }
 1621|       |
 1622|       |#if 0
 1623|       |
 1624|       |    if (onion_c->friends_list[friend_num].know_dht_public_key) {
 1625|       |        dht_delfriend(onion_c->dht, onion_c->friends_list[friend_num].dht_public_key, 0);
 1626|       |    }
 1627|       |
 1628|       |#endif /* 0 */
 1629|       |
 1630|    304|    crypto_memzero(&onion_c->friends_list[friend_num], sizeof(Onion_Friend));
 1631|    304|    unsigned int i;
 1632|       |
 1633|    608|    for (i = onion_c->num_friends; i != 0; --i) {
  ------------------
  |  Branch (1633:36): [True: 467, False: 141]
  ------------------
 1634|    467|        if (onion_c->friends_list[i - 1].is_valid) {
  ------------------
  |  Branch (1634:13): [True: 163, False: 304]
  ------------------
 1635|    163|            break;
 1636|    163|        }
 1637|    467|    }
 1638|       |
 1639|    304|    if (onion_c->num_friends != i) {
  ------------------
  |  Branch (1639:9): [True: 144, False: 160]
  ------------------
 1640|    144|        onion_c->num_friends = i;
 1641|    144|        realloc_onion_friends(onion_c, onion_c->num_friends);
 1642|    144|    }
 1643|       |
 1644|    304|    return friend_num;
 1645|    304|}
recv_tcp_relay_handler:
 1657|    304|{
 1658|    304|    if ((uint32_t)friend_num >= onion_c->num_friends) {
  ------------------
  |  Branch (1658:9): [True: 0, False: 304]
  ------------------
 1659|      0|        return -1;
 1660|      0|    }
 1661|       |
 1662|    304|    onion_c->friends_list[friend_num].tcp_relay_node_callback = callback;
 1663|    304|    onion_c->friends_list[friend_num].tcp_relay_node_callback_object = object;
 1664|    304|    onion_c->friends_list[friend_num].tcp_relay_node_callback_number = number;
 1665|    304|    return 0;
 1666|    304|}
onion_dht_pk_callback:
 1678|    304|{
 1679|    304|    if ((uint32_t)friend_num >= onion_c->num_friends) {
  ------------------
  |  Branch (1679:9): [True: 0, False: 304]
  ------------------
 1680|      0|        return -1;
 1681|      0|    }
 1682|       |
 1683|    304|    onion_c->friends_list[friend_num].dht_pk_callback = function;
 1684|    304|    onion_c->friends_list[friend_num].dht_pk_callback_object = object;
 1685|    304|    onion_c->friends_list[friend_num].dht_pk_callback_number = number;
 1686|    304|    return 0;
 1687|    304|}
oniondata_registerhandler:
 1930|  5.23k|{
 1931|  5.23k|    onion_c->onion_data_handlers[byte].function = cb;
 1932|  5.23k|    onion_c->onion_data_handlers[byte].object = object;
 1933|  5.23k|}
onion_group_announce_register:
 1936|  3.49k|{
 1937|  3.49k|    onion_c->group_announce_response = func;
 1938|  3.49k|    onion_c->group_announce_response_user_data = user_data;
 1939|  3.49k|}
new_onion_client:
 2224|  1.74k|{
 2225|  1.74k|    if (c == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (2225:9): [True: 0, False: 1.74k]
  ------------------
 2226|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2227|      0|    }
 2228|       |
 2229|  1.74k|    Onion_Client *onion_c = (Onion_Client *)mem_alloc(mem, sizeof(Onion_Client));
 2230|       |
 2231|  1.74k|    if (onion_c == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (2231:9): [True: 0, False: 1.74k]
  ------------------
 2232|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2233|      0|    }
 2234|       |
 2235|  1.74k|    onion_c->announce_ping_array = ping_array_new(mem, ANNOUNCE_ARRAY_SIZE, ANNOUNCE_TIMEOUT);
  ------------------
  |  |   36|  1.74k|#define ANNOUNCE_ARRAY_SIZE 256
  ------------------
                  onion_c->announce_ping_array = ping_array_new(mem, ANNOUNCE_ARRAY_SIZE, ANNOUNCE_TIMEOUT);
  ------------------
  |  |   37|  1.74k|#define ANNOUNCE_TIMEOUT 10
  ------------------
 2236|       |
 2237|  1.74k|    if (onion_c->announce_ping_array == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (2237:9): [True: 0, False: 1.74k]
  ------------------
 2238|      0|        mem_delete(mem, onion_c);
 2239|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2240|      0|    }
 2241|       |
 2242|  1.74k|    onion_c->mono_time = mono_time;
 2243|  1.74k|    onion_c->logger = logger;
 2244|  1.74k|    onion_c->rng = rng;
 2245|  1.74k|    onion_c->mem = mem;
 2246|  1.74k|    onion_c->dht = nc_get_dht(c);
 2247|  1.74k|    onion_c->net = dht_get_net(onion_c->dht);
 2248|  1.74k|    onion_c->c = c;
 2249|  1.74k|    new_symmetric_key(rng, onion_c->secret_symmetric_key);
 2250|  1.74k|    crypto_new_keypair(rng, onion_c->temp_public_key, onion_c->temp_secret_key);
 2251|  1.74k|    networking_registerhandler(onion_c->net, NET_PACKET_ANNOUNCE_RESPONSE, &handle_announce_response, onion_c);
 2252|  1.74k|    networking_registerhandler(onion_c->net, NET_PACKET_ANNOUNCE_RESPONSE_OLD, &handle_announce_response_old, onion_c);
 2253|  1.74k|    networking_registerhandler(onion_c->net, NET_PACKET_ONION_DATA_RESPONSE, &handle_data_response, onion_c);
 2254|  1.74k|    oniondata_registerhandler(onion_c, ONION_DATA_DHTPK, &handle_dhtpk_announce, onion_c);
  ------------------
  |  |   65|  1.74k|#define ONION_DATA_DHTPK CRYPTO_PACKET_DHTPK
  |  |  ------------------
  |  |  |  |   67|  1.74k|#define CRYPTO_PACKET_DHTPK         156
  |  |  ------------------
  ------------------
 2255|  1.74k|    cryptopacket_registerhandler(onion_c->dht, CRYPTO_PACKET_DHTPK, &handle_dht_dhtpk, onion_c);
  ------------------
  |  |   67|  1.74k|#define CRYPTO_PACKET_DHTPK         156
  ------------------
 2256|  1.74k|    set_onion_packet_tcp_connection_callback(nc_get_tcp_c(onion_c->c), &handle_tcp_onion, onion_c);
 2257|       |
 2258|  1.74k|    return onion_c;
 2259|  1.74k|}
kill_onion_client:
 2262|  1.74k|{
 2263|  1.74k|    if (onion_c == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (2263:9): [True: 0, False: 1.74k]
  ------------------
 2264|      0|        return;
 2265|      0|    }
 2266|       |
 2267|  1.74k|    const Memory *mem = onion_c->mem;
 2268|       |
 2269|  1.74k|    ping_array_kill(onion_c->announce_ping_array);
 2270|  1.74k|    realloc_onion_friends(onion_c, 0);
 2271|  1.74k|    networking_registerhandler(onion_c->net, NET_PACKET_ANNOUNCE_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion_c->net, NET_PACKET_ANNOUNCE_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
 2272|  1.74k|    networking_registerhandler(onion_c->net, NET_PACKET_ANNOUNCE_RESPONSE_OLD, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion_c->net, NET_PACKET_ANNOUNCE_RESPONSE_OLD, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
 2273|  1.74k|    networking_registerhandler(onion_c->net, NET_PACKET_ONION_DATA_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion_c->net, NET_PACKET_ONION_DATA_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
 2274|  1.74k|    oniondata_registerhandler(onion_c, ONION_DATA_DHTPK, nullptr, nullptr);
  ------------------
  |  |   65|  1.74k|#define ONION_DATA_DHTPK CRYPTO_PACKET_DHTPK
  |  |  ------------------
  |  |  |  |   67|  1.74k|#define CRYPTO_PACKET_DHTPK         156
  |  |  ------------------
  ------------------
                  oniondata_registerhandler(onion_c, ONION_DATA_DHTPK, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  oniondata_registerhandler(onion_c, ONION_DATA_DHTPK, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
 2275|  1.74k|    cryptopacket_registerhandler(onion_c->dht, CRYPTO_PACKET_DHTPK, nullptr, nullptr);
  ------------------
  |  |   67|  1.74k|#define CRYPTO_PACKET_DHTPK         156
  ------------------
                  cryptopacket_registerhandler(onion_c->dht, CRYPTO_PACKET_DHTPK, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  cryptopacket_registerhandler(onion_c->dht, CRYPTO_PACKET_DHTPK, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
 2276|  1.74k|    set_onion_packet_tcp_connection_callback(nc_get_tcp_c(onion_c->c), nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  set_onion_packet_tcp_connection_callback(nc_get_tcp_c(onion_c->c), nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
 2277|  1.74k|    crypto_memzero(onion_c, sizeof(Onion_Client));
 2278|  1.74k|    mem_delete(mem, onion_c);
 2279|  1.74k|}
onion_client.c:realloc_onion_friends:
 1555|  2.19k|{
 1556|  2.19k|    if (num == 0) {
  ------------------
  |  Branch (1556:9): [True: 1.88k, False: 307]
  ------------------
 1557|  1.88k|        mem_delete(onion_c->mem, onion_c->friends_list);
 1558|  1.88k|        onion_c->friends_list = nullptr;
  ------------------
  |  |   63|  1.88k|#define nullptr NULL
  ------------------
 1559|  1.88k|        return 0;
 1560|  1.88k|    }
 1561|       |
 1562|    307|    Onion_Friend *newonion_friends = (Onion_Friend *)mem_vrealloc(onion_c->mem, onion_c->friends_list, num, sizeof(Onion_Friend));
 1563|       |
 1564|    307|    if (newonion_friends == nullptr) {
  ------------------
  |  |   63|    307|#define nullptr NULL
  ------------------
  |  Branch (1564:9): [True: 0, False: 307]
  ------------------
 1565|      0|        return -1;
 1566|      0|    }
 1567|       |
 1568|    307|    onion_c->friends_list = newonion_friends;
 1569|    307|    return 0;
 1570|    307|}

ping_new:
  336|  1.74k|{
  337|  1.74k|    Ping *ping = (Ping *)mem_alloc(mem, sizeof(Ping));
  338|       |
  339|  1.74k|    if (ping == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (339:9): [True: 0, False: 1.74k]
  ------------------
  340|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  341|      0|    }
  342|       |
  343|  1.74k|    ping->ping_array = ping_array_new(mem, PING_NUM_MAX, PING_TIMEOUT);
  ------------------
  |  |   23|  1.74k|#define PING_NUM_MAX 512
  ------------------
                  ping->ping_array = ping_array_new(mem, PING_NUM_MAX, PING_TIMEOUT);
  ------------------
  |  |   43|  1.74k|#define PING_TIMEOUT 5
  ------------------
  344|       |
  345|  1.74k|    if (ping->ping_array == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (345:9): [True: 0, False: 1.74k]
  ------------------
  346|      0|        mem_delete(mem, ping);
  347|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  348|      0|    }
  349|       |
  350|  1.74k|    ping->mono_time = mono_time;
  351|  1.74k|    ping->rng = rng;
  352|  1.74k|    ping->mem = mem;
  353|  1.74k|    ping->dht = dht;
  354|  1.74k|    networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_REQUEST, &handle_ping_request, dht);
  355|  1.74k|    networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_RESPONSE, &handle_ping_response, dht);
  356|       |
  357|  1.74k|    return ping;
  358|  1.74k|}
ping_kill:
  361|  1.74k|{
  362|  1.74k|    if (ping == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (362:9): [True: 0, False: 1.74k]
  ------------------
  363|      0|        return;
  364|      0|    }
  365|       |
  366|  1.74k|    networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  367|  1.74k|    networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  368|  1.74k|    ping_array_kill(ping->ping_array);
  369|       |
  370|  1.74k|    mem_delete(mem, ping);
  371|  1.74k|}

ping_array_new:
   37|  5.23k|{
   38|  5.23k|    if (size == 0 || timeout == 0) {
  ------------------
  |  Branch (38:9): [True: 0, False: 5.23k]
  |  Branch (38:22): [True: 0, False: 5.23k]
  ------------------
   39|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   40|      0|    }
   41|       |
   42|  5.23k|    if ((size & (size - 1)) != 0) {
  ------------------
  |  Branch (42:9): [True: 0, False: 5.23k]
  ------------------
   43|       |        // Not a power of 2.
   44|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   45|      0|    }
   46|       |
   47|  5.23k|    Ping_Array *const empty_array = (Ping_Array *)mem_alloc(mem, sizeof(Ping_Array));
   48|       |
   49|  5.23k|    if (empty_array == nullptr) {
  ------------------
  |  |   63|  5.23k|#define nullptr NULL
  ------------------
  |  Branch (49:9): [True: 0, False: 5.23k]
  ------------------
   50|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   51|      0|    }
   52|       |
   53|  5.23k|    Ping_Array_Entry *entries = (Ping_Array_Entry *)mem_valloc(mem, size, sizeof(Ping_Array_Entry));
   54|       |
   55|  5.23k|    if (entries == nullptr) {
  ------------------
  |  |   63|  5.23k|#define nullptr NULL
  ------------------
  |  Branch (55:9): [True: 0, False: 5.23k]
  ------------------
   56|      0|        mem_delete(mem, empty_array);
   57|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   58|      0|    }
   59|       |
   60|  5.23k|    empty_array->mem = mem;
   61|  5.23k|    empty_array->entries = entries;
   62|  5.23k|    empty_array->last_deleted = 0;
   63|  5.23k|    empty_array->last_added = 0;
   64|  5.23k|    empty_array->total_size = size;
   65|  5.23k|    empty_array->timeout = timeout;
   66|  5.23k|    return empty_array;
   67|  5.23k|}
ping_array_kill:
   78|  5.23k|{
   79|  5.23k|    if (array == nullptr) {
  ------------------
  |  |   63|  5.23k|#define nullptr NULL
  ------------------
  |  Branch (79:9): [True: 0, False: 5.23k]
  ------------------
   80|      0|        return;
   81|      0|    }
   82|       |
   83|  5.23k|    while (array->last_deleted != array->last_added) {
  ------------------
  |  Branch (83:12): [True: 0, False: 5.23k]
  ------------------
   84|      0|        const uint32_t index = array->last_deleted % array->total_size;
   85|      0|        clear_entry(array, index);
   86|      0|        ++array->last_deleted;
   87|      0|    }
   88|       |
   89|  5.23k|    mem_delete(array->mem, array->entries);
   90|  5.23k|    mem_delete(array->mem, array);
   91|  5.23k|}

shared_key_cache_new:
   52|  12.2k|{
   53|  12.2k|    if (mono_time == nullptr || self_secret_key == nullptr || timeout == 0 || keys_per_slot == 0) {
  ------------------
  |  |   63|  24.4k|#define nullptr NULL
  ------------------
                  if (mono_time == nullptr || self_secret_key == nullptr || timeout == 0 || keys_per_slot == 0) {
  ------------------
  |  |   63|  24.4k|#define nullptr NULL
  ------------------
  |  Branch (53:9): [True: 0, False: 12.2k]
  |  Branch (53:33): [True: 0, False: 12.2k]
  |  Branch (53:63): [True: 0, False: 12.2k]
  |  Branch (53:79): [True: 0, False: 12.2k]
  ------------------
   54|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   55|      0|    }
   56|       |
   57|       |    // Time must not be zero, since we use that as special value for empty slots
   58|  12.2k|    if (mono_time_get(mono_time) == 0) {
  ------------------
  |  Branch (58:9): [True: 0, False: 12.2k]
  ------------------
   59|       |        // Fail loudly in debug environments
   60|      0|        LOGGER_FATAL(log, "time must not be zero (mono_time not initialised?)");
  ------------------
  |  |   90|      0|    do {                                \
  |  |   91|      0|        LOGGER_ERROR(log, __VA_ARGS__); \
  |  |  ------------------
  |  |  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   92|      0|        logger_abort();                 \
  |  |   93|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (93:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
   61|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   62|      0|    }
   63|       |
   64|  12.2k|    Shared_Key_Cache *res = (Shared_Key_Cache *)mem_alloc(mem, sizeof(Shared_Key_Cache));
   65|  12.2k|    if (res == nullptr) {
  ------------------
  |  |   63|  12.2k|#define nullptr NULL
  ------------------
  |  Branch (65:9): [True: 0, False: 12.2k]
  ------------------
   66|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   67|      0|    }
   68|       |
   69|  12.2k|    res->self_secret_key = self_secret_key;
   70|  12.2k|    res->mono_time = mono_time;
   71|  12.2k|    res->mem = mem;
   72|  12.2k|    res->log = log;
   73|  12.2k|    res->keys_per_slot = keys_per_slot;
   74|       |
   75|       |    // We take one byte from the public key for each bucket and store keys_per_slot elements there
   76|  12.2k|    const size_t cache_size = 256 * keys_per_slot;
   77|  12.2k|    Shared_Key *keys = (Shared_Key *)mem_valloc(mem, cache_size, sizeof(Shared_Key));
   78|       |
   79|  12.2k|    if (keys == nullptr) {
  ------------------
  |  |   63|  12.2k|#define nullptr NULL
  ------------------
  |  Branch (79:9): [True: 0, False: 12.2k]
  ------------------
   80|      0|        mem_delete(mem, res);
   81|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   82|      0|    }
   83|       |
   84|  12.2k|    crypto_memlock(keys, cache_size * sizeof(Shared_Key));
   85|       |
   86|  12.2k|    res->keys = keys;
   87|       |
   88|  12.2k|    return res;
   89|  12.2k|}
shared_key_cache_free:
   92|  12.2k|{
   93|  12.2k|    if (cache == nullptr) {
  ------------------
  |  |   63|  12.2k|#define nullptr NULL
  ------------------
  |  Branch (93:9): [True: 0, False: 12.2k]
  ------------------
   94|      0|        return;
   95|      0|    }
   96|       |
   97|  12.2k|    const size_t cache_size = 256 * cache->keys_per_slot;
   98|       |    // Don't leave key material in memory
   99|  12.2k|    crypto_memzero(cache->keys, cache_size * sizeof(Shared_Key));
  100|  12.2k|    crypto_memunlock(cache->keys, cache_size * sizeof(Shared_Key));
  101|  12.2k|    mem_delete(cache->mem, cache->keys);
  102|  12.2k|    mem_delete(cache->mem, cache);
  103|  12.2k|}

state_load:
   15|  2.35k|{
   16|  2.35k|    if (state_load_callback == nullptr || data == nullptr) {
  ------------------
  |  |   63|  4.71k|#define nullptr NULL
  ------------------
                  if (state_load_callback == nullptr || data == nullptr) {
  ------------------
  |  |   63|  2.35k|#define nullptr NULL
  ------------------
  |  Branch (16:9): [True: 0, False: 2.35k]
  |  Branch (16:43): [True: 0, False: 2.35k]
  ------------------
   17|      0|        LOGGER_ERROR(log, "state_load() called with invalid args.");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   18|      0|        return -1;
   19|      0|    }
   20|       |
   21|  2.35k|    const uint32_t size_head = sizeof(uint32_t) * 2;
   22|       |
   23|  32.1k|    while (length >= size_head) {
  ------------------
  |  Branch (23:12): [True: 30.1k, False: 1.94k]
  ------------------
   24|  30.1k|        uint32_t length_sub;
   25|  30.1k|        lendian_bytes_to_host32(&length_sub, data);
   26|       |
   27|  30.1k|        uint32_t cookie_type;
   28|  30.1k|        lendian_bytes_to_host32(&cookie_type, data + sizeof(uint32_t));
   29|       |
   30|  30.1k|        data += size_head;
   31|  30.1k|        length -= size_head;
   32|       |
   33|  30.1k|        if (length < length_sub) {
  ------------------
  |  Branch (33:13): [True: 250, False: 29.9k]
  ------------------
   34|       |            /* file truncated */
   35|    250|            LOGGER_ERROR(log, "state file too short: %u < %u", length, length_sub);
  ------------------
  |  |   87|    250|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|    250|    do {                                                                         \
  |  |  |  |   77|    250|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    500|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|    250|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|    250|        }                                                                        \
  |  |  |  |   80|    250|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   36|    250|            return -1;
   37|    250|        }
   38|       |
   39|  29.9k|        if (lendian_to_host16(cookie_type >> 16) != cookie_inner) {
  ------------------
  |  Branch (39:13): [True: 59, False: 29.8k]
  ------------------
   40|       |            /* something is not matching up in a bad way, give up */
   41|     59|            LOGGER_ERROR(log, "state file garbled: %04x != %04x", cookie_type >> 16, cookie_inner);
  ------------------
  |  |   87|     59|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     59|    do {                                                                         \
  |  |  |  |   77|     59|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    118|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|     59|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|     59|        }                                                                        \
  |  |  |  |   80|     59|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   42|     59|            return -1;
   43|     59|        }
   44|       |
   45|  29.8k|        const uint16_t type = lendian_to_host16(cookie_type & 0xFFFF);
   46|       |
   47|  29.8k|        switch (state_load_callback(outer, data, length_sub, type)) {
  ------------------
  |  Branch (47:17): [True: 0, False: 29.8k]
  ------------------
   48|  29.7k|            case STATE_LOAD_STATUS_CONTINUE: {
  ------------------
  |  Branch (48:13): [True: 29.7k, False: 100]
  ------------------
   49|  29.7k|                data += length_sub;
   50|  29.7k|                length -= length_sub;
   51|  29.7k|                break;
   52|      0|            }
   53|       |
   54|     94|            case STATE_LOAD_STATUS_ERROR: {
  ------------------
  |  Branch (54:13): [True: 94, False: 29.7k]
  ------------------
   55|     94|                LOGGER_ERROR(log, "Error occcured in state file (type: 0x%02x).", type);
  ------------------
  |  |   87|     94|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     94|    do {                                                                         \
  |  |  |  |   77|     94|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    188|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|     94|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|     94|        }                                                                        \
  |  |  |  |   80|     94|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   56|     94|                return -1;
   57|      0|            }
   58|       |
   59|      6|            case STATE_LOAD_STATUS_END: {
  ------------------
  |  Branch (59:13): [True: 6, False: 29.8k]
  ------------------
   60|      6|                return 0;
   61|      0|            }
   62|  29.8k|        }
   63|  29.8k|    }
   64|       |
   65|  1.94k|    if (length != 0) {
  ------------------
  |  Branch (65:9): [True: 446, False: 1.50k]
  ------------------
   66|    446|        LOGGER_ERROR(log, "unparsed data in state file of length %u", length);
  ------------------
  |  |   87|    446|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|    446|    do {                                                                         \
  |  |  |  |   77|    446|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    892|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|    446|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|    446|        }                                                                        \
  |  |  |  |   80|    446|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   67|    446|        return -1;
   68|    446|    }
   69|       |
   70|  1.50k|    return 0;
   71|  1.94k|}
state_write_section_header:
   74|  14.8k|{
   75|  14.8k|    host_to_lendian_bytes32(data, len);
   76|  14.8k|    data += sizeof(uint32_t);
   77|  14.8k|    host_to_lendian_bytes32(data, (host_to_lendian16(cookie_type) << 16) | host_to_lendian16(section_type));
   78|  14.8k|    data += sizeof(uint32_t);
   79|  14.8k|    return data;
   80|  14.8k|}
lendian_to_host16:
   83|  89.5k|{
   84|       |#ifdef WORDS_BIGENDIAN
   85|       |    return (lendian << 8) | (lendian >> 8);
   86|       |#else
   87|  89.5k|    return lendian;
   88|  89.5k|#endif /* WORDS_BIGENDIAN */
   89|  89.5k|}
host_to_lendian16:
   92|  29.7k|{
   93|  29.7k|    return lendian_to_host16(host);
   94|  29.7k|}
host_to_lendian_bytes64:
   97|    183|{
   98|       |#ifdef WORDS_BIGENDIAN
   99|       |    num = ((num << 8) & 0xFF00FF00FF00FF00) | ((num >> 8) & 0xFF00FF00FF00FF);
  100|       |    num = ((num << 16) & 0xFFFF0000FFFF0000) | ((num >> 16) & 0xFFFF0000FFFF);
  101|       |    num = (num << 32) | (num >> 32);
  102|       |#endif /* WORDS_BIGENDIAN */
  103|    183|    memcpy(dest, &num, sizeof(uint64_t));
  104|    183|}
lendian_bytes_to_host64:
  107|    385|{
  108|    385|    uint64_t d;
  109|    385|    memcpy(&d, lendian, sizeof(uint64_t));
  110|       |#ifdef WORDS_BIGENDIAN
  111|       |    d = ((d << 8) & 0xFF00FF00FF00FF00) | ((d >> 8) & 0xFF00FF00FF00FF);
  112|       |    d = ((d << 16) & 0xFFFF0000FFFF0000) | ((d >> 16) & 0xFFFF0000FFFF);
  113|       |    d = (d << 32) | (d >> 32);
  114|       |#endif /* WORDS_BIGENDIAN */
  115|    385|    *dest = d;
  116|    385|}
host_to_lendian_bytes32:
  119|  35.3k|{
  120|       |#ifdef WORDS_BIGENDIAN
  121|       |    num = ((num << 8) & 0xFF00FF00) | ((num >> 8) & 0xFF00FF);
  122|       |    num = (num << 16) | (num >> 16);
  123|       |#endif /* WORDS_BIGENDIAN */
  124|  35.3k|    memcpy(dest, &num, sizeof(uint32_t));
  125|  35.3k|}
lendian_bytes_to_host32:
  128|  68.9k|{
  129|  68.9k|    uint32_t d;
  130|  68.9k|    memcpy(&d, lendian, sizeof(uint32_t));
  131|       |#ifdef WORDS_BIGENDIAN
  132|       |    d = ((d << 8) & 0xFF00FF00) | ((d >> 8) & 0xFF00FF);
  133|       |    d = (d << 16) | (d >> 16);
  134|       |#endif /* WORDS_BIGENDIAN */
  135|  68.9k|    *dest = d;
  136|  68.9k|}
host_to_lendian_bytes16:
  139|  2.08k|{
  140|       |#ifdef WORDS_BIGENDIAN
  141|       |    num = (num << 8) | (num >> 8);
  142|       |#endif /* WORDS_BIGENDIAN */
  143|  2.08k|    memcpy(dest, &num, sizeof(uint16_t));
  144|  2.08k|}
lendian_bytes_to_host16:
  147|  5.97k|{
  148|  5.97k|    uint16_t d;
  149|  5.97k|    memcpy(&d, lendian, sizeof(uint16_t));
  150|       |#ifdef WORDS_BIGENDIAN
  151|       |    d = (d << 8) | (d >> 8);
  152|       |#endif /* WORDS_BIGENDIAN */
  153|  5.97k|    *dest = d;
  154|  5.97k|}

tox_new_testing:
 1036|  1.74k|{
 1037|  1.74k|    if (testing == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (1037:9): [True: 0, False: 1.74k]
  ------------------
 1038|      0|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_NULL);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 1039|      0|        SET_ERROR_PARAMETER(testing_error, TOX_ERR_NEW_TESTING_NULL);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 1040|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1041|      0|    }
 1042|       |
 1043|  1.74k|    if (testing->operating_system == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (1043:9): [True: 0, False: 1.74k]
  ------------------
 1044|      0|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_NULL);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 1045|      0|        SET_ERROR_PARAMETER(testing_error, TOX_ERR_NEW_TESTING_NULL);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 1046|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1047|      0|    }
 1048|       |
 1049|  1.74k|    const Tox_System *sys = testing->operating_system;
 1050|       |
 1051|  1.74k|    if (sys->rng == nullptr || sys->ns == nullptr || sys->mem == nullptr) {
  ------------------
  |  |   63|  3.49k|#define nullptr NULL
  ------------------
                  if (sys->rng == nullptr || sys->ns == nullptr || sys->mem == nullptr) {
  ------------------
  |  |   63|  3.49k|#define nullptr NULL
  ------------------
                  if (sys->rng == nullptr || sys->ns == nullptr || sys->mem == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (1051:9): [True: 0, False: 1.74k]
  |  Branch (1051:32): [True: 0, False: 1.74k]
  |  Branch (1051:54): [True: 0, False: 1.74k]
  ------------------
 1052|      0|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_NULL);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 1053|      0|        SET_ERROR_PARAMETER(testing_error, TOX_ERR_NEW_TESTING_NULL);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 1054|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1055|      0|    }
 1056|       |
 1057|  1.74k|    SET_ERROR_PARAMETER(testing_error, TOX_ERR_NEW_TESTING_OK);
  ------------------
  |  |   44|  1.74k|    do {                              \
  |  |   45|  1.74k|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|  3.49k|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 1.74k]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|  1.74k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 1058|  1.74k|    return tox_new_system(options, error, sys);
 1059|  1.74k|}
tox_kill:
 1062|  1.22k|{
 1063|  1.22k|    if (tox == nullptr) {
  ------------------
  |  |   63|  1.22k|#define nullptr NULL
  ------------------
  |  Branch (1063:9): [True: 0, False: 1.22k]
  ------------------
 1064|      0|        return;
 1065|      0|    }
 1066|       |
 1067|  1.22k|    tox_lock(tox);
 1068|  1.22k|    LOGGER_ASSERT(tox->m->log, tox->toxav_object == nullptr, "Attempted to kill tox while toxav is still alive");
  ------------------
  |  |   96|  1.22k|    do {                                           \
  |  |   97|  1.22k|        if (!(cond)) {                             \
  |  |  ------------------
  |  |  |  Branch (97:13): [True: 0, False: 1.22k]
  |  |  ------------------
  |  |   98|      0|            LOGGER_ERROR(log, "Assertion failed"); \
  |  |  ------------------
  |  |  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   99|      0|            LOGGER_FATAL(log, __VA_ARGS__);        \
  |  |  ------------------
  |  |  |  |   90|      0|    do {                                \
  |  |  |  |   91|      0|        LOGGER_ERROR(log, __VA_ARGS__); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   92|      0|        logger_abort();                 \
  |  |  |  |   93|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (93:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  100|      0|        }                                          \
  |  |  101|  1.22k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (101:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 1069|  1.22k|    kill_groupchats(tox->m->conferences_object);
 1070|  1.22k|    kill_messenger(tox->m);
 1071|  1.22k|    mono_time_free(tox->sys.mem, tox->mono_time);
 1072|  1.22k|    tox_unlock(tox);
 1073|       |
 1074|  1.22k|    if (tox->mutex != nullptr) {
  ------------------
  |  |   63|  1.22k|#define nullptr NULL
  ------------------
  |  Branch (1074:9): [True: 0, False: 1.22k]
  ------------------
 1075|      0|        pthread_mutex_destroy(tox->mutex);
 1076|      0|        mem_delete(tox->sys.mem, tox->mutex);
 1077|      0|    }
 1078|       |
 1079|  1.22k|    mem_delete(tox->sys.mem, tox);
 1080|  1.22k|}
tox_get_savedata_size:
 1094|  2.44k|{
 1095|  2.44k|    assert(tox != nullptr);
 1096|  2.44k|    tox_lock(tox);
 1097|  2.44k|    const size_t ret = 2 * sizeof(uint32_t)
 1098|  2.44k|                       + messenger_size(tox->m)
 1099|  2.44k|                       + conferences_size(tox->m->conferences_object)
 1100|  2.44k|                       + end_size();
 1101|  2.44k|    tox_unlock(tox);
 1102|  2.44k|    return ret;
 1103|  2.44k|}
tox_get_savedata:
 1106|  1.22k|{
 1107|  1.22k|    assert(tox != nullptr);
 1108|       |
 1109|  1.22k|    if (savedata == nullptr) {
  ------------------
  |  |   63|  1.22k|#define nullptr NULL
  ------------------
  |  Branch (1109:9): [True: 0, False: 1.22k]
  ------------------
 1110|      0|        return;
 1111|      0|    }
 1112|       |
 1113|  1.22k|    memzero(savedata, tox_get_savedata_size(tox));
 1114|       |
 1115|  1.22k|    tox_lock(tox);
 1116|       |
 1117|  1.22k|    const uint32_t size32 = sizeof(uint32_t);
 1118|       |
 1119|       |    // write cookie
 1120|  1.22k|    memzero(savedata, size32);
 1121|  1.22k|    savedata += size32;
 1122|  1.22k|    host_to_lendian_bytes32(savedata, STATE_COOKIE_GLOBAL);
  ------------------
  |  |   27|  1.22k|#define STATE_COOKIE_GLOBAL 0x15ed1b1f
  ------------------
 1123|  1.22k|    savedata += size32;
 1124|       |
 1125|  1.22k|    savedata = messenger_save(tox->m, savedata);
 1126|  1.22k|    savedata = conferences_save(tox->m->conferences_object, savedata);
 1127|  1.22k|    end_save(savedata);
 1128|       |
 1129|  1.22k|    tox_unlock(tox);
 1130|  1.22k|}
tox.c:tox_new_system:
  721|  1.74k|{
  722|  1.74k|    struct Tox_Options *default_options = nullptr;
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  723|       |
  724|  1.74k|    if (options == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (724:9): [True: 0, False: 1.74k]
  ------------------
  725|      0|        Tox_Err_Options_New err;
  726|      0|        default_options = tox_options_new(&err);
  727|       |
  728|      0|        switch (err) {
  ------------------
  |  Branch (728:17): [True: 0, False: 0]
  ------------------
  729|      0|            case TOX_ERR_OPTIONS_NEW_OK: {
  ------------------
  |  Branch (729:13): [True: 0, False: 0]
  ------------------
  730|      0|                assert(default_options != nullptr);
  731|      0|                break;
  732|      0|            }
  733|       |
  734|      0|            case TOX_ERR_OPTIONS_NEW_MALLOC: {
  ------------------
  |  Branch (734:13): [True: 0, False: 0]
  ------------------
  735|      0|                SET_ERROR_PARAMETER(error, TOX_ERR_NEW_MALLOC);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  736|      0|                return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  737|      0|            }
  738|      0|        }
  739|      0|    }
  740|       |
  741|  1.74k|    const struct Tox_Options *const opts = options != nullptr ? options : default_options;
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (741:44): [True: 1.74k, False: 0]
  ------------------
  742|  1.74k|    assert(opts != nullptr);
  743|       |
  744|  1.74k|    const Tox_System default_system = tox_default_system();
  745|       |
  746|  1.74k|    if (sys == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (746:9): [True: 0, False: 1.74k]
  ------------------
  747|      0|        sys = &default_system;
  748|      0|    }
  749|       |
  750|  1.74k|    if (sys->rng == nullptr || sys->ns == nullptr || sys->mem == nullptr) {
  ------------------
  |  |   63|  3.49k|#define nullptr NULL
  ------------------
                  if (sys->rng == nullptr || sys->ns == nullptr || sys->mem == nullptr) {
  ------------------
  |  |   63|  3.49k|#define nullptr NULL
  ------------------
                  if (sys->rng == nullptr || sys->ns == nullptr || sys->mem == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (750:9): [True: 0, False: 1.74k]
  |  Branch (750:32): [True: 0, False: 1.74k]
  |  Branch (750:54): [True: 0, False: 1.74k]
  ------------------
  751|       |        // TODO(iphydf): Not quite right, but similar.
  752|      0|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_MALLOC);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  753|      0|        tox_options_free(default_options);
  754|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  755|      0|    }
  756|       |
  757|  1.74k|    Messenger_Options m_options = {false};
  758|       |
  759|  1.74k|    m_options.dns_enabled = !tox_options_get_experimental_disable_dns(opts);
  760|       |
  761|  1.74k|    bool load_savedata_sk = false;
  762|  1.74k|    bool load_savedata_tox = false;
  763|       |
  764|  1.74k|    if (tox_options_get_savedata_type(opts) != TOX_SAVEDATA_TYPE_NONE) {
  ------------------
  |  Branch (764:9): [True: 1.74k, False: 0]
  ------------------
  765|  1.74k|        if (tox_options_get_savedata_data(opts) == nullptr || tox_options_get_savedata_length(opts) == 0) {
  ------------------
  |  |   63|  3.49k|#define nullptr NULL
  ------------------
  |  Branch (765:13): [True: 0, False: 1.74k]
  |  Branch (765:63): [True: 0, False: 1.74k]
  ------------------
  766|      0|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_LOAD_BAD_FORMAT);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  767|      0|            tox_options_free(default_options);
  768|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  769|      0|        }
  770|  1.74k|    }
  771|       |
  772|  1.74k|    if (tox_options_get_savedata_type(opts) == TOX_SAVEDATA_TYPE_SECRET_KEY) {
  ------------------
  |  Branch (772:9): [True: 0, False: 1.74k]
  ------------------
  773|      0|        if (tox_options_get_savedata_length(opts) != TOX_SECRET_KEY_SIZE) {
  ------------------
  |  |  219|      0|#define TOX_SECRET_KEY_SIZE            32
  ------------------
  |  Branch (773:13): [True: 0, False: 0]
  ------------------
  774|      0|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_LOAD_BAD_FORMAT);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  775|      0|            tox_options_free(default_options);
  776|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  777|      0|        }
  778|       |
  779|      0|        load_savedata_sk = true;
  780|  1.74k|    } else if (tox_options_get_savedata_type(opts) == TOX_SAVEDATA_TYPE_TOX_SAVE) {
  ------------------
  |  Branch (780:16): [True: 1.74k, False: 0]
  ------------------
  781|  1.74k|        if (tox_options_get_savedata_length(opts) < TOX_ENC_SAVE_MAGIC_LENGTH) {
  ------------------
  |  |   10|  1.74k|#define TOX_ENC_SAVE_MAGIC_LENGTH 8
  ------------------
  |  Branch (781:13): [True: 1, False: 1.74k]
  ------------------
  782|      1|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_LOAD_BAD_FORMAT);
  ------------------
  |  |   44|      1|    do {                              \
  |  |   45|      1|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      2|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      1|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  783|      1|            tox_options_free(default_options);
  784|      1|            return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  785|      1|        }
  786|       |
  787|  1.74k|        if (memcmp(tox_options_get_savedata_data(opts), TOX_ENC_SAVE_MAGIC_NUMBER, TOX_ENC_SAVE_MAGIC_LENGTH) == 0) {
  ------------------
  |  |    9|  1.74k|#define TOX_ENC_SAVE_MAGIC_NUMBER ((const uint8_t *)"toxEsave")
  ------------------
                      if (memcmp(tox_options_get_savedata_data(opts), TOX_ENC_SAVE_MAGIC_NUMBER, TOX_ENC_SAVE_MAGIC_LENGTH) == 0) {
  ------------------
  |  |   10|  1.74k|#define TOX_ENC_SAVE_MAGIC_LENGTH 8
  ------------------
  |  Branch (787:13): [True: 1, False: 1.74k]
  ------------------
  788|      1|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_LOAD_ENCRYPTED);
  ------------------
  |  |   44|      1|    do {                              \
  |  |   45|      1|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      2|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      1|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  789|      1|            tox_options_free(default_options);
  790|      1|            return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  791|      1|        }
  792|       |
  793|  1.74k|        load_savedata_tox = true;
  794|  1.74k|    }
  795|       |
  796|  1.74k|    m_options.ipv6enabled = tox_options_get_ipv6_enabled(opts);
  797|  1.74k|    m_options.udp_disabled = !tox_options_get_udp_enabled(opts);
  798|  1.74k|    m_options.port_range[0] = tox_options_get_start_port(opts);
  799|  1.74k|    m_options.port_range[1] = tox_options_get_end_port(opts);
  800|  1.74k|    m_options.tcp_server_port = tox_options_get_tcp_port(opts);
  801|  1.74k|    m_options.hole_punching_enabled = tox_options_get_hole_punching_enabled(opts);
  802|  1.74k|    m_options.local_discovery_enabled = tox_options_get_local_discovery_enabled(opts);
  803|  1.74k|    m_options.dht_announcements_enabled = tox_options_get_dht_announcements_enabled(opts);
  804|  1.74k|    m_options.groups_persistence_enabled = tox_options_get_experimental_groups_persistence(opts);
  805|       |
  806|  1.74k|    if (m_options.udp_disabled) {
  ------------------
  |  Branch (806:9): [True: 0, False: 1.74k]
  ------------------
  807|      0|        m_options.local_discovery_enabled = false;
  808|      0|    }
  809|       |
  810|  1.74k|    Tox *tox = (Tox *)mem_alloc(sys->mem, sizeof(Tox));
  811|       |
  812|  1.74k|    if (tox == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (812:9): [True: 0, False: 1.74k]
  ------------------
  813|      0|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_MALLOC);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  814|      0|        tox_options_free(default_options);
  815|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  816|      0|    }
  817|       |
  818|  1.74k|    tox->log_callback = tox_options_get_log_callback(opts);
  819|  1.74k|    m_options.log_callback = tox_log_handler;
  820|  1.74k|    m_options.log_context = tox;
  821|  1.74k|    m_options.log_user_data = tox_options_get_log_user_data(opts);
  822|       |
  823|  1.74k|    switch (tox_options_get_proxy_type(opts)) {
  824|      0|        case TOX_PROXY_TYPE_HTTP: {
  ------------------
  |  Branch (824:9): [True: 0, False: 1.74k]
  ------------------
  825|      0|            m_options.proxy_info.proxy_type = TCP_PROXY_HTTP;
  826|      0|            break;
  827|      0|        }
  828|       |
  829|      0|        case TOX_PROXY_TYPE_SOCKS5: {
  ------------------
  |  Branch (829:9): [True: 0, False: 1.74k]
  ------------------
  830|      0|            m_options.proxy_info.proxy_type = TCP_PROXY_SOCKS5;
  831|      0|            break;
  832|      0|        }
  833|       |
  834|  1.74k|        case TOX_PROXY_TYPE_NONE: {
  ------------------
  |  Branch (834:9): [True: 1.74k, False: 0]
  ------------------
  835|  1.74k|            m_options.proxy_info.proxy_type = TCP_PROXY_NONE;
  836|  1.74k|            break;
  837|      0|        }
  838|       |
  839|      0|        default: {
  ------------------
  |  Branch (839:9): [True: 0, False: 1.74k]
  ------------------
  840|      0|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_PROXY_BAD_TYPE);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  841|      0|            mem_delete(sys->mem, tox);
  842|      0|            tox_options_free(default_options);
  843|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  844|      0|        }
  845|  1.74k|    }
  846|       |
  847|  1.74k|    tox->sys = *sys;
  848|       |
  849|  1.74k|    if (m_options.proxy_info.proxy_type != TCP_PROXY_NONE) {
  ------------------
  |  Branch (849:9): [True: 0, False: 1.74k]
  ------------------
  850|      0|        if (tox_options_get_proxy_port(opts) == 0) {
  ------------------
  |  Branch (850:13): [True: 0, False: 0]
  ------------------
  851|      0|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_PROXY_BAD_PORT);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  852|      0|            mem_delete(sys->mem, tox);
  853|      0|            tox_options_free(default_options);
  854|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  855|      0|        }
  856|       |
  857|      0|        ip_init(&m_options.proxy_info.ip_port.ip, m_options.ipv6enabled);
  858|       |
  859|      0|        if (m_options.ipv6enabled) {
  ------------------
  |  Branch (859:13): [True: 0, False: 0]
  ------------------
  860|      0|            m_options.proxy_info.ip_port.ip.family = net_family_unspec();
  861|      0|        }
  862|       |
  863|      0|        const char *const proxy_host = tox_options_get_proxy_host(opts);
  864|      0|        const bool dns_enabled = !tox_options_get_experimental_disable_dns(opts);
  865|       |
  866|      0|        if (proxy_host == nullptr
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (866:13): [True: 0, False: 0]
  ------------------
  867|      0|                || !addr_resolve_or_parse_ip(tox->sys.ns, tox->sys.mem, proxy_host, &m_options.proxy_info.ip_port.ip, nullptr, dns_enabled)) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (867:20): [True: 0, False: 0]
  ------------------
  868|      0|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_PROXY_BAD_HOST);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  869|       |            // TODO(irungentoo): TOX_ERR_NEW_PROXY_NOT_FOUND if domain.
  870|      0|            mem_delete(sys->mem, tox);
  871|      0|            tox_options_free(default_options);
  872|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  873|      0|        }
  874|       |
  875|      0|        m_options.proxy_info.ip_port.port = net_htons(tox_options_get_proxy_port(opts));
  876|      0|    }
  877|       |
  878|  1.74k|    tox->mono_time = mono_time_new(tox->sys.mem, sys->mono_time_callback, sys->mono_time_user_data);
  879|       |
  880|  1.74k|    if (tox->mono_time == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (880:9): [True: 0, False: 1.74k]
  ------------------
  881|      0|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_MALLOC);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  882|      0|        mem_delete(sys->mem, tox);
  883|      0|        tox_options_free(default_options);
  884|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  885|      0|    }
  886|       |
  887|  1.74k|    if (tox_options_get_experimental_thread_safety(opts)) {
  ------------------
  |  Branch (887:9): [True: 0, False: 1.74k]
  ------------------
  888|      0|        pthread_mutex_t *mutex = (pthread_mutex_t *)mem_alloc(sys->mem, sizeof(pthread_mutex_t));
  889|       |
  890|      0|        if (mutex == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (890:13): [True: 0, False: 0]
  ------------------
  891|      0|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_MALLOC);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  892|      0|            mem_delete(sys->mem, tox);
  893|      0|            tox_options_free(default_options);
  894|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  895|      0|        }
  896|       |
  897|      0|        pthread_mutex_init(mutex, nullptr);
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  898|       |
  899|      0|        tox->mutex = mutex;
  900|  1.74k|    } else {
  901|  1.74k|        tox->mutex = nullptr;
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  902|  1.74k|    }
  903|       |
  904|  1.74k|    tox_lock(tox);
  905|       |
  906|  1.74k|    Messenger_Error m_error;
  907|  1.74k|    tox->m = new_messenger(tox->mono_time, tox->sys.mem, tox->sys.rng, tox->sys.ns, &m_options, &m_error);
  908|       |
  909|  1.74k|    if (tox->m == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (909:9): [True: 0, False: 1.74k]
  ------------------
  910|      0|        switch (m_error) {
  ------------------
  |  Branch (910:17): [True: 0, False: 0]
  ------------------
  911|      0|            case MESSENGER_ERROR_PORT:
  ------------------
  |  Branch (911:13): [True: 0, False: 0]
  ------------------
  912|      0|            case MESSENGER_ERROR_TCP_SERVER: {
  ------------------
  |  Branch (912:13): [True: 0, False: 0]
  ------------------
  913|      0|                SET_ERROR_PARAMETER(error, TOX_ERR_NEW_PORT_ALLOC);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  914|      0|                break;
  915|      0|            }
  916|      0|            case MESSENGER_ERROR_OTHER:
  ------------------
  |  Branch (916:13): [True: 0, False: 0]
  ------------------
  917|      0|            case MESSENGER_ERROR_NONE: {
  ------------------
  |  Branch (917:13): [True: 0, False: 0]
  ------------------
  918|      0|                SET_ERROR_PARAMETER(error, TOX_ERR_NEW_MALLOC);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  919|      0|                break;
  920|      0|            }
  921|      0|        }
  922|       |
  923|      0|        mono_time_free(tox->sys.mem, tox->mono_time);
  924|      0|        tox_unlock(tox);
  925|       |
  926|      0|        if (tox->mutex != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (926:13): [True: 0, False: 0]
  ------------------
  927|      0|            pthread_mutex_destroy(tox->mutex);
  928|      0|        }
  929|       |
  930|      0|        mem_delete(sys->mem, tox->mutex);
  931|      0|        mem_delete(sys->mem, tox);
  932|      0|        tox_options_free(default_options);
  933|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  934|      0|    }
  935|       |
  936|  1.74k|    tox->m->conferences_object = new_groupchats(tox->mono_time, sys->mem, tox->m);
  937|       |
  938|  1.74k|    if (tox->m->conferences_object == nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (938:9): [True: 0, False: 1.74k]
  ------------------
  939|      0|        kill_messenger(tox->m);
  940|       |
  941|      0|        mono_time_free(tox->sys.mem, tox->mono_time);
  942|      0|        tox_unlock(tox);
  943|       |
  944|      0|        if (tox->mutex != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (944:13): [True: 0, False: 0]
  ------------------
  945|      0|            pthread_mutex_destroy(tox->mutex);
  946|      0|        }
  947|       |
  948|      0|        mem_delete(sys->mem, tox->mutex);
  949|      0|        mem_delete(sys->mem, tox);
  950|       |
  951|      0|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_MALLOC);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  952|      0|        tox_options_free(default_options);
  953|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  954|      0|    }
  955|       |
  956|  1.74k|    if (load_savedata_tox
  ------------------
  |  Branch (956:9): [True: 1.74k, False: 0]
  ------------------
  957|  1.74k|            && tox_load(tox, tox_options_get_savedata_data(opts), tox_options_get_savedata_length(opts)) == -1) {
  ------------------
  |  Branch (957:16): [True: 523, False: 1.22k]
  ------------------
  958|    523|        kill_groupchats(tox->m->conferences_object);
  959|    523|        kill_messenger(tox->m);
  960|       |
  961|    523|        mono_time_free(tox->sys.mem, tox->mono_time);
  962|    523|        tox_unlock(tox);
  963|       |
  964|    523|        if (tox->mutex != nullptr) {
  ------------------
  |  |   63|    523|#define nullptr NULL
  ------------------
  |  Branch (964:13): [True: 0, False: 523]
  ------------------
  965|      0|            pthread_mutex_destroy(tox->mutex);
  966|      0|        }
  967|       |
  968|    523|        mem_delete(sys->mem, tox->mutex);
  969|    523|        mem_delete(sys->mem, tox);
  970|       |
  971|    523|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_LOAD_BAD_FORMAT);
  ------------------
  |  |   44|    523|    do {                              \
  |  |   45|    523|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|  1.04k|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 523]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|    523|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  972|    523|        tox_options_free(default_options);
  973|    523|        return nullptr;
  ------------------
  |  |   63|    523|#define nullptr NULL
  ------------------
  974|    523|    }
  975|       |
  976|  1.22k|    if (load_savedata_sk) {
  ------------------
  |  Branch (976:9): [True: 0, False: 1.22k]
  ------------------
  977|      0|        load_secret_key(tox->m->net_crypto, tox_options_get_savedata_data(opts));
  978|      0|    }
  979|       |
  980|  1.22k|    m_callback_namechange(tox->m, tox_friend_name_handler);
  981|  1.22k|    m_callback_core_connection(tox->m, tox_self_connection_status_handler);
  982|  1.22k|    m_callback_statusmessage(tox->m, tox_friend_status_message_handler);
  983|  1.22k|    m_callback_userstatus(tox->m, tox_friend_status_handler);
  984|  1.22k|    m_callback_connectionstatus(tox->m, tox_friend_connection_status_handler);
  985|  1.22k|    m_callback_typingchange(tox->m, tox_friend_typing_handler);
  986|  1.22k|    m_callback_read_receipt(tox->m, tox_friend_read_receipt_handler);
  987|  1.22k|    m_callback_friendrequest(tox->m, tox_friend_request_handler);
  988|  1.22k|    m_callback_friendmessage(tox->m, tox_friend_message_handler);
  989|  1.22k|    callback_file_control(tox->m, tox_file_recv_control_handler);
  990|  1.22k|    callback_file_reqchunk(tox->m, tox_file_chunk_request_handler);
  991|  1.22k|    callback_file_sendrequest(tox->m, tox_file_recv_handler);
  992|  1.22k|    callback_file_data(tox->m, tox_file_recv_chunk_handler);
  993|  1.22k|    dht_callback_nodes_response(tox->m->dht, tox_dht_nodes_response_handler);
  994|  1.22k|    g_callback_group_invite(tox->m->conferences_object, tox_conference_invite_handler);
  995|  1.22k|    g_callback_group_connected(tox->m->conferences_object, tox_conference_connected_handler);
  996|  1.22k|    g_callback_group_message(tox->m->conferences_object, tox_conference_message_handler);
  997|  1.22k|    g_callback_group_title(tox->m->conferences_object, tox_conference_title_handler);
  998|  1.22k|    g_callback_peer_name(tox->m->conferences_object, tox_conference_peer_name_handler);
  999|  1.22k|    g_callback_peer_list_changed(tox->m->conferences_object, tox_conference_peer_list_changed_handler);
 1000|  1.22k|    custom_lossy_packet_registerhandler(tox->m, tox_friend_lossy_packet_handler);
 1001|  1.22k|    custom_lossless_packet_registerhandler(tox->m, tox_friend_lossless_packet_handler);
 1002|       |
 1003|  1.22k|    m_callback_group_invite(tox->m, tox_group_invite_handler);
 1004|  1.22k|    gc_callback_message(tox->m, tox_group_message_handler);
 1005|  1.22k|    gc_callback_private_message(tox->m, tox_group_private_message_handler);
 1006|  1.22k|    gc_callback_custom_packet(tox->m, tox_group_custom_packet_handler);
 1007|  1.22k|    gc_callback_custom_private_packet(tox->m, tox_group_custom_private_packet_handler);
 1008|  1.22k|    gc_callback_moderation(tox->m, tox_group_moderation_handler);
 1009|  1.22k|    gc_callback_nick_change(tox->m, tox_group_peer_name_handler);
 1010|  1.22k|    gc_callback_status_change(tox->m, tox_group_peer_status_handler);
 1011|  1.22k|    gc_callback_topic_change(tox->m, tox_group_topic_handler);
 1012|  1.22k|    gc_callback_peer_limit(tox->m, tox_group_peer_limit_handler);
 1013|  1.22k|    gc_callback_privacy_state(tox->m, tox_group_privacy_state_handler);
 1014|  1.22k|    gc_callback_topic_lock(tox->m, tox_group_topic_lock_handler);
 1015|  1.22k|    gc_callback_password(tox->m, tox_group_password_handler);
 1016|  1.22k|    gc_callback_peer_join(tox->m, tox_group_peer_join_handler);
 1017|  1.22k|    gc_callback_peer_exit(tox->m, tox_group_peer_exit_handler);
 1018|  1.22k|    gc_callback_self_join(tox->m, tox_group_self_join_handler);
 1019|  1.22k|    gc_callback_rejected(tox->m, tox_group_join_fail_handler);
 1020|  1.22k|    gc_callback_voice_state(tox->m, tox_group_voice_state_handler);
 1021|       |
 1022|  1.22k|    tox_unlock(tox);
 1023|       |
 1024|  1.22k|    SET_ERROR_PARAMETER(error, TOX_ERR_NEW_OK);
  ------------------
  |  |   44|  1.22k|    do {                              \
  |  |   45|  1.22k|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|  2.44k|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 1.22k]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|  1.22k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 1025|       |
 1026|  1.22k|    tox_options_free(default_options);
 1027|  1.22k|    return tox;
 1028|  1.74k|}
tox.c:tox_log_handler:
   86|  74.9k|{
   87|  74.9k|    Tox *tox = (Tox *)context;
   88|  74.9k|    assert(tox != nullptr);
   89|       |
   90|  74.9k|    if (tox->log_callback != nullptr) {
  ------------------
  |  |   63|  74.9k|#define nullptr NULL
  ------------------
  |  Branch (90:9): [True: 0, False: 74.9k]
  ------------------
   91|      0|        tox->log_callback(tox, (Tox_Log_Level)level, file, line, func, message, userdata);
   92|      0|    }
   93|  74.9k|}
tox.c:tox_load:
  700|  1.74k|{
  701|  1.74k|    uint32_t data32[2];
  702|  1.74k|    const uint32_t cookie_len = sizeof(data32);
  703|       |
  704|  1.74k|    if (length < cookie_len) {
  ------------------
  |  Branch (704:9): [True: 0, False: 1.74k]
  ------------------
  705|      0|        return -1;
  706|      0|    }
  707|       |
  708|  1.74k|    memcpy(data32, data, sizeof(uint32_t));
  709|  1.74k|    lendian_bytes_to_host32(data32 + 1, data + sizeof(uint32_t));
  710|       |
  711|  1.74k|    if (data32[0] != 0 || data32[1] != STATE_COOKIE_GLOBAL) {
  ------------------
  |  |   27|  1.74k|#define STATE_COOKIE_GLOBAL 0x15ed1b1f
  ------------------
  |  Branch (711:9): [True: 1, False: 1.74k]
  |  Branch (711:27): [True: 1, False: 1.74k]
  ------------------
  712|      2|        return -1;
  713|      2|    }
  714|       |
  715|  1.74k|    return state_load(tox->m->log, state_load_callback, tox, data + cookie_len,
  716|  1.74k|                      length - cookie_len, STATE_COOKIE_TYPE);
  ------------------
  |  |   29|  1.74k|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
  717|  1.74k|}
tox.c:state_load_callback:
  674|  29.2k|{
  675|  29.2k|    const Tox *tox = (const Tox *)outer;
  676|  29.2k|    State_Load_Status status = STATE_LOAD_STATUS_CONTINUE;
  677|       |
  678|  29.2k|    if (messenger_load_state_section(tox->m, data, length, type, &status)
  ------------------
  |  Branch (678:9): [True: 28.6k, False: 687]
  ------------------
  679|  29.2k|            || conferences_load_state_section(tox->m->conferences_object, data, length, type, &status)) {
  ------------------
  |  Branch (679:16): [True: 305, False: 382]
  ------------------
  680|  28.9k|        return status;
  681|  28.9k|    }
  682|       |
  683|    382|    if (type == STATE_TYPE_END) {
  ------------------
  |  Branch (683:9): [True: 7, False: 375]
  ------------------
  684|      7|        if (length != 0) {
  ------------------
  |  Branch (684:13): [True: 1, False: 6]
  ------------------
  685|      1|            return STATE_LOAD_STATUS_ERROR;
  686|      1|        }
  687|       |
  688|      6|        return STATE_LOAD_STATUS_END;
  689|      7|    }
  690|       |
  691|    375|    LOGGER_ERROR(tox->m->log, "Load state: contains unrecognized part (len %u, type %u)",
  ------------------
  |  |   87|    375|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|    375|    do {                                                                         \
  |  |  |  |   77|    375|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    750|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|    375|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|    375|        }                                                                        \
  |  |  |  |   80|    375|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  692|    375|                 length, type);
  693|       |
  694|    375|    return STATE_LOAD_STATUS_CONTINUE;
  695|    382|}
tox.c:end_size:
 1083|  2.44k|{
 1084|  2.44k|    return 2 * sizeof(uint32_t);
 1085|  2.44k|}
tox.c:end_save:
 1089|  1.22k|{
 1090|  1.22k|    state_write_section_header(data, STATE_COOKIE_TYPE, 0, STATE_TYPE_END);
  ------------------
  |  |   29|  1.22k|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 1091|  1.22k|}

tox_options_get_ipv6_enabled:
   22|  1.74k|{
   23|  1.74k|    return options->ipv6_enabled;
   24|  1.74k|}
tox_options_set_ipv6_enabled:
   26|  1.74k|{
   27|  1.74k|    options->ipv6_enabled = ipv6_enabled;
   28|  1.74k|}
tox_options_get_udp_enabled:
   30|  1.74k|{
   31|  1.74k|    return options->udp_enabled;
   32|  1.74k|}
tox_options_set_udp_enabled:
   34|  1.74k|{
   35|  1.74k|    options->udp_enabled = udp_enabled;
   36|  1.74k|}
tox_options_get_proxy_type:
   38|  1.74k|{
   39|  1.74k|    return options->proxy_type;
   40|  1.74k|}
tox_options_set_proxy_type:
   42|  1.74k|{
   43|  1.74k|    options->proxy_type = proxy_type;
   44|  1.74k|}
tox_options_set_proxy_host:
   50|  3.49k|{
   51|  3.49k|    if (!options->experimental_owned_data) {
  ------------------
  |  Branch (51:9): [True: 3.49k, False: 0]
  ------------------
   52|  3.49k|        options->proxy_host = proxy_host;
   53|  3.49k|        return true;
   54|  3.49k|    }
   55|       |
   56|      0|    if (options->owned_proxy_host != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (56:9): [True: 0, False: 0]
  ------------------
   57|      0|        free(options->owned_proxy_host);
   58|      0|        options->owned_proxy_host = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   59|      0|    }
   60|      0|    if (proxy_host == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (60:9): [True: 0, False: 0]
  ------------------
   61|      0|        options->proxy_host = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   62|      0|        return true;
   63|      0|    }
   64|       |
   65|      0|    const size_t proxy_host_length = strlen(proxy_host) + 1;
   66|      0|    char *owned_ptr = (char *)malloc(proxy_host_length);
   67|      0|    if (owned_ptr == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (67:9): [True: 0, False: 0]
  ------------------
   68|      0|        options->proxy_host = proxy_host;
   69|      0|        options->owned_proxy_host = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   70|      0|        return false;
   71|      0|    }
   72|       |
   73|      0|    memcpy(owned_ptr, proxy_host, proxy_host_length);
   74|      0|    options->proxy_host = owned_ptr;
   75|      0|    options->owned_proxy_host = owned_ptr;
   76|      0|    return true;
   77|      0|}
tox_options_get_start_port:
   87|  1.74k|{
   88|  1.74k|    return options->start_port;
   89|  1.74k|}
tox_options_get_end_port:
   95|  1.74k|{
   96|  1.74k|    return options->end_port;
   97|  1.74k|}
tox_options_get_tcp_port:
  103|  1.74k|{
  104|  1.74k|    return options->tcp_port;
  105|  1.74k|}
tox_options_get_hole_punching_enabled:
  111|  1.74k|{
  112|  1.74k|    return options->hole_punching_enabled;
  113|  1.74k|}
tox_options_set_hole_punching_enabled:
  115|  1.74k|{
  116|  1.74k|    options->hole_punching_enabled = hole_punching_enabled;
  117|  1.74k|}
tox_options_get_savedata_type:
  119|  5.24k|{
  120|  5.24k|    return options->savedata_type;
  121|  5.24k|}
tox_options_set_savedata_type:
  123|  1.74k|{
  124|  1.74k|    options->savedata_type = savedata_type;
  125|  1.74k|}
tox_options_get_savedata_length:
  127|  5.24k|{
  128|  5.24k|    return options->savedata_length;
  129|  5.24k|}
tox_options_get_log_callback:
  135|  1.74k|{
  136|  1.74k|    return options->log_callback;
  137|  1.74k|}
tox_options_get_log_user_data:
  143|  1.74k|{
  144|  1.74k|    return options->log_user_data;
  145|  1.74k|}
tox_options_get_local_discovery_enabled:
  151|  1.74k|{
  152|  1.74k|    return options->local_discovery_enabled;
  153|  1.74k|}
tox_options_set_local_discovery_enabled:
  155|  1.74k|{
  156|  1.74k|    options->local_discovery_enabled = local_discovery_enabled;
  157|  1.74k|}
tox_options_get_dht_announcements_enabled:
  159|  1.74k|{
  160|  1.74k|    return options->dht_announcements_enabled;
  161|  1.74k|}
tox_options_set_dht_announcements_enabled:
  163|  1.74k|{
  164|  1.74k|    options->dht_announcements_enabled = dht_announcements_enabled;
  165|  1.74k|}
tox_options_get_experimental_thread_safety:
  167|  1.74k|{
  168|  1.74k|    return options->experimental_thread_safety;
  169|  1.74k|}
tox_options_set_experimental_thread_safety:
  172|  1.74k|{
  173|  1.74k|    options->experimental_thread_safety = experimental_thread_safety;
  174|  1.74k|}
tox_options_get_experimental_groups_persistence:
  176|  1.74k|{
  177|  1.74k|    return options->experimental_groups_persistence;
  178|  1.74k|}
tox_options_set_experimental_groups_persistence:
  181|  3.49k|{
  182|  3.49k|    options->experimental_groups_persistence = experimental_groups_persistence;
  183|  3.49k|}
tox_options_get_experimental_disable_dns:
  185|  1.74k|{
  186|  1.74k|    return options->experimental_disable_dns;
  187|  1.74k|}
tox_options_set_experimental_disable_dns:
  189|  1.74k|{
  190|  1.74k|    options->experimental_disable_dns = experimental_disable_dns;
  191|  1.74k|}
tox_options_set_experimental_owned_data:
  198|  1.74k|{
  199|  1.74k|    options->experimental_owned_data = experimental_owned_data;
  200|  1.74k|}
tox_options_get_savedata_data:
  203|  5.24k|{
  204|  5.24k|    return options->savedata_data;
  205|  5.24k|}
tox_options_set_savedata_data:
  208|  5.24k|{
  209|  5.24k|    if (!options->experimental_owned_data) {
  ------------------
  |  Branch (209:9): [True: 5.24k, False: 0]
  ------------------
  210|  5.24k|        options->savedata_data = savedata_data;
  211|  5.24k|        options->savedata_length = length;
  212|  5.24k|        return true;
  213|  5.24k|    }
  214|       |
  215|      0|    if (options->owned_savedata_data != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (215:9): [True: 0, False: 0]
  ------------------
  216|      0|        free(options->owned_savedata_data);
  217|      0|        options->owned_savedata_data = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  218|      0|    }
  219|      0|    if (savedata_data == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (219:9): [True: 0, False: 0]
  ------------------
  220|      0|        options->savedata_data = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  221|      0|        options->savedata_length = 0;
  222|      0|        return true;
  223|      0|    }
  224|       |
  225|      0|    uint8_t *owned_ptr = (uint8_t *)malloc(length);
  226|      0|    if (owned_ptr == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (226:9): [True: 0, False: 0]
  ------------------
  227|      0|        options->savedata_data = savedata_data;
  228|      0|        options->savedata_length = length;
  229|      0|        options->owned_savedata_data = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  230|      0|        return false;
  231|      0|    }
  232|       |
  233|      0|    memcpy(owned_ptr, savedata_data, length);
  234|      0|    options->savedata_data = owned_ptr;
  235|      0|    options->savedata_length = length;
  236|      0|    options->owned_savedata_data = owned_ptr;
  237|      0|    return true;
  238|      0|}
tox_options_default:
  241|  1.74k|{
  242|  1.74k|    if (options != nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (242:9): [True: 1.74k, False: 0]
  ------------------
  243|       |        // Free any owned data.
  244|  1.74k|        tox_options_set_proxy_host(options, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  245|  1.74k|        tox_options_set_savedata_data(options, nullptr, 0);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  246|       |
  247|       |        // Set the rest to default values.
  248|  1.74k|        const Tox_Options default_options = {false};
  249|  1.74k|        *options = default_options;
  250|  1.74k|        tox_options_set_ipv6_enabled(options, true);
  251|  1.74k|        tox_options_set_udp_enabled(options, true);
  252|  1.74k|        tox_options_set_proxy_type(options, TOX_PROXY_TYPE_NONE);
  253|  1.74k|        tox_options_set_hole_punching_enabled(options, true);
  254|  1.74k|        tox_options_set_local_discovery_enabled(options, true);
  255|  1.74k|        tox_options_set_dht_announcements_enabled(options, true);
  256|  1.74k|        tox_options_set_experimental_thread_safety(options, false);
  257|  1.74k|        tox_options_set_experimental_groups_persistence(options, false);
  258|  1.74k|        tox_options_set_experimental_disable_dns(options, false);
  259|  1.74k|        tox_options_set_experimental_owned_data(options, false);
  260|  1.74k|    }
  261|  1.74k|}
tox_options_new:
  264|  1.74k|{
  265|  1.74k|    Tox_Options *options = (Tox_Options *)calloc(1, sizeof(Tox_Options));
  266|       |
  267|  1.74k|    if (options != nullptr) {
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  |  Branch (267:9): [True: 1.74k, False: 0]
  ------------------
  268|  1.74k|        tox_options_default(options);
  269|  1.74k|        SET_ERROR_PARAMETER(error, TOX_ERR_OPTIONS_NEW_OK);
  ------------------
  |  |   14|  1.74k|    do {                              \
  |  |   15|  1.74k|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|  3.49k|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (15:13): [True: 1.74k, False: 0]
  |  |  ------------------
  |  |   16|  1.74k|            *param = x;               \
  |  |   17|  1.74k|        }                             \
  |  |   18|  1.74k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (18:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  270|  1.74k|        return options;
  271|  1.74k|    }
  272|       |
  273|      0|    SET_ERROR_PARAMETER(error, TOX_ERR_OPTIONS_NEW_MALLOC);
  ------------------
  |  |   14|      0|    do {                              \
  |  |   15|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (15:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   16|      0|            *param = x;               \
  |  |   17|      0|        }                             \
  |  |   18|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (18:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  274|      0|    return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  275|  1.74k|}
tox_options_free:
  278|  3.49k|{
  279|  3.49k|    if (options != nullptr) {
  ------------------
  |  |   63|  3.49k|#define nullptr NULL
  ------------------
  |  Branch (279:9): [True: 1.74k, False: 1.74k]
  ------------------
  280|       |        // Free any owned data.
  281|  1.74k|        tox_options_set_proxy_host(options, nullptr);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  282|  1.74k|        tox_options_set_savedata_data(options, nullptr, 0);
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
  283|  1.74k|        free(options);
  284|  1.74k|    }
  285|  3.49k|}

tox_default_system:
   36|  1.74k|{
   37|  1.74k|    const Tox_System sys = {
   38|  1.74k|        nullptr,  // mono_time_callback
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
   39|  1.74k|        nullptr,  // mono_time_user_data
  ------------------
  |  |   63|  1.74k|#define nullptr NULL
  ------------------
   40|  1.74k|        os_random(),
   41|  1.74k|        os_network(),
   42|  1.74k|        os_memory(),
   43|  1.74k|    };
   44|  1.74k|    return sys;
   45|  1.74k|}
tox_lock:
   48|  6.63k|{
   49|  6.63k|    if (tox->mutex != nullptr) {
  ------------------
  |  |   63|  6.63k|#define nullptr NULL
  ------------------
  |  Branch (49:9): [True: 0, False: 6.63k]
  ------------------
   50|      0|        pthread_mutex_lock(tox->mutex);
   51|      0|    }
   52|  6.63k|}
tox_unlock:
   55|  6.63k|{
   56|  6.63k|    if (tox->mutex != nullptr) {
  ------------------
  |  |   63|  6.63k|#define nullptr NULL
  ------------------
  |  Branch (56:9): [True: 0, False: 6.63k]
  ------------------
   57|      0|        pthread_mutex_unlock(tox->mutex);
   58|      0|    }
   59|  6.63k|}

free_uint8_t_pointer_array:
   27|  4.25k|{
   28|  4.25k|    if (ary == nullptr) {
  ------------------
  |  |   63|  4.25k|#define nullptr NULL
  ------------------
  |  Branch (28:9): [True: 4.11k, False: 141]
  ------------------
   29|  4.11k|        return;
   30|  4.11k|    }
   31|       |
   32|  2.39k|    for (size_t i = 0; i < n_items; ++i) {
  ------------------
  |  Branch (32:24): [True: 2.25k, False: 141]
  ------------------
   33|  2.25k|        if (ary[i] != nullptr) {
  ------------------
  |  |   63|  2.25k|#define nullptr NULL
  ------------------
  |  Branch (33:13): [True: 2.25k, False: 0]
  ------------------
   34|  2.25k|            mem_delete(mem, ary[i]);
   35|  2.25k|        }
   36|  2.25k|    }
   37|       |
   38|    141|    mem_delete(mem, ary);
   39|    141|}
data_checksum:
   42|    223|{
   43|    223|    uint8_t checksum[2] = {0};
   44|    223|    uint16_t check;
   45|       |
   46|  8.25k|    for (uint32_t i = 0; i < length; ++i) {
  ------------------
  |  Branch (46:26): [True: 8.02k, False: 223]
  ------------------
   47|  8.02k|        checksum[i % 2] ^= data[i];
   48|  8.02k|    }
   49|       |
   50|    223|    memcpy(&check, checksum, sizeof(check));
   51|    223|    return check;
   52|    223|}
memeq:
   79|  2.74k|{
   80|  2.74k|    return a_size == b_size && memcmp(a, b, a_size) == 0;
  ------------------
  |  Branch (80:12): [True: 2.26k, False: 481]
  |  Branch (80:32): [True: 2.26k, False: 0]
  ------------------
   81|  2.74k|}
memzero:
   99|  41.6k|{
  100|  41.6k|    if (data == nullptr || data_size == 0) {
  ------------------
  |  |   63|  83.2k|#define nullptr NULL
  ------------------
  |  Branch (100:9): [True: 0, False: 41.6k]
  |  Branch (100:28): [True: 0, False: 41.6k]
  ------------------
  101|      0|        return;
  102|      0|    }
  103|       |
  104|  41.6k|    memset(data, 0, data_size);
  105|  41.6k|}
min_u16:
  151|  1.37k|{
  152|  1.37k|    return a < b ? a : b;
  ------------------
  |  Branch (152:12): [True: 1.37k, False: 0]
  ------------------
  153|  1.37k|}
min_u32:
  155|     58|{
  156|     58|    return a < b ? a : b;
  ------------------
  |  Branch (156:12): [True: 29, False: 29]
  ------------------
  157|     58|}
jenkins_one_at_a_time_hash:
  169|    107|{
  170|    107|    uint32_t hash = 0;
  171|       |
  172|  3.53k|    for (uint32_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (172:26): [True: 3.42k, False: 107]
  ------------------
  173|  3.42k|        hash += key[i];
  174|  3.42k|        hash += (uint32_t)((uint64_t)hash << 10);
  175|  3.42k|        hash ^= hash >> 6;
  176|  3.42k|    }
  177|       |
  178|    107|    hash += (uint32_t)((uint64_t)hash << 3);
  179|    107|    hash ^= hash >> 11;
  180|    107|    hash += (uint32_t)((uint64_t)hash << 15);
  181|    107|    return hash;
  182|    107|}

