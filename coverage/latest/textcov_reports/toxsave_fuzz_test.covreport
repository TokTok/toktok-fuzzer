fuzz_support.cc:_ZZN6detail15func_conversionIPFPvP11Null_SystemjEXadL_ZN4$_218__invokeES3_jEEEcvPFT_T0_DpT1_EIS1_S1_JjEEEvENKUlS1_DpT_E_clIJjEEEDaS1_SG_:
   31|  10.0k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFPvP11Null_SystemjEXadL_ZN4$_218__invokeES3_jEEE13static_casterIS1_EcvT_IS3_EEv:
   22|  10.0k|        {
   23|  10.0k|            return static_cast<To>(obj);
   24|  10.0k|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFPvP11Null_SystemjjEXadL_ZN4$_228__invokeES3_jjEEEcvPFT_T0_DpT1_EIS1_S1_JjjEEEvENKUlS1_DpT_E_clIJjjEEEDaS1_SG_:
   31|  87.7k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFPvP11Null_SystemjjEXadL_ZN4$_228__invokeES3_jjEEE13static_casterIS1_EcvT_IS3_EEv:
   22|  87.7k|        {
   23|  87.7k|            return static_cast<To>(obj);
   24|  87.7k|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFPvP11Null_SystemS1_jEXadL_ZN4$_238__invokeES3_S1_jEEEcvPFT_T0_DpT1_EIS1_S1_JS1_jEEEvENKUlS1_DpT_E_clIJS1_jEEEDaS1_SG_:
   31|  45.9k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFPvP11Null_SystemS1_jEXadL_ZN4$_238__invokeES3_S1_jEEE13static_casterIS1_EcvT_IS3_EEv:
   22|  45.9k|        {
   23|  45.9k|            return static_cast<To>(obj);
   24|  45.9k|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFvP11Null_SystemPvEXadL_ZN4$_248__invokeES2_S3_EEEcvPFT_T0_DpT1_EIvS3_JS3_EEEvENKUlS3_DpT_E_clIJS3_EEEDaS3_SG_:
   31|  1.24M|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFvP11Null_SystemPvEXadL_ZN4$_248__invokeES2_S3_EEE13static_casterIS3_EcvT_IS2_EEv:
   22|  1.24M|        {
   23|  1.24M|            return static_cast<To>(obj);
   24|  1.24M|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Null_System6SocketEXadL_ZN4$_258__invokeES2_S3_EEEcvPFT_T0_DpT1_EIiPvJS3_EEEvENKUlSF_DpT_E_clIJS3_EEEDaSF_SH_:
   31|  1.97k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Null_System6SocketEXadL_ZN4$_258__invokeES2_S3_EEE13static_casterIPvEcvT_IS2_EEv:
   22|  1.97k|        {
   23|  1.97k|            return static_cast<To>(obj);
   24|  1.97k|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Null_System6SocketPK12Network_AddrEXadL_ZN4$_278__invokeES2_S3_S6_EEEcvPFT_T0_DpT1_EIiPvJS3_S6_EEEvENKUlSI_DpT_E_clIJS3_S6_EEEDaSI_SK_:
   31|  1.97k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Null_System6SocketPK12Network_AddrEXadL_ZN4$_278__invokeES2_S3_S6_EEE13static_casterIPvEcvT_IS2_EEv:
   22|  1.97k|        {
   23|  1.97k|            return static_cast<To>(obj);
   24|  1.97k|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPF6SocketP11Null_SystemiiiEXadL_ZN4$_358__invokeES3_iiiEEEcvPFT_T0_DpT1_EIS1_PvJiiiEEEvENKUlSF_DpT_E_clIJiiiEEEDaSF_SH_:
   31|  1.97k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPF6SocketP11Null_SystemiiiEXadL_ZN4$_358__invokeES3_iiiEEE13static_casterIPvEcvT_IS3_EEv:
   22|  1.97k|        {
   23|  1.97k|            return static_cast<To>(obj);
   24|  1.97k|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Null_System6SocketbEXadL_ZN4$_368__invokeES2_S3_bEEEcvPFT_T0_DpT1_EIiPvJS3_bEEEvENKUlSF_DpT_E_clIJS3_bEEEDaSF_SH_:
   31|  1.97k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Null_System6SocketbEXadL_ZN4$_368__invokeES2_S3_bEEE13static_casterIPvEcvT_IS2_EEv:
   22|  1.97k|        {
   23|  1.97k|            return static_cast<To>(obj);
   24|  1.97k|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Null_System6SocketiiPvPmEXadL_ZN4$_378__invokeES2_S3_iiS4_S5_EEEcvPFT_T0_DpT1_EIiS4_JS3_iiS4_S5_EEEvENKUlS4_DpT_E_clIJS3_iiS4_S5_EEEDaS4_SI_:
   31|  1.97k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Null_System6SocketiiPvPmEXadL_ZN4$_378__invokeES2_S3_iiS4_S5_EEE13static_casterIS4_EcvT_IS2_EEv:
   22|  1.97k|        {
   23|  1.97k|            return static_cast<To>(obj);
   24|  1.97k|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Null_System6SocketiiPKvmEXadL_ZN4$_388__invokeES2_S3_iiS5_mEEEcvPFT_T0_DpT1_EIiPvJS3_iiS5_mEEEvENKUlSH_DpT_E_clIJS3_iiS5_mEEEDaSH_SJ_:
   31|  7.90k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Null_System6SocketiiPKvmEXadL_ZN4$_388__invokeES2_S3_iiS5_mEEE13static_casterIPvEcvT_IS2_EEv:
   22|  7.90k|        {
   23|  7.90k|            return static_cast<To>(obj);
   24|  7.90k|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFvP11Null_SystemPhmEXadL_ZN4$_398__invokeES2_S3_mEEEcvPFT_T0_DpT1_EIvPvJS3_mEEEvENKUlSF_DpT_E_clIJS3_mEEEDaSF_SH_:
   31|  29.7k|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFvP11Null_SystemPhmEXadL_ZN4$_398__invokeES2_S3_mEEE13static_casterIPvEcvT_IS2_EEv:
   22|  29.7k|        {
   23|  29.7k|            return static_cast<To>(obj);
   24|  29.7k|        }

_ZN6SystemC2ENSt3__110unique_ptrI10Tox_SystemNS0_14default_deleteIS2_EEEENS1_I6MemoryNS3_IS6_EEEENS1_I7NetworkNS3_IS9_EEEENS1_I6RandomNS3_ISC_EEEE:
   38|  1.97k|    : sys(std::move(in_sys))
   39|  1.97k|    , mem(std::move(in_mem))
   40|  1.97k|    , ns(std::move(in_ns))
   41|  1.97k|    , rng(std::move(in_rng))
   42|  1.97k|{
   43|  1.97k|}
_ZN6SystemD2Ev:
   46|  1.97k|System::~System() { }
_ZN11Null_SystemC2Ev:
  321|  1.97k|    : System{
  322|  1.97k|        std::make_unique<Tox_System>(),
  323|  1.97k|        std::make_unique<Memory>(Memory{&null_memory_funcs, this}),
  324|  1.97k|        std::make_unique<Network>(Network{&null_network_funcs, this}),
  325|  1.97k|        std::make_unique<Random>(Random{&null_random_funcs, this}),
  326|  1.97k|    }
  327|  1.97k|{
  328|  1.97k|    sys->mono_time_callback = [](void *self) { return static_cast<Null_System *>(self)->clock; };
  329|  1.97k|    sys->mono_time_user_data = this;
  330|  1.97k|    sys->mem = mem.get();
  331|  1.97k|    sys->ns = ns.get();
  332|  1.97k|    sys->rng = rng.get();
  333|  1.97k|}
fuzz_support.cc:_ZNK4$_21clEP11Null_Systemj:
  249|  10.0k|    ![](Null_System *self, uint32_t size) { return std::malloc(size); },
fuzz_support.cc:_ZNK4$_22clEP11Null_Systemjj:
  251|  87.7k|    ![](Null_System *self, uint32_t nmemb, uint32_t size) { return std::calloc(nmemb, size); },
fuzz_support.cc:_ZNK4$_23clEP11Null_SystemPvj:
  253|  45.9k|    ![](Null_System *self, void *ptr, uint32_t size) { return std::realloc(ptr, size); },
fuzz_support.cc:_ZNK4$_24clEP11Null_SystemPv:
  255|  1.24M|    ![](Null_System *self, void *ptr) { std::free(ptr); },
fuzz_support.cc:_ZNK4$_25clEP11Null_System6Socket:
  259|  1.97k|    /* .close = */ ![](Null_System *self, Socket sock) { return 0; },
fuzz_support.cc:_ZNK4$_27clEP11Null_System6SocketPK12Network_Addr:
  261|  1.97k|    /* .bind = */ ![](Null_System *self, Socket sock, const Network_Addr *addr) { return 0; },
fuzz_support.cc:_ZNK4$_35clEP11Null_Systemiii:
  287|  1.97k|    /* .socket = */ ![](Null_System *self, int domain, int type, int proto) { return Socket{42}; },
fuzz_support.cc:_ZNK4$_36clEP11Null_System6Socketb:
  288|  1.97k|    /* .socket_nonblock = */ ![](Null_System *self, Socket sock, bool nonblock) { return 0; },
fuzz_support.cc:_ZNK4$_37clEP11Null_System6SocketiiPvPm:
  290|  1.97k|    ![](Null_System *self, Socket sock, int level, int optname, void *optval, size_t *optlen) {
  291|  1.97k|        std::memset(optval, 0, *optlen);
  292|  1.97k|        return 0;
  293|  1.97k|    },
fuzz_support.cc:_ZNK4$_38clEP11Null_System6SocketiiPKvm:
  295|  7.90k|    ![](Null_System *self, Socket sock, int level, int optname, const void *optval, size_t optlen) {
  296|  7.90k|        return 0;
  297|  7.90k|    },
fuzz_support.cc:_ZNK4$_39clEP11Null_SystemPhm:
  309|  29.7k|    ![](Null_System *self, uint8_t *bytes, size_t length) {
  310|   790k|        for (size_t i = 0; i < length; ++i) {
  ------------------
  |  Branch (310:28): [True: 760k, False: 29.7k]
  ------------------
  311|   760k|            bytes[i] = simple_rng(self->seed) & 0xff;
  312|   760k|        }
  313|  29.7k|    },
fuzz_support.cc:_ZL10simple_rngRm:
  301|   760k|{
  302|       |    // https://nuclear.llnl.gov/CNP/rng/rngman/node4.html
  303|   760k|    seed = 2862933555777941757LL * seed + 3037000493LL;
  304|   760k|    return seed;
  305|   760k|}
fuzz_support.cc:_ZZN11Null_SystemC1EvENK3$_0clEPv:
  328|  1.97k|    sys->mono_time_callback = [](void *self) { return static_cast<Null_System *>(self)->clock; };

_ZN9Fuzz_DataC2EPKhm:
   32|  1.97k|        : data_(input_data)
   33|  1.97k|        , base_(input_data)
   34|  1.97k|        , size_(input_size)
   35|  1.97k|    {
   36|  1.97k|    }
_ZNK9Fuzz_Data4sizeEv:
   69|  3.95k|    std::size_t size() const { return size_; }
_ZN9Fuzz_Data7consumeEPKcm:
   75|  1.97k|    {
   76|  1.97k|        const uint8_t *val = data_;
   77|  1.97k|        if (FUZZ_DEBUG) {
  ------------------
  |  Branch (77:13): [Folded - Ignored]
  ------------------
   78|      0|            if (pos() == TRACE_TRAP) {
  ------------------
  |  Branch (78:17): [True: 0, False: 0]
  ------------------
   79|      0|                __asm__("int $3");
   80|      0|            }
   81|      0|            if (count == 1) {
  ------------------
  |  Branch (81:17): [True: 0, False: 0]
  ------------------
   82|      0|                std::printf("consume@%zu(%s): %d (0x%02x)\n", pos(), func, val[0], val[0]);
   83|      0|            } else if (count != 0) {
  ------------------
  |  Branch (83:24): [True: 0, False: 0]
  ------------------
   84|      0|                std::printf("consume@%zu(%s): %02x..%02x[%zu]\n", pos(), func, val[0],
   85|      0|                    val[count - 1], count);
   86|      0|            }
   87|      0|        }
   88|  1.97k|        data_ += count;
   89|  1.97k|        size_ -= count;
   90|  1.97k|        return val;
   91|  1.97k|    }

LLVMFuzzerTestOneInput:
   51|  1.97k|{
   52|  1.97k|    Fuzz_Data input{data, size};
   53|  1.97k|    TestSaveDataLoading(input);
   54|  1.97k|    return 0;  // Non-zero return values are reserved for future use.
   55|  1.97k|}
toxsave_fuzz_test.cc:_ZN12_GLOBAL__N_119TestSaveDataLoadingER9Fuzz_Data:
   12|  1.97k|{
   13|  1.97k|    Tox_Err_Options_New error_options;
   14|       |
   15|  1.97k|    struct Tox_Options *tox_options = tox_options_new(&error_options);
   16|       |
   17|  1.97k|    assert(tox_options != nullptr);
   18|  1.97k|    assert(error_options == TOX_ERR_OPTIONS_NEW_OK);
   19|       |
   20|  1.97k|    const size_t savedata_size = input.size();
   21|  1.97k|    CONSUME_OR_RETURN(const uint8_t *savedata, input, savedata_size);
  ------------------
  |  |  139|  1.97k|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 0, False: 1.97k]
  |  |  ------------------
  |  |  140|      0|        return;                              \
  |  |  141|      0|    }                                        \
  |  |  142|  1.97k|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   22|       |
   23|  1.97k|    tox_options_set_experimental_groups_persistence(tox_options, true);
   24|       |
   25|       |    // pass test data to Tox
   26|  1.97k|    tox_options_set_savedata_data(tox_options, savedata, savedata_size);
   27|  1.97k|    tox_options_set_savedata_type(tox_options, TOX_SAVEDATA_TYPE_TOX_SAVE);
   28|       |
   29|  1.97k|    Tox_Options_Testing tox_options_testing;
   30|  1.97k|    Null_System sys;
   31|  1.97k|    tox_options_testing.operating_system = sys.sys.get();
   32|       |
   33|  1.97k|    Tox *tox = tox_new_testing(tox_options, nullptr, &tox_options_testing, nullptr);
   34|  1.97k|    tox_options_free(tox_options);
   35|  1.97k|    if (tox == nullptr) {
  ------------------
  |  Branch (35:9): [True: 484, False: 1.49k]
  ------------------
   36|       |        // Tox save was invalid, we're finished here
   37|    484|        return;
   38|    484|    }
   39|       |
   40|       |    // verify that the file can be saved again
   41|  1.49k|    std::vector<uint8_t> new_savedata(tox_get_savedata_size(tox));
   42|  1.49k|    tox_get_savedata(tox, new_savedata.data());
   43|       |
   44|  1.49k|    tox_kill(tox);
   45|  1.49k|}

cmp_init:
  837|  43.7k|                                         cmp_writer *write) {
  838|  43.7k|  ctx->error = CMP_ERROR_NONE;
  839|  43.7k|  ctx->buf = buf;
  840|  43.7k|  ctx->read = read;
  841|  43.7k|  ctx->skip = skip;
  842|  43.7k|  ctx->write = write;
  843|  43.7k|}
cmp_write_pfix:
  859|  3.90k|bool cmp_write_pfix(cmp_ctx_t *ctx, uint8_t c) {
  860|  3.90k|  if (c <= 0x7F)
  ------------------
  |  Branch (860:7): [True: 3.90k, False: 0]
  ------------------
  861|  3.90k|    return write_fixed_value(ctx, c);
  862|       |
  863|      0|  ctx->error = CMP_ERROR_INPUT_VALUE_TOO_LARGE;
  864|      0|  return false;
  865|  3.90k|}
cmp_write_u8:
  938|     28|bool cmp_write_u8(cmp_ctx_t *ctx, uint8_t c) {
  939|     28|  if (!write_type_marker(ctx, U8_MARKER))
  ------------------
  |  Branch (939:7): [True: 0, False: 28]
  ------------------
  940|      0|    return false;
  941|       |
  942|     28|  return ctx->write(ctx, &c, sizeof(uint8_t)) == sizeof(uint8_t);
  943|     28|}
cmp_write_u16:
  945|    384|bool cmp_write_u16(cmp_ctx_t *ctx, uint16_t s) {
  946|    384|  if (!write_type_marker(ctx, U16_MARKER))
  ------------------
  |  Branch (946:7): [True: 0, False: 384]
  ------------------
  947|      0|    return false;
  948|       |
  949|    384|  s = be16(s);
  950|       |
  951|    384|  return ctx->write(ctx, &s, sizeof(uint16_t)) == sizeof(uint16_t);
  952|    384|}
cmp_write_uinteger:
  972|  4.32k|bool cmp_write_uinteger(cmp_ctx_t *ctx, uint64_t u) {
  973|  4.32k|  if (u <= 0x7F)
  ------------------
  |  Branch (973:7): [True: 3.90k, False: 412]
  ------------------
  974|  3.90k|    return cmp_write_pfix(ctx, (uint8_t)u);
  975|    412|  if (u <= 0xFF)
  ------------------
  |  Branch (975:7): [True: 28, False: 384]
  ------------------
  976|     28|    return cmp_write_u8(ctx, (uint8_t)u);
  977|    384|  if (u <= 0xFFFF)
  ------------------
  |  Branch (977:7): [True: 384, False: 0]
  ------------------
  978|    384|    return cmp_write_u16(ctx, (uint16_t)u);
  979|      0|  if (u <= 0xFFFFFFFF)
  ------------------
  |  Branch (979:7): [True: 0, False: 0]
  ------------------
  980|      0|    return cmp_write_u32(ctx, (uint32_t)u);
  981|       |
  982|      0|  return cmp_write_u64(ctx, u);
  983|      0|}
cmp_write_nil:
 1041|     72|bool cmp_write_nil(cmp_ctx_t *ctx) {
 1042|     72|  return write_type_marker(ctx, NIL_MARKER);
 1043|     72|}
cmp_write_true:
 1045|      8|bool cmp_write_true(cmp_ctx_t *ctx) {
 1046|      8|  return write_type_marker(ctx, TRUE_MARKER);
 1047|      8|}
cmp_write_false:
 1049|    280|bool cmp_write_false(cmp_ctx_t *ctx) {
 1050|    280|  return write_type_marker(ctx, FALSE_MARKER);
 1051|    280|}
cmp_write_bool:
 1053|    288|bool cmp_write_bool(cmp_ctx_t *ctx, bool b) {
 1054|    288|  if (b)
  ------------------
  |  Branch (1054:7): [True: 8, False: 280]
  ------------------
 1055|      8|    return cmp_write_true(ctx);
 1056|       |
 1057|    280|  return cmp_write_false(ctx);
 1058|    288|}
cmp_write_bin8_marker:
 1205|  3.86k|bool cmp_write_bin8_marker(cmp_ctx_t *ctx, uint8_t size) {
 1206|  3.86k|  if (!write_type_marker(ctx, BIN8_MARKER))
  ------------------
  |  Branch (1206:7): [True: 0, False: 3.86k]
  ------------------
 1207|      0|    return false;
 1208|       |
 1209|  3.86k|  if (ctx->write(ctx, &size, sizeof(uint8_t)) == sizeof(uint8_t))
  ------------------
  |  Branch (1209:7): [True: 3.86k, False: 0]
  ------------------
 1210|  3.86k|    return true;
 1211|       |
 1212|      0|  ctx->error = CMP_ERROR_LENGTH_WRITING;
 1213|      0|  return false;
 1214|  3.86k|}
cmp_write_bin8:
 1216|  3.86k|bool cmp_write_bin8(cmp_ctx_t *ctx, const void *data, uint8_t size) {
 1217|  3.86k|  if (!cmp_write_bin8_marker(ctx, size))
  ------------------
  |  Branch (1217:7): [True: 0, False: 3.86k]
  ------------------
 1218|      0|    return false;
 1219|       |
 1220|  3.86k|  if (size == 0)
  ------------------
  |  Branch (1220:7): [True: 288, False: 3.57k]
  ------------------
 1221|    288|    return true;
 1222|       |
 1223|  3.57k|  if (ctx->write(ctx, data, size) == size)
  ------------------
  |  Branch (1223:7): [True: 3.57k, False: 0]
  ------------------
 1224|  3.57k|    return true;
 1225|       |
 1226|      0|  ctx->error = CMP_ERROR_DATA_WRITING;
 1227|      0|  return false;
 1228|  3.57k|}
cmp_write_bin16_marker:
 1230|    384|bool cmp_write_bin16_marker(cmp_ctx_t *ctx, uint16_t size) {
 1231|    384|  if (!write_type_marker(ctx, BIN16_MARKER))
  ------------------
  |  Branch (1231:7): [True: 0, False: 384]
  ------------------
 1232|      0|    return false;
 1233|       |
 1234|    384|  size = be16(size);
 1235|       |
 1236|    384|  if (ctx->write(ctx, &size, sizeof(uint16_t)) == sizeof(uint16_t))
  ------------------
  |  Branch (1236:7): [True: 384, False: 0]
  ------------------
 1237|    384|    return true;
 1238|       |
 1239|      0|  ctx->error = CMP_ERROR_LENGTH_WRITING;
 1240|      0|  return false;
 1241|    384|}
cmp_write_bin16:
 1243|    384|bool cmp_write_bin16(cmp_ctx_t *ctx, const void *data, uint16_t size) {
 1244|    384|  if (!cmp_write_bin16_marker(ctx, size))
  ------------------
  |  Branch (1244:7): [True: 0, False: 384]
  ------------------
 1245|      0|    return false;
 1246|       |
 1247|    384|  if (size == 0)
  ------------------
  |  Branch (1247:7): [True: 0, False: 384]
  ------------------
 1248|      0|    return true;
 1249|       |
 1250|    384|  if (ctx->write(ctx, data, size) == size)
  ------------------
  |  Branch (1250:7): [True: 384, False: 0]
  ------------------
 1251|    384|    return true;
 1252|       |
 1253|      0|  ctx->error = CMP_ERROR_DATA_WRITING;
 1254|      0|  return false;
 1255|    384|}
cmp_write_bin:
 1293|  4.24k|bool cmp_write_bin(cmp_ctx_t *ctx, const void *data, uint32_t size) {
 1294|  4.24k|  if (size <= 0xFF)
  ------------------
  |  Branch (1294:7): [True: 3.86k, False: 384]
  ------------------
 1295|  3.86k|    return cmp_write_bin8(ctx, data, (uint8_t)size);
 1296|    384|  if (size <= 0xFFFF)
  ------------------
  |  Branch (1296:7): [True: 384, False: 0]
  ------------------
 1297|    384|    return cmp_write_bin16(ctx, data, (uint16_t)size);
 1298|       |
 1299|      0|  return cmp_write_bin32(ctx, data, size);
 1300|    384|}
cmp_write_fixarray:
 1302|  5.67k|bool cmp_write_fixarray(cmp_ctx_t *ctx, uint8_t size) {
 1303|  5.67k|  if (size <= FIXARRAY_SIZE)
  ------------------
  |  Branch (1303:7): [True: 5.67k, False: 0]
  ------------------
 1304|  5.67k|    return write_fixed_value(ctx, FIXARRAY_MARKER | size);
 1305|       |
 1306|      0|  ctx->error = CMP_ERROR_INPUT_VALUE_TOO_LARGE;
 1307|      0|  return false;
 1308|  5.67k|}
cmp_write_array16:
 1310|      8|bool cmp_write_array16(cmp_ctx_t *ctx, uint16_t size) {
 1311|      8|  if (!write_type_marker(ctx, ARRAY16_MARKER))
  ------------------
  |  Branch (1311:7): [True: 0, False: 8]
  ------------------
 1312|      0|    return false;
 1313|       |
 1314|      8|  size = be16(size);
 1315|       |
 1316|      8|  if (ctx->write(ctx, &size, sizeof(uint16_t)) == sizeof(uint16_t))
  ------------------
  |  Branch (1316:7): [True: 8, False: 0]
  ------------------
 1317|      8|    return true;
 1318|       |
 1319|      0|  ctx->error = CMP_ERROR_LENGTH_WRITING;
 1320|      0|  return false;
 1321|      8|}
cmp_write_array:
 1336|  5.67k|bool cmp_write_array(cmp_ctx_t *ctx, uint32_t size) {
 1337|  5.67k|  if (size <= FIXARRAY_SIZE)
  ------------------
  |  Branch (1337:7): [True: 5.67k, False: 8]
  ------------------
 1338|  5.67k|    return cmp_write_fixarray(ctx, (uint8_t)size);
 1339|      8|  if (size <= 0xFFFF)
  ------------------
  |  Branch (1339:7): [True: 8, False: 0]
  ------------------
 1340|      8|    return cmp_write_array16(ctx, (uint16_t)size);
 1341|       |
 1342|      0|  return cmp_write_array32(ctx, size);
 1343|      8|}
cmp_read_uchar:
 2144|  25.5k|bool cmp_read_uchar(cmp_ctx_t *ctx, uint8_t *c) {
 2145|  25.5k|  cmp_object_t obj;
 2146|       |
 2147|  25.5k|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2147:7): [True: 849, False: 24.6k]
  ------------------
 2148|    849|    return false;
 2149|       |
 2150|  24.6k|  switch (obj.type) {
 2151|  14.6k|    case CMP_TYPE_POSITIVE_FIXNUM:
  ------------------
  |  Branch (2151:5): [True: 14.6k, False: 9.96k]
  ------------------
 2152|  20.7k|    case CMP_TYPE_UINT8: {
  ------------------
  |  Branch (2152:5): [True: 6.01k, False: 18.6k]
  ------------------
 2153|  20.7k|      *c = obj.as.u8;
 2154|  20.7k|      return true;
 2155|  14.6k|    }
 2156|    279|    case CMP_TYPE_NEGATIVE_FIXNUM:
  ------------------
  |  Branch (2156:5): [True: 279, False: 24.3k]
  ------------------
 2157|  1.23k|    case CMP_TYPE_SINT8: {
  ------------------
  |  Branch (2157:5): [True: 952, False: 23.7k]
  ------------------
 2158|  1.23k|      if (obj.as.s8 >= 0) {
  ------------------
  |  Branch (2158:11): [True: 952, False: 279]
  ------------------
 2159|    952|        *c = (uint8_t)obj.as.s8;
 2160|    952|        return true;
 2161|    952|      }
 2162|    279|      break;
 2163|  1.23k|    }
 2164|  2.72k|    default:
  ------------------
  |  Branch (2164:5): [True: 2.72k, False: 21.9k]
  ------------------
 2165|  2.72k|      break;
 2166|  24.6k|  }
 2167|       |
 2168|  3.00k|  ctx->error = CMP_ERROR_INVALID_TYPE;
 2169|  3.00k|  return false;
 2170|  24.6k|}
cmp_read_ushort:
 2172|  51.2k|bool cmp_read_ushort(cmp_ctx_t *ctx, uint16_t *s) {
 2173|  51.2k|  cmp_object_t obj;
 2174|       |
 2175|  51.2k|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2175:7): [True: 1.25k, False: 49.9k]
  ------------------
 2176|  1.25k|    return false;
 2177|       |
 2178|  49.9k|  switch (obj.type) {
 2179|  28.7k|    case CMP_TYPE_POSITIVE_FIXNUM:
  ------------------
  |  Branch (2179:5): [True: 28.7k, False: 21.2k]
  ------------------
 2180|  46.1k|    case CMP_TYPE_UINT8: {
  ------------------
  |  Branch (2180:5): [True: 17.4k, False: 32.5k]
  ------------------
 2181|  46.1k|      *s = obj.as.u8;
 2182|  46.1k|      return true;
 2183|  28.7k|    }
 2184|    787|    case CMP_TYPE_UINT16: {
  ------------------
  |  Branch (2184:5): [True: 787, False: 49.1k]
  ------------------
 2185|    787|      *s = obj.as.u16;
 2186|    787|      return true;
 2187|  28.7k|    }
 2188|    115|    case CMP_TYPE_NEGATIVE_FIXNUM:
  ------------------
  |  Branch (2188:5): [True: 115, False: 49.8k]
  ------------------
 2189|    151|    case CMP_TYPE_SINT8: {
  ------------------
  |  Branch (2189:5): [True: 36, False: 49.9k]
  ------------------
 2190|    151|      if (obj.as.s8 >= 0) {
  ------------------
  |  Branch (2190:11): [True: 36, False: 115]
  ------------------
 2191|     36|        *s = (uint8_t)obj.as.s8;
 2192|     36|        return true;
 2193|     36|      }
 2194|    115|      break;
 2195|    151|    }
 2196|    115|    case CMP_TYPE_SINT16: {
  ------------------
  |  Branch (2196:5): [True: 100, False: 49.8k]
  ------------------
 2197|    100|      if (obj.as.s16 >= 0) {
  ------------------
  |  Branch (2197:11): [True: 60, False: 40]
  ------------------
 2198|     60|        *s = (uint16_t)obj.as.s16;
 2199|     60|        return true;
 2200|     60|      }
 2201|     40|      break;
 2202|    100|    }
 2203|  2.78k|    default:
  ------------------
  |  Branch (2203:5): [True: 2.78k, False: 47.1k]
  ------------------
 2204|  2.78k|      break;
 2205|  49.9k|  }
 2206|       |
 2207|  2.93k|  ctx->error = CMP_ERROR_INVALID_TYPE;
 2208|  2.93k|  return false;
 2209|  49.9k|}
cmp_read_uint:
 2211|  24.5k|bool cmp_read_uint(cmp_ctx_t *ctx, uint32_t *i) {
 2212|  24.5k|  cmp_object_t obj;
 2213|       |
 2214|  24.5k|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2214:7): [True: 2.94k, False: 21.6k]
  ------------------
 2215|  2.94k|    return false;
 2216|       |
 2217|  21.6k|  switch (obj.type) {
 2218|  13.3k|    case CMP_TYPE_POSITIVE_FIXNUM:
  ------------------
  |  Branch (2218:5): [True: 13.3k, False: 8.23k]
  ------------------
 2219|  13.5k|    case CMP_TYPE_UINT8: {
  ------------------
  |  Branch (2219:5): [True: 165, False: 21.4k]
  ------------------
 2220|  13.5k|      *i = obj.as.u8;
 2221|  13.5k|      return true;
 2222|  13.3k|    }
 2223|  1.66k|    case CMP_TYPE_UINT16: {
  ------------------
  |  Branch (2223:5): [True: 1.66k, False: 19.9k]
  ------------------
 2224|  1.66k|      *i = obj.as.u16;
 2225|  1.66k|      return true;
 2226|  13.3k|    }
 2227|  1.04k|    case CMP_TYPE_UINT32: {
  ------------------
  |  Branch (2227:5): [True: 1.04k, False: 20.5k]
  ------------------
 2228|  1.04k|      *i = obj.as.u32;
 2229|  1.04k|      return true;
 2230|  13.3k|    }
 2231|  1.05k|    case CMP_TYPE_NEGATIVE_FIXNUM:
  ------------------
  |  Branch (2231:5): [True: 1.05k, False: 20.5k]
  ------------------
 2232|  1.09k|    case CMP_TYPE_SINT8: {
  ------------------
  |  Branch (2232:5): [True: 35, False: 21.5k]
  ------------------
 2233|  1.09k|      if (obj.as.s8 >= 0) {
  ------------------
  |  Branch (2233:11): [True: 35, False: 1.05k]
  ------------------
 2234|     35|        *i = (uint8_t)obj.as.s8;
 2235|     35|        return true;
 2236|     35|      }
 2237|  1.05k|      break;
 2238|  1.09k|    }
 2239|  1.05k|    case CMP_TYPE_SINT16: {
  ------------------
  |  Branch (2239:5): [True: 52, False: 21.5k]
  ------------------
 2240|     52|      if (obj.as.s16 >= 0) {
  ------------------
  |  Branch (2240:11): [True: 34, False: 18]
  ------------------
 2241|     34|        *i = (uint16_t)obj.as.s16;
 2242|     34|        return true;
 2243|     34|      }
 2244|     18|      break;
 2245|     52|    }
 2246|  1.77k|    case CMP_TYPE_SINT32: {
  ------------------
  |  Branch (2246:5): [True: 1.77k, False: 19.8k]
  ------------------
 2247|  1.77k|      if (obj.as.s32 >= 0) {
  ------------------
  |  Branch (2247:11): [True: 1.67k, False: 106]
  ------------------
 2248|  1.67k|        *i = (uint32_t)obj.as.s32;
 2249|  1.67k|        return true;
 2250|  1.67k|      }
 2251|    106|      break;
 2252|  1.77k|    }
 2253|  2.44k|    default:
  ------------------
  |  Branch (2253:5): [True: 2.44k, False: 19.1k]
  ------------------
 2254|  2.44k|      break;
 2255|  21.6k|  }
 2256|       |
 2257|  3.62k|  ctx->error = CMP_ERROR_INVALID_TYPE;
 2258|  3.62k|  return false;
 2259|  21.6k|}
cmp_read_nil:
 2382|    129|bool cmp_read_nil(cmp_ctx_t *ctx) {
 2383|    129|  cmp_object_t obj;
 2384|       |
 2385|    129|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2385:7): [True: 5, False: 124]
  ------------------
 2386|      5|    return false;
 2387|       |
 2388|    124|  if (obj.type == CMP_TYPE_NIL)
  ------------------
  |  Branch (2388:7): [True: 41, False: 83]
  ------------------
 2389|     41|    return true;
 2390|       |
 2391|     83|  ctx->error = CMP_ERROR_INVALID_TYPE;
 2392|     83|  return false;
 2393|    124|}
cmp_read_bool:
 2395|  23.7k|bool cmp_read_bool(cmp_ctx_t *ctx, bool *b) {
 2396|  23.7k|  cmp_object_t obj;
 2397|       |
 2398|  23.7k|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2398:7): [True: 518, False: 23.2k]
  ------------------
 2399|    518|    return false;
 2400|       |
 2401|  23.2k|  if (obj.type != CMP_TYPE_BOOLEAN) {
  ------------------
  |  Branch (2401:7): [True: 3.15k, False: 20.0k]
  ------------------
 2402|  3.15k|    ctx->error = CMP_ERROR_INVALID_TYPE;
 2403|  3.15k|    return false;
 2404|  3.15k|  }
 2405|       |
 2406|  20.0k|  if (obj.as.boolean) {
  ------------------
  |  Branch (2406:7): [True: 326, False: 19.7k]
  ------------------
 2407|    326|    *b = true;
 2408|  19.7k|  } else {
 2409|  19.7k|    *b = false;
 2410|  19.7k|  }
 2411|       |
 2412|  20.0k|  return true;
 2413|  23.2k|}
cmp_read_bin_size:
 2479|  5.83k|bool cmp_read_bin_size(cmp_ctx_t *ctx, uint32_t *size) {
 2480|  5.83k|  cmp_object_t obj;
 2481|       |
 2482|  5.83k|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2482:7): [True: 28, False: 5.80k]
  ------------------
 2483|     28|    return false;
 2484|       |
 2485|  5.80k|  switch (obj.type) {
 2486|  5.08k|    case CMP_TYPE_BIN8:
  ------------------
  |  Branch (2486:5): [True: 5.08k, False: 724]
  ------------------
 2487|  5.45k|    case CMP_TYPE_BIN16:
  ------------------
  |  Branch (2487:5): [True: 367, False: 5.44k]
  ------------------
 2488|  5.46k|    case CMP_TYPE_BIN32: {
  ------------------
  |  Branch (2488:5): [True: 10, False: 5.79k]
  ------------------
 2489|  5.46k|      *size = obj.as.bin_size;
 2490|  5.46k|      return true;
 2491|  5.45k|    }
 2492|    347|    default: {
  ------------------
  |  Branch (2492:5): [True: 347, False: 5.46k]
  ------------------
 2493|    347|      ctx->error = CMP_ERROR_INVALID_TYPE;
 2494|    347|      return false;
 2495|  5.45k|    }
 2496|  5.80k|  }
 2497|  5.80k|}
cmp_read_array:
 2519|  90.3k|bool cmp_read_array(cmp_ctx_t *ctx, uint32_t *size) {
 2520|  90.3k|  cmp_object_t obj;
 2521|       |
 2522|  90.3k|  if (!cmp_read_object(ctx, &obj))
  ------------------
  |  Branch (2522:7): [True: 872, False: 89.4k]
  ------------------
 2523|    872|    return false;
 2524|       |
 2525|  89.4k|  switch (obj.type) {
 2526|  80.5k|    case CMP_TYPE_FIXARRAY:
  ------------------
  |  Branch (2526:5): [True: 80.5k, False: 8.94k]
  ------------------
 2527|  80.5k|    case CMP_TYPE_ARRAY16:
  ------------------
  |  Branch (2527:5): [True: 67, False: 89.3k]
  ------------------
 2528|  80.5k|    case CMP_TYPE_ARRAY32: {
  ------------------
  |  Branch (2528:5): [True: 19, False: 89.4k]
  ------------------
 2529|  80.5k|      *size = obj.as.array_size;
 2530|  80.5k|      return true;
 2531|  80.5k|    }
 2532|  8.86k|    default: {
  ------------------
  |  Branch (2532:5): [True: 8.86k, False: 80.5k]
  ------------------
 2533|  8.86k|      ctx->error = CMP_ERROR_INVALID_TYPE;
 2534|  8.86k|      return false;
 2535|  80.5k|    }
 2536|  89.4k|  }
 2537|  89.4k|}
cmp_read_object:
 2810|   221k|bool cmp_read_object(cmp_ctx_t *ctx, cmp_object_t *obj) {
 2811|   221k|  uint8_t type_marker = 0;
 2812|       |
 2813|   221k|  if (!read_type_marker(ctx, &type_marker))
  ------------------
  |  Branch (2813:7): [True: 1.31k, False: 220k]
  ------------------
 2814|  1.31k|    return false;
 2815|       |
 2816|   220k|  if (!type_marker_to_cmp_type(type_marker, &obj->type)) {
  ------------------
  |  Branch (2816:7): [True: 302, False: 219k]
  ------------------
 2817|    302|    ctx->error = CMP_ERROR_INVALID_TYPE;
 2818|    302|    return false;
 2819|    302|  }
 2820|       |
 2821|   219k|  return read_obj_data(ctx, type_marker, obj);
 2822|   220k|}
cmp.c:write_fixed_value:
  245|  9.57k|static bool write_fixed_value(cmp_ctx_t *ctx, uint8_t value) {
  246|  9.57k|  if (write_byte(ctx, value))
  ------------------
  |  Branch (246:7): [True: 9.57k, False: 0]
  ------------------
  247|  9.57k|    return true;
  248|       |
  249|      0|  ctx->error = CMP_ERROR_FIXED_VALUE_WRITING;
  250|      0|  return false;
  251|  9.57k|}
cmp.c:write_byte:
  207|  14.6k|static bool write_byte(cmp_ctx_t *ctx, uint8_t x) {
  208|  14.6k|  return ctx->write(ctx, &x, sizeof(uint8_t)) == sizeof(uint8_t);
  209|  14.6k|}
cmp.c:write_type_marker:
  237|  5.02k|static bool write_type_marker(cmp_ctx_t *ctx, uint8_t marker) {
  238|  5.02k|  if (write_byte(ctx, marker))
  ------------------
  |  Branch (238:7): [True: 5.02k, False: 0]
  ------------------
  239|  5.02k|    return true;
  240|       |
  241|      0|  ctx->error = CMP_ERROR_TYPE_MARKER_WRITING;
  242|      0|  return false;
  243|  5.02k|}
cmp.c:sbe16:
  127|    392|static int16_t sbe16(int16_t x) {
  128|    392|  return (int16_t)be16((uint16_t)x);
  129|    392|}
cmp.c:sbe32:
  138|  2.59k|static int32_t sbe32(int32_t x) {
  139|  2.59k|  return (int32_t)be32((uint32_t)x);
  140|  2.59k|}
cmp.c:sbe64:
  149|    198|static int64_t sbe64(int64_t x) {
  150|    198|  return (int64_t)be64((uint64_t)x);
  151|    198|}
cmp.c:be16:
  119|  20.9k|static uint16_t be16(uint16_t x) {
  120|  20.9k|  if (!is_bigendian())
  ------------------
  |  Branch (120:7): [True: 20.9k, False: 0]
  ------------------
  121|  20.9k|    return ((x >> 8) & 0x00ff)
  122|  20.9k|         | ((x << 8) & 0xff00);
  123|       |
  124|      0|  return x;
  125|  20.9k|}
cmp.c:is_bigendian:
  109|  29.0k|static bool is_bigendian(void) {
  110|       |#ifdef WORDS_BIGENDIAN
  111|       |  return WORDS_BIGENDIAN;
  112|       |#else
  113|  29.0k|  const int32_t i_ = 1;
  114|  29.0k|  const char *i_bytes = (const char *)&i_;
  115|  29.0k|  return *i_bytes == 0;
  116|  29.0k|#endif /* WORDS_BIGENDIAN */
  117|  29.0k|}
cmp.c:be32:
  131|  7.78k|static uint32_t be32(uint32_t x) {
  132|  7.78k|  if (!is_bigendian())
  ------------------
  |  Branch (132:7): [True: 7.78k, False: 0]
  ------------------
  133|  7.78k|    return ((uint32_t)be16((uint16_t)(x & 0xffff)) << 16) | (uint32_t)be16((uint16_t)(x >> 16));
  134|       |
  135|      0|  return x;
  136|  7.78k|}
cmp.c:be64:
  142|    338|static uint64_t be64(uint64_t x) {
  143|    338|  if (!is_bigendian())
  ------------------
  |  Branch (143:7): [True: 338, False: 0]
  ------------------
  144|    338|    return ((uint64_t)be32((uint32_t)(x & 0xffffffff)) << 32) | (uint64_t)be32((uint32_t)(x >> 32));
  145|       |
  146|      0|  return x;
  147|    338|}
cmp.c:read_type_marker:
  228|   221k|static bool read_type_marker(cmp_ctx_t *ctx, uint8_t *marker) {
  229|   221k|  if (read_byte(ctx, marker)) {
  ------------------
  |  Branch (229:7): [True: 220k, False: 1.31k]
  ------------------
  230|   220k|    return true;
  231|   220k|  }
  232|       |
  233|  1.31k|  ctx->error = CMP_ERROR_TYPE_MARKER_READING;
  234|  1.31k|  return false;
  235|   221k|}
cmp.c:read_byte:
  203|   221k|static bool read_byte(cmp_ctx_t *ctx, uint8_t *x) {
  204|   221k|  return ctx->read(ctx, x, sizeof(uint8_t));
  205|   221k|}
cmp.c:type_marker_to_cmp_type:
  253|   220k|static bool type_marker_to_cmp_type(uint8_t type_marker, uint8_t *cmp_type) {
  254|   220k|  if (type_marker <= 0x7F) {
  ------------------
  |  Branch (254:7): [True: 61.0k, False: 158k]
  ------------------
  255|  61.0k|    *cmp_type = CMP_TYPE_POSITIVE_FIXNUM;
  256|  61.0k|    return true;
  257|  61.0k|  }
  258|       |
  259|   158k|  if (type_marker <= 0x8F) {
  ------------------
  |  Branch (259:7): [True: 519, False: 158k]
  ------------------
  260|    519|    *cmp_type = CMP_TYPE_FIXMAP;
  261|    519|    return true;
  262|    519|  }
  263|       |
  264|   158k|  if (type_marker <= 0x9F) {
  ------------------
  |  Branch (264:7): [True: 80.8k, False: 77.5k]
  ------------------
  265|  80.8k|    *cmp_type = CMP_TYPE_FIXARRAY;
  266|  80.8k|    return true;
  267|  80.8k|  }
  268|       |
  269|  77.5k|  if (type_marker <= 0xBF) {
  ------------------
  |  Branch (269:7): [True: 1.12k, False: 76.4k]
  ------------------
  270|  1.12k|    *cmp_type = CMP_TYPE_FIXSTR;
  271|  1.12k|    return true;
  272|  1.12k|  }
  273|       |
  274|  76.4k|  if (type_marker >= 0xE0) {
  ------------------
  |  Branch (274:7): [True: 3.61k, False: 72.8k]
  ------------------
  275|  3.61k|    *cmp_type = CMP_TYPE_NEGATIVE_FIXNUM;
  276|  3.61k|    return true;
  277|  3.61k|  }
  278|       |
  279|  72.8k|  switch (type_marker) {
  280|    632|    case NIL_MARKER: {
  ------------------
  |  Branch (280:5): [True: 632, False: 72.2k]
  ------------------
  281|    632|      *cmp_type = CMP_TYPE_NIL;
  282|    632|      return true;
  283|      0|    }
  284|  20.6k|    case FALSE_MARKER: {
  ------------------
  |  Branch (284:5): [True: 20.6k, False: 52.1k]
  ------------------
  285|  20.6k|      *cmp_type = CMP_TYPE_BOOLEAN;
  286|  20.6k|      return true;
  287|      0|    }
  288|    629|    case TRUE_MARKER: {
  ------------------
  |  Branch (288:5): [True: 629, False: 72.2k]
  ------------------
  289|    629|      *cmp_type = CMP_TYPE_BOOLEAN;
  290|    629|      return true;
  291|      0|    }
  292|  6.26k|    case BIN8_MARKER: {
  ------------------
  |  Branch (292:5): [True: 6.26k, False: 66.5k]
  ------------------
  293|  6.26k|      *cmp_type = CMP_TYPE_BIN8;
  294|  6.26k|      return true;
  295|      0|    }
  296|    508|    case BIN16_MARKER: {
  ------------------
  |  Branch (296:5): [True: 508, False: 72.3k]
  ------------------
  297|    508|      *cmp_type = CMP_TYPE_BIN16;
  298|    508|      return true;
  299|      0|    }
  300|  3.02k|    case BIN32_MARKER: {
  ------------------
  |  Branch (300:5): [True: 3.02k, False: 69.8k]
  ------------------
  301|  3.02k|      *cmp_type = CMP_TYPE_BIN32;
  302|  3.02k|      return true;
  303|      0|    }
  304|    286|    case EXT8_MARKER: {
  ------------------
  |  Branch (304:5): [True: 286, False: 72.5k]
  ------------------
  305|    286|      *cmp_type = CMP_TYPE_EXT8;
  306|    286|      return true;
  307|      0|    }
  308|    258|    case EXT16_MARKER: {
  ------------------
  |  Branch (308:5): [True: 258, False: 72.5k]
  ------------------
  309|    258|      *cmp_type = CMP_TYPE_EXT16;
  310|    258|      return true;
  311|      0|    }
  312|    206|    case EXT32_MARKER: {
  ------------------
  |  Branch (312:5): [True: 206, False: 72.6k]
  ------------------
  313|    206|      *cmp_type = CMP_TYPE_EXT32;
  314|    206|      return true;
  315|      0|    }
  316|    254|    case FLOAT_MARKER: {
  ------------------
  |  Branch (316:5): [True: 254, False: 72.5k]
  ------------------
  317|    254|      *cmp_type = CMP_TYPE_FLOAT;
  318|    254|      return true;
  319|      0|    }
  320|    999|    case DOUBLE_MARKER: {
  ------------------
  |  Branch (320:5): [True: 999, False: 71.8k]
  ------------------
  321|    999|      *cmp_type = CMP_TYPE_DOUBLE;
  322|    999|      return true;
  323|      0|    }
  324|  23.8k|    case U8_MARKER: {
  ------------------
  |  Branch (324:5): [True: 23.8k, False: 49.0k]
  ------------------
  325|  23.8k|      *cmp_type = CMP_TYPE_UINT8;
  326|  23.8k|      return true;
  327|      0|    }
  328|  4.24k|    case U16_MARKER: {
  ------------------
  |  Branch (328:5): [True: 4.24k, False: 68.5k]
  ------------------
  329|  4.24k|      *cmp_type = CMP_TYPE_UINT16;
  330|  4.24k|      return true;
  331|      0|    }
  332|  1.83k|    case U32_MARKER: {
  ------------------
  |  Branch (332:5): [True: 1.83k, False: 71.0k]
  ------------------
  333|  1.83k|      *cmp_type = CMP_TYPE_UINT32;
  334|  1.83k|      return true;
  335|      0|    }
  336|    212|    case U64_MARKER: {
  ------------------
  |  Branch (336:5): [True: 212, False: 72.6k]
  ------------------
  337|    212|      *cmp_type = CMP_TYPE_UINT64;
  338|    212|      return true;
  339|      0|    }
  340|  1.15k|    case S8_MARKER: {
  ------------------
  |  Branch (340:5): [True: 1.15k, False: 71.6k]
  ------------------
  341|  1.15k|      *cmp_type = CMP_TYPE_SINT8;
  342|  1.15k|      return true;
  343|      0|    }
  344|    426|    case S16_MARKER: {
  ------------------
  |  Branch (344:5): [True: 426, False: 72.4k]
  ------------------
  345|    426|      *cmp_type = CMP_TYPE_SINT16;
  346|    426|      return true;
  347|      0|    }
  348|  2.63k|    case S32_MARKER: {
  ------------------
  |  Branch (348:5): [True: 2.63k, False: 70.2k]
  ------------------
  349|  2.63k|      *cmp_type = CMP_TYPE_SINT32;
  350|  2.63k|      return true;
  351|      0|    }
  352|    262|    case S64_MARKER: {
  ------------------
  |  Branch (352:5): [True: 262, False: 72.5k]
  ------------------
  353|    262|      *cmp_type = CMP_TYPE_SINT64;
  354|    262|      return true;
  355|      0|    }
  356|    195|    case FIXEXT1_MARKER: {
  ------------------
  |  Branch (356:5): [True: 195, False: 72.6k]
  ------------------
  357|    195|      *cmp_type = CMP_TYPE_FIXEXT1;
  358|    195|      return true;
  359|      0|    }
  360|    275|    case FIXEXT2_MARKER: {
  ------------------
  |  Branch (360:5): [True: 275, False: 72.5k]
  ------------------
  361|    275|      *cmp_type = CMP_TYPE_FIXEXT2;
  362|    275|      return true;
  363|      0|    }
  364|  1.45k|    case FIXEXT4_MARKER: {
  ------------------
  |  Branch (364:5): [True: 1.45k, False: 71.3k]
  ------------------
  365|  1.45k|      *cmp_type = CMP_TYPE_FIXEXT4;
  366|  1.45k|      return true;
  367|      0|    }
  368|    188|    case FIXEXT8_MARKER: {
  ------------------
  |  Branch (368:5): [True: 188, False: 72.6k]
  ------------------
  369|    188|      *cmp_type = CMP_TYPE_FIXEXT8;
  370|    188|      return true;
  371|      0|    }
  372|    234|    case FIXEXT16_MARKER: {
  ------------------
  |  Branch (372:5): [True: 234, False: 72.6k]
  ------------------
  373|    234|      *cmp_type = CMP_TYPE_FIXEXT16;
  374|    234|      return true;
  375|      0|    }
  376|    251|    case STR8_MARKER: {
  ------------------
  |  Branch (376:5): [True: 251, False: 72.5k]
  ------------------
  377|    251|      *cmp_type = CMP_TYPE_STR8;
  378|    251|      return true;
  379|      0|    }
  380|    161|    case STR16_MARKER: {
  ------------------
  |  Branch (380:5): [True: 161, False: 72.6k]
  ------------------
  381|    161|      *cmp_type = CMP_TYPE_STR16;
  382|    161|      return true;
  383|      0|    }
  384|    194|    case STR32_MARKER: {
  ------------------
  |  Branch (384:5): [True: 194, False: 72.6k]
  ------------------
  385|    194|      *cmp_type = CMP_TYPE_STR32;
  386|    194|      return true;
  387|      0|    }
  388|    532|    case ARRAY16_MARKER: {
  ------------------
  |  Branch (388:5): [True: 532, False: 72.3k]
  ------------------
  389|    532|      *cmp_type = CMP_TYPE_ARRAY16;
  390|    532|      return true;
  391|      0|    }
  392|    190|    case ARRAY32_MARKER: {
  ------------------
  |  Branch (392:5): [True: 190, False: 72.6k]
  ------------------
  393|    190|      *cmp_type = CMP_TYPE_ARRAY32;
  394|    190|      return true;
  395|      0|    }
  396|    344|    case MAP16_MARKER: {
  ------------------
  |  Branch (396:5): [True: 344, False: 72.5k]
  ------------------
  397|    344|      *cmp_type = CMP_TYPE_MAP16;
  398|    344|      return true;
  399|      0|    }
  400|    218|    case MAP32_MARKER: {
  ------------------
  |  Branch (400:5): [True: 218, False: 72.6k]
  ------------------
  401|    218|      *cmp_type = CMP_TYPE_MAP32;
  402|    218|      return true;
  403|      0|    }
  404|    302|    default: {
  ------------------
  |  Branch (404:5): [True: 302, False: 72.5k]
  ------------------
  405|    302|      return false;
  406|      0|    }
  407|  72.8k|  }
  408|  72.8k|}
cmp.c:read_obj_data:
  618|   219k|                                          cmp_object_t *obj) {
  619|   219k|  switch (obj->type) {
  620|  61.0k|    case CMP_TYPE_POSITIVE_FIXNUM: {
  ------------------
  |  Branch (620:5): [True: 61.0k, False: 158k]
  ------------------
  621|  61.0k|      obj->as.u8 = type_marker;
  622|  61.0k|      return true;
  623|      0|    }
  624|  3.61k|    case CMP_TYPE_NEGATIVE_FIXNUM: {
  ------------------
  |  Branch (624:5): [True: 3.61k, False: 216k]
  ------------------
  625|  3.61k|      obj->as.s8 = (int8_t)type_marker;
  626|  3.61k|      return true;
  627|      0|    }
  628|    632|    case CMP_TYPE_NIL: {
  ------------------
  |  Branch (628:5): [True: 632, False: 219k]
  ------------------
  629|    632|      obj->as.u8 = 0;
  630|    632|      return true;
  631|      0|    }
  632|  21.2k|    case CMP_TYPE_BOOLEAN: {
  ------------------
  |  Branch (632:5): [True: 21.2k, False: 198k]
  ------------------
  633|  21.2k|      switch (type_marker) {
  634|    629|        case TRUE_MARKER: {
  ------------------
  |  Branch (634:9): [True: 629, False: 20.6k]
  ------------------
  635|    629|          obj->as.boolean = true;
  636|    629|          return true;
  637|      0|        }
  638|  20.6k|        case FALSE_MARKER: {
  ------------------
  |  Branch (638:9): [True: 20.6k, False: 629]
  ------------------
  639|  20.6k|          obj->as.boolean = false;
  640|  20.6k|          return true;
  641|      0|        }
  642|      0|        default:
  ------------------
  |  Branch (642:9): [True: 0, False: 21.2k]
  ------------------
  643|      0|          break;
  644|  21.2k|      }
  645|      0|      ctx->error = CMP_ERROR_INTERNAL;
  646|      0|      return false;
  647|  21.2k|    }
  648|  23.8k|    case CMP_TYPE_UINT8: {
  ------------------
  |  Branch (648:5): [True: 23.8k, False: 195k]
  ------------------
  649|  23.8k|      if (!ctx->read(ctx, &obj->as.u8, sizeof(uint8_t))) {
  ------------------
  |  Branch (649:11): [True: 10, False: 23.8k]
  ------------------
  650|     10|        ctx->error = CMP_ERROR_DATA_READING;
  651|     10|        return false;
  652|     10|      }
  653|  23.8k|      return true;
  654|  23.8k|    }
  655|  4.24k|    case CMP_TYPE_UINT16: {
  ------------------
  |  Branch (655:5): [True: 4.24k, False: 215k]
  ------------------
  656|  4.24k|      if (!ctx->read(ctx, &obj->as.u16, sizeof(uint16_t))) {
  ------------------
  |  Branch (656:11): [True: 1.63k, False: 2.60k]
  ------------------
  657|  1.63k|        ctx->error = CMP_ERROR_DATA_READING;
  658|  1.63k|        return false;
  659|  1.63k|      }
  660|  2.60k|      obj->as.u16 = be16(obj->as.u16);
  661|  2.60k|      return true;
  662|  4.24k|    }
  663|  1.83k|    case CMP_TYPE_UINT32: {
  ------------------
  |  Branch (663:5): [True: 1.83k, False: 217k]
  ------------------
  664|  1.83k|      if (!ctx->read(ctx, &obj->as.u32, sizeof(uint32_t))) {
  ------------------
  |  Branch (664:11): [True: 345, False: 1.48k]
  ------------------
  665|    345|        ctx->error = CMP_ERROR_DATA_READING;
  666|    345|        return false;
  667|    345|      }
  668|  1.48k|      obj->as.u32 = be32(obj->as.u32);
  669|  1.48k|      return true;
  670|  1.83k|    }
  671|    212|    case CMP_TYPE_UINT64: {
  ------------------
  |  Branch (671:5): [True: 212, False: 219k]
  ------------------
  672|    212|      if (!ctx->read(ctx, &obj->as.u64, sizeof(uint64_t))) {
  ------------------
  |  Branch (672:11): [True: 72, False: 140]
  ------------------
  673|     72|        ctx->error = CMP_ERROR_DATA_READING;
  674|     72|        return false;
  675|     72|      }
  676|    140|      obj->as.u64 = be64(obj->as.u64);
  677|    140|      return true;
  678|    212|    }
  679|  1.15k|    case CMP_TYPE_SINT8: {
  ------------------
  |  Branch (679:5): [True: 1.15k, False: 218k]
  ------------------
  680|  1.15k|      if (!ctx->read(ctx, &obj->as.s8, sizeof(int8_t))) {
  ------------------
  |  Branch (680:11): [True: 18, False: 1.13k]
  ------------------
  681|     18|        ctx->error = CMP_ERROR_DATA_READING;
  682|     18|        return false;
  683|     18|      }
  684|  1.13k|      return true;
  685|  1.15k|    }
  686|    426|    case CMP_TYPE_SINT16: {
  ------------------
  |  Branch (686:5): [True: 426, False: 219k]
  ------------------
  687|    426|      if (!ctx->read(ctx, &obj->as.s16, sizeof(int16_t))) {
  ------------------
  |  Branch (687:11): [True: 34, False: 392]
  ------------------
  688|     34|        ctx->error = CMP_ERROR_DATA_READING;
  689|     34|        return false;
  690|     34|      }
  691|    392|      obj->as.s16 = sbe16(obj->as.s16);
  692|    392|      return true;
  693|    426|    }
  694|  2.63k|    case CMP_TYPE_SINT32: {
  ------------------
  |  Branch (694:5): [True: 2.63k, False: 217k]
  ------------------
  695|  2.63k|      if (!ctx->read(ctx, &obj->as.s32, sizeof(int32_t))) {
  ------------------
  |  Branch (695:11): [True: 37, False: 2.59k]
  ------------------
  696|     37|        ctx->error = CMP_ERROR_DATA_READING;
  697|     37|        return false;
  698|     37|      }
  699|  2.59k|      obj->as.s32 = sbe32(obj->as.s32);
  700|  2.59k|      return true;
  701|  2.63k|    }
  702|    262|    case CMP_TYPE_SINT64: {
  ------------------
  |  Branch (702:5): [True: 262, False: 219k]
  ------------------
  703|    262|      if (!ctx->read(ctx, &obj->as.s64, sizeof(int64_t))) {
  ------------------
  |  Branch (703:11): [True: 64, False: 198]
  ------------------
  704|     64|        ctx->error = CMP_ERROR_DATA_READING;
  705|     64|        return false;
  706|     64|      }
  707|    198|      obj->as.s64 = sbe64(obj->as.s64);
  708|    198|      return true;
  709|    262|    }
  710|    254|    case CMP_TYPE_FLOAT: {
  ------------------
  |  Branch (710:5): [True: 254, False: 219k]
  ------------------
  711|       |#ifndef CMP_NO_FLOAT
  712|       |      char bytes[4];
  713|       |
  714|       |      if (!ctx->read(ctx, bytes, 4)) {
  715|       |        ctx->error = CMP_ERROR_DATA_READING;
  716|       |        return false;
  717|       |      }
  718|       |      obj->as.flt = decode_befloat(bytes);
  719|       |      return true;
  720|       |#else /* CMP_NO_FLOAT */
  721|    254|      ctx->error = CMP_ERROR_DISABLED_FLOATING_POINT;
  722|    254|      return false;
  723|    262|#endif /* CMP_NO_FLOAT */
  724|    262|    }
  725|    999|    case CMP_TYPE_DOUBLE: {
  ------------------
  |  Branch (725:5): [True: 999, False: 218k]
  ------------------
  726|       |#ifndef CMP_NO_FLOAT
  727|       |      char bytes[8];
  728|       |
  729|       |      if (!ctx->read(ctx, bytes, 8)) {
  730|       |        ctx->error = CMP_ERROR_DATA_READING;
  731|       |        return false;
  732|       |      }
  733|       |      obj->as.dbl = decode_bedouble(bytes);
  734|       |      return true;
  735|       |#else /* CMP_NO_FLOAT */
  736|    999|      ctx->error = CMP_ERROR_DISABLED_FLOATING_POINT;
  737|    999|      return false;
  738|    262|#endif /* CMP_NO_FLOAT */
  739|    262|    }
  740|  6.26k|    case CMP_TYPE_BIN8:
  ------------------
  |  Branch (740:5): [True: 6.26k, False: 213k]
  ------------------
  741|  6.77k|    case CMP_TYPE_BIN16:
  ------------------
  |  Branch (741:5): [True: 508, False: 219k]
  ------------------
  742|  9.79k|    case CMP_TYPE_BIN32:
  ------------------
  |  Branch (742:5): [True: 3.02k, False: 216k]
  ------------------
  743|  9.79k|      return read_type_size(ctx, type_marker, obj->type, &obj->as.bin_size);
  744|  1.12k|    case CMP_TYPE_FIXSTR:
  ------------------
  |  Branch (744:5): [True: 1.12k, False: 218k]
  ------------------
  745|  1.37k|    case CMP_TYPE_STR8:
  ------------------
  |  Branch (745:5): [True: 251, False: 219k]
  ------------------
  746|  1.53k|    case CMP_TYPE_STR16:
  ------------------
  |  Branch (746:5): [True: 161, False: 219k]
  ------------------
  747|  1.73k|    case CMP_TYPE_STR32:
  ------------------
  |  Branch (747:5): [True: 194, False: 219k]
  ------------------
  748|  1.73k|      return read_type_size(ctx, type_marker, obj->type, &obj->as.str_size);
  749|  80.8k|    case CMP_TYPE_FIXARRAY:
  ------------------
  |  Branch (749:5): [True: 80.8k, False: 138k]
  ------------------
  750|  81.3k|    case CMP_TYPE_ARRAY16:
  ------------------
  |  Branch (750:5): [True: 532, False: 219k]
  ------------------
  751|  81.5k|    case CMP_TYPE_ARRAY32:
  ------------------
  |  Branch (751:5): [True: 190, False: 219k]
  ------------------
  752|  81.5k|      return read_type_size(ctx, type_marker, obj->type, &obj->as.array_size);
  753|    519|    case CMP_TYPE_FIXMAP:
  ------------------
  |  Branch (753:5): [True: 519, False: 219k]
  ------------------
  754|    863|    case CMP_TYPE_MAP16:
  ------------------
  |  Branch (754:5): [True: 344, False: 219k]
  ------------------
  755|  1.08k|    case CMP_TYPE_MAP32:
  ------------------
  |  Branch (755:5): [True: 218, False: 219k]
  ------------------
  756|  1.08k|      return read_type_size(ctx, type_marker, obj->type, &obj->as.map_size);
  757|    195|    case CMP_TYPE_FIXEXT1: {
  ------------------
  |  Branch (757:5): [True: 195, False: 219k]
  ------------------
  758|    195|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (758:11): [True: 49, False: 146]
  ------------------
  759|     49|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  760|     49|        return false;
  761|     49|      }
  762|    146|      obj->as.ext.size = 1;
  763|    146|      return true;
  764|    195|    }
  765|    275|    case CMP_TYPE_FIXEXT2: {
  ------------------
  |  Branch (765:5): [True: 275, False: 219k]
  ------------------
  766|    275|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (766:11): [True: 18, False: 257]
  ------------------
  767|     18|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  768|     18|        return false;
  769|     18|      }
  770|    257|      obj->as.ext.size = 2;
  771|    257|      return true;
  772|    275|    }
  773|  1.45k|    case CMP_TYPE_FIXEXT4: {
  ------------------
  |  Branch (773:5): [True: 1.45k, False: 218k]
  ------------------
  774|  1.45k|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (774:11): [True: 20, False: 1.43k]
  ------------------
  775|     20|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  776|     20|        return false;
  777|     20|      }
  778|  1.43k|      obj->as.ext.size = 4;
  779|  1.43k|      return true;
  780|  1.45k|    }
  781|    188|    case CMP_TYPE_FIXEXT8: {
  ------------------
  |  Branch (781:5): [True: 188, False: 219k]
  ------------------
  782|    188|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (782:11): [True: 18, False: 170]
  ------------------
  783|     18|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  784|     18|        return false;
  785|     18|      }
  786|    170|      obj->as.ext.size = 8;
  787|    170|      return true;
  788|    188|    }
  789|    234|    case CMP_TYPE_FIXEXT16: {
  ------------------
  |  Branch (789:5): [True: 234, False: 219k]
  ------------------
  790|    234|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (790:11): [True: 11, False: 223]
  ------------------
  791|     11|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  792|     11|        return false;
  793|     11|      }
  794|    223|      obj->as.ext.size = 16;
  795|    223|      return true;
  796|    234|    }
  797|    286|    case CMP_TYPE_EXT8: {
  ------------------
  |  Branch (797:5): [True: 286, False: 219k]
  ------------------
  798|    286|      if (!read_type_size(ctx, type_marker, obj->type, &obj->as.ext.size)) {
  ------------------
  |  Branch (798:11): [True: 82, False: 204]
  ------------------
  799|     82|        return false;
  800|     82|      }
  801|    204|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (801:11): [True: 19, False: 185]
  ------------------
  802|     19|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  803|     19|        return false;
  804|     19|      }
  805|    185|      return true;
  806|    204|    }
  807|    258|    case CMP_TYPE_EXT16: {
  ------------------
  |  Branch (807:5): [True: 258, False: 219k]
  ------------------
  808|    258|      if (!read_type_size(ctx, type_marker, obj->type, &obj->as.ext.size)) {
  ------------------
  |  Branch (808:11): [True: 40, False: 218]
  ------------------
  809|     40|        return false;
  810|     40|      }
  811|    218|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (811:11): [True: 80, False: 138]
  ------------------
  812|     80|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  813|     80|        return false;
  814|     80|      }
  815|    138|      return true;
  816|    218|    }
  817|    206|    case CMP_TYPE_EXT32: {
  ------------------
  |  Branch (817:5): [True: 206, False: 219k]
  ------------------
  818|    206|      if (!read_type_size(ctx, type_marker, obj->type, &obj->as.ext.size)) {
  ------------------
  |  Branch (818:11): [True: 16, False: 190]
  ------------------
  819|     16|        return false;
  820|     16|      }
  821|    190|      if (!ctx->read(ctx, &obj->as.ext.type, sizeof(int8_t))) {
  ------------------
  |  Branch (821:11): [True: 20, False: 170]
  ------------------
  822|     20|        ctx->error = CMP_ERROR_EXT_TYPE_READING;
  823|     20|        return false;
  824|     20|      }
  825|    170|      return true;
  826|    190|    }
  827|      0|    default:
  ------------------
  |  Branch (827:5): [True: 0, False: 219k]
  ------------------
  828|      0|      break;
  829|   219k|  }
  830|       |
  831|      0|  ctx->error = CMP_ERROR_INVALID_TYPE;
  832|      0|  return false;
  833|   219k|}
cmp.c:read_type_size:
  412|  94.9k|                                           uint32_t *size) {
  413|  94.9k|  uint8_t u8temp = 0;
  414|  94.9k|  uint16_t u16temp = 0;
  415|  94.9k|  uint32_t u32temp = 0;
  416|       |
  417|  94.9k|  switch (cmp_type) {
  418|      0|    case CMP_TYPE_POSITIVE_FIXNUM: {
  ------------------
  |  Branch (418:5): [True: 0, False: 94.9k]
  ------------------
  419|      0|      *size = 0;
  420|      0|      return true;
  421|      0|    }
  422|    519|    case CMP_TYPE_FIXMAP: {
  ------------------
  |  Branch (422:5): [True: 519, False: 94.3k]
  ------------------
  423|    519|      *size = type_marker & FIXMAP_SIZE;
  424|    519|      return true;
  425|      0|    }
  426|  80.8k|    case CMP_TYPE_FIXARRAY: {
  ------------------
  |  Branch (426:5): [True: 80.8k, False: 14.0k]
  ------------------
  427|  80.8k|      *size = type_marker & FIXARRAY_SIZE;
  428|  80.8k|      return true;
  429|      0|    }
  430|  1.12k|    case CMP_TYPE_FIXSTR: {
  ------------------
  |  Branch (430:5): [True: 1.12k, False: 93.7k]
  ------------------
  431|  1.12k|      *size = type_marker & FIXSTR_SIZE;
  432|  1.12k|      return true;
  433|      0|    }
  434|      0|    case CMP_TYPE_NIL: {
  ------------------
  |  Branch (434:5): [True: 0, False: 94.9k]
  ------------------
  435|      0|      *size = 0;
  436|      0|      return true;
  437|      0|    }
  438|      0|    case CMP_TYPE_BOOLEAN: {
  ------------------
  |  Branch (438:5): [True: 0, False: 94.9k]
  ------------------
  439|      0|      *size = 0;
  440|      0|      return true;
  441|      0|    }
  442|  6.26k|    case CMP_TYPE_BIN8: {
  ------------------
  |  Branch (442:5): [True: 6.26k, False: 88.6k]
  ------------------
  443|  6.26k|      if (!ctx->read(ctx, &u8temp, sizeof(uint8_t))) {
  ------------------
  |  Branch (443:11): [True: 11, False: 6.25k]
  ------------------
  444|     11|        ctx->error = CMP_ERROR_LENGTH_READING;
  445|     11|        return false;
  446|     11|      }
  447|  6.25k|      *size = u8temp;
  448|  6.25k|      return true;
  449|  6.26k|    }
  450|    508|    case CMP_TYPE_BIN16: {
  ------------------
  |  Branch (450:5): [True: 508, False: 94.4k]
  ------------------
  451|    508|      if (!ctx->read(ctx, &u16temp, sizeof(uint16_t))) {
  ------------------
  |  Branch (451:11): [True: 20, False: 488]
  ------------------
  452|     20|        ctx->error = CMP_ERROR_LENGTH_READING;
  453|     20|        return false;
  454|     20|      }
  455|    488|      *size = be16(u16temp);
  456|    488|      return true;
  457|    508|    }
  458|  3.02k|    case CMP_TYPE_BIN32: {
  ------------------
  |  Branch (458:5): [True: 3.02k, False: 91.8k]
  ------------------
  459|  3.02k|      if (!ctx->read(ctx, &u32temp, sizeof(uint32_t))) {
  ------------------
  |  Branch (459:11): [True: 698, False: 2.32k]
  ------------------
  460|    698|        ctx->error = CMP_ERROR_LENGTH_READING;
  461|    698|        return false;
  462|    698|      }
  463|  2.32k|      *size = be32(u32temp);
  464|  2.32k|      return true;
  465|  3.02k|    }
  466|    286|    case CMP_TYPE_EXT8: {
  ------------------
  |  Branch (466:5): [True: 286, False: 94.6k]
  ------------------
  467|    286|      if (!ctx->read(ctx, &u8temp, sizeof(uint8_t))) {
  ------------------
  |  Branch (467:11): [True: 82, False: 204]
  ------------------
  468|     82|        ctx->error = CMP_ERROR_LENGTH_READING;
  469|     82|        return false;
  470|     82|      }
  471|    204|      *size = u8temp;
  472|    204|      return true;
  473|    286|    }
  474|    258|    case CMP_TYPE_EXT16: {
  ------------------
  |  Branch (474:5): [True: 258, False: 94.6k]
  ------------------
  475|    258|      if (!ctx->read(ctx, &u16temp, sizeof(uint16_t))) {
  ------------------
  |  Branch (475:11): [True: 40, False: 218]
  ------------------
  476|     40|        ctx->error = CMP_ERROR_LENGTH_READING;
  477|     40|        return false;
  478|     40|      }
  479|    218|      *size = be16(u16temp);
  480|    218|      return true;
  481|    258|    }
  482|    206|    case CMP_TYPE_EXT32: {
  ------------------
  |  Branch (482:5): [True: 206, False: 94.7k]
  ------------------
  483|    206|      if (!ctx->read(ctx, &u32temp, sizeof(uint32_t))) {
  ------------------
  |  Branch (483:11): [True: 16, False: 190]
  ------------------
  484|     16|        ctx->error = CMP_ERROR_LENGTH_READING;
  485|     16|        return false;
  486|     16|      }
  487|    190|      *size = be32(u32temp);
  488|    190|      return true;
  489|    206|    }
  490|      0|    case CMP_TYPE_FLOAT: {
  ------------------
  |  Branch (490:5): [True: 0, False: 94.9k]
  ------------------
  491|      0|      *size = 4;
  492|      0|      return true;
  493|    206|    }
  494|      0|    case CMP_TYPE_DOUBLE: {
  ------------------
  |  Branch (494:5): [True: 0, False: 94.9k]
  ------------------
  495|      0|      *size = 8;
  496|      0|      return true;
  497|    206|    }
  498|      0|    case CMP_TYPE_UINT8: {
  ------------------
  |  Branch (498:5): [True: 0, False: 94.9k]
  ------------------
  499|      0|      *size = 1;
  500|      0|      return true;
  501|    206|    }
  502|      0|    case CMP_TYPE_UINT16: {
  ------------------
  |  Branch (502:5): [True: 0, False: 94.9k]
  ------------------
  503|      0|      *size = 2;
  504|      0|      return true;
  505|    206|    }
  506|      0|    case CMP_TYPE_UINT32: {
  ------------------
  |  Branch (506:5): [True: 0, False: 94.9k]
  ------------------
  507|      0|      *size = 4;
  508|      0|      return true;
  509|    206|    }
  510|      0|    case CMP_TYPE_UINT64: {
  ------------------
  |  Branch (510:5): [True: 0, False: 94.9k]
  ------------------
  511|      0|      *size = 8;
  512|      0|      return true;
  513|    206|    }
  514|      0|    case CMP_TYPE_SINT8: {
  ------------------
  |  Branch (514:5): [True: 0, False: 94.9k]
  ------------------
  515|      0|      *size = 1;
  516|      0|      return true;
  517|    206|    }
  518|      0|    case CMP_TYPE_SINT16: {
  ------------------
  |  Branch (518:5): [True: 0, False: 94.9k]
  ------------------
  519|      0|      *size = 2;
  520|      0|      return true;
  521|    206|    }
  522|      0|    case CMP_TYPE_SINT32: {
  ------------------
  |  Branch (522:5): [True: 0, False: 94.9k]
  ------------------
  523|      0|      *size = 4;
  524|      0|      return true;
  525|    206|    }
  526|      0|    case CMP_TYPE_SINT64: {
  ------------------
  |  Branch (526:5): [True: 0, False: 94.9k]
  ------------------
  527|      0|      *size = 8;
  528|      0|      return true;
  529|    206|    }
  530|      0|    case CMP_TYPE_FIXEXT1: {
  ------------------
  |  Branch (530:5): [True: 0, False: 94.9k]
  ------------------
  531|      0|      *size = 1;
  532|      0|      return true;
  533|    206|    }
  534|      0|    case CMP_TYPE_FIXEXT2: {
  ------------------
  |  Branch (534:5): [True: 0, False: 94.9k]
  ------------------
  535|      0|      *size = 2;
  536|      0|      return true;
  537|    206|    }
  538|      0|    case CMP_TYPE_FIXEXT4: {
  ------------------
  |  Branch (538:5): [True: 0, False: 94.9k]
  ------------------
  539|      0|      *size = 4;
  540|      0|      return true;
  541|    206|    }
  542|      0|    case CMP_TYPE_FIXEXT8: {
  ------------------
  |  Branch (542:5): [True: 0, False: 94.9k]
  ------------------
  543|      0|      *size = 8;
  544|      0|      return true;
  545|    206|    }
  546|      0|    case CMP_TYPE_FIXEXT16: {
  ------------------
  |  Branch (546:5): [True: 0, False: 94.9k]
  ------------------
  547|      0|      *size = 16;
  548|      0|      return true;
  549|    206|    }
  550|    251|    case CMP_TYPE_STR8: {
  ------------------
  |  Branch (550:5): [True: 251, False: 94.6k]
  ------------------
  551|    251|      if (!ctx->read(ctx, &u8temp, sizeof(uint8_t))) {
  ------------------
  |  Branch (551:11): [True: 19, False: 232]
  ------------------
  552|     19|        ctx->error = CMP_ERROR_DATA_READING;
  553|     19|        return false;
  554|     19|      }
  555|    232|      *size = u8temp;
  556|    232|      return true;
  557|    251|    }
  558|    161|    case CMP_TYPE_STR16: {
  ------------------
  |  Branch (558:5): [True: 161, False: 94.7k]
  ------------------
  559|    161|      if (!ctx->read(ctx, &u16temp, sizeof(uint16_t))) {
  ------------------
  |  Branch (559:11): [True: 11, False: 150]
  ------------------
  560|     11|        ctx->error = CMP_ERROR_DATA_READING;
  561|     11|        return false;
  562|     11|      }
  563|    150|      *size = be16(u16temp);
  564|    150|      return true;
  565|    161|    }
  566|    194|    case CMP_TYPE_STR32: {
  ------------------
  |  Branch (566:5): [True: 194, False: 94.7k]
  ------------------
  567|    194|      if (!ctx->read(ctx, &u32temp, sizeof(uint32_t))) {
  ------------------
  |  Branch (567:11): [True: 19, False: 175]
  ------------------
  568|     19|        ctx->error = CMP_ERROR_DATA_READING;
  569|     19|        return false;
  570|     19|      }
  571|    175|      *size = be32(u32temp);
  572|    175|      return true;
  573|    194|    }
  574|    532|    case CMP_TYPE_ARRAY16: {
  ------------------
  |  Branch (574:5): [True: 532, False: 94.3k]
  ------------------
  575|    532|      if (!ctx->read(ctx, &u16temp, sizeof(uint16_t))) {
  ------------------
  |  Branch (575:11): [True: 132, False: 400]
  ------------------
  576|    132|        ctx->error = CMP_ERROR_DATA_READING;
  577|    132|        return false;
  578|    132|      }
  579|    400|      *size = be16(u16temp);
  580|    400|      return true;
  581|    532|    }
  582|    190|    case CMP_TYPE_ARRAY32: {
  ------------------
  |  Branch (582:5): [True: 190, False: 94.7k]
  ------------------
  583|    190|      if (!ctx->read(ctx, &u32temp, sizeof(uint32_t))) {
  ------------------
  |  Branch (583:11): [True: 54, False: 136]
  ------------------
  584|     54|        ctx->error = CMP_ERROR_DATA_READING;
  585|     54|        return false;
  586|     54|      }
  587|    136|      *size = be32(u32temp);
  588|    136|      return true;
  589|    190|    }
  590|    344|    case CMP_TYPE_MAP16: {
  ------------------
  |  Branch (590:5): [True: 344, False: 94.5k]
  ------------------
  591|    344|      if (!ctx->read(ctx, &u16temp, sizeof(uint16_t))) {
  ------------------
  |  Branch (591:11): [True: 36, False: 308]
  ------------------
  592|     36|        ctx->error = CMP_ERROR_DATA_READING;
  593|     36|        return false;
  594|     36|      }
  595|    308|      *size = be16(u16temp);
  596|    308|      return true;
  597|    344|    }
  598|    218|    case CMP_TYPE_MAP32: {
  ------------------
  |  Branch (598:5): [True: 218, False: 94.7k]
  ------------------
  599|    218|      if (!ctx->read(ctx, &u32temp, sizeof(uint32_t))) {
  ------------------
  |  Branch (599:11): [True: 16, False: 202]
  ------------------
  600|     16|        ctx->error = CMP_ERROR_DATA_READING;
  601|     16|        return false;
  602|     16|      }
  603|    202|      *size = be32(u32temp);
  604|    202|      return true;
  605|    218|    }
  606|      0|    case CMP_TYPE_NEGATIVE_FIXNUM: {
  ------------------
  |  Branch (606:5): [True: 0, False: 94.9k]
  ------------------
  607|      0|      *size = 0;
  608|      0|      return true;
  609|    218|    }
  610|      0|    default: {
  ------------------
  |  Branch (610:5): [True: 0, False: 94.9k]
  ------------------
  611|      0|      ctx->error = CMP_ERROR_INVALID_TYPE;
  612|      0|      return false;
  613|    218|    }
  614|  94.9k|  }
  615|  94.9k|}

dht_get_self_public_key:
  147|  7.91k|{
  148|  7.91k|    return dht->self_public_key;
  149|  7.91k|}
dht_get_self_secret_key:
  151|  7.90k|{
  152|  7.90k|    return dht->self_secret_key;
  153|  7.90k|}
dht_get_net:
  165|  33.5k|{
  166|  33.5k|    return dht->net;
  167|  33.5k|}
id_closest:
  219|    148|{
  220|  4.88k|    for (size_t i = 0; i < CRYPTO_PUBLIC_KEY_SIZE; ++i) {
  ------------------
  |  |   43|  4.88k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  |  Branch (220:24): [True: 4.73k, False: 148]
  ------------------
  221|  4.73k|        const uint8_t distance1 = pk[i] ^ pk1[i];
  222|  4.73k|        const uint8_t distance2 = pk[i] ^ pk2[i];
  223|       |
  224|  4.73k|        if (distance1 < distance2) {
  ------------------
  |  Branch (224:13): [True: 0, False: 4.73k]
  ------------------
  225|      0|            return 1;
  226|      0|        }
  227|       |
  228|  4.73k|        if (distance1 > distance2) {
  ------------------
  |  Branch (228:13): [True: 0, False: 4.73k]
  ------------------
  229|      0|            return 2;
  230|      0|        }
  231|  4.73k|    }
  232|       |
  233|    148|    return 0;
  234|    148|}
packed_node_size:
  353|  17.9k|{
  354|  17.9k|    if (net_family_is_ipv4(ip_family) || net_family_is_tcp_ipv4(ip_family)) {
  ------------------
  |  Branch (354:9): [True: 4.48k, False: 13.4k]
  |  Branch (354:42): [True: 0, False: 13.4k]
  ------------------
  355|  4.48k|        return PACKED_NODE_SIZE_IP4;
  ------------------
  |  |   71|  4.48k|#define PACKED_NODE_SIZE_IP4 (1 + SIZE_IP4 + sizeof(uint16_t) + CRYPTO_PUBLIC_KEY_SIZE)
  |  |  ------------------
  |  |  |  |  185|  4.48k|#define SIZE_IP4 4
  |  |  ------------------
  |  |               #define PACKED_NODE_SIZE_IP4 (1 + SIZE_IP4 + sizeof(uint16_t) + CRYPTO_PUBLIC_KEY_SIZE)
  |  |  ------------------
  |  |  |  |   43|  4.48k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  356|  4.48k|    }
  357|       |
  358|  13.4k|    if (net_family_is_ipv6(ip_family) || net_family_is_tcp_ipv6(ip_family)) {
  ------------------
  |  Branch (358:9): [True: 4.48k, False: 8.96k]
  |  Branch (358:42): [True: 8.96k, False: 0]
  ------------------
  359|  13.4k|        return PACKED_NODE_SIZE_IP6;
  ------------------
  |  |   72|  13.4k|#define PACKED_NODE_SIZE_IP6 (1 + SIZE_IP6 + sizeof(uint16_t) + CRYPTO_PUBLIC_KEY_SIZE)
  |  |  ------------------
  |  |  |  |  186|  13.4k|#define SIZE_IP6 16
  |  |  ------------------
  |  |               #define PACKED_NODE_SIZE_IP6 (1 + SIZE_IP6 + sizeof(uint16_t) + CRYPTO_PUBLIC_KEY_SIZE)
  |  |  ------------------
  |  |  |  |   43|  13.4k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  360|  13.4k|    }
  361|       |
  362|      0|    return -1;
  363|  13.4k|}
pack_nodes:
  413|  5.08k|{
  414|  5.08k|    const uint32_t size = bin_pack_obj_array_b_size(bin_pack_node_handler, nodes, number, logger);
  415|  5.08k|    if (!bin_pack_obj_array_b(bin_pack_node_handler, nodes, number, logger, data, length)) {
  ------------------
  |  Branch (415:9): [True: 0, False: 5.08k]
  ------------------
  416|      0|        return -1;
  417|      0|    }
  418|  5.08k|    return size;
  419|  5.08k|}
unpack_nodes:
  423|  2.11k|{
  424|  2.11k|    uint32_t num = 0;
  425|  2.11k|    uint32_t len_processed = 0;
  426|       |
  427|  13.8k|    while (num < max_num_nodes && len_processed < length) {
  ------------------
  |  Branch (427:12): [True: 13.3k, False: 497]
  |  Branch (427:35): [True: 12.8k, False: 542]
  ------------------
  428|  12.8k|        const int ipp_size = unpack_ip_port(&nodes[num].ip_port, data + len_processed, length - len_processed, tcp_enabled);
  429|       |
  430|  12.8k|        if (ipp_size == -1) {
  ------------------
  |  Branch (430:13): [True: 980, False: 11.8k]
  ------------------
  431|    980|            break;
  432|    980|        }
  433|       |
  434|  11.8k|        len_processed += ipp_size;
  435|       |
  436|  11.8k|        if (len_processed + CRYPTO_PUBLIC_KEY_SIZE > length) {
  ------------------
  |  |   43|  11.8k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  |  Branch (436:13): [True: 92, False: 11.7k]
  ------------------
  437|     92|            return -1;
  438|     92|        }
  439|       |
  440|  11.7k|        memcpy(nodes[num].public_key, data + len_processed, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|  11.7k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  441|  11.7k|        len_processed += CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|  11.7k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  442|  11.7k|        ++num;
  443|       |
  444|  11.7k|#ifndef NDEBUG
  445|  11.7k|        const uint32_t increment = ipp_size + CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|  11.7k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  446|  11.7k|        assert(increment == PACKED_NODE_SIZE_IP4 || increment == PACKED_NODE_SIZE_IP6);
  447|  11.7k|#endif /* NDEBUG */
  448|  11.7k|    }
  449|       |
  450|  2.01k|    if (num == 0 && max_num_nodes > 0 && length > 0) {
  ------------------
  |  Branch (450:9): [True: 414, False: 1.60k]
  |  Branch (450:21): [True: 414, False: 0]
  |  Branch (450:42): [True: 413, False: 1]
  ------------------
  451|    413|        return -1;
  452|    413|    }
  453|       |
  454|  1.60k|    if (processed_data_len != nullptr) {
  ------------------
  |  |   63|  1.60k|#define nullptr NULL
  ------------------
  |  Branch (454:9): [True: 276, False: 1.33k]
  ------------------
  455|    276|        *processed_data_len = len_processed;
  456|    276|    }
  457|       |
  458|  1.60k|    return num;
  459|  2.01k|}
get_close_nodes:
  733|  3.95k|{
  734|  3.95k|    return get_somewhat_close_nodes(
  735|  3.95k|               dht->cur_time, public_key, nodes_list,
  736|  3.95k|               sa_family, dht->close_clientlist,
  737|  3.95k|               dht->friends_list, dht->num_friends,
  738|  3.95k|               is_lan, want_announce);
  739|  3.95k|}
dht_addfriend:
 1571|  3.95k|{
 1572|  3.95k|    const uint32_t friend_num = index_of_friend_pk(dht->friends_list, dht->num_friends, public_key);
 1573|       |
 1574|  3.95k|    if (friend_num != UINT32_MAX) { /* Is friend already in DHT? */
  ------------------
  |  Branch (1574:9): [True: 0, False: 3.95k]
  ------------------
 1575|      0|        DHT_Friend *const dht_friend = &dht->friends_list[friend_num];
 1576|      0|        const uint32_t tmp_lock_token = dht_friend_lock(dht_friend, ip_callback, data, number);
 1577|       |
 1578|      0|        if (tmp_lock_token == 0) {
  ------------------
  |  Branch (1578:13): [True: 0, False: 0]
  ------------------
 1579|      0|            return -1;
 1580|      0|        }
 1581|       |
 1582|      0|        return 0;
 1583|      0|    }
 1584|       |
 1585|  3.95k|    DHT_Friend *const temp = (DHT_Friend *)mem_vrealloc(dht->mem, dht->friends_list, dht->num_friends + 1, sizeof(DHT_Friend));
 1586|       |
 1587|  3.95k|    if (temp == nullptr) {
  ------------------
  |  |   63|  3.95k|#define nullptr NULL
  ------------------
  |  Branch (1587:9): [True: 0, False: 3.95k]
  ------------------
 1588|      0|        return -1;
 1589|      0|    }
 1590|       |
 1591|  3.95k|    dht->friends_list = temp;
 1592|  3.95k|    DHT_Friend *const dht_friend = &dht->friends_list[dht->num_friends];
 1593|  3.95k|    *dht_friend = empty_dht_friend;
 1594|  3.95k|    memcpy(dht_friend->public_key, public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|  3.95k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 1595|       |
 1596|  3.95k|    dht_friend->nat.nat_ping_id = random_u64(dht->rng);
 1597|  3.95k|    ++dht->num_friends;
 1598|       |
 1599|  3.95k|    *lock_token = dht_friend_lock(dht_friend, ip_callback, data, number);
 1600|  3.95k|    assert(*lock_token != 0); // Friend was newly allocated
 1601|       |
 1602|  3.95k|    dht_friend->num_to_bootstrap = get_close_nodes(dht, dht_friend->public_key, dht_friend->to_bootstrap, net_family_unspec(),
 1603|  3.95k|                                   true, false);
 1604|       |
 1605|  3.95k|    return 0;
 1606|  3.95k|}
cryptopacket_registerhandler:
 2412|  7.90k|{
 2413|  7.90k|    dht->cryptopackethandlers[byte].function = cb;
 2414|  7.90k|    dht->cryptopackethandlers[byte].object = object;
 2415|  7.90k|}
dht_callback_nodes_response:
 2460|  1.49k|{
 2461|  1.49k|    dht->nodes_response_callback = function;
 2462|  1.49k|}
new_dht:
 2489|  1.97k|{
 2490|  1.97k|    if (net == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (2490:9): [True: 0, False: 1.97k]
  ------------------
 2491|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2492|      0|    }
 2493|       |
 2494|  1.97k|    DHT *const dht = (DHT *)mem_alloc(mem, sizeof(DHT));
 2495|       |
 2496|  1.97k|    if (dht == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (2496:9): [True: 0, False: 1.97k]
  ------------------
 2497|      0|        LOGGER_ERROR(log, "failed to allocate DHT struct (%lu bytes)", (unsigned long)sizeof(DHT));
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2498|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2499|      0|    }
 2500|       |
 2501|  1.97k|    dht->ns = ns;
 2502|  1.97k|    dht->mono_time = mono_time;
 2503|  1.97k|    dht->cur_time = mono_time_get(mono_time);
 2504|  1.97k|    dht->log = log;
 2505|  1.97k|    dht->net = net;
 2506|  1.97k|    dht->rng = rng;
 2507|  1.97k|    dht->mem = mem;
 2508|       |
 2509|  1.97k|    dht->hole_punching_enabled = hole_punching_enabled;
 2510|  1.97k|    dht->lan_discovery_enabled = lan_discovery_enabled;
 2511|       |
 2512|  1.97k|    dht->ping = ping_new(mem, mono_time, rng, dht);
 2513|       |
 2514|  1.97k|    if (dht->ping == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (2514:9): [True: 0, False: 1.97k]
  ------------------
 2515|      0|        LOGGER_ERROR(log, "failed to initialise ping");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2516|      0|        kill_dht(dht);
 2517|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2518|      0|    }
 2519|       |
 2520|  1.97k|    networking_registerhandler(dht->net, NET_PACKET_NODES_REQUEST, &handle_nodes_request, dht);
 2521|  1.97k|    networking_registerhandler(dht->net, NET_PACKET_NODES_RESPONSE, &handle_nodes_response, dht);
 2522|  1.97k|    networking_registerhandler(dht->net, NET_PACKET_CRYPTO, &cryptopacket_handle, dht);
 2523|  1.97k|    networking_registerhandler(dht->net, NET_PACKET_LAN_DISCOVERY, &handle_lan_discovery, dht);
 2524|  1.97k|    cryptopacket_registerhandler(dht, CRYPTO_PACKET_NAT_PING, &handle_nat_ping, dht);
  ------------------
  |  |   68|  1.97k|#define CRYPTO_PACKET_NAT_PING      254 // NAT ping crypto packet ID.
  ------------------
 2525|       |
 2526|  1.97k|#ifdef CHECK_ANNOUNCE_NODE
 2527|  1.97k|    networking_registerhandler(dht->net, NET_PACKET_DATA_SEARCH_RESPONSE, &handle_data_search_response, dht);
 2528|  1.97k|#endif /* CHECK_ANNOUNCE_NODE */
 2529|       |
 2530|  1.97k|    crypto_new_keypair(rng, dht->self_public_key, dht->self_secret_key);
 2531|       |
 2532|  1.97k|    dht->shared_keys_recv = shared_key_cache_new(log, mono_time, mem, dht->self_secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   57|  1.97k|#define KEYS_TIMEOUT 600
  ------------------
                  dht->shared_keys_recv = shared_key_cache_new(log, mono_time, mem, dht->self_secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   56|  1.97k|#define MAX_KEYS_PER_SLOT 4
  ------------------
 2533|  1.97k|    dht->shared_keys_sent = shared_key_cache_new(log, mono_time, mem, dht->self_secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   57|  1.97k|#define KEYS_TIMEOUT 600
  ------------------
                  dht->shared_keys_sent = shared_key_cache_new(log, mono_time, mem, dht->self_secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   56|  1.97k|#define MAX_KEYS_PER_SLOT 4
  ------------------
 2534|       |
 2535|  1.97k|    if (dht->shared_keys_recv == nullptr || dht->shared_keys_sent == nullptr) {
  ------------------
  |  |   63|  3.95k|#define nullptr NULL
  ------------------
                  if (dht->shared_keys_recv == nullptr || dht->shared_keys_sent == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (2535:9): [True: 0, False: 1.97k]
  |  Branch (2535:45): [True: 0, False: 1.97k]
  ------------------
 2536|      0|        LOGGER_ERROR(log, "failed to initialise shared key cache");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2537|      0|        kill_dht(dht);
 2538|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2539|      0|    }
 2540|       |
 2541|  1.97k|    dht->dht_ping_array = ping_array_new(mem, DHT_PING_ARRAY_SIZE, PING_TIMEOUT);
  ------------------
  |  |   46|  1.97k|#define DHT_PING_ARRAY_SIZE 512
  ------------------
                  dht->dht_ping_array = ping_array_new(mem, DHT_PING_ARRAY_SIZE, PING_TIMEOUT);
  ------------------
  |  |   43|  1.97k|#define PING_TIMEOUT 5
  ------------------
 2542|       |
 2543|  1.97k|    if (dht->dht_ping_array == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (2543:9): [True: 0, False: 1.97k]
  ------------------
 2544|      0|        LOGGER_ERROR(log, "failed to initialise ping array");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2545|      0|        kill_dht(dht);
 2546|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2547|      0|    }
 2548|       |
 2549|  5.92k|    for (uint32_t i = 0; i < DHT_FAKE_FRIEND_NUMBER; ++i) {
  ------------------
  |  |   61|  5.92k|#define DHT_FAKE_FRIEND_NUMBER 2
  ------------------
  |  Branch (2549:26): [True: 3.95k, False: 1.97k]
  ------------------
 2550|  3.95k|        uint8_t random_public_key_bytes[CRYPTO_PUBLIC_KEY_SIZE];
 2551|  3.95k|        uint8_t random_secret_key_bytes[CRYPTO_SECRET_KEY_SIZE];
 2552|       |
 2553|  3.95k|        crypto_new_keypair(rng, random_public_key_bytes, random_secret_key_bytes);
 2554|       |
 2555|  3.95k|        uint32_t token; // We don't intend to delete these ever, but need to pass the token
 2556|  3.95k|        if (dht_addfriend(dht, random_public_key_bytes, nullptr, nullptr, 0, &token) != 0) {
  ------------------
  |  |   63|  3.95k|#define nullptr NULL
  ------------------
                      if (dht_addfriend(dht, random_public_key_bytes, nullptr, nullptr, 0, &token) != 0) {
  ------------------
  |  |   63|  3.95k|#define nullptr NULL
  ------------------
  |  Branch (2556:13): [True: 0, False: 3.95k]
  ------------------
 2557|      0|            LOGGER_ERROR(log, "failed to add initial random seed DHT friends");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2558|      0|            kill_dht(dht);
 2559|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2560|      0|        }
 2561|  3.95k|    }
 2562|       |
 2563|  1.97k|    if (dht->num_friends != DHT_FAKE_FRIEND_NUMBER) {
  ------------------
  |  |   61|  1.97k|#define DHT_FAKE_FRIEND_NUMBER 2
  ------------------
  |  Branch (2563:9): [True: 0, False: 1.97k]
  ------------------
 2564|      0|        LOGGER_ERROR(log, "the RNG provided seems to be broken: it generated the same keypair twice");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2565|      0|        kill_dht(dht);
 2566|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2567|      0|    }
 2568|       |
 2569|  1.97k|    return dht;
 2570|  1.97k|}
kill_dht:
 2594|  1.97k|{
 2595|  1.97k|    if (dht == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (2595:9): [True: 0, False: 1.97k]
  ------------------
 2596|      0|        return;
 2597|      0|    }
 2598|       |
 2599|  1.97k|    networking_registerhandler(dht->net, NET_PACKET_NODES_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht->net, NET_PACKET_NODES_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
 2600|  1.97k|    networking_registerhandler(dht->net, NET_PACKET_NODES_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht->net, NET_PACKET_NODES_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
 2601|  1.97k|    networking_registerhandler(dht->net, NET_PACKET_CRYPTO, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht->net, NET_PACKET_CRYPTO, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
 2602|  1.97k|    networking_registerhandler(dht->net, NET_PACKET_LAN_DISCOVERY, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht->net, NET_PACKET_LAN_DISCOVERY, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
 2603|  1.97k|    cryptopacket_registerhandler(dht, CRYPTO_PACKET_NAT_PING, nullptr, nullptr);
  ------------------
  |  |   68|  1.97k|#define CRYPTO_PACKET_NAT_PING      254 // NAT ping crypto packet ID.
  ------------------
                  cryptopacket_registerhandler(dht, CRYPTO_PACKET_NAT_PING, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  cryptopacket_registerhandler(dht, CRYPTO_PACKET_NAT_PING, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
 2604|       |
 2605|  1.97k|    shared_key_cache_free(dht->shared_keys_recv);
 2606|  1.97k|    shared_key_cache_free(dht->shared_keys_sent);
 2607|  1.97k|    ping_array_kill(dht->dht_ping_array);
 2608|  1.97k|    ping_kill(dht->mem, dht->ping);
 2609|  1.97k|    mem_delete(dht->mem, dht->friends_list);
 2610|  1.97k|    mem_delete(dht->mem, dht->loaded_nodes_list);
 2611|  1.97k|    crypto_memzero(dht->self_secret_key, sizeof(dht->self_secret_key));
 2612|  1.97k|    mem_delete(dht->mem, dht);
 2613|  1.97k|}
dht_size:
 2626|  4.48k|{
 2627|  4.48k|    uint32_t numv4 = 0;
 2628|  4.48k|    uint32_t numv6 = 0;
 2629|       |
 2630|  17.4k|    for (uint32_t i = 0; i < dht->loaded_num_nodes; ++i) {
  ------------------
  |  Branch (2630:26): [True: 12.9k, False: 4.48k]
  ------------------
 2631|  12.9k|        numv4 += net_family_is_ipv4(dht->loaded_nodes_list[i].ip_port.ip.family) ? 1 : 0;
  ------------------
  |  Branch (2631:18): [True: 12.2k, False: 708]
  ------------------
 2632|  12.9k|        numv6 += net_family_is_ipv6(dht->loaded_nodes_list[i].ip_port.ip.family) ? 1 : 0;
  ------------------
  |  Branch (2632:18): [True: 708, False: 12.2k]
  ------------------
 2633|  12.9k|    }
 2634|       |
 2635|  4.59M|    for (uint32_t i = 0; i < LCLIENT_LIST; ++i) {
  ------------------
  |  |   35|  4.59M|#define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  ------------------
  |  |  |  |   32|  4.59M|#define LCLIENT_LENGTH 128
  |  |  ------------------
  |  |               #define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  ------------------
  |  |  |  |   31|  4.59M|#define LCLIENT_NODES MAX_FRIEND_CLIENTS
  |  |  |  |  ------------------
  |  |  |  |  |  |   29|  4.59M|#define MAX_FRIEND_CLIENTS 8
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (2635:26): [True: 4.58M, False: 4.48k]
  ------------------
 2636|  4.58M|        numv4 += dht->close_clientlist[i].assoc4.timestamp != 0 ? 1 : 0;
  ------------------
  |  Branch (2636:18): [True: 0, False: 4.58M]
  ------------------
 2637|  4.58M|        numv6 += dht->close_clientlist[i].assoc6.timestamp != 0 ? 1 : 0;
  ------------------
  |  Branch (2637:18): [True: 0, False: 4.58M]
  ------------------
 2638|  4.58M|    }
 2639|       |
 2640|  13.4k|    for (uint32_t i = 0; i < DHT_FAKE_FRIEND_NUMBER && i < dht->num_friends; ++i) {
  ------------------
  |  |   61|  26.8k|#define DHT_FAKE_FRIEND_NUMBER 2
  ------------------
  |  Branch (2640:26): [True: 8.96k, False: 4.48k]
  |  Branch (2640:56): [True: 8.96k, False: 0]
  ------------------
 2641|  8.96k|        const DHT_Friend *const fr = &dht->friends_list[i];
 2642|       |
 2643|  80.6k|        for (uint32_t j = 0; j < MAX_FRIEND_CLIENTS; ++j) {
  ------------------
  |  |   29|  80.6k|#define MAX_FRIEND_CLIENTS 8
  ------------------
  |  Branch (2643:30): [True: 71.7k, False: 8.96k]
  ------------------
 2644|  71.7k|            numv4 += fr->client_list[j].assoc4.timestamp != 0 ? 1 : 0;
  ------------------
  |  Branch (2644:22): [True: 0, False: 71.7k]
  ------------------
 2645|  71.7k|            numv6 += fr->client_list[j].assoc6.timestamp != 0 ? 1 : 0;
  ------------------
  |  Branch (2645:22): [True: 0, False: 71.7k]
  ------------------
 2646|  71.7k|        }
 2647|  8.96k|    }
 2648|       |
 2649|  4.48k|    const uint32_t size32 = sizeof(uint32_t);
 2650|  4.48k|    const uint32_t sizesubhead = size32 * 2;
 2651|       |
 2652|  4.48k|    return size32 + sizesubhead + packed_node_size(net_family_ipv4()) * numv4 + packed_node_size(net_family_ipv6()) * numv6;
 2653|  4.48k|}
dht_save:
 2657|  1.49k|{
 2658|  1.49k|    host_to_lendian_bytes32(data, DHT_STATE_COOKIE_GLOBAL);
  ------------------
  |  | 2617|  1.49k|#define DHT_STATE_COOKIE_GLOBAL 0x159000d
  ------------------
 2659|  1.49k|    data += sizeof(uint32_t);
 2660|       |
 2661|  1.49k|    uint8_t *const old_data = data;
 2662|       |
 2663|       |    /* get right offset. we write the actual header later. */
 2664|  1.49k|    data = state_write_section_header(data, DHT_STATE_COOKIE_TYPE, 0, 0);
  ------------------
  |  | 2619|  1.49k|#define DHT_STATE_COOKIE_TYPE      0x11ce
  ------------------
 2665|       |
 2666|  1.49k|    Node_format *clients = (Node_format *)mem_valloc(dht->mem, MAX_SAVED_DHT_NODES, sizeof(Node_format));
  ------------------
  |  | 2622|  1.49k|#define MAX_SAVED_DHT_NODES (((DHT_FAKE_FRIEND_NUMBER * MAX_FRIEND_CLIENTS) + LCLIENT_LIST) * 2)
  |  |  ------------------
  |  |  |  |   61|  1.49k|#define DHT_FAKE_FRIEND_NUMBER 2
  |  |  ------------------
  |  |               #define MAX_SAVED_DHT_NODES (((DHT_FAKE_FRIEND_NUMBER * MAX_FRIEND_CLIENTS) + LCLIENT_LIST) * 2)
  |  |  ------------------
  |  |  |  |   29|  1.49k|#define MAX_FRIEND_CLIENTS 8
  |  |  ------------------
  |  |               #define MAX_SAVED_DHT_NODES (((DHT_FAKE_FRIEND_NUMBER * MAX_FRIEND_CLIENTS) + LCLIENT_LIST) * 2)
  |  |  ------------------
  |  |  |  |   35|  1.49k|#define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  1.49k|#define LCLIENT_LENGTH 128
  |  |  |  |  ------------------
  |  |  |  |               #define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   31|  1.49k|#define LCLIENT_NODES MAX_FRIEND_CLIENTS
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|  1.49k|#define MAX_FRIEND_CLIENTS 8
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2667|       |
 2668|  1.49k|    if (clients == nullptr) {
  ------------------
  |  |   63|  1.49k|#define nullptr NULL
  ------------------
  |  Branch (2668:9): [True: 0, False: 1.49k]
  ------------------
 2669|      0|        LOGGER_ERROR(dht->log, "could not allocate %u nodes", (unsigned int)MAX_SAVED_DHT_NODES);
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2670|      0|        return;
 2671|      0|    }
 2672|       |
 2673|  1.49k|    uint32_t num = 0;
 2674|       |
 2675|  1.49k|    if (dht->loaded_num_nodes > 0) {
  ------------------
  |  Branch (2675:9): [True: 206, False: 1.28k]
  ------------------
 2676|    206|        memcpy(clients, dht->loaded_nodes_list, sizeof(Node_format) * dht->loaded_num_nodes);
 2677|    206|        num += dht->loaded_num_nodes;
 2678|    206|    }
 2679|       |
 2680|  1.53M|    for (uint32_t i = 0; i < LCLIENT_LIST; ++i) {
  ------------------
  |  |   35|  1.53M|#define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  ------------------
  |  |  |  |   32|  1.53M|#define LCLIENT_LENGTH 128
  |  |  ------------------
  |  |               #define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  ------------------
  |  |  |  |   31|  1.53M|#define LCLIENT_NODES MAX_FRIEND_CLIENTS
  |  |  |  |  ------------------
  |  |  |  |  |  |   29|  1.53M|#define MAX_FRIEND_CLIENTS 8
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (2680:26): [True: 1.52M, False: 1.49k]
  ------------------
 2681|  1.52M|        if (dht->close_clientlist[i].assoc4.timestamp != 0) {
  ------------------
  |  Branch (2681:13): [True: 0, False: 1.52M]
  ------------------
 2682|      0|            memcpy(clients[num].public_key, dht->close_clientlist[i].public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      0|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 2683|      0|            clients[num].ip_port = dht->close_clientlist[i].assoc4.ip_port;
 2684|      0|            ++num;
 2685|      0|        }
 2686|       |
 2687|  1.52M|        if (dht->close_clientlist[i].assoc6.timestamp != 0) {
  ------------------
  |  Branch (2687:13): [True: 0, False: 1.52M]
  ------------------
 2688|      0|            memcpy(clients[num].public_key, dht->close_clientlist[i].public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      0|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 2689|      0|            clients[num].ip_port = dht->close_clientlist[i].assoc6.ip_port;
 2690|      0|            ++num;
 2691|      0|        }
 2692|  1.52M|    }
 2693|       |
 2694|  4.48k|    for (uint32_t i = 0; i < DHT_FAKE_FRIEND_NUMBER && i < dht->num_friends; ++i) {
  ------------------
  |  |   61|  8.96k|#define DHT_FAKE_FRIEND_NUMBER 2
  ------------------
  |  Branch (2694:26): [True: 2.98k, False: 1.49k]
  |  Branch (2694:56): [True: 2.98k, False: 0]
  ------------------
 2695|  2.98k|        const DHT_Friend *const fr = &dht->friends_list[i];
 2696|       |
 2697|  26.8k|        for (uint32_t j = 0; j < MAX_FRIEND_CLIENTS; ++j) {
  ------------------
  |  |   29|  26.8k|#define MAX_FRIEND_CLIENTS 8
  ------------------
  |  Branch (2697:30): [True: 23.9k, False: 2.98k]
  ------------------
 2698|  23.9k|            if (fr->client_list[j].assoc4.timestamp != 0) {
  ------------------
  |  Branch (2698:17): [True: 0, False: 23.9k]
  ------------------
 2699|      0|                memcpy(clients[num].public_key, fr->client_list[j].public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      0|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 2700|      0|                clients[num].ip_port = fr->client_list[j].assoc4.ip_port;
 2701|      0|                ++num;
 2702|      0|            }
 2703|       |
 2704|  23.9k|            if (fr->client_list[j].assoc6.timestamp != 0) {
  ------------------
  |  Branch (2704:17): [True: 0, False: 23.9k]
  ------------------
 2705|      0|                memcpy(clients[num].public_key, fr->client_list[j].public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      0|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 2706|      0|                clients[num].ip_port = fr->client_list[j].assoc6.ip_port;
 2707|      0|                ++num;
 2708|      0|            }
 2709|  23.9k|        }
 2710|  2.98k|    }
 2711|       |
 2712|  1.49k|    state_write_section_header(
 2713|  1.49k|        old_data, DHT_STATE_COOKIE_TYPE, pack_nodes(dht->log, data, sizeof(Node_format) * num, clients, num),
  ------------------
  |  | 2619|  1.49k|#define DHT_STATE_COOKIE_TYPE      0x11ce
  ------------------
 2714|  1.49k|        DHT_STATE_TYPE_NODES);
  ------------------
  |  | 2620|  1.49k|#define DHT_STATE_TYPE_NODES       4
  ------------------
 2715|       |
 2716|  1.49k|    mem_delete(dht->mem, clients);
 2717|  1.49k|}
dht_load:
 2795|    810|{
 2796|    810|    const uint32_t cookie_len = sizeof(uint32_t);
 2797|       |
 2798|    810|    if (length > cookie_len) {
  ------------------
  |  Branch (2798:9): [True: 744, False: 66]
  ------------------
 2799|    744|        uint32_t data32;
 2800|    744|        lendian_bytes_to_host32(&data32, data);
 2801|       |
 2802|    744|        if (data32 == DHT_STATE_COOKIE_GLOBAL) {
  ------------------
  |  | 2617|    744|#define DHT_STATE_COOKIE_GLOBAL 0x159000d
  ------------------
  |  Branch (2802:13): [True: 724, False: 20]
  ------------------
 2803|    724|            return state_load(dht->log, dht_load_state_callback, dht, data + cookie_len,
 2804|    724|                              length - cookie_len, DHT_STATE_COOKIE_TYPE);
  ------------------
  |  | 2619|    724|#define DHT_STATE_COOKIE_TYPE      0x11ce
  ------------------
 2805|    724|        }
 2806|    744|    }
 2807|       |
 2808|     86|    return -1;
 2809|    810|}
DHT.c:bin_pack_node_handler:
  406|  10.4k|{
  407|  10.4k|    const Node_format *nodes = (const Node_format *)arr;
  408|  10.4k|    return bin_pack_ip_port(bp, logger, &nodes[index].ip_port)
  ------------------
  |  Branch (408:12): [True: 10.4k, False: 0]
  ------------------
  409|  10.4k|           && bin_pack_bin_b(bp, nodes[index].public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|  10.4k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  |  Branch (409:15): [True: 10.4k, False: 0]
  ------------------
  410|  10.4k|}
DHT.c:get_somewhat_close_nodes:
  704|  3.95k|{
  705|  19.7k|    for (uint16_t i = 0; i < MAX_SENT_NODES; ++i) {
  ------------------
  |  |   40|  19.7k|#define MAX_SENT_NODES 4
  ------------------
  |  Branch (705:26): [True: 15.8k, False: 3.95k]
  ------------------
  706|  15.8k|        nodes_list[i] = empty_node_format;
  707|  15.8k|    }
  708|       |
  709|  3.95k|    uint32_t num_nodes = 0;
  710|  3.95k|    get_close_nodes_inner(
  711|  3.95k|        cur_time, public_key,
  712|  3.95k|        nodes_list, &num_nodes,
  713|  3.95k|        sa_family, close_clientlist, LCLIENT_LIST,
  ------------------
  |  |   35|  3.95k|#define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  ------------------
  |  |  |  |   32|  3.95k|#define LCLIENT_LENGTH 128
  |  |  ------------------
  |  |               #define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  ------------------
  |  |  |  |   31|  3.95k|#define LCLIENT_NODES MAX_FRIEND_CLIENTS
  |  |  |  |  ------------------
  |  |  |  |  |  |   29|  3.95k|#define MAX_FRIEND_CLIENTS 8
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  714|  3.95k|        is_lan, want_announce);
  715|       |
  716|  9.88k|    for (uint16_t i = 0; i < friends_list_size; ++i) {
  ------------------
  |  Branch (716:26): [True: 5.92k, False: 3.95k]
  ------------------
  717|  5.92k|        const DHT_Friend *dht_friend = &friends_list[i];
  718|       |
  719|  5.92k|        get_close_nodes_inner(
  720|  5.92k|            cur_time, public_key,
  721|  5.92k|            nodes_list, &num_nodes,
  722|  5.92k|            sa_family, dht_friend->client_list, MAX_FRIEND_CLIENTS,
  ------------------
  |  |   29|  5.92k|#define MAX_FRIEND_CLIENTS 8
  ------------------
  723|  5.92k|            is_lan, want_announce);
  724|  5.92k|    }
  725|       |
  726|  3.95k|    return num_nodes;
  727|  3.95k|}
DHT.c:get_close_nodes_inner:
  637|  9.88k|{
  638|  9.88k|    if (!net_family_is_ipv4(sa_family) && !net_family_is_ipv6(sa_family) && !net_family_is_unspec(sa_family)) {
  ------------------
  |  Branch (638:9): [True: 9.88k, False: 0]
  |  Branch (638:43): [True: 9.88k, False: 0]
  |  Branch (638:77): [True: 0, False: 9.88k]
  ------------------
  639|      0|        return;
  640|      0|    }
  641|       |
  642|  9.88k|    uint32_t num_nodes = *num_nodes_ptr;
  643|       |
  644|  4.10M|    for (uint32_t i = 0; i < client_list_length; ++i) {
  ------------------
  |  Branch (644:26): [True: 4.09M, False: 9.88k]
  ------------------
  645|  4.09M|        const Client_data *const client = &client_list[i];
  646|       |
  647|       |        /* node already in list? */
  648|  4.09M|        if (index_of_node_pk(nodes_list, MAX_SENT_NODES, client->public_key) != UINT32_MAX) {
  ------------------
  |  |   40|  4.09M|#define MAX_SENT_NODES 4
  ------------------
  |  Branch (648:13): [True: 4.09M, False: 0]
  ------------------
  649|  4.09M|            continue;
  650|  4.09M|        }
  651|       |
  652|      0|        const IPPTsPng *ipptp;
  653|       |
  654|      0|        if (net_family_is_ipv4(sa_family)) {
  ------------------
  |  Branch (654:13): [True: 0, False: 0]
  ------------------
  655|      0|            ipptp = &client->assoc4;
  656|      0|        } else if (net_family_is_ipv6(sa_family)) {
  ------------------
  |  Branch (656:20): [True: 0, False: 0]
  ------------------
  657|      0|            ipptp = &client->assoc6;
  658|      0|        } else if (client->assoc4.timestamp >= client->assoc6.timestamp) {
  ------------------
  |  Branch (658:20): [True: 0, False: 0]
  ------------------
  659|      0|            ipptp = &client->assoc4;
  660|      0|        } else {
  661|      0|            ipptp = &client->assoc6;
  662|      0|        }
  663|       |
  664|       |        /* node not in a good condition? */
  665|      0|        if (assoc_timeout(cur_time, ipptp)) {
  ------------------
  |  Branch (665:13): [True: 0, False: 0]
  ------------------
  666|      0|            continue;
  667|      0|        }
  668|       |
  669|       |        /* don't send LAN ips to non LAN peers */
  670|      0|        if (ip_is_lan(&ipptp->ip_port.ip) && !is_lan) {
  ------------------
  |  Branch (670:13): [True: 0, False: 0]
  |  Branch (670:46): [True: 0, False: 0]
  ------------------
  671|      0|            continue;
  672|      0|        }
  673|       |
  674|      0|#ifdef CHECK_ANNOUNCE_NODE
  675|       |
  676|      0|        if (want_announce && !client->announce_node) {
  ------------------
  |  Branch (676:13): [True: 0, False: 0]
  |  Branch (676:30): [True: 0, False: 0]
  ------------------
  677|      0|            continue;
  678|      0|        }
  679|       |
  680|      0|#endif /* CHECK_ANNOUNCE_NODE */
  681|       |
  682|      0|        if (num_nodes < MAX_SENT_NODES) {
  ------------------
  |  |   40|      0|#define MAX_SENT_NODES 4
  ------------------
  |  Branch (682:13): [True: 0, False: 0]
  ------------------
  683|      0|            memcpy(nodes_list[num_nodes].public_key, client->public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      0|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  684|      0|            nodes_list[num_nodes].ip_port = ipptp->ip_port;
  685|      0|            ++num_nodes;
  686|      0|        } else {
  687|       |            // TODO(zugz): this could be made significantly more efficient by
  688|       |            // using a version of add_to_list which works with a sorted list.
  689|      0|            add_to_list(nodes_list, MAX_SENT_NODES, client->public_key, &ipptp->ip_port, public_key);
  ------------------
  |  |   40|      0|#define MAX_SENT_NODES 4
  ------------------
  690|      0|        }
  691|      0|    }
  692|       |
  693|  9.88k|    *num_nodes_ptr = num_nodes;
  694|  9.88k|}
DHT.c:index_of_node_pk:
  490|  4.09M|{
  491|  4.09M|    assert(size == 0 || array != nullptr);
  492|  4.09M|    for (uint32_t i = 0; i < size; ++i) {
  ------------------
  |  Branch (492:26): [True: 4.09M, False: 0]
  ------------------
  493|  4.09M|        if (pk_equal(array[i].public_key, pk)) {
  ------------------
  |  Branch (493:13): [True: 4.09M, False: 0]
  ------------------
  494|  4.09M|            return i;
  495|  4.09M|        }
  496|  4.09M|    }
  497|       |
  498|      0|    return UINT32_MAX;
  499|  4.09M|}
DHT.c:index_of_friend_pk:
  478|  3.95k|{
  479|  3.95k|    assert(size == 0 || array != nullptr);
  480|  5.92k|    for (uint32_t i = 0; i < size; ++i) {
  ------------------
  |  Branch (480:26): [True: 1.97k, False: 3.95k]
  ------------------
  481|  1.97k|        if (pk_equal(array[i].public_key, pk)) {
  ------------------
  |  Branch (481:13): [True: 0, False: 1.97k]
  ------------------
  482|      0|            return i;
  483|      0|        }
  484|  1.97k|    }
  485|       |
  486|  3.95k|    return UINT32_MAX;
  487|  3.95k|}
DHT.c:dht_friend_lock:
 1517|  3.95k|{
 1518|       |    // find first free slot
 1519|  3.95k|    uint8_t lock_num;
 1520|  3.95k|    uint32_t lock_token = 0;
 1521|  3.95k|    for (lock_num = 0; lock_num < DHT_FRIEND_MAX_LOCKS; ++lock_num) {
  ------------------
  |  |   53|  3.95k|#define DHT_FRIEND_MAX_LOCKS 32
  ------------------
  |  Branch (1521:24): [True: 3.95k, False: 0]
  ------------------
 1522|  3.95k|        lock_token = UINT32_C(1) << lock_num;
 1523|  3.95k|        if ((dht_friend->lock_flags & lock_token) == 0) {
  ------------------
  |  Branch (1523:13): [True: 3.95k, False: 0]
  ------------------
 1524|  3.95k|            break;
 1525|  3.95k|        }
 1526|  3.95k|    }
 1527|       |
 1528|       |    // One of the conditions would be enough, but static analyzers don't get that
 1529|  3.95k|    if (lock_token == 0 || lock_num == DHT_FRIEND_MAX_LOCKS) {
  ------------------
  |  |   53|  3.95k|#define DHT_FRIEND_MAX_LOCKS 32
  ------------------
  |  Branch (1529:9): [True: 0, False: 3.95k]
  |  Branch (1529:28): [True: 0, False: 3.95k]
  ------------------
 1530|      0|        return 0;
 1531|      0|    }
 1532|       |
 1533|       |    // Claim that slot
 1534|  3.95k|    dht_friend->lock_flags |= lock_token;
 1535|       |
 1536|  3.95k|    dht_friend->callbacks[lock_num].ip_callback = ip_callback;
 1537|  3.95k|    dht_friend->callbacks[lock_num].data = data;
 1538|  3.95k|    dht_friend->callbacks[lock_num].number = number;
 1539|       |
 1540|  3.95k|    return lock_token;
 1541|  3.95k|}
DHT.c:dht_load_state_callback:
 2750|    707|{
 2751|    707|    DHT *dht = (DHT *)outer;
 2752|       |
 2753|    707|    switch (type) {
 2754|    641|        case DHT_STATE_TYPE_NODES: {
  ------------------
  |  | 2620|    641|#define DHT_STATE_TYPE_NODES       4
  ------------------
  |  Branch (2754:9): [True: 641, False: 66]
  ------------------
 2755|    641|            if (length == 0) {
  ------------------
  |  Branch (2755:17): [True: 10, False: 631]
  ------------------
 2756|     10|                break;
 2757|     10|            }
 2758|       |
 2759|    631|            mem_delete(dht->mem, dht->loaded_nodes_list);
 2760|       |
 2761|       |            // Copy to loaded_clients_list
 2762|    631|            Node_format *nodes = (Node_format *)mem_valloc(dht->mem, MAX_SAVED_DHT_NODES, sizeof(Node_format));
  ------------------
  |  | 2622|    631|#define MAX_SAVED_DHT_NODES (((DHT_FAKE_FRIEND_NUMBER * MAX_FRIEND_CLIENTS) + LCLIENT_LIST) * 2)
  |  |  ------------------
  |  |  |  |   61|    631|#define DHT_FAKE_FRIEND_NUMBER 2
  |  |  ------------------
  |  |               #define MAX_SAVED_DHT_NODES (((DHT_FAKE_FRIEND_NUMBER * MAX_FRIEND_CLIENTS) + LCLIENT_LIST) * 2)
  |  |  ------------------
  |  |  |  |   29|    631|#define MAX_FRIEND_CLIENTS 8
  |  |  ------------------
  |  |               #define MAX_SAVED_DHT_NODES (((DHT_FAKE_FRIEND_NUMBER * MAX_FRIEND_CLIENTS) + LCLIENT_LIST) * 2)
  |  |  ------------------
  |  |  |  |   35|    631|#define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|    631|#define LCLIENT_LENGTH 128
  |  |  |  |  ------------------
  |  |  |  |               #define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   31|    631|#define LCLIENT_NODES MAX_FRIEND_CLIENTS
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|    631|#define MAX_FRIEND_CLIENTS 8
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2763|       |
 2764|    631|            if (nodes == nullptr) {
  ------------------
  |  |   63|    631|#define nullptr NULL
  ------------------
  |  Branch (2764:17): [True: 0, False: 631]
  ------------------
 2765|      0|                LOGGER_ERROR(dht->log, "could not allocate %u nodes", (unsigned int)MAX_SAVED_DHT_NODES);
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2766|      0|                dht->loaded_num_nodes = 0;
 2767|      0|                break;
 2768|      0|            }
 2769|       |
 2770|    631|            const int num = unpack_nodes(nodes, MAX_SAVED_DHT_NODES, nullptr, data, length, false);
  ------------------
  |  | 2622|    631|#define MAX_SAVED_DHT_NODES (((DHT_FAKE_FRIEND_NUMBER * MAX_FRIEND_CLIENTS) + LCLIENT_LIST) * 2)
  |  |  ------------------
  |  |  |  |   61|    631|#define DHT_FAKE_FRIEND_NUMBER 2
  |  |  ------------------
  |  |               #define MAX_SAVED_DHT_NODES (((DHT_FAKE_FRIEND_NUMBER * MAX_FRIEND_CLIENTS) + LCLIENT_LIST) * 2)
  |  |  ------------------
  |  |  |  |   29|    631|#define MAX_FRIEND_CLIENTS 8
  |  |  ------------------
  |  |               #define MAX_SAVED_DHT_NODES (((DHT_FAKE_FRIEND_NUMBER * MAX_FRIEND_CLIENTS) + LCLIENT_LIST) * 2)
  |  |  ------------------
  |  |  |  |   35|    631|#define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|    631|#define LCLIENT_LENGTH 128
  |  |  |  |  ------------------
  |  |  |  |               #define LCLIENT_LIST (LCLIENT_LENGTH * LCLIENT_NODES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   31|    631|#define LCLIENT_NODES MAX_FRIEND_CLIENTS
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|    631|#define MAX_FRIEND_CLIENTS 8
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                          const int num = unpack_nodes(nodes, MAX_SAVED_DHT_NODES, nullptr, data, length, false);
  ------------------
  |  |   63|    631|#define nullptr NULL
  ------------------
 2771|       |
 2772|    631|            if (num < 0) {
  ------------------
  |  Branch (2772:17): [True: 60, False: 571]
  ------------------
 2773|       |                // Unpack error happened, we ignore it.
 2774|     60|                dht->loaded_num_nodes = 0;
 2775|    571|            } else {
 2776|    571|                dht->loaded_num_nodes = num;
 2777|    571|            }
 2778|       |
 2779|    631|            dht->loaded_nodes_list = nodes;
 2780|       |
 2781|    631|            break;
 2782|    631|        }
 2783|       |
 2784|     66|        default: {
  ------------------
  |  Branch (2784:9): [True: 66, False: 641]
  ------------------
 2785|     66|            LOGGER_ERROR(dht->log, "Load state (DHT): contains unrecognized part (len %u, type %u)",
  ------------------
  |  |   80|     66|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     66|    do {                                                                         \
  |  |  |  |   70|     66|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    132|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     66|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     66|        }                                                                        \
  |  |  |  |   73|     66|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2786|     66|                         length, type);
 2787|     66|            break;
 2788|    631|        }
 2789|    707|    }
 2790|       |
 2791|    707|    return STATE_LOAD_STATUS_CONTINUE;
 2792|    707|}

lan_discovery_init:
  405|  1.97k|{
  406|  1.97k|    return fetch_broadcast_info(mem, ns);
  407|  1.97k|}
lan_discovery_kill:
  410|  1.97k|{
  411|  1.97k|    if (broadcast == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (411:9): [True: 0, False: 1.97k]
  ------------------
  412|      0|        return;
  413|      0|    }
  414|       |
  415|  1.97k|    mem_delete(broadcast->mem, broadcast);
  416|  1.97k|}
LAN_discovery.c:fetch_broadcast_info:
  223|  1.97k|{
  224|  1.97k|    Broadcast_Info *broadcast = (Broadcast_Info *)mem_alloc(mem, sizeof(Broadcast_Info));
  225|       |
  226|  1.97k|    if (broadcast == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (226:9): [True: 0, False: 1.97k]
  ------------------
  227|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  228|      0|    }
  229|       |
  230|  1.97k|    broadcast->mem = mem;
  231|       |
  232|  1.97k|    return broadcast;
  233|  1.97k|}

getfriend_id:
   86|  6.61k|{
   87|  10.5k|    for (uint32_t i = 0; i < m->numfriends; ++i) {
  ------------------
  |  Branch (87:26): [True: 4.27k, False: 6.28k]
  ------------------
   88|  4.27k|        if (m->friendlist[i].status > 0 && pk_equal(real_pk, m->friendlist[i].real_pk)) {
  ------------------
  |  Branch (88:13): [True: 4.27k, False: 0]
  |  Branch (88:44): [True: 330, False: 3.94k]
  ------------------
   89|    330|            return i;
   90|    330|        }
   91|  4.27k|    }
   92|       |
   93|  6.28k|    return -1;
   94|  6.61k|}
m_addfriend:
  241|    128|{
  242|    128|    if (length > MAX_FRIEND_REQUEST_DATA_SIZE) {
  ------------------
  |  |   19|    128|#define MAX_FRIEND_REQUEST_DATA_SIZE (ONION_CLIENT_MAX_DATA_SIZE - 100)
  |  |  ------------------
  |  |  |  |  173|    128|#define ONION_CLIENT_MAX_DATA_SIZE (MAX_DATA_REQUEST_SIZE - ONION_DATA_IN_RESPONSE_MIN_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   42|    128|#define MAX_DATA_REQUEST_SIZE (ONION_MAX_DATA_SIZE - ONION_DATA_REQUEST_MIN_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   52|    128|#define ONION_MAX_DATA_SIZE (ONION_MAX_PACKET_SIZE - (ONION_SEND_1 + 1))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   41|    128|#define ONION_MAX_PACKET_SIZE 1400
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define ONION_MAX_DATA_SIZE (ONION_MAX_PACKET_SIZE - (ONION_SEND_1 + 1))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   50|    128|#define ONION_SEND_1 (CRYPTO_NONCE_SIZE + ONION_SEND_BASE*3)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   69|    128|#define CRYPTO_NONCE_SIZE              24
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |               #define ONION_SEND_1 (CRYPTO_NONCE_SIZE + ONION_SEND_BASE*3)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   47|    128|#define ONION_SEND_BASE (CRYPTO_PUBLIC_KEY_SIZE + SIZE_IPPORT + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |   43|    128|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |               #define ONION_SEND_BASE (CRYPTO_PUBLIC_KEY_SIZE + SIZE_IPPORT + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  189|    128|#define SIZE_IPPORT (SIZE_IP + SIZE_PORT)
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  187|    128|#define SIZE_IP (1 + SIZE_IP6)
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  186|    128|#define SIZE_IP6 16
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |               #define SIZE_IPPORT (SIZE_IP + SIZE_PORT)
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  188|    128|#define SIZE_PORT 2
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |               #define ONION_SEND_BASE (CRYPTO_PUBLIC_KEY_SIZE + SIZE_IPPORT + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |   64|    128|#define CRYPTO_MAC_SIZE                16
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define MAX_DATA_REQUEST_SIZE (ONION_MAX_DATA_SIZE - ONION_DATA_REQUEST_MIN_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   41|    128|#define ONION_DATA_REQUEST_MIN_SIZE (1 + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_NONCE_SIZE + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   43|    128|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define ONION_DATA_REQUEST_MIN_SIZE (1 + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_NONCE_SIZE + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   69|    128|#define CRYPTO_NONCE_SIZE              24
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define ONION_DATA_REQUEST_MIN_SIZE (1 + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_NONCE_SIZE + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   43|    128|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define ONION_DATA_REQUEST_MIN_SIZE (1 + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_NONCE_SIZE + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   64|    128|#define CRYPTO_MAC_SIZE                16
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define ONION_CLIENT_MAX_DATA_SIZE (MAX_DATA_REQUEST_SIZE - ONION_DATA_IN_RESPONSE_MIN_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  170|    128|#define ONION_DATA_IN_RESPONSE_MIN_SIZE (CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   43|    128|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define ONION_DATA_IN_RESPONSE_MIN_SIZE (CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   64|    128|#define CRYPTO_MAC_SIZE                16
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (242:9): [True: 11, False: 117]
  ------------------
  243|     11|        return FAERR_TOOLONG;
  244|     11|    }
  245|       |
  246|    117|    uint8_t real_pk[CRYPTO_PUBLIC_KEY_SIZE];
  247|    117|    pk_copy(real_pk, address);
  248|       |
  249|    117|    if (!public_key_valid(real_pk)) {
  ------------------
  |  Branch (249:9): [True: 10, False: 107]
  ------------------
  250|     10|        return FAERR_BADCHECKSUM;
  251|     10|    }
  252|       |
  253|    107|    uint16_t check;
  254|    107|    const uint16_t checksum = data_checksum(address, FRIEND_ADDRESS_SIZE - sizeof(checksum));
  ------------------
  |  |   43|    107|#define FRIEND_ADDRESS_SIZE (CRYPTO_PUBLIC_KEY_SIZE + sizeof(uint32_t) + sizeof(uint16_t))
  |  |  ------------------
  |  |  |  |   43|    107|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  255|    107|    memcpy(&check, address + CRYPTO_PUBLIC_KEY_SIZE + sizeof(uint32_t), sizeof(check));
  ------------------
  |  |   43|    107|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  256|       |
  257|    107|    if (check != checksum) {
  ------------------
  |  Branch (257:9): [True: 0, False: 107]
  ------------------
  258|      0|        return FAERR_BADCHECKSUM;
  259|      0|    }
  260|       |
  261|    107|    if (length < 1) {
  ------------------
  |  Branch (261:9): [True: 10, False: 97]
  ------------------
  262|     10|        return FAERR_NOMESSAGE;
  263|     10|    }
  264|       |
  265|     97|    if (pk_equal(real_pk, nc_get_self_public_key(m->net_crypto))) {
  ------------------
  |  Branch (265:9): [True: 10, False: 87]
  ------------------
  266|     10|        return FAERR_OWNKEY;
  267|     10|    }
  268|       |
  269|     87|    const int32_t friend_id = getfriend_id(m, real_pk);
  270|       |
  271|     87|    if (friend_id != -1) {
  ------------------
  |  Branch (271:9): [True: 45, False: 42]
  ------------------
  272|     45|        if (m->friendlist[friend_id].status >= FRIEND_CONFIRMED) {
  ------------------
  |  Branch (272:13): [True: 10, False: 35]
  ------------------
  273|     10|            return FAERR_ALREADYSENT;
  274|     10|        }
  275|       |
  276|     35|        uint32_t nospam;
  277|     35|        memcpy(&nospam, address + CRYPTO_PUBLIC_KEY_SIZE, sizeof(nospam));
  ------------------
  |  |   43|     35|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  278|       |
  279|     35|        if (m->friendlist[friend_id].friendrequest_nospam == nospam) {
  ------------------
  |  Branch (279:13): [True: 18, False: 17]
  ------------------
  280|     18|            return FAERR_ALREADYSENT;
  281|     18|        }
  282|       |
  283|     17|        m->friendlist[friend_id].friendrequest_nospam = nospam;
  284|     17|        return FAERR_SETNEWNOSPAM;
  285|     35|    }
  286|       |
  287|     42|    const int32_t ret = init_new_friend(m, real_pk, FRIEND_ADDED);
  288|       |
  289|     42|    if (ret < 0) {
  ------------------
  |  Branch (289:9): [True: 0, False: 42]
  ------------------
  290|      0|        return ret;
  291|      0|    }
  292|       |
  293|     42|    m->friendlist[ret].friendrequest_timeout = FRIENDREQUEST_TIMEOUT;
  ------------------
  |  |  124|     42|#define FRIENDREQUEST_TIMEOUT 5
  ------------------
  294|     42|    memcpy(m->friendlist[ret].info, data, length);
  295|     42|    m->friendlist[ret].info_size = length;
  296|     42|    memcpy(&m->friendlist[ret].friendrequest_nospam, address + CRYPTO_PUBLIC_KEY_SIZE, sizeof(uint32_t));
  ------------------
  |  |   43|     42|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  297|       |
  298|     42|    return ret;
  299|     42|}
m_addfriend_norequest:
  302|    279|{
  303|    279|    if (!public_key_valid(real_pk)) {
  ------------------
  |  Branch (303:9): [True: 28, False: 251]
  ------------------
  304|     28|        return FAERR_BADCHECKSUM;
  305|     28|    }
  306|       |
  307|    251|    if (pk_equal(real_pk, nc_get_self_public_key(m->net_crypto))) {
  ------------------
  |  Branch (307:9): [True: 10, False: 241]
  ------------------
  308|     10|        return FAERR_OWNKEY;
  309|     10|    }
  310|       |
  311|    241|    return m_add_friend_contact_norequest(m, real_pk);
  312|    251|}
m_create_group_connection:
  373|     95|{
  374|     95|    random_bytes(m->rng, chat->m_group_public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|     95|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  375|     95|    const int friendcon_id = new_friend_connection(m->fr_c, chat->m_group_public_key);
  376|       |
  377|     95|    if (friendcon_id == -1) {
  ------------------
  |  Branch (377:9): [True: 0, False: 95]
  ------------------
  378|      0|        return false;
  379|      0|    }
  380|       |
  381|     95|    const Friend_Conn *connection = get_conn(m->fr_c, friendcon_id);
  382|       |
  383|     95|    if (connection == nullptr) {
  ------------------
  |  |   63|     95|#define nullptr NULL
  ------------------
  |  Branch (383:9): [True: 0, False: 95]
  ------------------
  384|      0|        return false;
  385|      0|    }
  386|       |
  387|     95|    chat->friend_connection_id = friendcon_id;
  388|       |
  389|     95|    if (friend_con_connected(m->fr_c, friendcon_id) == FRIENDCONN_STATUS_CONNECTED) {
  ------------------
  |  Branch (389:9): [True: 0, False: 95]
  ------------------
  390|      0|        send_online_packet(m, friendcon_id);
  391|      0|    }
  392|       |
  393|     95|    const int onion_friend_number = friend_conn_get_onion_friendnum(connection);
  394|     95|    Onion_Friend *onion_friend = onion_get_friend(m->onion_c, (uint16_t)onion_friend_number);
  395|       |
  396|     95|    onion_friend_set_gc_public_key(onion_friend, get_chat_id(&chat->chat_public_key));
  397|     95|    onion_friend_set_gc_data(onion_friend, nullptr, 0);
  ------------------
  |  |   63|     95|#define nullptr NULL
  ------------------
  398|       |
  399|     95|    return true;
  400|     95|}
m_kill_group_connection:
  406|     95|{
  407|     95|    remove_request_received(m->fr, chat->m_group_public_key);
  408|       |
  409|     95|    friend_connection_callbacks(m->fr_c, chat->friend_connection_id, MESSENGER_CALLBACK_INDEX, nullptr,
  ------------------
  |  |   24|     95|#define MESSENGER_CALLBACK_INDEX 0
  ------------------
                  friend_connection_callbacks(m->fr_c, chat->friend_connection_id, MESSENGER_CALLBACK_INDEX, nullptr,
  ------------------
  |  |   63|     95|#define nullptr NULL
  ------------------
  410|     95|                                nullptr, nullptr, nullptr, 0);
  ------------------
  |  |   63|     95|#define nullptr NULL
  ------------------
                                              nullptr, nullptr, nullptr, 0);
  ------------------
  |  |   63|     95|#define nullptr NULL
  ------------------
                                              nullptr, nullptr, nullptr, 0);
  ------------------
  |  |   63|     95|#define nullptr NULL
  ------------------
  411|       |
  412|     95|    if (friend_con_connected(m->fr_c, chat->friend_connection_id) == FRIENDCONN_STATUS_CONNECTED) {
  ------------------
  |  Branch (412:9): [True: 0, False: 95]
  ------------------
  413|      0|        send_offline_packet(m, chat->friend_connection_id);
  414|      0|    }
  415|       |
  416|     95|    kill_friend_connection(m->fr_c, chat->friend_connection_id);
  417|     95|}
m_friend_exists:
  534|    732|{
  535|    732|    return (unsigned int)friendnumber < m->numfriends && m->friendlist[friendnumber].status != 0;
  ------------------
  |  Branch (535:12): [True: 732, False: 0]
  |  Branch (535:58): [True: 732, False: 0]
  ------------------
  536|    732|}
setfriendname:
  638|    230|{
  639|    230|    if (!m_friend_exists(m, friendnumber)) {
  ------------------
  |  Branch (639:9): [True: 0, False: 230]
  ------------------
  640|      0|        return -1;
  641|      0|    }
  642|       |
  643|    230|    if (length > MAX_NAME_LENGTH || length == 0) {
  ------------------
  |  |   35|    460|#define MAX_NAME_LENGTH 128
  ------------------
  |  Branch (643:9): [True: 111, False: 119]
  |  Branch (643:37): [True: 72, False: 47]
  ------------------
  644|    183|        return -1;
  645|    183|    }
  646|       |
  647|     47|    m->friendlist[friendnumber].name_length = length;
  648|     47|    memcpy(m->friendlist[friendnumber].name, name, length);
  649|     47|    return 0;
  650|    230|}
setname:
  662|    326|{
  663|    326|    if (length > MAX_NAME_LENGTH) {
  ------------------
  |  |   35|    326|#define MAX_NAME_LENGTH 128
  ------------------
  |  Branch (663:9): [True: 0, False: 326]
  ------------------
  664|      0|        return -1;
  665|      0|    }
  666|       |
  667|    326|    if (m->name_length == length && (length == 0 || memcmp(name, m->name, length) == 0)) {
  ------------------
  |  Branch (667:9): [True: 250, False: 76]
  |  Branch (667:38): [True: 0, False: 250]
  |  Branch (667:53): [True: 82, False: 168]
  ------------------
  668|     82|        return 0;
  669|     82|    }
  670|       |
  671|    244|    if (length > 0) {
  ------------------
  |  Branch (671:9): [True: 244, False: 0]
  ------------------
  672|    244|        memcpy(m->name, name, length);
  673|    244|    }
  674|       |
  675|    244|    m->name_length = length;
  676|       |
  677|    571|    for (uint32_t i = 0; i < m->numfriends; ++i) {
  ------------------
  |  Branch (677:26): [True: 327, False: 244]
  ------------------
  678|    327|        m->friendlist[i].name_sent = false;
  679|    327|    }
  680|       |
  681|    244|    return 0;
  682|    326|}
m_set_statusmessage:
  736|    621|{
  737|    621|    if (length > MAX_STATUSMESSAGE_LENGTH) {
  ------------------
  |  |   37|    621|#define MAX_STATUSMESSAGE_LENGTH 1007
  ------------------
  |  Branch (737:9): [True: 0, False: 621]
  ------------------
  738|      0|        return -1;
  739|      0|    }
  740|       |
  741|    621|    if (m->statusmessage_length == length && (length == 0 || memcmp(m->statusmessage, status, length) == 0)) {
  ------------------
  |  Branch (741:9): [True: 396, False: 225]
  |  Branch (741:47): [True: 0, False: 396]
  |  Branch (741:62): [True: 153, False: 243]
  ------------------
  742|    153|        return 0;
  743|    153|    }
  744|       |
  745|    468|    if (length > 0) {
  ------------------
  |  Branch (745:9): [True: 468, False: 0]
  ------------------
  746|    468|        memcpy(m->statusmessage, status, length);
  747|    468|    }
  748|       |
  749|    468|    m->statusmessage_length = length;
  750|       |
  751|    816|    for (uint32_t i = 0; i < m->numfriends; ++i) {
  ------------------
  |  Branch (751:26): [True: 348, False: 468]
  ------------------
  752|    348|        m->friendlist[i].statusmessage_sent = false;
  753|    348|    }
  754|       |
  755|    468|    return 0;
  756|    621|}
m_set_userstatus:
  789|    616|{
  790|    616|    if (status >= USERSTATUS_INVALID) {
  ------------------
  |  Branch (790:9): [True: 255, False: 361]
  ------------------
  791|    255|        return -1;
  792|    255|    }
  793|       |
  794|    361|    if (m->userstatus == status) {
  ------------------
  |  Branch (794:9): [True: 213, False: 148]
  ------------------
  795|    213|        return 0;
  796|    213|    }
  797|       |
  798|    148|    userstatus_from_int(status, &m->userstatus);
  799|       |
  800|    266|    for (uint32_t i = 0; i < m->numfriends; ++i) {
  ------------------
  |  Branch (800:26): [True: 118, False: 148]
  ------------------
  801|    118|        m->friendlist[i].userstatus_sent = false;
  802|    118|    }
  803|       |
  804|    148|    return 0;
  805|    361|}
m_callback_friendrequest:
  959|  1.49k|{
  960|  1.49k|    m->friend_request = function;
  961|  1.49k|}
m_callback_friendmessage:
  965|  1.49k|{
  966|  1.49k|    m->friend_message = function;
  967|  1.49k|}
m_callback_namechange:
  970|  1.49k|{
  971|  1.49k|    m->friend_namechange = function;
  972|  1.49k|}
m_callback_statusmessage:
  975|  1.49k|{
  976|  1.49k|    m->friend_statusmessagechange = function;
  977|  1.49k|}
m_callback_userstatus:
  980|  1.49k|{
  981|  1.49k|    m->friend_userstatuschange = function;
  982|  1.49k|}
m_callback_typingchange:
  985|  1.49k|{
  986|  1.49k|    m->friend_typingchange = function;
  987|  1.49k|}
m_callback_read_receipt:
  990|  1.49k|{
  991|  1.49k|    m->read_receipt = function;
  992|  1.49k|}
m_callback_connectionstatus:
  995|  1.49k|{
  996|  1.49k|    m->friend_connectionstatuschange = function;
  997|  1.49k|}
m_callback_core_connection:
 1000|  1.49k|{
 1001|  1.49k|    m->core_connection_change = function;
 1002|  1.49k|}
m_callback_conference_invite:
 1060|  3.95k|{
 1061|  3.95k|    m->conference_invite = function;
 1062|  3.95k|}
m_callback_group_invite:
 1066|  1.49k|{
 1067|  1.49k|    m->group_invite = function;
 1068|  1.49k|}
callback_file_sendrequest:
 1093|  1.49k|{
 1094|  1.49k|    m->file_sendrequest = function;
 1095|  1.49k|}
callback_file_control:
 1099|  1.49k|{
 1100|  1.49k|    m->file_filecontrol = function;
 1101|  1.49k|}
callback_file_data:
 1105|  1.49k|{
 1106|  1.49k|    m->file_filedata = function;
 1107|  1.49k|}
callback_file_reqchunk:
 1111|  1.49k|{
 1112|  1.49k|    m->file_reqchunk = function;
 1113|  1.49k|}
custom_lossy_packet_registerhandler:
 1822|  1.49k|{
 1823|  1.49k|    m->lossy_packethandler = lossy_packethandler;
 1824|  1.49k|}
custom_lossless_packet_registerhandler:
 1875|  1.49k|{
 1876|  1.49k|    m->lossless_packethandler = lossless_packethandler;
 1877|  1.49k|}
m_register_state_plugin:
 2793|  17.7k|{
 2794|  17.7k|    const uint32_t new_length = m->options.state_plugins_length + 1;
 2795|  17.7k|    Messenger_State_Plugin *temp = (Messenger_State_Plugin *)mem_vrealloc(
 2796|  17.7k|                                       m->mem, m->options.state_plugins, new_length, sizeof(Messenger_State_Plugin));
 2797|       |
 2798|  17.7k|    if (temp == nullptr) {
  ------------------
  |  |   63|  17.7k|#define nullptr NULL
  ------------------
  |  Branch (2798:9): [True: 0, False: 17.7k]
  ------------------
 2799|      0|        return false;
 2800|      0|    }
 2801|       |
 2802|  17.7k|    m->options.state_plugins = temp;
 2803|  17.7k|    m->options.state_plugins_length = new_length;
 2804|       |
 2805|  17.7k|    const uint8_t index = m->options.state_plugins_length - 1;
 2806|  17.7k|    m->options.state_plugins[index].type = type;
 2807|  17.7k|    m->options.state_plugins[index].size = size_callback;
 2808|  17.7k|    m->options.state_plugins[index].load = load_callback;
 2809|  17.7k|    m->options.state_plugins[index].save = save_callback;
 2810|       |
 2811|  17.7k|    return true;
 2812|  17.7k|}
messenger_size:
 2831|  2.98k|{
 2832|  2.98k|    return m_state_plugins_size(m);
 2833|  2.98k|}
messenger_save:
 2837|  1.49k|{
 2838|  14.9k|    for (uint8_t i = 0; i < m->options.state_plugins_length; ++i) {
  ------------------
  |  Branch (2838:25): [True: 13.4k, False: 1.49k]
  ------------------
 2839|  13.4k|        const Messenger_State_Plugin plugin = m->options.state_plugins[i];
 2840|  13.4k|        data = plugin.save(m, data);
 2841|  13.4k|    }
 2842|       |
 2843|  1.49k|    return data;
 2844|  1.49k|}
messenger_load_state_section:
 3277|  34.3k|{
 3278|   231k|    for (uint8_t i = 0; i < m->options.state_plugins_length; ++i) {
  ------------------
  |  Branch (3278:25): [True: 230k, False: 865]
  ------------------
 3279|   230k|        const Messenger_State_Plugin *const plugin = &m->options.state_plugins[i];
 3280|       |
 3281|   230k|        if (plugin->type == type) {
  ------------------
  |  Branch (3281:13): [True: 33.4k, False: 197k]
  ------------------
 3282|  33.4k|            *status = plugin->load(m, data, length);
 3283|  33.4k|            return true;
 3284|  33.4k|        }
 3285|   230k|    }
 3286|       |
 3287|    865|    return false;
 3288|  34.3k|}
count_friendlist:
 3296|  4.48k|{
 3297|  4.48k|    uint32_t ret = 0;
 3298|       |
 3299|  4.85k|    for (uint32_t i = 0; i < m->numfriends; ++i) {
  ------------------
  |  Branch (3299:26): [True: 372, False: 4.48k]
  ------------------
 3300|    372|        if (m->friendlist[i].status > 0) {
  ------------------
  |  Branch (3300:13): [True: 372, False: 0]
  ------------------
 3301|    372|            ++ret;
 3302|    372|        }
 3303|    372|    }
 3304|       |
 3305|  4.48k|    return ret;
 3306|  4.48k|}
new_messenger:
 3358|  1.97k|{
 3359|  1.97k|    if (options == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (3359:9): [True: 0, False: 1.97k]
  ------------------
 3360|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3361|      0|    }
 3362|       |
 3363|  1.97k|    if (error != nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (3363:9): [True: 1.97k, False: 0]
  ------------------
 3364|  1.97k|        *error = MESSENGER_ERROR_OTHER;
 3365|  1.97k|    }
 3366|       |
 3367|  1.97k|    Messenger *m = (Messenger *)mem_alloc(mem, sizeof(Messenger));
 3368|       |
 3369|  1.97k|    if (m == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (3369:9): [True: 0, False: 1.97k]
  ------------------
 3370|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3371|      0|    }
 3372|       |
 3373|  1.97k|    m->mono_time = mono_time;
 3374|  1.97k|    m->mem = mem;
 3375|  1.97k|    m->rng = rng;
 3376|  1.97k|    m->ns = ns;
 3377|       |
 3378|  1.97k|    m->fr = friendreq_new(mem);
 3379|       |
 3380|  1.97k|    if (m->fr == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (3380:9): [True: 0, False: 1.97k]
  ------------------
 3381|      0|        mem_delete(mem, m);
 3382|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3383|      0|    }
 3384|       |
 3385|  1.97k|    m->log = logger_new(mem);
 3386|       |
 3387|  1.97k|    if (m->log == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (3387:9): [True: 0, False: 1.97k]
  ------------------
 3388|      0|        friendreq_kill(m->fr);
 3389|      0|        mem_delete(mem, m);
 3390|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3391|      0|    }
 3392|       |
 3393|  1.97k|    logger_callback_log(m->log, options->log_callback, options->log_context, options->log_user_data);
 3394|       |
 3395|  1.97k|    unsigned int net_err = 0;
 3396|       |
 3397|  1.97k|    if (!options->udp_disabled && options->proxy_info.proxy_type != TCP_PROXY_NONE) {
  ------------------
  |  Branch (3397:9): [True: 1.97k, False: 0]
  |  Branch (3397:35): [True: 0, False: 1.97k]
  ------------------
 3398|       |        // We don't currently support UDP over proxy.
 3399|      0|        LOGGER_INFO(m->log, "UDP enabled and proxy set: disabling UDP");
  ------------------
  |  |   78|      0|#define LOGGER_INFO(log, ...)    LOGGER_WRITE(log, LOGGER_LEVEL_INFO, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3400|      0|        options->udp_disabled = true;
 3401|      0|    }
 3402|       |
 3403|  1.97k|    if (options->udp_disabled) {
  ------------------
  |  Branch (3403:9): [True: 0, False: 1.97k]
  ------------------
 3404|      0|        m->net = new_networking_no_udp(m->log, m->mem, m->ns);
 3405|  1.97k|    } else {
 3406|  1.97k|        IP ip;
 3407|  1.97k|        ip_init(&ip, options->ipv6enabled);
 3408|  1.97k|        m->net = new_networking_ex(m->log, m->mem, m->ns, &ip, options->port_range[0], options->port_range[1], &net_err);
 3409|  1.97k|    }
 3410|       |
 3411|  1.97k|    if (m->net == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (3411:9): [True: 0, False: 1.97k]
  ------------------
 3412|      0|        friendreq_kill(m->fr);
 3413|       |
 3414|      0|        if (error != nullptr && net_err == 1) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (3414:13): [True: 0, False: 0]
  |  Branch (3414:33): [True: 0, False: 0]
  ------------------
 3415|      0|            LOGGER_WARNING(m->log, "network initialisation failed (no ports available)");
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3416|      0|            *error = MESSENGER_ERROR_PORT;
 3417|      0|        }
 3418|       |
 3419|      0|        logger_kill(m->log);
 3420|      0|        mem_delete(mem, m);
 3421|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3422|      0|    }
 3423|       |
 3424|  1.97k|    m->dht = new_dht(m->log, m->mem, m->rng, m->ns, m->mono_time, m->net, options->hole_punching_enabled, options->local_discovery_enabled);
 3425|       |
 3426|  1.97k|    if (m->dht == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (3426:9): [True: 0, False: 1.97k]
  ------------------
 3427|      0|        kill_networking(m->net);
 3428|      0|        friendreq_kill(m->fr);
 3429|      0|        logger_kill(m->log);
 3430|      0|        mem_delete(mem, m);
 3431|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3432|      0|    }
 3433|       |
 3434|  1.97k|    m->tcp_np = netprof_new(m->log, mem);
 3435|       |
 3436|  1.97k|    if (m->tcp_np == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (3436:9): [True: 0, False: 1.97k]
  ------------------
 3437|      0|        LOGGER_WARNING(m->log, "TCP netprof initialisation failed");
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3438|      0|        kill_dht(m->dht);
 3439|      0|        kill_networking(m->net);
 3440|      0|        friendreq_kill(m->fr);
 3441|      0|        logger_kill(m->log);
 3442|      0|        mem_delete(mem, m);
 3443|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3444|      0|    }
 3445|       |
 3446|  1.97k|    m->net_crypto = new_net_crypto(m->log, m->mem, m->rng, m->ns, m->mono_time, m->dht, &options->proxy_info, m->tcp_np);
 3447|       |
 3448|  1.97k|    if (m->net_crypto == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (3448:9): [True: 0, False: 1.97k]
  ------------------
 3449|      0|        LOGGER_WARNING(m->log, "net_crypto initialisation failed");
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3450|       |
 3451|      0|        netprof_kill(mem, m->tcp_np);
 3452|      0|        kill_dht(m->dht);
 3453|      0|        kill_networking(m->net);
 3454|      0|        friendreq_kill(m->fr);
 3455|      0|        logger_kill(m->log);
 3456|      0|        mem_delete(mem, m);
 3457|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3458|      0|    }
 3459|       |
 3460|  1.97k|    m->group_announce = new_gca_list(m->mem);
 3461|       |
 3462|  1.97k|    if (m->group_announce == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (3462:9): [True: 0, False: 1.97k]
  ------------------
 3463|      0|        LOGGER_WARNING(m->log, "DHT group chats initialisation failed");
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3464|       |
 3465|      0|        kill_net_crypto(m->net_crypto);
 3466|      0|        netprof_kill(mem, m->tcp_np);
 3467|      0|        kill_dht(m->dht);
 3468|      0|        kill_networking(m->net);
 3469|      0|        friendreq_kill(m->fr);
 3470|      0|        logger_kill(m->log);
 3471|      0|        mem_delete(mem, m);
 3472|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3473|      0|    }
 3474|       |
 3475|  1.97k|    if (options->dht_announcements_enabled) {
  ------------------
  |  Branch (3475:9): [True: 1.97k, False: 0]
  ------------------
 3476|  1.97k|        m->forwarding = new_forwarding(m->log, m->mem, m->rng, m->mono_time, m->dht);
 3477|  1.97k|        if (m->forwarding != nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (3477:13): [True: 1.97k, False: 0]
  ------------------
 3478|  1.97k|            m->announce = new_announcements(m->log, m->mem, m->rng, m->mono_time, m->forwarding);
 3479|  1.97k|        } else {
 3480|      0|            m->announce = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3481|      0|        }
 3482|  1.97k|    } else {
 3483|      0|        m->forwarding = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3484|      0|        m->announce = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3485|      0|    }
 3486|       |
 3487|  1.97k|    m->onion = new_onion(m->log, m->mem, m->mono_time, m->rng, m->dht);
 3488|  1.97k|    m->onion_a = new_onion_announce(m->log, m->mem, m->rng, m->mono_time, m->dht);
 3489|  1.97k|    m->onion_c = new_onion_client(m->log, m->mem, m->rng, m->mono_time, m->net_crypto);
 3490|  1.97k|    if (m->onion_c != nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (3490:9): [True: 1.97k, False: 0]
  ------------------
 3491|  1.97k|        m->fr_c = new_friend_connections(m->log, m->mem, m->mono_time, m->ns, m->onion_c, options->local_discovery_enabled);
 3492|  1.97k|    }
 3493|       |
 3494|  1.97k|    if ((options->dht_announcements_enabled && (m->forwarding == nullptr || m->announce == nullptr)) ||
  ------------------
  |  |   63|  3.95k|#define nullptr NULL
  ------------------
                  if ((options->dht_announcements_enabled && (m->forwarding == nullptr || m->announce == nullptr)) ||
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (3494:10): [True: 1.97k, False: 0]
  |  Branch (3494:49): [True: 0, False: 1.97k]
  |  Branch (3494:77): [True: 0, False: 1.97k]
  ------------------
 3495|  1.97k|            m->onion == nullptr || m->onion_a == nullptr || m->onion_c == nullptr || m->fr_c == nullptr) {
  ------------------
  |  |   63|  3.95k|#define nullptr NULL
  ------------------
                          m->onion == nullptr || m->onion_a == nullptr || m->onion_c == nullptr || m->fr_c == nullptr) {
  ------------------
  |  |   63|  3.95k|#define nullptr NULL
  ------------------
                          m->onion == nullptr || m->onion_a == nullptr || m->onion_c == nullptr || m->fr_c == nullptr) {
  ------------------
  |  |   63|  3.95k|#define nullptr NULL
  ------------------
                          m->onion == nullptr || m->onion_a == nullptr || m->onion_c == nullptr || m->fr_c == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (3495:13): [True: 0, False: 1.97k]
  |  Branch (3495:36): [True: 0, False: 1.97k]
  |  Branch (3495:61): [True: 0, False: 1.97k]
  |  Branch (3495:86): [True: 0, False: 1.97k]
  ------------------
 3496|      0|        LOGGER_WARNING(m->log, "onion initialisation failed");
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|       |
 3498|      0|        kill_onion(m->onion);
 3499|      0|        kill_onion_announce(m->onion_a);
 3500|      0|        kill_onion_client(m->onion_c);
 3501|      0|        kill_gca(m->group_announce);
 3502|      0|        kill_friend_connections(m->fr_c);
 3503|      0|        kill_announcements(m->announce);
 3504|      0|        kill_forwarding(m->forwarding);
 3505|      0|        kill_net_crypto(m->net_crypto);
 3506|      0|        netprof_kill(mem, m->tcp_np);
 3507|      0|        kill_dht(m->dht);
 3508|      0|        kill_networking(m->net);
 3509|      0|        friendreq_kill(m->fr);
 3510|      0|        logger_kill(m->log);
 3511|      0|        mem_delete(mem, m);
 3512|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3513|      0|    }
 3514|       |
 3515|  1.97k|    gca_onion_init(m->group_announce, m->onion_a);
 3516|       |
 3517|  1.97k|    m->group_handler = new_dht_groupchats(m);
 3518|       |
 3519|  1.97k|    if (m->group_handler == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (3519:9): [True: 0, False: 1.97k]
  ------------------
 3520|      0|        LOGGER_WARNING(m->log, "conferences initialisation failed");
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3521|       |
 3522|      0|        kill_onion(m->onion);
 3523|      0|        kill_onion_announce(m->onion_a);
 3524|      0|        kill_onion_client(m->onion_c);
 3525|      0|        kill_gca(m->group_announce);
 3526|      0|        kill_friend_connections(m->fr_c);
 3527|      0|        kill_announcements(m->announce);
 3528|      0|        kill_forwarding(m->forwarding);
 3529|      0|        kill_net_crypto(m->net_crypto);
 3530|      0|        netprof_kill(mem, m->tcp_np);
 3531|      0|        kill_dht(m->dht);
 3532|      0|        kill_networking(m->net);
 3533|      0|        friendreq_kill(m->fr);
 3534|      0|        logger_kill(m->log);
 3535|      0|        mem_delete(mem, m);
 3536|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3537|      0|    }
 3538|       |
 3539|  1.97k|    if (options->tcp_server_port != 0) {
  ------------------
  |  Branch (3539:9): [True: 0, False: 1.97k]
  ------------------
 3540|      0|        m->tcp_server = new_tcp_server(m->log, m->mem, m->rng, m->ns, options->ipv6enabled, 1,
 3541|      0|                                       &options->tcp_server_port, dht_get_self_secret_key(m->dht),
 3542|      0|                                       m->onion, m->forwarding);
 3543|       |
 3544|      0|        if (m->tcp_server == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (3544:13): [True: 0, False: 0]
  ------------------
 3545|      0|            LOGGER_WARNING(m->log, "TCP server initialisation failed");
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3546|       |
 3547|      0|            kill_onion(m->onion);
 3548|      0|            kill_onion_announce(m->onion_a);
 3549|      0|            kill_dht_groupchats(m->group_handler);
 3550|      0|            kill_friend_connections(m->fr_c);
 3551|      0|            kill_onion_client(m->onion_c);
 3552|      0|            kill_gca(m->group_announce);
 3553|      0|            kill_announcements(m->announce);
 3554|      0|            kill_forwarding(m->forwarding);
 3555|      0|            kill_net_crypto(m->net_crypto);
 3556|      0|            netprof_kill(mem, m->tcp_np);
 3557|      0|            kill_dht(m->dht);
 3558|      0|            kill_networking(m->net);
 3559|      0|            friendreq_kill(m->fr);
 3560|      0|            logger_kill(m->log);
 3561|      0|            mem_delete(mem, m);
 3562|       |
 3563|      0|            if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (3563:17): [True: 0, False: 0]
  ------------------
 3564|      0|                *error = MESSENGER_ERROR_TCP_SERVER;
 3565|      0|            }
 3566|       |
 3567|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3568|      0|        }
 3569|      0|    }
 3570|       |
 3571|  1.97k|    m->options = *options;
 3572|  1.97k|    friendreq_init(m->fr, m->fr_c);
 3573|  1.97k|    set_nospam(m->fr, random_u32(m->rng));
 3574|  1.97k|    set_filter_function(m->fr, &friend_already_added, m);
 3575|       |
 3576|  1.97k|    m->lastdump = 0;
 3577|  1.97k|    m->is_receiving_file = 0;
 3578|       |
 3579|  1.97k|    m_register_default_plugins(m);
 3580|  1.97k|    callback_friendrequest(m->fr, m_handle_friend_request, m);
 3581|       |
 3582|  1.97k|    if (error != nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (3582:9): [True: 1.97k, False: 0]
  ------------------
 3583|  1.97k|        *error = MESSENGER_ERROR_NONE;
 3584|  1.97k|    }
 3585|       |
 3586|  1.97k|    return m;
 3587|  1.97k|}
kill_messenger:
 3594|  1.97k|{
 3595|  1.97k|    if (m == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (3595:9): [True: 0, False: 1.97k]
  ------------------
 3596|      0|        return;
 3597|      0|    }
 3598|       |
 3599|  1.97k|    if (m->tcp_server != nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (3599:9): [True: 0, False: 1.97k]
  ------------------
 3600|      0|        kill_tcp_server(m->tcp_server);
 3601|      0|    }
 3602|       |
 3603|  1.97k|    kill_onion(m->onion);
 3604|  1.97k|    kill_onion_announce(m->onion_a);
 3605|  1.97k|    kill_dht_groupchats(m->group_handler);
 3606|  1.97k|    kill_friend_connections(m->fr_c);
 3607|  1.97k|    kill_onion_client(m->onion_c);
 3608|  1.97k|    kill_gca(m->group_announce);
 3609|  1.97k|    kill_announcements(m->announce);
 3610|  1.97k|    kill_forwarding(m->forwarding);
 3611|  1.97k|    kill_net_crypto(m->net_crypto);
 3612|  1.97k|    netprof_kill(m->mem, m->tcp_np);
 3613|  1.97k|    kill_dht(m->dht);
 3614|  1.97k|    kill_networking(m->net);
 3615|       |
 3616|  2.24k|    for (uint32_t i = 0; i < m->numfriends; ++i) {
  ------------------
  |  Branch (3616:26): [True: 272, False: 1.97k]
  ------------------
 3617|    272|        clear_receipts(m, i);
 3618|    272|    }
 3619|       |
 3620|  1.97k|    mem_delete(m->mem, m->friendlist);
 3621|  1.97k|    friendreq_kill(m->fr);
 3622|       |
 3623|  1.97k|    mem_delete(m->mem, m->options.state_plugins);
 3624|  1.97k|    logger_kill(m->log);
 3625|  1.97k|    mem_delete(m->mem, m);
 3626|  1.97k|}
Messenger.c:init_new_friend:
  158|    272|{
  159|    272|    if (m->numfriends == UINT32_MAX) {
  ------------------
  |  Branch (159:9): [True: 0, False: 272]
  ------------------
  160|      0|        LOGGER_ERROR(m->log, "Friend list full: we have more than 4 billion friends");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  161|       |        /* This is technically incorrect, but close enough. */
  162|      0|        return FAERR_NOMEM;
  163|      0|    }
  164|       |
  165|       |    /* Resize the friend list if necessary. */
  166|    272|    if (realloc_friendlist(m, m->numfriends + 1) != 0) {
  ------------------
  |  Branch (166:9): [True: 0, False: 272]
  ------------------
  167|      0|        return FAERR_NOMEM;
  168|      0|    }
  169|       |
  170|    272|    m->friendlist[m->numfriends] = empty_friend;
  171|       |
  172|    272|    const int friendcon_id = new_friend_connection(m->fr_c, real_pk);
  173|       |
  174|    272|    if (friendcon_id == -1) {
  ------------------
  |  Branch (174:9): [True: 0, False: 272]
  ------------------
  175|      0|        return FAERR_NOMEM;
  176|      0|    }
  177|       |
  178|    588|    for (uint32_t i = 0; i <= m->numfriends; ++i) {
  ------------------
  |  Branch (178:26): [True: 588, False: 0]
  ------------------
  179|    588|        if (m->friendlist[i].status == NOFRIEND) {
  ------------------
  |  Branch (179:13): [True: 272, False: 316]
  ------------------
  180|    272|            m->friendlist[i].status = status;
  181|    272|            m->friendlist[i].friendcon_id = friendcon_id;
  182|    272|            m->friendlist[i].friendrequest_lastsent = 0;
  183|    272|            pk_copy(m->friendlist[i].real_pk, real_pk);
  184|    272|            m->friendlist[i].statusmessage_length = 0;
  185|    272|            m->friendlist[i].userstatus = USERSTATUS_NONE;
  186|    272|            m->friendlist[i].is_typing = false;
  187|    272|            m->friendlist[i].message_id = 0;
  188|    272|            friend_connection_callbacks(m->fr_c, friendcon_id, MESSENGER_CALLBACK_INDEX, &m_handle_status, &m_handle_packet,
  ------------------
  |  |   24|    272|#define MESSENGER_CALLBACK_INDEX 0
  ------------------
  189|    272|                                        &m_handle_lossy_packet, m, i);
  190|       |
  191|    272|            if (m->numfriends == i) {
  ------------------
  |  Branch (191:17): [True: 272, False: 0]
  ------------------
  192|    272|                ++m->numfriends;
  193|    272|            }
  194|       |
  195|    272|            if (friend_con_connected(m->fr_c, friendcon_id) == FRIENDCONN_STATUS_CONNECTED) {
  ------------------
  |  Branch (195:17): [True: 0, False: 272]
  ------------------
  196|      0|                send_online_packet(m, friendcon_id);
  197|      0|            }
  198|       |
  199|    272|            return i;
  200|    272|        }
  201|    588|    }
  202|       |
  203|      0|    return FAERR_NOMEM;
  204|    272|}
Messenger.c:set_friend_statusmessage:
  930|    230|{
  931|    230|    if (!m_friend_exists(m, friendnumber)) {
  ------------------
  |  Branch (931:9): [True: 0, False: 230]
  ------------------
  932|      0|        return -1;
  933|      0|    }
  934|       |
  935|    230|    if (length > MAX_STATUSMESSAGE_LENGTH) {
  ------------------
  |  |   37|    230|#define MAX_STATUSMESSAGE_LENGTH 1007
  ------------------
  |  Branch (935:9): [True: 135, False: 95]
  ------------------
  936|    135|        return -1;
  937|    135|    }
  938|       |
  939|     95|    if (length > 0) {
  ------------------
  |  Branch (939:9): [True: 49, False: 46]
  ------------------
  940|     49|        memcpy(m->friendlist[friendnumber].statusmessage, status, length);
  941|     49|    }
  942|       |
  943|     95|    m->friendlist[friendnumber].statusmessage_length = length;
  944|     95|    return 0;
  945|    230|}
Messenger.c:set_friend_userstatus:
  948|    230|{
  949|    230|    userstatus_from_int(status, &m->friendlist[friendnumber].userstatus);
  950|    230|}
Messenger.c:m_add_friend_contact_norequest:
  207|    241|{
  208|    241|    if (getfriend_id(m, real_pk) != -1) {
  ------------------
  |  Branch (208:9): [True: 11, False: 230]
  ------------------
  209|     11|        return FAERR_ALREADYSENT;
  210|     11|    }
  211|       |
  212|    230|    if (pk_equal(real_pk, nc_get_self_public_key(m->net_crypto))) {
  ------------------
  |  Branch (212:9): [True: 0, False: 230]
  ------------------
  213|      0|        return FAERR_OWNKEY;
  214|      0|    }
  215|       |
  216|    230|    return init_new_friend(m, real_pk, FRIEND_CONFIRMED);
  217|    230|}
Messenger.c:clear_receipts:
  315|    272|{
  316|    272|    if (!m_friend_exists(m, friendnumber)) {
  ------------------
  |  Branch (316:9): [True: 0, False: 272]
  ------------------
  317|      0|        return -1;
  318|      0|    }
  319|       |
  320|    272|    struct Receipts *receipts = m->friendlist[friendnumber].receipts_start;
  321|       |
  322|    272|    while (receipts != nullptr) {
  ------------------
  |  |   63|    272|#define nullptr NULL
  ------------------
  |  Branch (322:12): [True: 0, False: 272]
  ------------------
  323|      0|        struct Receipts *temp_r = receipts->next;
  324|      0|        mem_delete(m->mem, receipts);
  325|      0|        receipts = temp_r;
  326|      0|    }
  327|       |
  328|    272|    m->friendlist[friendnumber].receipts_start = nullptr;
  ------------------
  |  |   63|    272|#define nullptr NULL
  ------------------
  329|    272|    m->friendlist[friendnumber].receipts_end = nullptr;
  ------------------
  |  |   63|    272|#define nullptr NULL
  ------------------
  330|    272|    return 0;
  331|    272|}
Messenger.c:realloc_friendlist:
   65|    272|{
   66|    272|    if (num == 0) {
  ------------------
  |  Branch (66:9): [True: 0, False: 272]
  ------------------
   67|      0|        mem_delete(m->mem, m->friendlist);
   68|      0|        m->friendlist = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   69|      0|        return 0;
   70|      0|    }
   71|       |
   72|    272|    Friend *newfriendlist = (Friend *)mem_vrealloc(m->mem, m->friendlist, num, sizeof(Friend));
   73|       |
   74|    272|    if (newfriendlist == nullptr) {
  ------------------
  |  |   63|    272|#define nullptr NULL
  ------------------
  |  Branch (74:9): [True: 0, False: 272]
  ------------------
   75|      0|        return -1;
   76|      0|    }
   77|       |
   78|    272|    m->friendlist = newfriendlist;
   79|    272|    return 0;
   80|    272|}
Messenger.c:userstatus_from_int:
  759|    378|{
  760|    378|    switch (status) {
  761|    167|        case USERSTATUS_NONE: {
  ------------------
  |  Branch (761:9): [True: 167, False: 211]
  ------------------
  762|    167|            *out_enum = USERSTATUS_NONE;
  763|    167|            return true;
  764|      0|        }
  765|       |
  766|      7|        case USERSTATUS_AWAY: {
  ------------------
  |  Branch (766:9): [True: 7, False: 371]
  ------------------
  767|      7|            *out_enum = USERSTATUS_AWAY;
  768|      7|            return true;
  769|      0|        }
  770|       |
  771|     75|        case USERSTATUS_BUSY: {
  ------------------
  |  Branch (771:9): [True: 75, False: 303]
  ------------------
  772|     75|            *out_enum = USERSTATUS_BUSY;
  773|     75|            return true;
  774|      0|        }
  775|       |
  776|      0|        case USERSTATUS_INVALID: {
  ------------------
  |  Branch (776:9): [True: 0, False: 378]
  ------------------
  777|      0|            *out_enum = USERSTATUS_INVALID;
  778|      0|            return true;
  779|      0|        }
  780|       |
  781|    129|        default: {
  ------------------
  |  Branch (781:9): [True: 129, False: 249]
  ------------------
  782|    129|            *out_enum = USERSTATUS_INVALID;
  783|    129|            return false;
  784|      0|        }
  785|    378|    }
  786|    378|}
Messenger.c:m_state_plugins_size:
 2770|  2.98k|{
 2771|  2.98k|    const uint32_t size32 = sizeof(uint32_t);
 2772|  2.98k|    const uint32_t sizesubhead = size32 * 2;
 2773|       |
 2774|  2.98k|    uint32_t size = 0;
 2775|       |
 2776|  2.98k|    for (const Messenger_State_Plugin *plugin = m->options.state_plugins;
 2777|  29.8k|            plugin != m->options.state_plugins + m->options.state_plugins_length;
  ------------------
  |  Branch (2777:13): [True: 26.8k, False: 2.98k]
  ------------------
 2778|  26.8k|            ++plugin) {
 2779|  26.8k|        size += sizesubhead + plugin->size(m);
 2780|  26.8k|    }
 2781|       |
 2782|  2.98k|    return size;
 2783|  2.98k|}
Messenger.c:m_register_default_plugins:
 3260|  1.97k|{
 3261|  1.97k|    m_register_state_plugin(m, STATE_TYPE_NOSPAMKEYS, nospam_keys_size, load_nospam_keys, save_nospam_keys);
 3262|  1.97k|    m_register_state_plugin(m, STATE_TYPE_DHT, m_dht_size, m_dht_load, save_dht);
 3263|  1.97k|    m_register_state_plugin(m, STATE_TYPE_FRIENDS, saved_friendslist_size, friends_list_load, friends_list_save);
 3264|  1.97k|    m_register_state_plugin(m, STATE_TYPE_NAME, name_size, load_name, save_name);
 3265|  1.97k|    m_register_state_plugin(m, STATE_TYPE_STATUSMESSAGE, status_message_size, load_status_message,
 3266|  1.97k|                            save_status_message);
 3267|  1.97k|    m_register_state_plugin(m, STATE_TYPE_STATUS, status_size, load_status, save_status);
 3268|  1.97k|    if (m->options.groups_persistence_enabled) {
  ------------------
  |  Branch (3268:9): [True: 1.97k, False: 0]
  ------------------
 3269|  1.97k|        m_register_state_plugin(m, STATE_TYPE_GROUPS, saved_groups_size, groups_load, groups_save);
 3270|  1.97k|    }
 3271|  1.97k|    m_register_state_plugin(m, STATE_TYPE_TCP_RELAY, tcp_relay_size, load_tcp_relays, save_tcp_relays);
 3272|  1.97k|    m_register_state_plugin(m, STATE_TYPE_PATH_NODE, path_node_size, load_path_nodes, save_path_nodes);
 3273|  1.97k|}
Messenger.c:nospam_keys_size:
 2848|  5.10k|{
 2849|  5.10k|    return sizeof(uint32_t) + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_SECRET_KEY_SIZE;
  ------------------
  |  |   43|  5.10k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
                  return sizeof(uint32_t) + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_SECRET_KEY_SIZE;
  ------------------
  |  |   48|  5.10k|#define CRYPTO_SECRET_KEY_SIZE         32
  ------------------
 2850|  5.10k|}
Messenger.c:load_nospam_keys:
 2853|    626|{
 2854|    626|    if (length != m_plugin_size(m, STATE_TYPE_NOSPAMKEYS)) {
  ------------------
  |  Branch (2854:9): [True: 1, False: 625]
  ------------------
 2855|      1|        return STATE_LOAD_STATUS_ERROR;
 2856|      1|    }
 2857|       |
 2858|    625|    uint32_t nospam;
 2859|    625|    lendian_bytes_to_host32(&nospam, data);
 2860|    625|    set_nospam(m->fr, nospam);
 2861|    625|    load_secret_key(m->net_crypto, data + sizeof(uint32_t) + CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|    625|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 2862|       |
 2863|    625|    if (!pk_equal(data + sizeof(uint32_t), nc_get_self_public_key(m->net_crypto))) {
  ------------------
  |  Branch (2863:9): [True: 5, False: 620]
  ------------------
 2864|      5|        LOGGER_ERROR(m->log, "public key stored in savedata does not match its secret key");
  ------------------
  |  |   80|      5|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      5|    do {                                                                         \
  |  |  |  |   70|      5|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     10|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      5|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      5|        }                                                                        \
  |  |  |  |   73|      5|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2865|      5|        return STATE_LOAD_STATUS_ERROR;
 2866|      5|    }
 2867|       |
 2868|    620|    return STATE_LOAD_STATUS_CONTINUE;
 2869|    625|}
Messenger.c:m_plugin_size:
 2815|  9.78k|{
 2816|  33.3k|    for (uint8_t i = 0; i < m->options.state_plugins_length; ++i) {
  ------------------
  |  Branch (2816:25): [True: 33.3k, False: 0]
  ------------------
 2817|  33.3k|        const Messenger_State_Plugin plugin = m->options.state_plugins[i];
 2818|       |
 2819|  33.3k|        if (plugin.type == type) {
  ------------------
  |  Branch (2819:13): [True: 9.78k, False: 23.5k]
  ------------------
 2820|  9.78k|            return plugin.size(m);
 2821|  9.78k|        }
 2822|  33.3k|    }
 2823|       |
 2824|      0|    LOGGER_ERROR(m->log, "Unknown type encountered: %u", type);
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2825|       |
 2826|      0|    return UINT32_MAX;
 2827|  9.78k|}
Messenger.c:save_nospam_keys:
 2872|  1.49k|{
 2873|  1.49k|    const uint32_t len = m_plugin_size(m, STATE_TYPE_NOSPAMKEYS);
 2874|  1.49k|    static_assert(sizeof(get_nospam(m->fr)) == sizeof(uint32_t), "nospam doesn't fit in a 32 bit int");
 2875|  1.49k|    data = state_write_section_header(data, STATE_COOKIE_TYPE, len, STATE_TYPE_NOSPAMKEYS);
  ------------------
  |  |   29|  1.49k|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 2876|  1.49k|    const uint32_t nospam = get_nospam(m->fr);
 2877|  1.49k|    host_to_lendian_bytes32(data, nospam);
 2878|  1.49k|    save_keys(m->net_crypto, data + sizeof(uint32_t));
 2879|  1.49k|    data += len;
 2880|  1.49k|    return data;
 2881|  1.49k|}
Messenger.c:m_dht_size:
 2885|  4.48k|{
 2886|  4.48k|    return dht_size(m->dht);
 2887|  4.48k|}
Messenger.c:m_dht_load:
 2899|    810|{
 2900|    810|    dht_load(m->dht, data, length); // TODO(endoffile78): Should we throw an error if dht_load fails?
 2901|    810|    return STATE_LOAD_STATUS_CONTINUE;
 2902|    810|}
Messenger.c:save_dht:
 2890|  1.49k|{
 2891|  1.49k|    const uint32_t len = m_plugin_size(m, STATE_TYPE_DHT);
 2892|  1.49k|    data = state_write_section_header(data, STATE_COOKIE_TYPE, len, STATE_TYPE_DHT);
  ------------------
  |  |   29|  1.49k|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 2893|  1.49k|    dht_save(m->dht, data);
 2894|  1.49k|    data += len;
 2895|  1.49k|    return data;
 2896|  1.49k|}
Messenger.c:saved_friendslist_size:
 2906|  4.48k|{
 2907|  4.48k|    return count_friendlist(m) * friend_size();
 2908|  4.48k|}
Messenger.c:friend_size:
 2662|  6.52k|{
 2663|  6.52k|    uint32_t data = 0;
 2664|  6.52k|    const struct Saved_Friend *const temp = nullptr;
  ------------------
  |  |   63|  6.52k|#define nullptr NULL
  ------------------
 2665|       |
 2666|  6.52k|#define VALUE_MEMBER(data, name) \
 2667|  6.52k|    do {                         \
 2668|  6.52k|        data += sizeof(name);    \
 2669|  6.52k|    } while (0)
 2670|  6.52k|#define ARRAY_MEMBER(data, name) \
 2671|  6.52k|    do {                         \
 2672|  6.52k|        data += sizeof(name);    \
 2673|  6.52k|    } while (0)
 2674|       |
 2675|       |    // Exactly the same in friend_load, friend_save, and friend_size
 2676|  6.52k|    VALUE_MEMBER(data, temp->status);
  ------------------
  |  | 2667|  6.52k|    do {                         \
  |  | 2668|  6.52k|        data += sizeof(name);    \
  |  | 2669|  6.52k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2669:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2677|  6.52k|    ARRAY_MEMBER(data, temp->real_pk);
  ------------------
  |  | 2671|  6.52k|    do {                         \
  |  | 2672|  6.52k|        data += sizeof(name);    \
  |  | 2673|  6.52k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2673:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2678|  6.52k|    ARRAY_MEMBER(data, temp->info);
  ------------------
  |  | 2671|  6.52k|    do {                         \
  |  | 2672|  6.52k|        data += sizeof(name);    \
  |  | 2673|  6.52k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2673:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2679|  6.52k|    ++data; // padding
 2680|  6.52k|    VALUE_MEMBER(data, temp->info_size);
  ------------------
  |  | 2667|  6.52k|    do {                         \
  |  | 2668|  6.52k|        data += sizeof(name);    \
  |  | 2669|  6.52k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2669:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2681|  6.52k|    ARRAY_MEMBER(data, temp->name);
  ------------------
  |  | 2671|  6.52k|    do {                         \
  |  | 2672|  6.52k|        data += sizeof(name);    \
  |  | 2673|  6.52k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2673:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2682|  6.52k|    VALUE_MEMBER(data, temp->name_length);
  ------------------
  |  | 2667|  6.52k|    do {                         \
  |  | 2668|  6.52k|        data += sizeof(name);    \
  |  | 2669|  6.52k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2669:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2683|  6.52k|    ARRAY_MEMBER(data, temp->statusmessage);
  ------------------
  |  | 2671|  6.52k|    do {                         \
  |  | 2672|  6.52k|        data += sizeof(name);    \
  |  | 2673|  6.52k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2673:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2684|  6.52k|    ++data; // padding
 2685|  6.52k|    VALUE_MEMBER(data, temp->statusmessage_length);
  ------------------
  |  | 2667|  6.52k|    do {                         \
  |  | 2668|  6.52k|        data += sizeof(name);    \
  |  | 2669|  6.52k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2669:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2686|  6.52k|    VALUE_MEMBER(data, temp->userstatus);
  ------------------
  |  | 2667|  6.52k|    do {                         \
  |  | 2668|  6.52k|        data += sizeof(name);    \
  |  | 2669|  6.52k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2669:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2687|  6.52k|    data += 3; // padding
 2688|  6.52k|    VALUE_MEMBER(data, temp->friendrequest_nospam);
  ------------------
  |  | 2667|  6.52k|    do {                         \
  |  | 2668|  6.52k|        data += sizeof(name);    \
  |  | 2669|  6.52k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2669:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2689|  6.52k|    ARRAY_MEMBER(data, temp->last_seen_time);
  ------------------
  |  | 2671|  6.52k|    do {                         \
  |  | 2672|  6.52k|        data += sizeof(name);    \
  |  | 2673|  6.52k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2673:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2690|       |
 2691|  6.52k|#undef VALUE_MEMBER
 2692|  6.52k|#undef ARRAY_MEMBER
 2693|       |
 2694|  6.52k|    return data;
 2695|  6.52k|}
Messenger.c:friends_list_load:
 2961|    300|{
 2962|    300|    const uint32_t l_friend_size = friend_size();
 2963|       |
 2964|    300|    if (length % l_friend_size != 0) {
  ------------------
  |  Branch (2964:9): [True: 1, False: 299]
  ------------------
 2965|      1|        return STATE_LOAD_STATUS_ERROR; // TODO(endoffile78): error or continue?
 2966|      1|    }
 2967|       |
 2968|    299|    const uint32_t num = length / l_friend_size;
 2969|    299|    const uint8_t *cur_data = data;
 2970|       |
 2971|    774|    for (uint32_t i = 0; i < num; ++i) {
  ------------------
  |  Branch (2971:26): [True: 475, False: 299]
  ------------------
 2972|    475|        struct Saved_Friend temp = { 0 };
 2973|    475|        const uint8_t *next_data = friend_load(&temp, cur_data);
 2974|    475|        assert(next_data - cur_data == l_friend_size);
 2975|       |
 2976|    475|        cur_data = next_data;
 2977|       |
 2978|    475|        if (temp.status >= 3) {
  ------------------
  |  Branch (2978:13): [True: 279, False: 196]
  ------------------
 2979|    279|            const int fnum = m_addfriend_norequest(m, temp.real_pk);
 2980|       |
 2981|    279|            if (fnum < 0) {
  ------------------
  |  Branch (2981:17): [True: 49, False: 230]
  ------------------
 2982|     49|                continue;
 2983|     49|            }
 2984|       |
 2985|    230|            setfriendname(m, fnum, temp.name, net_ntohs(temp.name_length));
 2986|    230|            set_friend_statusmessage(m, fnum, temp.statusmessage, net_ntohs(temp.statusmessage_length));
 2987|    230|            set_friend_userstatus(m, fnum, temp.userstatus);
 2988|    230|            net_unpack_u64(temp.last_seen_time, &m->friendlist[fnum].last_seen_time);
 2989|    230|        } else if (temp.status != 0) {
  ------------------
  |  Branch (2989:20): [True: 128, False: 68]
  ------------------
 2990|       |            /* TODO(irungentoo): This is not a good way to do this. */
 2991|    128|            uint8_t address[FRIEND_ADDRESS_SIZE];
 2992|    128|            pk_copy(address, temp.real_pk);
 2993|    128|            memcpy(address + CRYPTO_PUBLIC_KEY_SIZE, &temp.friendrequest_nospam, sizeof(uint32_t));
  ------------------
  |  |   43|    128|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 2994|    128|            uint16_t checksum = data_checksum(address, FRIEND_ADDRESS_SIZE - sizeof(checksum));
  ------------------
  |  |   43|    128|#define FRIEND_ADDRESS_SIZE (CRYPTO_PUBLIC_KEY_SIZE + sizeof(uint32_t) + sizeof(uint16_t))
  |  |  ------------------
  |  |  |  |   43|    128|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
 2995|    128|            memcpy(address + CRYPTO_PUBLIC_KEY_SIZE + sizeof(uint32_t), &checksum, sizeof(checksum));
  ------------------
  |  |   43|    128|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 2996|    128|            m_addfriend(m, address, temp.info, net_ntohs(temp.info_size));
 2997|    128|        }
 2998|    475|    }
 2999|       |
 3000|    299|    return STATE_LOAD_STATUS_CONTINUE;
 3001|    299|}
Messenger.c:friend_load:
 2734|    475|{
 2735|    475|#define VALUE_MEMBER(data, name)           \
 2736|    475|    do {                                   \
 2737|    475|        memcpy(&name, data, sizeof(name)); \
 2738|    475|        data += sizeof(name);              \
 2739|    475|    } while (0)
 2740|       |
 2741|    475|#define ARRAY_MEMBER(data, name)          \
 2742|    475|    do {                                  \
 2743|    475|        memcpy(name, data, sizeof(name)); \
 2744|    475|        data += sizeof(name);             \
 2745|    475|    } while (0)
 2746|       |
 2747|       |    // Exactly the same in friend_load, friend_save, and friend_size
 2748|    475|    VALUE_MEMBER(data, temp->status);
  ------------------
  |  | 2736|    475|    do {                                   \
  |  | 2737|    475|        memcpy(&name, data, sizeof(name)); \
  |  | 2738|    475|        data += sizeof(name);              \
  |  | 2739|    475|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2739:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2749|    475|    ARRAY_MEMBER(data, temp->real_pk);
  ------------------
  |  | 2742|    475|    do {                                  \
  |  | 2743|    475|        memcpy(name, data, sizeof(name)); \
  |  | 2744|    475|        data += sizeof(name);             \
  |  | 2745|    475|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2745:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2750|    475|    ARRAY_MEMBER(data, temp->info);
  ------------------
  |  | 2742|    475|    do {                                  \
  |  | 2743|    475|        memcpy(name, data, sizeof(name)); \
  |  | 2744|    475|        data += sizeof(name);             \
  |  | 2745|    475|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2745:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2751|    475|    ++data; // padding
 2752|    475|    VALUE_MEMBER(data, temp->info_size);
  ------------------
  |  | 2736|    475|    do {                                   \
  |  | 2737|    475|        memcpy(&name, data, sizeof(name)); \
  |  | 2738|    475|        data += sizeof(name);              \
  |  | 2739|    475|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2739:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2753|    475|    ARRAY_MEMBER(data, temp->name);
  ------------------
  |  | 2742|    475|    do {                                  \
  |  | 2743|    475|        memcpy(name, data, sizeof(name)); \
  |  | 2744|    475|        data += sizeof(name);             \
  |  | 2745|    475|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2745:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2754|    475|    VALUE_MEMBER(data, temp->name_length);
  ------------------
  |  | 2736|    475|    do {                                   \
  |  | 2737|    475|        memcpy(&name, data, sizeof(name)); \
  |  | 2738|    475|        data += sizeof(name);              \
  |  | 2739|    475|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2739:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2755|    475|    ARRAY_MEMBER(data, temp->statusmessage);
  ------------------
  |  | 2742|    475|    do {                                  \
  |  | 2743|    475|        memcpy(name, data, sizeof(name)); \
  |  | 2744|    475|        data += sizeof(name);             \
  |  | 2745|    475|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2745:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2756|    475|    ++data; // padding
 2757|    475|    VALUE_MEMBER(data, temp->statusmessage_length);
  ------------------
  |  | 2736|    475|    do {                                   \
  |  | 2737|    475|        memcpy(&name, data, sizeof(name)); \
  |  | 2738|    475|        data += sizeof(name);              \
  |  | 2739|    475|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2739:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2758|    475|    VALUE_MEMBER(data, temp->userstatus);
  ------------------
  |  | 2736|    475|    do {                                   \
  |  | 2737|    475|        memcpy(&name, data, sizeof(name)); \
  |  | 2738|    475|        data += sizeof(name);              \
  |  | 2739|    475|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2739:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2759|    475|    data += 3; // padding
 2760|    475|    VALUE_MEMBER(data, temp->friendrequest_nospam);
  ------------------
  |  | 2736|    475|    do {                                   \
  |  | 2737|    475|        memcpy(&name, data, sizeof(name)); \
  |  | 2738|    475|        data += sizeof(name);              \
  |  | 2739|    475|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2739:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2761|    475|    ARRAY_MEMBER(data, temp->last_seen_time);
  ------------------
  |  | 2742|    475|    do {                                  \
  |  | 2743|    475|        memcpy(name, data, sizeof(name)); \
  |  | 2744|    475|        data += sizeof(name);             \
  |  | 2745|    475|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2745:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2762|       |
 2763|    475|#undef VALUE_MEMBER
 2764|    475|#undef ARRAY_MEMBER
 2765|       |
 2766|    475|    return data;
 2767|    475|}
Messenger.c:friends_list_save:
 2911|  1.49k|{
 2912|  1.49k|    const uint32_t len = m_plugin_size(m, STATE_TYPE_FRIENDS);
 2913|  1.49k|    data = state_write_section_header(data, STATE_COOKIE_TYPE, len, STATE_TYPE_FRIENDS);
  ------------------
  |  |   29|  1.49k|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 2914|       |
 2915|  1.49k|    uint32_t num = 0;
 2916|  1.49k|    uint8_t *cur_data = data;
 2917|       |
 2918|  1.61k|    for (uint32_t i = 0; i < m->numfriends; ++i) {
  ------------------
  |  Branch (2918:26): [True: 124, False: 1.49k]
  ------------------
 2919|    124|        if (m->friendlist[i].status > 0) {
  ------------------
  |  Branch (2919:13): [True: 124, False: 0]
  ------------------
 2920|    124|            struct Saved_Friend temp = { 0 };
 2921|    124|            temp.status = m->friendlist[i].status;
 2922|    124|            memcpy(temp.real_pk, m->friendlist[i].real_pk, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|    124|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 2923|       |
 2924|    124|            if (temp.status < 3) {
  ------------------
  |  Branch (2924:17): [True: 27, False: 97]
  ------------------
 2925|       |                // TODO(iphydf): Use uint16_t and min_u16 here.
 2926|     27|                const size_t friendrequest_length =
 2927|     27|                    min_u32(m->friendlist[i].info_size,
 2928|     27|                            min_u32(SAVED_FRIEND_REQUEST_SIZE, MAX_FRIEND_REQUEST_DATA_SIZE));
  ------------------
  |  | 2644|     27|#define SAVED_FRIEND_REQUEST_SIZE 1024
  ------------------
                                          min_u32(SAVED_FRIEND_REQUEST_SIZE, MAX_FRIEND_REQUEST_DATA_SIZE));
  ------------------
  |  |   19|     27|#define MAX_FRIEND_REQUEST_DATA_SIZE (ONION_CLIENT_MAX_DATA_SIZE - 100)
  |  |  ------------------
  |  |  |  |  173|     27|#define ONION_CLIENT_MAX_DATA_SIZE (MAX_DATA_REQUEST_SIZE - ONION_DATA_IN_RESPONSE_MIN_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   42|     27|#define MAX_DATA_REQUEST_SIZE (ONION_MAX_DATA_SIZE - ONION_DATA_REQUEST_MIN_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   52|     27|#define ONION_MAX_DATA_SIZE (ONION_MAX_PACKET_SIZE - (ONION_SEND_1 + 1))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   41|     27|#define ONION_MAX_PACKET_SIZE 1400
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define ONION_MAX_DATA_SIZE (ONION_MAX_PACKET_SIZE - (ONION_SEND_1 + 1))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   50|     27|#define ONION_SEND_1 (CRYPTO_NONCE_SIZE + ONION_SEND_BASE*3)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   69|     27|#define CRYPTO_NONCE_SIZE              24
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |               #define ONION_SEND_1 (CRYPTO_NONCE_SIZE + ONION_SEND_BASE*3)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   47|     27|#define ONION_SEND_BASE (CRYPTO_PUBLIC_KEY_SIZE + SIZE_IPPORT + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |   43|     27|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |               #define ONION_SEND_BASE (CRYPTO_PUBLIC_KEY_SIZE + SIZE_IPPORT + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  189|     27|#define SIZE_IPPORT (SIZE_IP + SIZE_PORT)
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  187|     27|#define SIZE_IP (1 + SIZE_IP6)
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  186|     27|#define SIZE_IP6 16
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |               #define SIZE_IPPORT (SIZE_IP + SIZE_PORT)
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  188|     27|#define SIZE_PORT 2
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |               #define ONION_SEND_BASE (CRYPTO_PUBLIC_KEY_SIZE + SIZE_IPPORT + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |   64|     27|#define CRYPTO_MAC_SIZE                16
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define MAX_DATA_REQUEST_SIZE (ONION_MAX_DATA_SIZE - ONION_DATA_REQUEST_MIN_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   41|     27|#define ONION_DATA_REQUEST_MIN_SIZE (1 + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_NONCE_SIZE + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   43|     27|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define ONION_DATA_REQUEST_MIN_SIZE (1 + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_NONCE_SIZE + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   69|     27|#define CRYPTO_NONCE_SIZE              24
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define ONION_DATA_REQUEST_MIN_SIZE (1 + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_NONCE_SIZE + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   43|     27|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define ONION_DATA_REQUEST_MIN_SIZE (1 + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_NONCE_SIZE + CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   64|     27|#define CRYPTO_MAC_SIZE                16
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define ONION_CLIENT_MAX_DATA_SIZE (MAX_DATA_REQUEST_SIZE - ONION_DATA_IN_RESPONSE_MIN_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  170|     27|#define ONION_DATA_IN_RESPONSE_MIN_SIZE (CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   43|     27|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define ONION_DATA_IN_RESPONSE_MIN_SIZE (CRYPTO_PUBLIC_KEY_SIZE + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   64|     27|#define CRYPTO_MAC_SIZE                16
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2929|     27|                memcpy(temp.info, m->friendlist[i].info, friendrequest_length);
 2930|       |
 2931|     27|                temp.info_size = net_htons(m->friendlist[i].info_size);
 2932|     27|                temp.friendrequest_nospam = m->friendlist[i].friendrequest_nospam;
 2933|     97|            } else {
 2934|     97|                temp.status = 3;
 2935|     97|                memcpy(temp.name, m->friendlist[i].name, m->friendlist[i].name_length);
 2936|     97|                temp.name_length = net_htons(m->friendlist[i].name_length);
 2937|     97|                memcpy(temp.statusmessage, m->friendlist[i].statusmessage, m->friendlist[i].statusmessage_length);
 2938|     97|                temp.statusmessage_length = net_htons(m->friendlist[i].statusmessage_length);
 2939|     97|                temp.userstatus = m->friendlist[i].userstatus;
 2940|       |
 2941|     97|                net_pack_u64(temp.last_seen_time, m->friendlist[i].last_seen_time);
 2942|     97|            }
 2943|       |
 2944|    124|            uint8_t *next_data = friend_save(&temp, cur_data);
 2945|    124|            assert(next_data - cur_data == friend_size());
 2946|    124|#ifdef __LP64__
 2947|    124|            assert(memcmp(cur_data, &temp, friend_size()) == 0);
 2948|    124|#endif /* __LP64__ */
 2949|    124|            cur_data = next_data;
 2950|    124|            ++num;
 2951|    124|        }
 2952|    124|    }
 2953|       |
 2954|  1.49k|    assert(cur_data - data == num * friend_size());
 2955|  1.49k|    data += len;
 2956|       |
 2957|  1.49k|    return data;
 2958|  1.49k|}
Messenger.c:friend_save:
 2698|    124|{
 2699|    124|#define VALUE_MEMBER(data, name)           \
 2700|    124|    do {                                   \
 2701|    124|        memcpy(data, &name, sizeof(name)); \
 2702|    124|        data += sizeof(name);              \
 2703|    124|    } while (0)
 2704|       |
 2705|    124|#define ARRAY_MEMBER(data, name)          \
 2706|    124|    do {                                  \
 2707|    124|        memcpy(data, name, sizeof(name)); \
 2708|    124|        data += sizeof(name);             \
 2709|    124|    } while (0)
 2710|       |
 2711|       |    // Exactly the same in friend_load, friend_save, and friend_size
 2712|    124|    VALUE_MEMBER(data, temp->status);
  ------------------
  |  | 2700|    124|    do {                                   \
  |  | 2701|    124|        memcpy(data, &name, sizeof(name)); \
  |  | 2702|    124|        data += sizeof(name);              \
  |  | 2703|    124|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2703:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2713|    124|    ARRAY_MEMBER(data, temp->real_pk);
  ------------------
  |  | 2706|    124|    do {                                  \
  |  | 2707|    124|        memcpy(data, name, sizeof(name)); \
  |  | 2708|    124|        data += sizeof(name);             \
  |  | 2709|    124|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2709:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2714|    124|    ARRAY_MEMBER(data, temp->info);
  ------------------
  |  | 2706|    124|    do {                                  \
  |  | 2707|    124|        memcpy(data, name, sizeof(name)); \
  |  | 2708|    124|        data += sizeof(name);             \
  |  | 2709|    124|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2709:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2715|    124|    ++data; // padding
 2716|    124|    VALUE_MEMBER(data, temp->info_size);
  ------------------
  |  | 2700|    124|    do {                                   \
  |  | 2701|    124|        memcpy(data, &name, sizeof(name)); \
  |  | 2702|    124|        data += sizeof(name);              \
  |  | 2703|    124|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2703:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2717|    124|    ARRAY_MEMBER(data, temp->name);
  ------------------
  |  | 2706|    124|    do {                                  \
  |  | 2707|    124|        memcpy(data, name, sizeof(name)); \
  |  | 2708|    124|        data += sizeof(name);             \
  |  | 2709|    124|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2709:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2718|    124|    VALUE_MEMBER(data, temp->name_length);
  ------------------
  |  | 2700|    124|    do {                                   \
  |  | 2701|    124|        memcpy(data, &name, sizeof(name)); \
  |  | 2702|    124|        data += sizeof(name);              \
  |  | 2703|    124|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2703:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2719|    124|    ARRAY_MEMBER(data, temp->statusmessage);
  ------------------
  |  | 2706|    124|    do {                                  \
  |  | 2707|    124|        memcpy(data, name, sizeof(name)); \
  |  | 2708|    124|        data += sizeof(name);             \
  |  | 2709|    124|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2709:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2720|    124|    ++data; // padding
 2721|    124|    VALUE_MEMBER(data, temp->statusmessage_length);
  ------------------
  |  | 2700|    124|    do {                                   \
  |  | 2701|    124|        memcpy(data, &name, sizeof(name)); \
  |  | 2702|    124|        data += sizeof(name);              \
  |  | 2703|    124|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2703:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2722|    124|    VALUE_MEMBER(data, temp->userstatus);
  ------------------
  |  | 2700|    124|    do {                                   \
  |  | 2701|    124|        memcpy(data, &name, sizeof(name)); \
  |  | 2702|    124|        data += sizeof(name);              \
  |  | 2703|    124|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2703:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2723|    124|    data += 3; // padding
 2724|    124|    VALUE_MEMBER(data, temp->friendrequest_nospam);
  ------------------
  |  | 2700|    124|    do {                                   \
  |  | 2701|    124|        memcpy(data, &name, sizeof(name)); \
  |  | 2702|    124|        data += sizeof(name);              \
  |  | 2703|    124|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2703:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2725|    124|    ARRAY_MEMBER(data, temp->last_seen_time);
  ------------------
  |  | 2706|    124|    do {                                  \
  |  | 2707|    124|        memcpy(data, name, sizeof(name)); \
  |  | 2708|    124|        data += sizeof(name);             \
  |  | 2709|    124|    } while (0)
  |  |  ------------------
  |  |  |  Branch (2709:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2726|       |
 2727|    124|#undef VALUE_MEMBER
 2728|    124|#undef ARRAY_MEMBER
 2729|       |
 2730|    124|    return data;
 2731|    124|}
Messenger.c:name_size:
 3101|  4.48k|{
 3102|  4.48k|    return m->name_length;
 3103|  4.48k|}
Messenger.c:load_name:
 3115|    458|{
 3116|    458|    if (length > 0 && length <= MAX_NAME_LENGTH) {
  ------------------
  |  |   35|    392|#define MAX_NAME_LENGTH 128
  ------------------
  |  Branch (3116:9): [True: 392, False: 66]
  |  Branch (3116:23): [True: 326, False: 66]
  ------------------
 3117|    326|        setname(m, data, length);
 3118|    326|    }
 3119|       |
 3120|    458|    return STATE_LOAD_STATUS_CONTINUE;
 3121|    458|}
Messenger.c:save_name:
 3106|  1.49k|{
 3107|  1.49k|    const uint32_t len = m_plugin_size(m, STATE_TYPE_NAME);
 3108|  1.49k|    data = state_write_section_header(data, STATE_COOKIE_TYPE, len, STATE_TYPE_NAME);
  ------------------
  |  |   29|  1.49k|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 3109|  1.49k|    memcpy(data, m->name, len);
 3110|  1.49k|    data += len;
 3111|  1.49k|    return data;
 3112|  1.49k|}
Messenger.c:status_message_size:
 3125|  4.48k|{
 3126|  4.48k|    return m->statusmessage_length;
 3127|  4.48k|}
Messenger.c:load_status_message:
 3139|    737|{
 3140|    737|    if (length > 0 && length <= MAX_STATUSMESSAGE_LENGTH) {
  ------------------
  |  |   37|    631|#define MAX_STATUSMESSAGE_LENGTH 1007
  ------------------
  |  Branch (3140:9): [True: 631, False: 106]
  |  Branch (3140:23): [True: 621, False: 10]
  ------------------
 3141|    621|        m_set_statusmessage(m, data, length);
 3142|    621|    }
 3143|       |
 3144|    737|    return STATE_LOAD_STATUS_CONTINUE;
 3145|    737|}
Messenger.c:save_status_message:
 3130|  1.49k|{
 3131|  1.49k|    const uint32_t len = m_plugin_size(m, STATE_TYPE_STATUSMESSAGE);
 3132|  1.49k|    data = state_write_section_header(data, STATE_COOKIE_TYPE, len, STATE_TYPE_STATUSMESSAGE);
  ------------------
  |  |   29|  1.49k|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 3133|  1.49k|    memcpy(data, m->statusmessage, len);
 3134|  1.49k|    data += len;
 3135|  1.49k|    return data;
 3136|  1.49k|}
Messenger.c:status_size:
 3149|  4.48k|{
 3150|  4.48k|    return 1;
 3151|  4.48k|}
Messenger.c:load_status:
 3163|    652|{
 3164|    652|    if (length == 1) {
  ------------------
  |  Branch (3164:9): [True: 616, False: 36]
  ------------------
 3165|    616|        m_set_userstatus(m, *data);
 3166|    616|    }
 3167|       |
 3168|    652|    return STATE_LOAD_STATUS_CONTINUE;
 3169|    652|}
Messenger.c:save_status:
 3154|  1.49k|{
 3155|  1.49k|    const uint32_t len = m_plugin_size(m, STATE_TYPE_STATUS);
 3156|  1.49k|    data = state_write_section_header(data, STATE_COOKIE_TYPE, len, STATE_TYPE_STATUS);
  ------------------
  |  |   29|  1.49k|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 3157|  1.49k|    *data = m->userstatus;
 3158|  1.49k|    data += len;
 3159|  1.49k|    return data;
 3160|  1.49k|}
Messenger.c:saved_groups_size:
 3027|  3.18k|{
 3028|  3.18k|    const GC_Session *session = m->group_handler;
 3029|  3.18k|    return bin_pack_obj_size(pack_groupchats_handler, session, m->log);
 3030|  3.18k|}
Messenger.c:pack_groupchats_handler:
 3020|  3.37k|{
 3021|  3.37k|    const GC_Session *session = (const GC_Session *)obj;
 3022|  3.37k|    pack_groupchats(session, bp);
 3023|  3.37k|    return true;  // TODO(iphydf): Return bool from pack functions.
 3024|  3.37k|}
Messenger.c:pack_groupchats:
 3004|  3.37k|{
 3005|  3.37k|    assert(bp != nullptr && c != nullptr);
 3006|  3.37k|    bin_pack_array(bp, gc_count_groups(c));
 3007|       |
 3008|  7.64k|    for (uint32_t i = 0; i < c->chats_index; ++i) { // this loop must match the one in gc_count_groups()
  ------------------
  |  Branch (3008:26): [True: 4.27k, False: 3.37k]
  ------------------
 3009|  4.27k|        const GC_Chat *chat = &c->chats[i];
 3010|       |
 3011|  4.27k|        if (!gc_group_is_valid(chat)) {
  ------------------
  |  Branch (3011:13): [True: 2.42k, False: 1.84k]
  ------------------
 3012|  2.42k|            continue;
 3013|  2.42k|        }
 3014|       |
 3015|  1.84k|        gc_group_save(chat, bp);
 3016|  1.84k|    }
 3017|  3.37k|}
Messenger.c:groups_load:
 3090|  28.8k|{
 3091|  28.8k|    if (!bin_unpack_obj(m->mem, handle_groups_load, m, data, length)) {
  ------------------
  |  Branch (3091:9): [True: 38, False: 28.7k]
  ------------------
 3092|     38|        LOGGER_ERROR(m->log, "msgpack failed to unpack groupchats array");
  ------------------
  |  |   80|     38|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     38|    do {                                                                         \
  |  |  |  |   70|     38|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     76|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     38|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     38|        }                                                                        \
  |  |  |  |   73|     38|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3093|     38|        return STATE_LOAD_STATUS_ERROR;
 3094|     38|    }
 3095|       |
 3096|  28.7k|    return STATE_LOAD_STATUS_CONTINUE;
 3097|  28.8k|}
Messenger.c:handle_groups_load:
 3063|  28.8k|{
 3064|  28.8k|    Messenger *m = (Messenger *)obj;
 3065|       |
 3066|  28.8k|    uint32_t num_groups;
 3067|  28.8k|    if (!bin_unpack_array(bu, &num_groups)) {
  ------------------
  |  Branch (3067:9): [True: 38, False: 28.7k]
  ------------------
 3068|     38|        LOGGER_ERROR(m->log, "msgpack failed to unpack groupchats array: expected array");
  ------------------
  |  |   80|     38|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     38|    do {                                                                         \
  |  |  |  |   70|     38|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     76|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     38|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     38|        }                                                                        \
  |  |  |  |   73|     38|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3069|     38|        return false;
 3070|     38|    }
 3071|       |
 3072|  28.7k|    LOGGER_DEBUG(m->log, "Loading %u groups", num_groups);
  ------------------
  |  |   77|  28.7k|#define LOGGER_DEBUG(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_DEBUG, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|  28.7k|    do {                                                                         \
  |  |  |  |   70|  28.7k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  57.5k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|  28.7k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3073|       |
 3074|  28.9k|    for (uint32_t i = 0; i < num_groups; ++i) {
  ------------------
  |  Branch (3074:26): [True: 28.7k, False: 172]
  ------------------
 3075|  28.7k|        const int group_number = gc_group_load(m->group_handler, bu);
 3076|       |
 3077|  28.7k|        if (group_number < 0) {
  ------------------
  |  Branch (3077:13): [True: 28.6k, False: 111]
  ------------------
 3078|  28.6k|            LOGGER_WARNING(m->log, "Failed to load group %u", i);
  ------------------
  |  |   79|  28.6k|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|  28.6k|    do {                                                                         \
  |  |  |  |   70|  28.6k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  57.2k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|  28.6k|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|  28.6k|        }                                                                        \
  |  |  |  |   73|  28.6k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3079|       |            // Can't recover trivially. We may need to skip over some data here.
 3080|  28.6k|            break;
 3081|  28.6k|        }
 3082|  28.7k|    }
 3083|       |
 3084|  28.7k|    LOGGER_DEBUG(m->log, "Successfully loaded %u groups", gc_count_groups(m->group_handler));
  ------------------
  |  |   77|  28.7k|#define LOGGER_DEBUG(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_DEBUG, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|  28.7k|    do {                                                                         \
  |  |  |  |   70|  28.7k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  57.5k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|  28.7k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3085|       |
 3086|  28.7k|    return true;
 3087|  28.8k|}
Messenger.c:groups_save:
 3033|  1.49k|{
 3034|  1.49k|    const GC_Session *c = m->group_handler;
 3035|       |
 3036|  1.49k|    const uint32_t num_groups = gc_count_groups(c);
 3037|       |
 3038|  1.49k|    if (num_groups == 0) {
  ------------------
  |  Branch (3038:9): [True: 1.30k, False: 193]
  ------------------
 3039|  1.30k|        return data;
 3040|  1.30k|    }
 3041|       |
 3042|    193|    const uint32_t len = m_plugin_size(m, STATE_TYPE_GROUPS);
 3043|       |
 3044|    193|    if (len == 0) {
  ------------------
  |  Branch (3044:9): [True: 0, False: 193]
  ------------------
 3045|      0|        return data;
 3046|      0|    }
 3047|       |
 3048|    193|    data = state_write_section_header(data, STATE_COOKIE_TYPE, len, STATE_TYPE_GROUPS);
  ------------------
  |  |   29|    193|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 3049|       |
 3050|    193|    if (!bin_pack_obj(pack_groupchats_handler, c, m->log, data, len)) {
  ------------------
  |  Branch (3050:9): [True: 0, False: 193]
  ------------------
 3051|      0|        LOGGER_FATAL(m->log, "failed to pack group chats into buffer of length %u", len);
  ------------------
  |  |   83|      0|    do {                                \
  |  |   84|      0|        LOGGER_ERROR(log, __VA_ARGS__); \
  |  |  ------------------
  |  |  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   85|      0|        logger_abort();                 \
  |  |   86|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (86:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 3052|      0|        return data;
 3053|      0|    }
 3054|       |
 3055|    193|    data += len;
 3056|       |
 3057|    193|    LOGGER_DEBUG(m->log, "Saved %u groups (length %u)", num_groups, len);
  ------------------
  |  |   77|    193|#define LOGGER_DEBUG(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_DEBUG, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|    193|    do {                                                                         \
  |  |  |  |   70|    193|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    386|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|    193|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3058|       |
 3059|    193|    return data;
 3060|    193|}
Messenger.c:tcp_relay_size:
 3173|  2.98k|{
 3174|  2.98k|    return NUM_SAVED_TCP_RELAYS * packed_node_size(net_family_tcp_ipv6());
  ------------------
  |  |   39|  2.98k|#define NUM_SAVED_TCP_RELAYS 8
  ------------------
 3175|  2.98k|}
Messenger.c:load_tcp_relays:
 3202|    621|{
 3203|    621|    if (length > 0) {
  ------------------
  |  Branch (3203:9): [True: 555, False: 66]
  ------------------
 3204|    555|        const int num = unpack_nodes(m->loaded_relays, NUM_SAVED_TCP_RELAYS, nullptr, data, length, true);
  ------------------
  |  |   39|    555|#define NUM_SAVED_TCP_RELAYS 8
  ------------------
                      const int num = unpack_nodes(m->loaded_relays, NUM_SAVED_TCP_RELAYS, nullptr, data, length, true);
  ------------------
  |  |   63|    555|#define nullptr NULL
  ------------------
 3205|       |
 3206|    555|        if (num == -1) {
  ------------------
  |  Branch (3206:13): [True: 100, False: 455]
  ------------------
 3207|    100|            m->num_loaded_relays = 0;
 3208|    100|            return STATE_LOAD_STATUS_CONTINUE;
 3209|    100|        }
 3210|       |
 3211|    455|        m->num_loaded_relays = num;
 3212|    455|        m->has_added_relays = false;
 3213|    455|    }
 3214|       |
 3215|    521|    return STATE_LOAD_STATUS_CONTINUE;
 3216|    621|}
Messenger.c:save_tcp_relays:
 3178|  1.49k|{
 3179|  1.49k|    Node_format relays[NUM_SAVED_TCP_RELAYS] = {{{0}}};
 3180|  1.49k|    uint8_t *temp_data = data;
 3181|  1.49k|    data = state_write_section_header(temp_data, STATE_COOKIE_TYPE, 0, STATE_TYPE_TCP_RELAY);
  ------------------
  |  |   29|  1.49k|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 3182|       |
 3183|  1.49k|    if (m->num_loaded_relays > 0) {
  ------------------
  |  Branch (3183:9): [True: 34, False: 1.46k]
  ------------------
 3184|     34|        memcpy(relays, m->loaded_relays, sizeof(Node_format) * m->num_loaded_relays);
 3185|     34|    }
 3186|       |
 3187|  1.49k|    uint32_t num = m->num_loaded_relays;
 3188|  1.49k|    num += copy_connected_tcp_relays(m->net_crypto, relays + num, NUM_SAVED_TCP_RELAYS - num);
  ------------------
  |  |   39|  1.49k|#define NUM_SAVED_TCP_RELAYS 8
  ------------------
 3189|       |
 3190|  1.49k|    const int l = pack_nodes(m->log, data, NUM_SAVED_TCP_RELAYS * packed_node_size(net_family_tcp_ipv6()), relays, num);
  ------------------
  |  |   39|  1.49k|#define NUM_SAVED_TCP_RELAYS 8
  ------------------
 3191|       |
 3192|  1.49k|    if (l > 0) {
  ------------------
  |  Branch (3192:9): [True: 34, False: 1.46k]
  ------------------
 3193|     34|        const uint32_t len = l;
 3194|     34|        data = state_write_section_header(temp_data, STATE_COOKIE_TYPE, len, STATE_TYPE_TCP_RELAY);
  ------------------
  |  |   29|     34|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 3195|     34|        data += len;
 3196|     34|    }
 3197|       |
 3198|  1.49k|    return data;
 3199|  1.49k|}
Messenger.c:path_node_size:
 3220|  2.98k|{
 3221|  2.98k|    return NUM_SAVED_PATH_NODES * packed_node_size(net_family_tcp_ipv6());
  ------------------
  |  | 2645|  2.98k|#define NUM_SAVED_PATH_NODES 8
  ------------------
 3222|  2.98k|}
Messenger.c:load_path_nodes:
 3242|    424|{
 3243|    424|    if (length > 0) {
  ------------------
  |  Branch (3243:9): [True: 356, False: 68]
  ------------------
 3244|    356|        Node_format nodes[NUM_SAVED_PATH_NODES];
 3245|    356|        const int num = unpack_nodes(nodes, NUM_SAVED_PATH_NODES, nullptr, data, length, false);
  ------------------
  |  | 2645|    356|#define NUM_SAVED_PATH_NODES 8
  ------------------
                      const int num = unpack_nodes(nodes, NUM_SAVED_PATH_NODES, nullptr, data, length, false);
  ------------------
  |  |   63|    356|#define nullptr NULL
  ------------------
 3246|       |
 3247|    356|        if (num == -1) {
  ------------------
  |  Branch (3247:13): [True: 52, False: 304]
  ------------------
 3248|     52|            return STATE_LOAD_STATUS_CONTINUE;
 3249|     52|        }
 3250|       |
 3251|  2.23k|        for (int i = 0; i < num; ++i) {
  ------------------
  |  Branch (3251:25): [True: 1.92k, False: 304]
  ------------------
 3252|  1.92k|            onion_add_bs_path_node(m->onion_c, &nodes[i].ip_port, nodes[i].public_key);
 3253|  1.92k|        }
 3254|    304|    }
 3255|       |
 3256|    372|    return STATE_LOAD_STATUS_CONTINUE;
 3257|    424|}
Messenger.c:save_path_nodes:
 3225|  1.49k|{
 3226|  1.49k|    Node_format nodes[NUM_SAVED_PATH_NODES] = {{{0}}};
 3227|  1.49k|    uint8_t *temp_data = data;
 3228|  1.49k|    data = state_write_section_header(data, STATE_COOKIE_TYPE, 0, STATE_TYPE_PATH_NODE);
  ------------------
  |  |   29|  1.49k|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 3229|  1.49k|    const unsigned int num = onion_backup_nodes(m->onion_c, nodes, NUM_SAVED_PATH_NODES);
  ------------------
  |  | 2645|  1.49k|#define NUM_SAVED_PATH_NODES 8
  ------------------
 3230|  1.49k|    const int l = pack_nodes(m->log, data, NUM_SAVED_PATH_NODES * packed_node_size(net_family_tcp_ipv6()), nodes, num);
  ------------------
  |  | 2645|  1.49k|#define NUM_SAVED_PATH_NODES 8
  ------------------
 3231|       |
 3232|  1.49k|    if (l > 0) {
  ------------------
  |  Branch (3232:9): [True: 35, False: 1.45k]
  ------------------
 3233|     35|        const uint32_t len = l;
 3234|     35|        data = state_write_section_header(temp_data, STATE_COOKIE_TYPE, len, STATE_TYPE_PATH_NODE);
  ------------------
  |  |   29|     35|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 3235|     35|        data += len;
 3236|     35|    }
 3237|       |
 3238|  1.49k|    return data;
 3239|  1.49k|}

tcp_connections_count:
   74|    111|{
   75|    111|    return tcp_c->tcp_connections_length;
   76|    111|}
set_packet_tcp_connection_callback:
  539|  2.08k|{
  540|  2.08k|    tcp_c->tcp_data_callback = tcp_data_callback;
  541|  2.08k|    tcp_c->tcp_data_callback_object = object;
  542|  2.08k|}
set_oob_packet_tcp_connection_callback:
  546|  2.08k|{
  547|  2.08k|    tcp_c->tcp_oob_callback = tcp_oob_callback;
  548|  2.08k|    tcp_c->tcp_oob_callback_object = object;
  549|  2.08k|}
set_onion_packet_tcp_connection_callback:
  553|  3.95k|{
  554|  3.95k|    tcp_c->tcp_onion_callback = tcp_onion_callback;
  555|  3.95k|    tcp_c->tcp_onion_callback_object = object;
  556|  3.95k|}
tcp_copy_connected_relays:
 1452|  1.48k|{
 1453|  1.48k|    const uint32_t r = random_u32(tcp_c->rng);
 1454|  1.48k|    uint32_t copied = 0;
 1455|       |
 1456|  1.48k|    for (uint32_t i = 0; (i < tcp_c->tcp_connections_length) && (copied < max_num); ++i) {
  ------------------
  |  Branch (1456:26): [True: 0, False: 1.48k]
  |  Branch (1456:65): [True: 0, False: 0]
  ------------------
 1457|      0|        const uint16_t idx = (i + r) % tcp_c->tcp_connections_length;
 1458|       |
 1459|      0|        if (copy_tcp_relay_conn(tcp_c, &tcp_relays[copied], idx)) {
  ------------------
  |  Branch (1459:13): [True: 0, False: 0]
  ------------------
 1460|      0|            ++copied;
 1461|      0|        }
 1462|      0|    }
 1463|       |
 1464|  1.48k|    return copied;
 1465|  1.48k|}
new_tcp_connections:
 1563|  2.08k|{
 1564|  2.08k|    assert(logger != nullptr);
 1565|  2.08k|    assert(mem != nullptr);
 1566|  2.08k|    assert(rng != nullptr);
 1567|  2.08k|    assert(ns != nullptr);
 1568|  2.08k|    assert(mono_time != nullptr);
 1569|       |
 1570|  2.08k|    if (secret_key == nullptr) {
  ------------------
  |  |   63|  2.08k|#define nullptr NULL
  ------------------
  |  Branch (1570:9): [True: 0, False: 2.08k]
  ------------------
 1571|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1572|      0|    }
 1573|       |
 1574|  2.08k|    TCP_Connections *temp = (TCP_Connections *)mem_alloc(mem, sizeof(TCP_Connections));
 1575|       |
 1576|  2.08k|    if (temp == nullptr) {
  ------------------
  |  |   63|  2.08k|#define nullptr NULL
  ------------------
  |  Branch (1576:9): [True: 0, False: 2.08k]
  ------------------
 1577|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1578|      0|    }
 1579|       |
 1580|  2.08k|    temp->net_profile = tcp_np;
 1581|  2.08k|    temp->logger = logger;
 1582|  2.08k|    temp->mem = mem;
 1583|  2.08k|    temp->rng = rng;
 1584|  2.08k|    temp->mono_time = mono_time;
 1585|  2.08k|    temp->ns = ns;
 1586|       |
 1587|  2.08k|    memcpy(temp->self_secret_key, secret_key, CRYPTO_SECRET_KEY_SIZE);
  ------------------
  |  |   48|  2.08k|#define CRYPTO_SECRET_KEY_SIZE         32
  ------------------
 1588|  2.08k|    crypto_derive_public_key(temp->self_public_key, temp->self_secret_key);
 1589|  2.08k|    temp->proxy_info = *proxy_info;
 1590|       |
 1591|  2.08k|    return temp;
 1592|  2.08k|}
kill_tcp_connections:
 1685|  2.08k|{
 1686|  2.08k|    if (tcp_c == nullptr) {
  ------------------
  |  |   63|  2.08k|#define nullptr NULL
  ------------------
  |  Branch (1686:9): [True: 0, False: 2.08k]
  ------------------
 1687|      0|        return;
 1688|      0|    }
 1689|       |
 1690|  2.08k|    for (uint32_t i = 0; i < tcp_c->tcp_connections_length; ++i) {
  ------------------
  |  Branch (1690:26): [True: 0, False: 2.08k]
  ------------------
 1691|      0|        kill_tcp_connection(tcp_c->tcp_connections[i].connection);
 1692|      0|    }
 1693|       |
 1694|  2.08k|    crypto_memzero(tcp_c->self_secret_key, sizeof(tcp_c->self_secret_key));
 1695|       |
 1696|  2.08k|    mem_delete(tcp_c->mem, tcp_c->tcp_connections);
 1697|  2.08k|    mem_delete(tcp_c->mem, tcp_c->connections);
 1698|  2.08k|    mem_delete(tcp_c->mem, tcp_c);
 1699|  2.08k|}

new_announcements:
  617|  1.97k|{
  618|  1.97k|    if (log == nullptr || mono_time == nullptr || forwarding == nullptr) {
  ------------------
  |  |   63|  3.95k|#define nullptr NULL
  ------------------
                  if (log == nullptr || mono_time == nullptr || forwarding == nullptr) {
  ------------------
  |  |   63|  3.95k|#define nullptr NULL
  ------------------
                  if (log == nullptr || mono_time == nullptr || forwarding == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (618:9): [True: 0, False: 1.97k]
  |  Branch (618:27): [True: 0, False: 1.97k]
  |  Branch (618:51): [True: 0, False: 1.97k]
  ------------------
  619|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  620|      0|    }
  621|       |
  622|  1.97k|    Announcements *announce = (Announcements *)mem_alloc(mem, sizeof(Announcements));
  623|       |
  624|  1.97k|    if (announce == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (624:9): [True: 0, False: 1.97k]
  ------------------
  625|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  626|      0|    }
  627|       |
  628|  1.97k|    announce->log = log;
  629|  1.97k|    announce->mem = mem;
  630|  1.97k|    announce->rng = rng;
  631|  1.97k|    announce->forwarding = forwarding;
  632|  1.97k|    announce->mono_time = mono_time;
  633|  1.97k|    announce->dht = forwarding_get_dht(forwarding);
  634|  1.97k|    announce->net = dht_get_net(announce->dht);
  635|  1.97k|    announce->public_key = dht_get_self_public_key(announce->dht);
  636|  1.97k|    announce->secret_key = dht_get_self_secret_key(announce->dht);
  637|  1.97k|    new_hmac_key(announce->rng, announce->hmac_key);
  638|  1.97k|    announce->shared_keys = shared_key_cache_new(log, mono_time, mem, announce->secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   30|  1.97k|#define KEYS_TIMEOUT 600
  ------------------
                  announce->shared_keys = shared_key_cache_new(log, mono_time, mem, announce->secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   29|  1.97k|#define MAX_KEYS_PER_SLOT 4
  ------------------
  639|  1.97k|    if (announce->shared_keys == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (639:9): [True: 0, False: 1.97k]
  ------------------
  640|      0|        mem_delete(announce->mem, announce);
  641|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  642|      0|    }
  643|       |
  644|  1.97k|    announce->start_time = mono_time_get(announce->mono_time);
  645|       |
  646|  1.97k|    set_callback_forwarded_request(forwarding, forwarded_request_callback, announce);
  647|       |
  648|  1.97k|    networking_registerhandler(announce->net, NET_PACKET_DATA_SEARCH_REQUEST, handle_dht_announce_request, announce);
  649|  1.97k|    networking_registerhandler(announce->net, NET_PACKET_DATA_RETRIEVE_REQUEST, handle_dht_announce_request, announce);
  650|  1.97k|    networking_registerhandler(announce->net, NET_PACKET_STORE_ANNOUNCE_REQUEST, handle_dht_announce_request, announce);
  651|       |
  652|  1.97k|    return announce;
  653|  1.97k|}
kill_announcements:
  656|  1.97k|{
  657|  1.97k|    if (announce == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (657:9): [True: 0, False: 1.97k]
  ------------------
  658|      0|        return;
  659|      0|    }
  660|       |
  661|  1.97k|    set_callback_forwarded_request(announce->forwarding, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  set_callback_forwarded_request(announce->forwarding, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  662|       |
  663|  1.97k|    networking_registerhandler(announce->net, NET_PACKET_DATA_SEARCH_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(announce->net, NET_PACKET_DATA_SEARCH_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  664|  1.97k|    networking_registerhandler(announce->net, NET_PACKET_DATA_RETRIEVE_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(announce->net, NET_PACKET_DATA_RETRIEVE_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  665|  1.97k|    networking_registerhandler(announce->net, NET_PACKET_STORE_ANNOUNCE_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(announce->net, NET_PACKET_STORE_ANNOUNCE_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  666|       |
  667|  1.97k|    crypto_memzero(announce->hmac_key, CRYPTO_HMAC_KEY_SIZE);
  ------------------
  |  |  162|  1.97k|#define CRYPTO_HMAC_KEY_SIZE           32
  ------------------
  668|  1.97k|    shared_key_cache_free(announce->shared_keys);
  669|       |
  670|   507k|    for (uint32_t i = 0; i < ANNOUNCE_BUCKETS * ANNOUNCE_BUCKET_SIZE; ++i) {
  ------------------
  |  |   62|   507k|#define ANNOUNCE_BUCKETS 32 // ANNOUNCE_BUCKETS = 2 ** ANNOUNCE_BUCKET_PREFIX_LENGTH
  ------------------
                  for (uint32_t i = 0; i < ANNOUNCE_BUCKETS * ANNOUNCE_BUCKET_SIZE; ++i) {
  ------------------
  |  |   60|   507k|#define ANNOUNCE_BUCKET_SIZE 8
  ------------------
  |  Branch (670:26): [True: 505k, False: 1.97k]
  ------------------
  671|   505k|        mem_delete(announce->mem, announce->entries[i].data);
  672|   505k|    }
  673|       |
  674|  1.97k|    mem_delete(announce->mem, announce);
  675|  1.97k|}

bin_pack_obj_size:
   64|  3.84k|{
   65|  3.84k|    Bin_Pack bp;
   66|  3.84k|    bin_pack_init(&bp, nullptr, 0);
  ------------------
  |  |   63|  3.84k|#define nullptr NULL
  ------------------
   67|  3.84k|    if (!callback(obj, logger, &bp)) {
  ------------------
  |  Branch (67:9): [True: 0, False: 3.84k]
  ------------------
   68|      0|        return UINT32_MAX;
   69|      0|    }
   70|  3.84k|    return bp.bytes_pos;
   71|  3.84k|}
bin_pack_obj:
   74|    861|{
   75|    861|    Bin_Pack bp;
   76|    861|    bin_pack_init(&bp, buf, buf_size);
   77|    861|    return callback(obj, logger, &bp);
   78|    861|}
bin_pack_obj_array_b_size:
   81|  5.08k|{
   82|  5.08k|    Bin_Pack bp;
   83|  5.08k|    bin_pack_init(&bp, nullptr, 0);
  ------------------
  |  |   63|  5.08k|#define nullptr NULL
  ------------------
   84|  5.08k|    if (arr == nullptr) {
  ------------------
  |  |   63|  5.08k|#define nullptr NULL
  ------------------
  |  Branch (84:9): [True: 0, False: 5.08k]
  ------------------
   85|      0|        assert(arr_size == 0);
   86|      0|    }
   87|  10.3k|    for (uint32_t i = 0; i < arr_size; ++i) {
  ------------------
  |  Branch (87:26): [True: 5.22k, False: 5.08k]
  ------------------
   88|  5.22k|        if (!callback(arr, i, logger, &bp)) {
  ------------------
  |  Branch (88:13): [True: 0, False: 5.22k]
  ------------------
   89|      0|            return UINT32_MAX;
   90|      0|        }
   91|  5.22k|    }
   92|  5.08k|    return bp.bytes_pos;
   93|  5.08k|}
bin_pack_obj_array_b:
   96|  5.08k|{
   97|  5.08k|    Bin_Pack bp;
   98|  5.08k|    bin_pack_init(&bp, buf, buf_size);
   99|  5.08k|    if (arr == nullptr) {
  ------------------
  |  |   63|  5.08k|#define nullptr NULL
  ------------------
  |  Branch (99:9): [True: 0, False: 5.08k]
  ------------------
  100|      0|        assert(arr_size == 0);
  101|      0|    }
  102|  10.3k|    for (uint32_t i = 0; i < arr_size; ++i) {
  ------------------
  |  Branch (102:26): [True: 5.22k, False: 5.08k]
  ------------------
  103|  5.22k|        if (!callback(arr, i, logger, &bp)) {
  ------------------
  |  Branch (103:13): [True: 0, False: 5.22k]
  ------------------
  104|      0|            return false;
  105|      0|        }
  106|  5.22k|    }
  107|  5.08k|    return true;
  108|  5.08k|}
bin_pack_array:
  131|  5.67k|{
  132|  5.67k|    return cmp_write_array(&bp->ctx, size);
  133|  5.67k|}
bin_pack_bool:
  136|    288|{
  137|    288|    return cmp_write_bool(&bp->ctx, val);
  138|    288|}
bin_pack_u08:
  141|  1.15k|{
  142|  1.15k|    return cmp_write_uinteger(&bp->ctx, val);
  143|  1.15k|}
bin_pack_u16:
  146|  2.30k|{
  147|  2.30k|    return cmp_write_uinteger(&bp->ctx, val);
  148|  2.30k|}
bin_pack_u32:
  151|    864|{
  152|    864|    return cmp_write_uinteger(&bp->ctx, val);
  153|    864|}
bin_pack_bin:
  161|  4.24k|{
  162|  4.24k|    return cmp_write_bin(&bp->ctx, data, length);
  163|  4.24k|}
bin_pack_nil:
  166|     72|{
  167|     72|    return cmp_write_nil(&bp->ctx);
  168|     72|}
bin_pack_u08_b:
  176|  35.3k|{
  177|  35.3k|    return bp->ctx.write(&bp->ctx, &val, 1) == 1;
  178|  35.3k|}
bin_pack_u16_b:
  181|  11.7k|{
  182|  11.7k|    return bin_pack_u08_b(bp, (val >> 8) & 0xff)
  ------------------
  |  Branch (182:12): [True: 11.7k, False: 0]
  ------------------
  183|  11.7k|           && bin_pack_u08_b(bp, val & 0xff);
  ------------------
  |  Branch (183:15): [True: 11.7k, False: 0]
  ------------------
  184|  11.7k|}
bin_pack_bin_b:
  199|  22.2k|{
  200|  22.2k|    return bp->ctx.write(&bp->ctx, data, length) == length;
  201|  22.2k|}
bin_pack.c:bin_pack_init:
   56|  14.8k|{
   57|  14.8k|    bp->bytes = buf;
   58|  14.8k|    bp->bytes_size = buf_size;
   59|  14.8k|    bp->bytes_pos = 0;
   60|  14.8k|    cmp_init(&bp->ctx, bp, null_reader, null_skipper, buf_writer);
   61|  14.8k|}
bin_pack.c:buf_writer:
   35|  80.7k|{
   36|  80.7k|    const uint8_t *bytes = (const uint8_t *)data;
   37|  80.7k|    Bin_Pack *bp = (Bin_Pack *)ctx->buf;
   38|  80.7k|    assert(bp != nullptr);
   39|  80.7k|    const uint32_t new_pos = bp->bytes_pos + count;
   40|  80.7k|    if (new_pos < bp->bytes_pos) {
  ------------------
  |  Branch (40:9): [True: 0, False: 80.7k]
  ------------------
   41|       |        // 32 bit overflow.
   42|      0|        return 0;
   43|      0|    }
   44|  80.7k|    if (bp->bytes != nullptr) {
  ------------------
  |  |   63|  80.7k|#define nullptr NULL
  ------------------
  |  Branch (44:9): [True: 33.9k, False: 46.8k]
  ------------------
   45|  33.9k|        if (new_pos > bp->bytes_size) {
  ------------------
  |  Branch (45:13): [True: 0, False: 33.9k]
  ------------------
   46|       |            // Buffer too small.
   47|      0|            return 0;
   48|      0|        }
   49|  33.9k|        memcpy(&bp->bytes[bp->bytes_pos], bytes, count);
   50|  33.9k|    }
   51|  80.7k|    bp->bytes_pos += count;
   52|  80.7k|    return count;
   53|  80.7k|}

bin_unpack_obj:
   64|  28.8k|{
   65|  28.8k|    Bin_Unpack bu;
   66|  28.8k|    bin_unpack_init(&bu, mem, buf, buf_size);
   67|  28.8k|    return callback(obj, &bu);
   68|  28.8k|}
bin_unpack_array:
   71|  28.8k|{
   72|  28.8k|    return cmp_read_array(&bu->ctx, size) && *size <= bu->bytes_size;
  ------------------
  |  Branch (72:12): [True: 28.8k, False: 35]
  |  Branch (72:46): [True: 28.7k, False: 3]
  ------------------
   73|  28.8k|}
bin_unpack_array_fixed:
   76|  61.4k|{
   77|  61.4k|    uint32_t size = 0;
   78|  61.4k|    const bool success = cmp_read_array(&bu->ctx, &size) && size == required_size;
  ------------------
  |  Branch (78:26): [True: 51.7k, False: 9.69k]
  |  Branch (78:61): [True: 51.6k, False: 197]
  ------------------
   79|  61.4k|    if (actual_size != nullptr) {
  ------------------
  |  |   63|  61.4k|#define nullptr NULL
  ------------------
  |  Branch (79:9): [True: 29.1k, False: 32.3k]
  ------------------
   80|  29.1k|        *actual_size = size;
   81|  29.1k|    }
   82|  61.4k|    return success;
   83|  61.4k|}
bin_unpack_bool:
   86|  23.7k|{
   87|  23.7k|    return cmp_read_bool(&bu->ctx, val);
   88|  23.7k|}
bin_unpack_u08:
   91|  25.5k|{
   92|  25.5k|    return cmp_read_uchar(&bu->ctx, val);
   93|  25.5k|}
bin_unpack_u16:
   96|  51.2k|{
   97|  51.2k|    return cmp_read_ushort(&bu->ctx, val);
   98|  51.2k|}
bin_unpack_u32:
  101|  24.5k|{
  102|  24.5k|    return cmp_read_uint(&bu->ctx, val);
  103|  24.5k|}
bin_unpack_nil:
  111|    129|{
  112|    129|    return cmp_read_nil(&bu->ctx);
  113|    129|}
bin_unpack_bin_max:
  139|  1.55k|{
  140|  1.55k|    uint32_t bin_size;
  141|  1.55k|    if (!bin_unpack_bin_size(bu, &bin_size) || bin_size > max_data_length) {
  ------------------
  |  Branch (141:9): [True: 88, False: 1.47k]
  |  Branch (141:48): [True: 16, False: 1.45k]
  ------------------
  142|    104|        return false;
  143|    104|    }
  144|       |
  145|  1.45k|    *data_length_ptr = bin_size;
  146|       |
  147|  1.45k|    return bin_unpack_bin_b(bu, data, bin_size);
  148|  1.55k|}
bin_unpack_bin_fixed:
  151|  4.27k|{
  152|  4.27k|    uint32_t bin_size;
  153|  4.27k|    if (!bin_unpack_bin_size(bu, &bin_size) || bin_size != data_length) {
  ------------------
  |  Branch (153:9): [True: 287, False: 3.99k]
  |  Branch (153:48): [True: 53, False: 3.93k]
  ------------------
  154|    340|        return false;
  155|    340|    }
  156|       |
  157|  3.93k|    return bin_unpack_bin_b(bu, data, bin_size);
  158|  4.27k|}
bin_unpack_bin_size:
  161|  5.83k|{
  162|  5.83k|    return cmp_read_bin_size(&bu->ctx, size);
  163|  5.83k|}
bin_unpack_bin_b:
  207|  5.39k|{
  208|  5.39k|    return bu->ctx.read(&bu->ctx, data, length);
  209|  5.39k|}
bin_unpack.c:bin_unpack_init:
   56|  28.8k|{
   57|  28.8k|    bu->mem = mem;
   58|  28.8k|    bu->bytes = buf;
   59|  28.8k|    bu->bytes_size = buf_size;
   60|  28.8k|    cmp_init(&bu->ctx, bu, buf_reader, buf_skipper, null_writer);
   61|  28.8k|}
bin_unpack.c:buf_reader:
   24|   276k|{
   25|   276k|    uint8_t *bytes = (uint8_t *)data;
   26|   276k|    Bin_Unpack *reader = (Bin_Unpack *)ctx->buf;
   27|   276k|    assert(reader != nullptr && reader->bytes != nullptr);
   28|   276k|    if (limit > reader->bytes_size) {
  ------------------
  |  Branch (28:9): [True: 4.92k, False: 271k]
  ------------------
   29|  4.92k|        return false;
   30|  4.92k|    }
   31|   271k|    memcpy(bytes, reader->bytes, limit);
   32|   271k|    reader->bytes += limit;
   33|   271k|    reader->bytes_size -= limit;
   34|   271k|    return true;
   35|   276k|}

get_enc_key:
   66|    296|{
   67|    296|    return key->enc;
   68|    296|}
get_sig_pk:
   71|    222|{
   72|    222|    return key->sig;
   73|    222|}
get_sig_sk:
   81|    111|{
   82|    111|    return key->sig;
   83|    111|}
get_chat_id:
   86|    243|{
   87|    243|    return key->sig;
   88|    243|}
crypto_memzero:
  114|  37.2k|{
  115|  37.2k|#if defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  116|  37.2k|    memzero((uint8_t *)data, length);
  117|       |#else
  118|       |    sodium_memzero(data, length);
  119|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  120|  37.2k|}
crypto_memlock:
  123|  13.9k|{
  124|  13.9k|#if defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  125|  13.9k|    return false;
  126|       |#else
  127|       |
  128|       |    return sodium_mlock(data, length) == 0;
  129|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  130|  13.9k|}
crypto_memunlock:
  133|  30.6k|{
  134|  30.6k|#if defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  135|  30.6k|    return false;
  136|       |#else
  137|       |
  138|       |    return sodium_munlock(data, length) == 0;
  139|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  140|  30.6k|}
pk_equal:
  143|  4.16M|{
  144|  4.16M|#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
  145|       |    // Hope that this is better for the fuzzer
  146|  4.16M|    return memcmp(pk1, pk2, CRYPTO_PUBLIC_KEY_SIZE) == 0;
  ------------------
  |  |   43|  4.16M|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  147|       |#else
  148|       |    return crypto_verify_32(pk1, pk2) == 0;
  149|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  150|  4.16M|}
pk_copy:
  153|  19.0k|{
  154|  19.0k|    memcpy(dest, src, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|  19.0k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  155|  19.0k|}
random_u32:
  192|  3.46k|{
  193|  3.46k|    uint32_t randnum;
  194|  3.46k|    random_bytes(rng, (uint8_t *)&randnum, sizeof(randnum));
  195|  3.46k|    return randnum;
  196|  3.46k|}
random_u64:
  199|  3.95k|{
  200|  3.95k|    uint64_t randnum;
  201|  3.95k|    random_bytes(rng, (uint8_t *)&randnum, sizeof(randnum));
  202|  3.95k|    return randnum;
  203|  3.95k|}
public_key_valid:
  225|    396|{
  226|       |    /* Last bit of key is always zero. */
  227|    396|    return public_key[31] < 128;
  228|    396|}
new_symmetric_key:
  430|  5.92k|{
  431|  5.92k|    random_bytes(rng, key, CRYPTO_SYMMETRIC_KEY_SIZE);
  ------------------
  |  |   58|  5.92k|#define CRYPTO_SYMMETRIC_KEY_SIZE      CRYPTO_SHARED_KEY_SIZE
  |  |  ------------------
  |  |  |  |   53|  5.92k|#define CRYPTO_SHARED_KEY_SIZE         32
  |  |  ------------------
  ------------------
  432|  5.92k|}
crypto_new_keypair:
  437|  10.3k|{
  438|  10.3k|    random_bytes(rng, secret_key, CRYPTO_SECRET_KEY_SIZE);
  ------------------
  |  |   48|  10.3k|#define CRYPTO_SECRET_KEY_SIZE         32
  ------------------
  439|  10.3k|    memzero(public_key, CRYPTO_PUBLIC_KEY_SIZE);  // Make MSAN happy
  ------------------
  |  |   43|  10.3k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  440|  10.3k|    crypto_derive_public_key(public_key, secret_key);
  441|  10.3k|    return 0;
  442|  10.3k|}
crypto_derive_public_key:
  446|  13.1k|{
  447|  13.1k|    crypto_scalarmult_curve25519_base(public_key, secret_key);
  448|  13.1k|}
new_hmac_key:
  451|  5.92k|{
  452|  5.92k|    random_bytes(rng, key, CRYPTO_HMAC_KEY_SIZE);
  ------------------
  |  |  162|  5.92k|#define CRYPTO_HMAC_KEY_SIZE           32
  ------------------
  453|  5.92k|}
os_random:
  514|  1.97k|{
  515|  1.97k|#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
  516|  1.97k|    if ((true)) {
  ------------------
  |  Branch (516:9): [Folded - Ignored]
  ------------------
  517|  1.97k|        return nullptr;
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  518|  1.97k|    }
  519|      0|#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  520|       |    // It is safe to call this function more than once and from different
  521|       |    // threads -- subsequent calls won't have any effects.
  522|      0|    if (sodium_init() == -1) {
  ------------------
  |  Branch (522:9): [True: 0, False: 0]
  ------------------
  523|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  524|      0|    }
  525|      0|    return &os_random_obj;
  526|      0|}
random_bytes:
  529|  29.7k|{
  530|  29.7k|    rng->funcs->random_bytes(rng->obj, bytes, length);
  531|  29.7k|}

pack_extended_public_key:
   16|    864|{
   17|    864|    uint8_t ext_key[EXT_PUBLIC_KEY_SIZE];
   18|    864|    static_assert(sizeof(ext_key) == sizeof(key->enc) + sizeof(key->sig),
  ------------------
  |  |   67|    864|#define static_assert _Static_assert
  ------------------
   19|    864|                  "extended secret key size is not the sum of the encryption and sign secret key sizes");
   20|    864|    memcpy(ext_key, key->enc, sizeof(key->enc));
   21|    864|    memcpy(&ext_key[sizeof(key->enc)], key->sig, sizeof(key->sig));
   22|       |
   23|    864|    return bin_pack_bin(bp, ext_key, sizeof(ext_key));
   24|    864|}
pack_extended_secret_key:
   27|    576|{
   28|    576|    uint8_t ext_key[EXT_SECRET_KEY_SIZE];
   29|    576|    static_assert(sizeof(ext_key) == sizeof(key->enc) + sizeof(key->sig),
  ------------------
  |  |   67|    576|#define static_assert _Static_assert
  ------------------
   30|    576|                  "extended secret key size is not the sum of the encryption and sign secret key sizes");
   31|    576|    memcpy(ext_key, key->enc, sizeof(key->enc));
   32|    576|    memcpy(&ext_key[sizeof(key->enc)], key->sig, sizeof(key->sig));
   33|       |
   34|    576|    const bool result = bin_pack_bin(bp, ext_key, sizeof(ext_key));
   35|    576|    crypto_memzero(ext_key, sizeof(ext_key));
   36|    576|    return result;
   37|    576|}
unpack_extended_public_key:
   40|  1.19k|{
   41|  1.19k|    uint8_t ext_key[EXT_PUBLIC_KEY_SIZE];
   42|       |
   43|  1.19k|    if (!bin_unpack_bin_fixed(bu, ext_key, sizeof(ext_key))) {
  ------------------
  |  Branch (43:9): [True: 140, False: 1.05k]
  ------------------
   44|    140|        return false;
   45|    140|    }
   46|       |
   47|  1.05k|    memcpy(key->enc, ext_key, sizeof(key->enc));
   48|  1.05k|    memcpy(key->sig, &ext_key[sizeof(key->enc)], sizeof(key->sig));
   49|       |
   50|  1.05k|    return true;
   51|  1.19k|}
unpack_extended_secret_key:
   54|    471|{
   55|    471|    uint8_t ext_key[EXT_SECRET_KEY_SIZE];
   56|       |
   57|    471|    if (!bin_unpack_bin_fixed(bu, ext_key, sizeof(ext_key))) {
  ------------------
  |  Branch (57:9): [True: 53, False: 418]
  ------------------
   58|     53|        return false;
   59|     53|    }
   60|       |
   61|    418|    memcpy(key->enc, ext_key, sizeof(key->enc));
   62|    418|    memcpy(key->sig, &ext_key[sizeof(key->enc)], sizeof(key->sig));
   63|    418|    crypto_memzero(ext_key, sizeof(ext_key));
   64|       |
   65|    418|    return true;
   66|    471|}

forwarding_get_dht:
   41|  1.97k|{
   42|  1.97k|    return forwarding->dht;
   43|  1.97k|}
set_callback_forwarded_request:
  334|  3.95k|{
  335|  3.95k|    forwarding->forwarded_request_callback = function;
  336|  3.95k|    forwarding->forwarded_request_callback_object = object;
  337|  3.95k|}
new_forwarding:
  352|  1.97k|{
  353|  1.97k|    if (log == nullptr || mono_time == nullptr || dht == nullptr) {
  ------------------
  |  |   63|  3.95k|#define nullptr NULL
  ------------------
                  if (log == nullptr || mono_time == nullptr || dht == nullptr) {
  ------------------
  |  |   63|  3.95k|#define nullptr NULL
  ------------------
                  if (log == nullptr || mono_time == nullptr || dht == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (353:9): [True: 0, False: 1.97k]
  |  Branch (353:27): [True: 0, False: 1.97k]
  |  Branch (353:51): [True: 0, False: 1.97k]
  ------------------
  354|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  355|      0|    }
  356|       |
  357|  1.97k|    Forwarding *forwarding = (Forwarding *)mem_alloc(mem, sizeof(Forwarding));
  358|       |
  359|  1.97k|    if (forwarding == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (359:9): [True: 0, False: 1.97k]
  ------------------
  360|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  361|      0|    }
  362|       |
  363|  1.97k|    forwarding->log = log;
  364|  1.97k|    forwarding->mem = mem;
  365|  1.97k|    forwarding->rng = rng;
  366|  1.97k|    forwarding->mono_time = mono_time;
  367|  1.97k|    forwarding->dht = dht;
  368|  1.97k|    forwarding->net = dht_get_net(dht);
  369|       |
  370|  1.97k|    networking_registerhandler(forwarding->net, NET_PACKET_FORWARD_REQUEST, &handle_forward_request, forwarding);
  371|  1.97k|    networking_registerhandler(forwarding->net, NET_PACKET_FORWARD_REPLY, &handle_forward_reply, forwarding);
  372|  1.97k|    networking_registerhandler(forwarding->net, NET_PACKET_FORWARDING, &handle_forwarding, forwarding);
  373|       |
  374|  1.97k|    new_hmac_key(forwarding->rng, forwarding->hmac_key);
  375|       |
  376|  1.97k|    return forwarding;
  377|  1.97k|}
kill_forwarding:
  380|  1.97k|{
  381|  1.97k|    if (forwarding == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (381:9): [True: 0, False: 1.97k]
  ------------------
  382|      0|        return;
  383|      0|    }
  384|       |
  385|  1.97k|    networking_registerhandler(forwarding->net, NET_PACKET_FORWARD_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(forwarding->net, NET_PACKET_FORWARD_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  386|  1.97k|    networking_registerhandler(forwarding->net, NET_PACKET_FORWARD_REPLY, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(forwarding->net, NET_PACKET_FORWARD_REPLY, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  387|  1.97k|    networking_registerhandler(forwarding->net, NET_PACKET_FORWARDING, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(forwarding->net, NET_PACKET_FORWARDING, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  388|       |
  389|  1.97k|    crypto_memzero(forwarding->hmac_key, CRYPTO_HMAC_KEY_SIZE);
  ------------------
  |  |  162|  1.97k|#define CRYPTO_HMAC_KEY_SIZE           32
  ------------------
  390|       |
  391|  1.97k|    mem_delete(forwarding->mem, forwarding);
  392|  1.97k|}

friend_conn_get_onion_friendnum:
   95|     95|{
   96|     95|    return fc->onion_friendnum;
   97|     95|}
get_conn:
  197|  1.74k|{
  198|  1.74k|    if (!friendconn_id_valid(fr_c, friendcon_id)) {
  ------------------
  |  Branch (198:9): [True: 17, False: 1.72k]
  ------------------
  199|     17|        return nullptr;
  ------------------
  |  |   63|     17|#define nullptr NULL
  ------------------
  200|     17|    }
  201|       |
  202|  1.72k|    return &fr_c->conns[friendcon_id];
  203|  1.74k|}
getfriend_conn_id_pk:
  210|    367|{
  211|    796|    for (uint32_t i = 0; i < fr_c->num_cons; ++i) {
  ------------------
  |  Branch (211:26): [True: 433, False: 363]
  ------------------
  212|    433|        const Friend_Conn *friend_con = get_conn(fr_c, i);
  213|       |
  214|    433|        if (friend_con != nullptr) {
  ------------------
  |  |   63|    433|#define nullptr NULL
  ------------------
  |  Branch (214:13): [True: 433, False: 0]
  ------------------
  215|    433|            if (pk_equal(friend_con->real_public_key, real_pk)) {
  ------------------
  |  Branch (215:17): [True: 4, False: 429]
  ------------------
  216|      4|                return i;
  217|      4|            }
  218|    433|        }
  219|    433|    }
  220|       |
  221|    363|    return -1;
  222|    367|}
friend_con_connected:
  666|    462|{
  667|    462|    const Friend_Conn *const friend_con = get_conn(fr_c, friendcon_id);
  668|       |
  669|    462|    if (friend_con == nullptr) {
  ------------------
  |  |   63|    462|#define nullptr NULL
  ------------------
  |  Branch (669:9): [True: 0, False: 462]
  ------------------
  670|      0|        return 0;
  671|      0|    }
  672|       |
  673|    462|    return friend_con->status;
  674|    462|}
friend_connection_callbacks:
  718|    367|{
  719|    367|    Friend_Conn *const friend_con = get_conn(fr_c, friendcon_id);
  720|       |
  721|    367|    if (friend_con == nullptr) {
  ------------------
  |  |   63|    367|#define nullptr NULL
  ------------------
  |  Branch (721:9): [True: 0, False: 367]
  ------------------
  722|      0|        return -1;
  723|      0|    }
  724|       |
  725|    367|    if (index >= MAX_FRIEND_CONNECTION_CALLBACKS) {
  ------------------
  |  |   23|    367|#define MAX_FRIEND_CONNECTION_CALLBACKS 2
  ------------------
  |  Branch (725:9): [True: 0, False: 367]
  ------------------
  726|      0|        return -1;
  727|      0|    }
  728|       |
  729|    367|    if (object != nullptr && (status_callback == nullptr || data_callback == nullptr || lossy_data_callback == nullptr)) {
  ------------------
  |  |   63|    734|#define nullptr NULL
  ------------------
                  if (object != nullptr && (status_callback == nullptr || data_callback == nullptr || lossy_data_callback == nullptr)) {
  ------------------
  |  |   63|    544|#define nullptr NULL
  ------------------
                  if (object != nullptr && (status_callback == nullptr || data_callback == nullptr || lossy_data_callback == nullptr)) {
  ------------------
  |  |   63|    544|#define nullptr NULL
  ------------------
                  if (object != nullptr && (status_callback == nullptr || data_callback == nullptr || lossy_data_callback == nullptr)) {
  ------------------
  |  |   63|    272|#define nullptr NULL
  ------------------
  |  Branch (729:9): [True: 272, False: 95]
  |  Branch (729:31): [True: 0, False: 272]
  |  Branch (729:61): [True: 0, False: 272]
  |  Branch (729:89): [True: 0, False: 272]
  ------------------
  730|      0|        LOGGER_ERROR(fr_c->logger, "non-null user data object but null callbacks");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  731|      0|        return -1;
  732|      0|    }
  733|       |
  734|    367|    friend_con->callbacks[index].status_callback = status_callback;
  735|    367|    friend_con->callbacks[index].data_callback = data_callback;
  736|    367|    friend_con->callbacks[index].lossy_data_callback = lossy_data_callback;
  737|       |
  738|    367|    friend_con->callbacks[index].callback_object = object;
  739|    367|    friend_con->callbacks[index].callback_id = number;
  740|       |
  741|    367|    return 0;
  742|    367|}
set_global_status_callback:
  746|  3.95k|{
  747|  3.95k|    if (object != nullptr && global_status_callback == nullptr) {
  ------------------
  |  |   63|  7.90k|#define nullptr NULL
  ------------------
                  if (object != nullptr && global_status_callback == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (747:9): [True: 1.97k, False: 1.97k]
  |  Branch (747:30): [True: 0, False: 1.97k]
  ------------------
  748|      0|        LOGGER_ERROR(fr_c->logger, "non-null user data object but null callback");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  749|      0|        object = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  750|      0|    }
  751|       |
  752|  3.95k|    fr_c->global_status_callback = global_status_callback;
  753|  3.95k|    fr_c->global_status_callback_object = object;
  754|  3.95k|}
new_friend_connection:
  779|    367|{
  780|    367|    int friendcon_id = getfriend_conn_id_pk(fr_c, real_public_key);
  781|       |
  782|    367|    if (friendcon_id != -1) {
  ------------------
  |  Branch (782:9): [True: 4, False: 363]
  ------------------
  783|      4|        ++fr_c->conns[friendcon_id].lock_count;
  784|      4|        return friendcon_id;
  785|      4|    }
  786|       |
  787|    363|    friendcon_id = create_friend_conn(fr_c);
  788|       |
  789|    363|    if (friendcon_id == -1) {
  ------------------
  |  Branch (789:9): [True: 0, False: 363]
  ------------------
  790|      0|        return -1;
  791|      0|    }
  792|       |
  793|    363|    const int32_t onion_friendnum = onion_addfriend(fr_c->onion_c, real_public_key);
  794|       |
  795|    363|    if (onion_friendnum == -1) {
  ------------------
  |  Branch (795:9): [True: 0, False: 363]
  ------------------
  796|      0|        return -1;
  797|      0|    }
  798|       |
  799|    363|    Friend_Conn *const friend_con = &fr_c->conns[friendcon_id];
  800|       |
  801|    363|    friend_con->crypt_connection_id = -1;
  802|    363|    friend_con->status = FRIENDCONN_STATUS_CONNECTING;
  803|    363|    memcpy(friend_con->real_public_key, real_public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|    363|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  804|    363|    friend_con->onion_friendnum = onion_friendnum;
  805|       |
  806|    363|    recv_tcp_relay_handler(fr_c->onion_c, onion_friendnum, &tcp_relay_node_callback, fr_c, friendcon_id);
  807|    363|    onion_dht_pk_callback(fr_c->onion_c, onion_friendnum, &dht_pk_callback, fr_c, friendcon_id);
  808|       |
  809|    363|    return friendcon_id;
  810|    363|}
kill_friend_connection:
  818|    384|{
  819|    384|    Friend_Conn *const friend_con = get_conn(fr_c, friendcon_id);
  820|       |
  821|    384|    if (friend_con == nullptr) {
  ------------------
  |  |   63|    384|#define nullptr NULL
  ------------------
  |  Branch (821:9): [True: 17, False: 367]
  ------------------
  822|     17|        return -1;
  823|     17|    }
  824|       |
  825|    367|    if (friend_con->lock_count > 0) {
  ------------------
  |  Branch (825:9): [True: 4, False: 363]
  ------------------
  826|      4|        --friend_con->lock_count;
  827|      4|        return 0;
  828|      4|    }
  829|       |
  830|    363|    onion_delfriend(fr_c->onion_c, friend_con->onion_friendnum);
  831|    363|    crypto_kill(fr_c->net_crypto, friend_con->crypt_connection_id);
  832|       |
  833|    363|    if (friend_con->dht_lock_token > 0) {
  ------------------
  |  Branch (833:9): [True: 0, False: 363]
  ------------------
  834|      0|        dht_delfriend(fr_c->dht, friend_con->dht_temp_pk, friend_con->dht_lock_token);
  835|      0|        friend_con->dht_lock_token = 0;
  836|      0|    }
  837|       |
  838|    363|    return wipe_friend_conn(fr_c, friendcon_id);
  839|    367|}
set_friend_request_callback:
  846|  1.97k|{
  847|  1.97k|    fr_c->fr_request_callback = fr_request_callback;
  848|  1.97k|    fr_c->fr_request_object = object;
  849|  1.97k|    oniondata_registerhandler(fr_c->onion_c, CRYPTO_PACKET_FRIEND_REQ, fr_request_callback, object);
  ------------------
  |  |   66|  1.97k|#define CRYPTO_PACKET_FRIEND_REQ    32  // Friend request crypto packet ID.
  ------------------
  850|  1.97k|}
new_friend_connections:
  900|  1.97k|{
  901|  1.97k|    if (onion_c == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (901:9): [True: 0, False: 1.97k]
  ------------------
  902|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  903|      0|    }
  904|       |
  905|  1.97k|    Friend_Connections *const temp = (Friend_Connections *)mem_alloc(mem, sizeof(Friend_Connections));
  906|       |
  907|  1.97k|    if (temp == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (907:9): [True: 0, False: 1.97k]
  ------------------
  908|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  909|      0|    }
  910|       |
  911|  1.97k|    temp->local_discovery_enabled = local_discovery_enabled;
  912|       |
  913|  1.97k|    if (temp->local_discovery_enabled) {
  ------------------
  |  Branch (913:9): [True: 1.97k, False: 0]
  ------------------
  914|  1.97k|        temp->broadcast = lan_discovery_init(mem, ns);
  915|       |
  916|  1.97k|        if (temp->broadcast == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (916:13): [True: 0, False: 1.97k]
  ------------------
  917|      0|            LOGGER_ERROR(logger, "could not initialise LAN discovery");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  918|      0|            temp->local_discovery_enabled = false;
  919|      0|        }
  920|  1.97k|    }
  921|       |
  922|  1.97k|    temp->mono_time = mono_time;
  923|  1.97k|    temp->mem = mem;
  924|  1.97k|    temp->logger = logger;
  925|  1.97k|    temp->dht = onion_get_dht(onion_c);
  926|  1.97k|    temp->net_crypto = onion_get_net_crypto(onion_c);
  927|  1.97k|    temp->onion_c = onion_c;
  928|       |    // Don't include default port in port range
  929|  1.97k|    temp->next_lan_port = TOX_PORTRANGE_FROM + 1;
  ------------------
  |  |  162|  1.97k|#define TOX_PORTRANGE_FROM 33445
  ------------------
  930|       |
  931|  1.97k|    new_connection_handler(temp->net_crypto, &handle_new_connections, temp);
  932|       |
  933|  1.97k|    return temp;
  934|  1.97k|}
kill_friend_connections:
 1013|  1.97k|{
 1014|  1.97k|    if (fr_c == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (1014:9): [True: 0, False: 1.97k]
  ------------------
 1015|      0|        return;
 1016|      0|    }
 1017|       |
 1018|  2.26k|    for (uint32_t i = 0; i < fr_c->num_cons; ++i) {
  ------------------
  |  Branch (1018:26): [True: 289, False: 1.97k]
  ------------------
 1019|    289|        kill_friend_connection(fr_c, i);
 1020|    289|    }
 1021|       |
 1022|       |    // there might be allocated NONE connections
 1023|  1.97k|    if (fr_c->conns != nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (1023:9): [True: 0, False: 1.97k]
  ------------------
 1024|      0|        mem_delete(fr_c->mem, fr_c->conns);
 1025|      0|    }
 1026|       |
 1027|  1.97k|    lan_discovery_kill(fr_c->broadcast);
 1028|  1.97k|    mem_delete(fr_c->mem, fr_c);
 1029|  1.97k|}
friend_connection.c:friendconn_id_valid:
  114|  2.10k|{
  115|  2.10k|    return (unsigned int)friendcon_id < fr_c->num_cons &&
  ------------------
  |  Branch (115:12): [True: 2.10k, False: 0]
  ------------------
  116|  2.10k|           fr_c->conns != nullptr &&
  ------------------
  |  |   63|  4.20k|#define nullptr NULL
  ------------------
  |  Branch (116:12): [True: 2.10k, False: 0]
  ------------------
  117|  2.10k|           fr_c->conns[friendcon_id].status != FRIENDCONN_STATUS_NONE;
  ------------------
  |  Branch (117:12): [True: 2.08k, False: 17]
  ------------------
  118|  2.10k|}
friend_connection.c:create_friend_conn:
  149|    363|{
  150|    790|    for (uint32_t i = 0; i < fr_c->num_cons; ++i) {
  ------------------
  |  Branch (150:26): [True: 427, False: 363]
  ------------------
  151|    427|        if (fr_c->conns[i].status == FRIENDCONN_STATUS_NONE) {
  ------------------
  |  Branch (151:13): [True: 0, False: 427]
  ------------------
  152|      0|            return i;
  153|      0|        }
  154|    427|    }
  155|       |
  156|    363|    if (!realloc_friendconns(fr_c, fr_c->num_cons + 1)) {
  ------------------
  |  Branch (156:9): [True: 0, False: 363]
  ------------------
  157|      0|        return -1;
  158|      0|    }
  159|       |
  160|    363|    const int id = fr_c->num_cons;
  161|    363|    ++fr_c->num_cons;
  162|    363|    fr_c->conns[id] = empty_friend_conn;
  163|       |
  164|    363|    return id;
  165|    363|}
friend_connection.c:realloc_friendconns:
  126|    531|{
  127|    531|    if (num == 0) {
  ------------------
  |  Branch (127:9): [True: 165, False: 366]
  ------------------
  128|    165|        mem_delete(fr_c->mem, fr_c->conns);
  129|    165|        fr_c->conns = nullptr;
  ------------------
  |  |   63|    165|#define nullptr NULL
  ------------------
  130|    165|        return true;
  131|    165|    }
  132|       |
  133|    366|    Friend_Conn *newgroup_cons = (Friend_Conn *)mem_vrealloc(fr_c->mem, fr_c->conns, num, sizeof(Friend_Conn));
  134|       |
  135|    366|    if (newgroup_cons == nullptr) {
  ------------------
  |  |   63|    366|#define nullptr NULL
  ------------------
  |  Branch (135:9): [True: 0, False: 366]
  ------------------
  136|      0|        return false;
  137|      0|    }
  138|       |
  139|    366|    fr_c->conns = newgroup_cons;
  140|    366|    return true;
  141|    366|}
friend_connection.c:wipe_friend_conn:
  173|    363|{
  174|    363|    if (!friendconn_id_valid(fr_c, friendcon_id)) {
  ------------------
  |  Branch (174:9): [True: 0, False: 363]
  ------------------
  175|      0|        return -1;
  176|      0|    }
  177|       |
  178|    363|    fr_c->conns[friendcon_id] = empty_friend_conn;
  179|       |
  180|    363|    uint32_t i;
  181|       |
  182|    726|    for (i = fr_c->num_cons; i != 0; --i) {
  ------------------
  |  Branch (182:30): [True: 561, False: 165]
  ------------------
  183|    561|        if (fr_c->conns[i - 1].status != FRIENDCONN_STATUS_NONE) {
  ------------------
  |  Branch (183:13): [True: 198, False: 363]
  ------------------
  184|    198|            break;
  185|    198|        }
  186|    561|    }
  187|       |
  188|    363|    if (fr_c->num_cons != i) {
  ------------------
  |  Branch (188:9): [True: 168, False: 195]
  ------------------
  189|    168|        fr_c->num_cons = i;
  190|    168|        realloc_friendconns(fr_c, fr_c->num_cons);
  191|    168|    }
  192|       |
  193|    363|    return 0;
  194|    363|}

set_nospam:
   54|  2.60k|{
   55|  2.60k|    fr->nospam = num;
   56|  2.60k|}
get_nospam:
   59|  1.49k|{
   60|  1.49k|    return fr->nospam;
   61|  1.49k|}
callback_friendrequest:
   65|  1.97k|{
   66|  1.97k|    fr->handle_friendrequest = function;
   67|  1.97k|    fr->handle_friendrequest_isset = 1;
   68|  1.97k|    fr->handle_friendrequest_object = object;
   69|  1.97k|}
set_filter_function:
   75|  1.97k|{
   76|  1.97k|    fr->filter_function = function;
   77|  1.97k|    fr->filter_function_userdata = userdata;
   78|  1.97k|}
remove_request_received:
  113|     95|{
  114|  3.13k|    for (uint32_t i = 0; i < MAX_RECEIVED_STORED; ++i) {
  ------------------
  |  |   31|  3.13k|#define MAX_RECEIVED_STORED 32
  ------------------
  |  Branch (114:26): [True: 3.04k, False: 95]
  ------------------
  115|  3.04k|        if (pk_equal(fr->received.requests[i], real_pk)) {
  ------------------
  |  Branch (115:13): [True: 0, False: 3.04k]
  ------------------
  116|      0|            crypto_memzero(fr->received.requests[i], CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      0|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  117|      0|            return 0;
  118|      0|        }
  119|  3.04k|    }
  120|       |
  121|     95|    return -1;
  122|     95|}
friendreq_init:
  165|  1.97k|{
  166|  1.97k|    set_friend_request_callback(fr_c, &friendreq_handlepacket, fr);
  167|  1.97k|}
friendreq_new:
  170|  1.97k|{
  171|  1.97k|    Friend_Requests *fr = (Friend_Requests *)mem_alloc(mem, sizeof(Friend_Requests));
  172|       |
  173|  1.97k|    if (fr == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (173:9): [True: 0, False: 1.97k]
  ------------------
  174|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  175|      0|    }
  176|       |
  177|  1.97k|    fr->mem = mem;
  178|       |
  179|  1.97k|    return fr;
  180|  1.97k|}
friendreq_kill:
  183|  1.97k|{
  184|  1.97k|    if (fr == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (184:9): [True: 0, False: 1.97k]
  ------------------
  185|      0|        return;
  186|      0|    }
  187|       |
  188|  1.97k|    mem_delete(fr->mem, fr);
  189|  1.97k|}

del_groupchat:
 1344|  2.38k|{
 1345|  2.38k|    Group_c *g = get_group_c(g_c, groupnumber);
 1346|       |
 1347|  2.38k|    if (g == nullptr) {
  ------------------
  |  |   63|  2.38k|#define nullptr NULL
  ------------------
  |  Branch (1347:9): [True: 0, False: 2.38k]
  ------------------
 1348|      0|        return false;
 1349|      0|    }
 1350|       |
 1351|  2.38k|    group_leave(g_c, groupnumber, leave_permanently);
 1352|       |
 1353|  40.4k|    for (uint32_t i = 0; i < MAX_GROUP_CONNECTIONS; ++i) {
  ------------------
  |  |   56|  40.4k|#define MAX_GROUP_CONNECTIONS 16
  ------------------
  |  Branch (1353:26): [True: 38.0k, False: 2.38k]
  ------------------
 1354|  38.0k|        if (g->connections[i].type == GROUPCHAT_CONNECTION_NONE) {
  ------------------
  |  Branch (1354:13): [True: 38.0k, False: 0]
  ------------------
 1355|  38.0k|            continue;
 1356|  38.0k|        }
 1357|       |
 1358|      0|        g->connections[i].type = GROUPCHAT_CONNECTION_NONE;
 1359|      0|        kill_friend_connection(g_c->fr_c, g->connections[i].number);
 1360|      0|    }
 1361|       |
 1362|  4.76k|    for (uint32_t i = 0; i < g->numpeers; ++i) {
  ------------------
  |  Branch (1362:26): [True: 2.38k, False: 2.38k]
  ------------------
 1363|  2.38k|        if (g->peer_on_leave != nullptr) {
  ------------------
  |  |   63|  2.38k|#define nullptr NULL
  ------------------
  |  Branch (1363:13): [True: 0, False: 2.38k]
  ------------------
 1364|      0|            g->peer_on_leave(g->object, groupnumber, g->group[i].object);
 1365|      0|        }
 1366|  2.38k|    }
 1367|       |
 1368|  2.38k|    if (g->group_on_delete != nullptr) {
  ------------------
  |  |   63|  2.38k|#define nullptr NULL
  ------------------
  |  Branch (1368:9): [True: 0, False: 2.38k]
  ------------------
 1369|      0|        g->group_on_delete(g->object, groupnumber);
 1370|      0|    }
 1371|       |
 1372|  2.38k|    return wipe_group_chat(g_c, groupnumber);
 1373|  2.38k|}
g_callback_group_invite:
 1810|  1.49k|{
 1811|  1.49k|    g_c->invite_callback = function;
 1812|  1.49k|}
g_callback_group_connected:
 1816|  1.49k|{
 1817|  1.49k|    g_c->connected_callback = function;
 1818|  1.49k|}
g_callback_group_message:
 1822|  1.49k|{
 1823|  1.49k|    g_c->message_callback = function;
 1824|  1.49k|}
g_callback_peer_name:
 1831|  1.49k|{
 1832|  1.49k|    g_c->peer_name_callback = function;
 1833|  1.49k|}
g_callback_peer_list_changed:
 1840|  1.49k|{
 1841|  1.49k|    g_c->peer_list_changed_callback = function;
 1842|  1.49k|}
g_callback_group_title:
 1846|  1.49k|{
 1847|  1.49k|    g_c->title_callback = function;
 1848|  1.49k|}
conferences_size:
 3475|  2.98k|{
 3476|  2.98k|    return 2 * sizeof(uint32_t) + conferences_section_size(g_c);
 3477|  2.98k|}
conferences_save:
 3480|  1.49k|{
 3481|  1.49k|    const uint32_t len = conferences_section_size(g_c);
 3482|  1.49k|    data = state_write_section_header(data, STATE_COOKIE_TYPE, len, STATE_TYPE_CONFERENCES);
  ------------------
  |  |   29|  1.49k|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 3483|       |
 3484|  3.14k|    for (uint16_t i = 0; i < g_c->num_chats; ++i) {
  ------------------
  |  Branch (3484:26): [True: 1.65k, False: 1.49k]
  ------------------
 3485|  1.65k|        const Group_c *g = get_group_c(g_c, i);
 3486|       |
 3487|  1.65k|        if (g == nullptr || g->status != GROUPCHAT_STATUS_CONNECTED) {
  ------------------
  |  |   63|  3.30k|#define nullptr NULL
  ------------------
  |  Branch (3487:13): [True: 0, False: 1.65k]
  |  Branch (3487:29): [True: 0, False: 1.65k]
  ------------------
 3488|      0|            continue;
 3489|      0|        }
 3490|       |
 3491|  1.65k|        data = save_conf(g, data);
 3492|  1.65k|    }
 3493|       |
 3494|  1.49k|    return data;
 3495|  1.49k|}
conferences_load_state_section:
 3684|    865|{
 3685|    865|    if (type != STATE_TYPE_CONFERENCES) {
  ------------------
  |  Branch (3685:9): [True: 404, False: 461]
  ------------------
 3686|    404|        return false;
 3687|    404|    }
 3688|       |
 3689|    461|    *status = load_conferences(g_c, data, length);
 3690|    461|    return true;
 3691|    865|}
new_groupchats:
 3695|  1.97k|{
 3696|  1.97k|    if (m == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (3696:9): [True: 0, False: 1.97k]
  ------------------
 3697|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3698|      0|    }
 3699|       |
 3700|  1.97k|    Group_Chats *temp = (Group_Chats *)mem_alloc(mem, sizeof(Group_Chats));
 3701|       |
 3702|  1.97k|    if (temp == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (3702:9): [True: 0, False: 1.97k]
  ------------------
 3703|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 3704|      0|    }
 3705|       |
 3706|  1.97k|    temp->mem = mem;
 3707|  1.97k|    temp->mono_time = mono_time;
 3708|  1.97k|    temp->m = m;
 3709|  1.97k|    temp->fr_c = m->fr_c;
 3710|  1.97k|    m_callback_conference_invite(m, &handle_friend_invite_packet);
 3711|       |
 3712|  1.97k|    set_global_status_callback(m->fr_c, &g_handle_any_status, temp);
 3713|       |
 3714|  1.97k|    return temp;
 3715|  1.97k|}
kill_groupchats:
 3745|  1.97k|{
 3746|  1.97k|    if (g_c == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (3746:9): [True: 0, False: 1.97k]
  ------------------
 3747|      0|        return;
 3748|      0|    }
 3749|       |
 3750|  4.35k|    for (uint16_t i = 0; i < g_c->num_chats; ++i) {
  ------------------
  |  Branch (3750:26): [True: 2.38k, False: 1.97k]
  ------------------
 3751|  2.38k|        del_groupchat(g_c, i, false);
 3752|  2.38k|    }
 3753|       |
 3754|  1.97k|    m_callback_conference_invite(g_c->m, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
 3755|  1.97k|    set_global_status_callback(g_c->m->fr_c, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  set_global_status_callback(g_c->m->fr_c, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
 3756|  1.97k|    g_c->m->conferences_object = nullptr;
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
 3757|  1.97k|    mem_delete(g_c->mem, g_c);
 3758|  1.97k|}
group.c:create_group_chat:
  280|  5.99k|{
  281|   462k|    for (uint16_t i = 0; i < g_c->num_chats; ++i) {
  ------------------
  |  Branch (281:26): [True: 456k, False: 5.99k]
  ------------------
  282|   456k|        if (g_c->chats[i].status == GROUPCHAT_STATUS_NONE) {
  ------------------
  |  Branch (282:13): [True: 0, False: 456k]
  ------------------
  283|      0|            return i;
  284|      0|        }
  285|   456k|    }
  286|       |
  287|  5.99k|    if (realloc_conferences(g_c, g_c->num_chats + 1)) {
  ------------------
  |  Branch (287:9): [True: 5.99k, False: 0]
  ------------------
  288|  5.99k|        const uint16_t id = g_c->num_chats;
  289|  5.99k|        ++g_c->num_chats;
  290|  5.99k|        setup_conference(&g_c->chats[id]);
  291|  5.99k|        return id;
  292|  5.99k|    }
  293|       |
  294|      0|    return -1;
  295|  5.99k|}
group.c:realloc_conferences:
  251|  6.15k|{
  252|  6.15k|    if (num == 0) {
  ------------------
  |  Branch (252:9): [True: 113, False: 6.03k]
  ------------------
  253|    113|        mem_delete(g_c->mem, g_c->chats);
  254|    113|        g_c->chats = nullptr;
  ------------------
  |  |   63|    113|#define nullptr NULL
  ------------------
  255|    113|        return true;
  256|    113|    }
  257|       |
  258|  6.03k|    Group_c *newgroup_chats = (Group_c *)mem_vrealloc(g_c->mem, g_c->chats, num, sizeof(Group_c));
  259|       |
  260|  6.03k|    if (newgroup_chats == nullptr) {
  ------------------
  |  |   63|  6.03k|#define nullptr NULL
  ------------------
  |  Branch (260:9): [True: 0, False: 6.03k]
  ------------------
  261|      0|        return false;
  262|      0|    }
  263|       |
  264|  6.03k|    g_c->chats = newgroup_chats;
  265|  6.03k|    return true;
  266|  6.03k|}
group.c:setup_conference:
  269|  11.9k|{
  270|  11.9k|    *g = empty_group_c;
  271|  11.9k|    g->maxfrozen = MAX_FROZEN_DEFAULT;
  ------------------
  |  |   61|  11.9k|#define MAX_FROZEN_DEFAULT 128
  ------------------
  272|  11.9k|}
group.c:addpeer:
  765|  5.93k|{
  766|  5.93k|    Group_c *g = get_group_c(g_c, groupnumber);
  767|  5.93k|    if (g == nullptr) {
  ------------------
  |  |   63|  5.93k|#define nullptr NULL
  ------------------
  |  Branch (767:9): [True: 0, False: 5.93k]
  ------------------
  768|      0|        return -1;
  769|      0|    }
  770|       |
  771|  5.93k|    const int peer_index = fresh ?
  ------------------
  |  Branch (771:28): [True: 5.93k, False: 0]
  ------------------
  772|  5.93k|                           note_peer_active(g_c, groupnumber, peer_number, userdata) :
  773|  5.93k|                           get_peer_index(g, peer_number);
  774|       |
  775|  5.93k|    if (peer_index != -1) {
  ------------------
  |  Branch (775:9): [True: 40, False: 5.89k]
  ------------------
  776|     40|        if (!pk_equal(g->group[peer_index].real_pk, real_pk)) {
  ------------------
  |  Branch (776:13): [True: 6, False: 34]
  ------------------
  777|      6|            LOGGER_ERROR(g_c->m->log, "peer public key is incorrect for peer %d", peer_number);
  ------------------
  |  |   80|      6|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      6|    do {                                                                         \
  |  |  |  |   70|      6|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     12|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      6|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      6|        }                                                                        \
  |  |  |  |   73|      6|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  778|      6|            return -1;
  779|      6|        }
  780|       |
  781|     34|        if (fresh || !g->group[peer_index].temp_pk_updated) {
  ------------------
  |  Branch (781:13): [True: 34, False: 0]
  |  Branch (781:22): [True: 0, False: 0]
  ------------------
  782|     34|            pk_copy(g->group[peer_index].temp_pk, temp_pk);
  783|     34|            g->group[peer_index].temp_pk_updated = true;
  784|     34|        }
  785|       |
  786|     34|        return peer_index;
  787|     40|    }
  788|       |
  789|  5.89k|    if (!fresh) {
  ------------------
  |  Branch (789:9): [True: 0, False: 5.89k]
  ------------------
  790|      0|        const int frozen_index = get_frozen_index(g, peer_number);
  791|       |
  792|      0|        if (frozen_index != -1) {
  ------------------
  |  Branch (792:13): [True: 0, False: 0]
  ------------------
  793|      0|            if (!pk_equal(g->frozen[frozen_index].real_pk, real_pk)) {
  ------------------
  |  Branch (793:17): [True: 0, False: 0]
  ------------------
  794|      0|                return -1;
  795|      0|            }
  796|       |
  797|      0|            pk_copy(g->frozen[frozen_index].temp_pk, temp_pk);
  798|       |
  799|      0|            return -1;
  800|      0|        }
  801|      0|    }
  802|       |
  803|  5.89k|    delete_any_peer_with_pk(g_c, groupnumber, real_pk, userdata);
  804|       |
  805|  5.89k|    Group_Peer *temp = (Group_Peer *)mem_vrealloc(g_c->mem, g->group, g->numpeers + 1, sizeof(Group_Peer));
  806|       |
  807|  5.89k|    if (temp == nullptr) {
  ------------------
  |  |   63|  5.89k|#define nullptr NULL
  ------------------
  |  Branch (807:9): [True: 0, False: 5.89k]
  ------------------
  808|      0|        return -1;
  809|      0|    }
  810|       |
  811|  5.89k|    temp[g->numpeers] = empty_group_peer;
  812|  5.89k|    g->group = temp;
  813|       |
  814|  5.89k|    const uint32_t new_index = g->numpeers;
  815|       |
  816|  5.89k|    pk_copy(g->group[new_index].real_pk, real_pk);
  817|  5.89k|    pk_copy(g->group[new_index].temp_pk, temp_pk);
  818|  5.89k|    g->group[new_index].temp_pk_updated = true;
  819|  5.89k|    g->group[new_index].peer_number = peer_number;
  820|  5.89k|    g->group[new_index].last_active = mono_time_get(g_c->mono_time);
  821|  5.89k|    g->group[new_index].is_friend = getfriend_id(g_c->m, real_pk) != -1;
  822|  5.89k|    ++g->numpeers;
  823|       |
  824|  5.89k|    add_to_closest(g, real_pk, temp_pk);
  825|       |
  826|  5.89k|    if (do_gc_callback && g_c->peer_list_changed_callback != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (826:9): [True: 0, False: 5.89k]
  |  Branch (826:27): [True: 0, False: 0]
  ------------------
  827|      0|        g_c->peer_list_changed_callback(g_c->m, groupnumber, userdata);
  828|      0|    }
  829|       |
  830|  5.89k|    if (g->peer_on_join != nullptr) {
  ------------------
  |  |   63|  5.89k|#define nullptr NULL
  ------------------
  |  Branch (830:9): [True: 0, False: 5.89k]
  ------------------
  831|      0|        g->peer_on_join(g->object, groupnumber, new_index);
  832|      0|    }
  833|       |
  834|  5.89k|    return new_index;
  835|  5.89k|}
group.c:note_peer_active:
  677|  5.93k|{
  678|  5.93k|    Group_c *g = get_group_c(g_c, groupnumber);
  679|  5.93k|    if (g == nullptr) {
  ------------------
  |  |   63|  5.93k|#define nullptr NULL
  ------------------
  |  Branch (679:9): [True: 0, False: 5.93k]
  ------------------
  680|      0|        return -1;
  681|      0|    }
  682|       |
  683|  5.93k|    const int peer_index = get_peer_index(g, peer_number);
  684|       |
  685|  5.93k|    if (peer_index != -1) {
  ------------------
  |  Branch (685:9): [True: 0, False: 5.93k]
  ------------------
  686|      0|        g->group[peer_index].last_active = mono_time_get(g_c->mono_time);
  687|      0|        return peer_index;
  688|      0|    }
  689|       |
  690|  5.93k|    const int frozen_index = get_frozen_index(g, peer_number);
  691|       |
  692|  5.93k|    if (frozen_index == -1) {
  ------------------
  |  Branch (692:9): [True: 5.89k, False: 40]
  ------------------
  693|  5.89k|        return -1;
  694|  5.89k|    }
  695|       |
  696|       |    /* Now thaw the peer */
  697|       |
  698|     40|    Group_Peer *temp = (Group_Peer *)mem_vrealloc(g_c->mem, g->group, g->numpeers + 1, sizeof(Group_Peer));
  699|       |
  700|     40|    if (temp == nullptr) {
  ------------------
  |  |   63|     40|#define nullptr NULL
  ------------------
  |  Branch (700:9): [True: 0, False: 40]
  ------------------
  701|      0|        return -1;
  702|      0|    }
  703|       |
  704|     40|    const uint32_t thawed_index = g->numpeers;
  705|       |
  706|     40|    g->group = temp;
  707|     40|    g->group[thawed_index] = g->frozen[frozen_index];
  708|     40|    g->group[thawed_index].temp_pk_updated = false;
  709|     40|    g->group[thawed_index].last_active = mono_time_get(g_c->mono_time);
  710|       |
  711|     40|    add_to_closest(g, g->group[thawed_index].real_pk, g->group[thawed_index].temp_pk);
  712|       |
  713|     40|    ++g->numpeers;
  714|       |
  715|     40|    delete_frozen(g_c->mem, g, frozen_index);
  716|       |
  717|     40|    if (g_c->peer_list_changed_callback != nullptr) {
  ------------------
  |  |   63|     40|#define nullptr NULL
  ------------------
  |  Branch (717:9): [True: 0, False: 40]
  ------------------
  718|      0|        g_c->peer_list_changed_callback(g_c->m, groupnumber, userdata);
  719|      0|    }
  720|       |
  721|     40|    if (g->peer_on_join != nullptr) {
  ------------------
  |  |   63|     40|#define nullptr NULL
  ------------------
  |  Branch (721:9): [True: 0, False: 40]
  ------------------
  722|      0|        g->peer_on_join(g->object, groupnumber, thawed_index);
  723|      0|    }
  724|       |
  725|     40|    g->need_send_name = true;
  726|       |
  727|     40|    return thawed_index;
  728|     40|}
group.c:delete_frozen:
  644|     69|{
  645|     69|    if (frozen_index >= g->numfrozen) {
  ------------------
  |  Branch (645:9): [True: 0, False: 69]
  ------------------
  646|      0|        return false;
  647|      0|    }
  648|       |
  649|     69|    --g->numfrozen;
  650|       |
  651|     69|    if (g->numfrozen == 0) {
  ------------------
  |  Branch (651:9): [True: 55, False: 14]
  ------------------
  652|     55|        mem_delete(mem, g->frozen);
  653|     55|        g->frozen = nullptr;
  ------------------
  |  |   63|     55|#define nullptr NULL
  ------------------
  654|     55|    } else {
  655|     14|        if (g->numfrozen != frozen_index) {
  ------------------
  |  Branch (655:13): [True: 12, False: 2]
  ------------------
  656|     12|            g->frozen[frozen_index] = g->frozen[g->numfrozen];
  657|     12|        }
  658|       |
  659|     14|        Group_Peer *const frozen_temp = (Group_Peer *)mem_vrealloc(mem, g->frozen, g->numfrozen, sizeof(Group_Peer));
  660|       |
  661|     14|        if (frozen_temp == nullptr) {
  ------------------
  |  |   63|     14|#define nullptr NULL
  ------------------
  |  Branch (661:13): [True: 0, False: 14]
  ------------------
  662|      0|            return false;
  663|      0|        }
  664|       |
  665|     14|        g->frozen = frozen_temp;
  666|     14|    }
  667|       |
  668|     69|    return true;
  669|     69|}
group.c:get_peer_index:
  410|  5.93k|{
  411|  5.93k|    for (uint32_t i = 0; i < g->numpeers; ++i) {
  ------------------
  |  Branch (411:26): [True: 0, False: 5.93k]
  ------------------
  412|      0|        if (g->group[i].peer_number == peer_number) {
  ------------------
  |  Branch (412:13): [True: 0, False: 0]
  ------------------
  413|      0|            return i;
  414|      0|        }
  415|      0|    }
  416|       |
  417|  5.93k|    return -1;
  418|  5.93k|}
group.c:get_frozen_index:
  633|  5.93k|{
  634|  6.19k|    for (uint32_t i = 0; i < g->numfrozen; ++i) {
  ------------------
  |  Branch (634:26): [True: 294, False: 5.89k]
  ------------------
  635|    294|        if (g->frozen[i].peer_number == peer_number) {
  ------------------
  |  Branch (635:13): [True: 40, False: 254]
  ------------------
  636|     40|            return i;
  637|     40|        }
  638|    294|    }
  639|       |
  640|  5.89k|    return -1;
  641|  5.93k|}
group.c:delete_any_peer_with_pk:
  732|  5.89k|{
  733|  5.89k|    Group_c *g = get_group_c(g_c, groupnumber);
  734|  5.89k|    if (g == nullptr) {
  ------------------
  |  |   63|  5.89k|#define nullptr NULL
  ------------------
  |  Branch (734:9): [True: 0, False: 5.89k]
  ------------------
  735|      0|        return;
  736|      0|    }
  737|       |
  738|  5.89k|    const int peer_index = peer_in_group(g, real_pk);
  739|       |
  740|  5.89k|    if (peer_index >= 0) {
  ------------------
  |  Branch (740:9): [True: 0, False: 5.89k]
  ------------------
  741|      0|        delpeer(g_c, groupnumber, peer_index, userdata);
  742|      0|    }
  743|       |
  744|  5.89k|    const int frozen_index = frozen_in_group(g, real_pk);
  745|       |
  746|  5.89k|    if (frozen_index >= 0) {
  ------------------
  |  Branch (746:9): [True: 29, False: 5.86k]
  ------------------
  747|     29|        delete_frozen(g_c->mem, g, frozen_index);
  748|     29|    }
  749|  5.89k|}
group.c:peer_in_group:
  350|  5.89k|{
  351|  5.89k|    for (uint32_t i = 0; i < g->numpeers; ++i) {
  ------------------
  |  Branch (351:26): [True: 0, False: 5.89k]
  ------------------
  352|      0|        if (pk_equal(g->group[i].real_pk, real_pk)) {
  ------------------
  |  Branch (352:13): [True: 0, False: 0]
  ------------------
  353|      0|            return i;
  354|      0|        }
  355|      0|    }
  356|       |
  357|  5.89k|    return -1;
  358|  5.89k|}
group.c:frozen_in_group:
  361|  5.89k|{
  362|  6.01k|    for (uint32_t i = 0; i < g->numfrozen; ++i) {
  ------------------
  |  Branch (362:26): [True: 152, False: 5.86k]
  ------------------
  363|    152|        if (pk_equal(g->frozen[i].real_pk, real_pk)) {
  ------------------
  |  Branch (363:13): [True: 29, False: 123]
  ------------------
  364|     29|            return i;
  365|     29|        }
  366|    152|    }
  367|       |
  368|  5.86k|    return -1;
  369|  5.89k|}
group.c:add_to_closest:
  440|  5.93k|{
  441|  5.93k|    if (pk_equal(g->real_pk, real_pk)) {
  ------------------
  |  Branch (441:9): [True: 5.93k, False: 6]
  ------------------
  442|  5.93k|        return false;
  443|  5.93k|    }
  444|       |
  445|      6|    unsigned int index = DESIRED_CLOSEST;
  ------------------
  |  |   55|      6|#define DESIRED_CLOSEST 4
  ------------------
  446|       |
  447|     30|    for (unsigned int i = 0; i < DESIRED_CLOSEST; ++i) {
  ------------------
  |  |   55|     30|#define DESIRED_CLOSEST 4
  ------------------
  |  Branch (447:30): [True: 24, False: 6]
  ------------------
  448|     24|        if (g->closest_peers[i].active && pk_equal(real_pk, g->closest_peers[i].real_pk)) {
  ------------------
  |  Branch (448:13): [True: 0, False: 24]
  |  Branch (448:43): [True: 0, False: 0]
  ------------------
  449|      0|            return true;
  450|      0|        }
  451|     24|    }
  452|       |
  453|      6|    for (unsigned int i = 0; i < DESIRED_CLOSEST; ++i) {
  ------------------
  |  |   55|      6|#define DESIRED_CLOSEST 4
  ------------------
  |  Branch (453:30): [True: 6, False: 0]
  ------------------
  454|      6|        if (!g->closest_peers[i].active) {
  ------------------
  |  Branch (454:13): [True: 6, False: 0]
  ------------------
  455|      6|            index = i;
  456|      6|            break;
  457|      6|        }
  458|      6|    }
  459|       |
  460|      6|    if (index == DESIRED_CLOSEST) {
  ------------------
  |  |   55|      6|#define DESIRED_CLOSEST 4
  ------------------
  |  Branch (460:9): [True: 0, False: 6]
  ------------------
  461|      0|        uint64_t comp_val = calculate_comp_value(g->real_pk, real_pk);
  462|      0|        uint64_t comp_d = 0;
  463|       |
  464|      0|        for (unsigned int i = 0; i < (DESIRED_CLOSEST / 2); ++i) {
  ------------------
  |  |   55|      0|#define DESIRED_CLOSEST 4
  ------------------
  |  Branch (464:34): [True: 0, False: 0]
  ------------------
  465|      0|            const uint64_t comp = calculate_comp_value(g->real_pk, g->closest_peers[i].real_pk);
  466|       |
  467|      0|            if (comp > comp_val && comp > comp_d) {
  ------------------
  |  Branch (467:17): [True: 0, False: 0]
  |  Branch (467:36): [True: 0, False: 0]
  ------------------
  468|      0|                index = i;
  469|      0|                comp_d = comp;
  470|      0|            }
  471|      0|        }
  472|       |
  473|      0|        comp_val = calculate_comp_value(real_pk, g->real_pk);
  474|       |
  475|      0|        for (unsigned int i = DESIRED_CLOSEST / 2; i < DESIRED_CLOSEST; ++i) {
  ------------------
  |  |   55|      0|#define DESIRED_CLOSEST 4
  ------------------
                      for (unsigned int i = DESIRED_CLOSEST / 2; i < DESIRED_CLOSEST; ++i) {
  ------------------
  |  |   55|      0|#define DESIRED_CLOSEST 4
  ------------------
  |  Branch (475:52): [True: 0, False: 0]
  ------------------
  476|      0|            const uint64_t comp = calculate_comp_value(g->closest_peers[i].real_pk, g->real_pk);
  477|       |
  478|      0|            if (comp > comp_val && comp > comp_d) {
  ------------------
  |  Branch (478:17): [True: 0, False: 0]
  |  Branch (478:36): [True: 0, False: 0]
  ------------------
  479|      0|                index = i;
  480|      0|                comp_d = comp;
  481|      0|            }
  482|      0|        }
  483|      0|    }
  484|       |
  485|      6|    if (index == DESIRED_CLOSEST) {
  ------------------
  |  |   55|      6|#define DESIRED_CLOSEST 4
  ------------------
  |  Branch (485:9): [True: 0, False: 6]
  ------------------
  486|      0|        return false;
  487|      0|    }
  488|       |
  489|      6|    uint8_t old_real_pk[CRYPTO_PUBLIC_KEY_SIZE];
  490|      6|    uint8_t old_temp_pk[CRYPTO_PUBLIC_KEY_SIZE];
  491|      6|    bool old = false;
  492|       |
  493|      6|    if (g->closest_peers[index].active) {
  ------------------
  |  Branch (493:9): [True: 0, False: 6]
  ------------------
  494|      0|        memcpy(old_real_pk, g->closest_peers[index].real_pk, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      0|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  495|      0|        memcpy(old_temp_pk, g->closest_peers[index].temp_pk, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      0|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  496|      0|        old = true;
  497|      0|    }
  498|       |
  499|      6|    g->closest_peers[index].active = true;
  500|      6|    memcpy(g->closest_peers[index].real_pk, real_pk, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      6|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  501|      6|    memcpy(g->closest_peers[index].temp_pk, temp_pk, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|      6|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  502|       |
  503|      6|    if (old) {
  ------------------
  |  Branch (503:9): [True: 0, False: 6]
  ------------------
  504|      0|        add_to_closest(g, old_real_pk, old_temp_pk);
  505|      0|    }
  506|       |
  507|      6|    if (g->changed == GROUPCHAT_CLOSEST_CHANGE_NONE) {
  ------------------
  |  Branch (507:9): [True: 6, False: 0]
  ------------------
  508|      6|        g->changed = GROUPCHAT_CLOSEST_CHANGE_ADDED;
  509|      6|    }
  510|       |
  511|      6|    return true;
  512|      6|}
group.c:setnick:
 1054|  5.93k|{
 1055|  5.93k|    if (nick_len > MAX_NAME_LENGTH) {
  ------------------
  |  |   35|  5.93k|#define MAX_NAME_LENGTH 128
  ------------------
  |  Branch (1055:9): [True: 0, False: 5.93k]
  ------------------
 1056|      0|        return false;
 1057|      0|    }
 1058|       |
 1059|  5.93k|    Group_c *g = get_group_c(g_c, groupnumber);
 1060|       |
 1061|  5.93k|    if (g == nullptr) {
  ------------------
  |  |   63|  5.93k|#define nullptr NULL
  ------------------
  |  Branch (1061:9): [True: 0, False: 5.93k]
  ------------------
 1062|      0|        return false;
 1063|      0|    }
 1064|       |
 1065|  5.93k|    g->group[peer_index].nick_updated = true;
 1066|       |
 1067|  5.93k|    if (g_peer_nick_eq(&g->group[peer_index], nick, nick_len)) {
  ------------------
  |  Branch (1067:9): [True: 5.45k, False: 478]
  ------------------
 1068|       |        /* same name as already stored */
 1069|  5.45k|        return true;
 1070|  5.45k|    }
 1071|       |
 1072|    478|    if (nick_len > 0) {
  ------------------
  |  Branch (1072:9): [True: 444, False: 34]
  ------------------
 1073|    444|        memcpy(g->group[peer_index].nick, nick, nick_len);
 1074|    444|    }
 1075|       |
 1076|    478|    g->group[peer_index].nick_len = nick_len;
 1077|       |
 1078|    478|    if (do_gc_callback && g_c->peer_name_callback != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1078:9): [True: 0, False: 478]
  |  Branch (1078:27): [True: 0, False: 0]
  ------------------
 1079|      0|        g_c->peer_name_callback(g_c->m, groupnumber, peer_index, nick, nick_len, userdata);
 1080|      0|    }
 1081|       |
 1082|    478|    return true;
 1083|  5.93k|}
group.c:g_peer_nick_eq:
  230|  5.93k|{
  231|  5.93k|    return memeq(peer->nick, peer->nick_len, nick, nick_len);
  232|  5.93k|}
group.c:get_group_c:
  333|  37.4k|{
  334|  37.4k|    if (!is_groupnumber_valid(g_c, groupnumber)) {
  ------------------
  |  Branch (334:9): [True: 0, False: 37.4k]
  ------------------
  335|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  336|      0|    }
  337|       |
  338|  37.4k|    return &g_c->chats[groupnumber];
  339|  37.4k|}
group.c:is_groupnumber_valid:
  239|  37.4k|{
  240|  37.4k|    return groupnumber < g_c->num_chats
  ------------------
  |  Branch (240:12): [True: 37.4k, False: 0]
  ------------------
  241|  37.4k|           && g_c->chats != nullptr
  ------------------
  |  |   63|  74.8k|#define nullptr NULL
  ------------------
  |  Branch (241:15): [True: 37.4k, False: 0]
  ------------------
  242|  37.4k|           && g_c->chats[groupnumber].status != GROUPCHAT_STATUS_NONE;
  ------------------
  |  Branch (242:15): [True: 37.4k, False: 0]
  ------------------
  243|  37.4k|}
group.c:wipe_group_chat:
  309|  5.99k|{
  310|  5.99k|    if (groupnumber >= g_c->num_chats || g_c->chats == nullptr) {
  ------------------
  |  |   63|  5.99k|#define nullptr NULL
  ------------------
  |  Branch (310:9): [True: 0, False: 5.99k]
  |  Branch (310:42): [True: 0, False: 5.99k]
  ------------------
  311|      0|        return false;
  312|      0|    }
  313|       |
  314|  5.99k|    wipe_group_c(g_c->mem, &g_c->chats[groupnumber]);
  315|       |
  316|  5.99k|    uint16_t i;
  317|       |
  318|  11.9k|    for (i = g_c->num_chats; i != 0; --i) {
  ------------------
  |  Branch (318:30): [True: 11.8k, False: 113]
  ------------------
  319|  11.8k|        if (g_c->chats[i - 1].status != GROUPCHAT_STATUS_NONE) {
  ------------------
  |  Branch (319:13): [True: 5.88k, False: 5.99k]
  ------------------
  320|  5.88k|            break;
  321|  5.88k|        }
  322|  11.8k|    }
  323|       |
  324|  5.99k|    if (g_c->num_chats != i) {
  ------------------
  |  Branch (324:9): [True: 157, False: 5.83k]
  ------------------
  325|    157|        g_c->num_chats = i;
  326|    157|        realloc_conferences(g_c, g_c->num_chats);
  327|    157|    }
  328|       |
  329|  5.99k|    return true;
  330|  5.99k|}
group.c:wipe_group_c:
  298|  5.99k|{
  299|  5.99k|    mem_delete(mem, g->frozen);
  300|  5.99k|    mem_delete(mem, g->group);
  301|  5.99k|    crypto_memzero(g, sizeof(Group_c));
  302|  5.99k|}
group.c:count_connected:
 2224|  2.38k|{
 2225|  2.38k|    unsigned int count = 0;
 2226|       |
 2227|  40.4k|    for (unsigned int i = 0; i < MAX_GROUP_CONNECTIONS; ++i) {
  ------------------
  |  |   56|  40.4k|#define MAX_GROUP_CONNECTIONS 16
  ------------------
  |  Branch (2227:30): [True: 38.0k, False: 2.38k]
  ------------------
 2228|  38.0k|        if (g->connections[i].type == GROUPCHAT_CONNECTION_ONLINE) {
  ------------------
  |  Branch (2228:13): [True: 0, False: 38.0k]
  ------------------
 2229|      0|            ++count;
 2230|      0|        }
 2231|  38.0k|    }
 2232|       |
 2233|  2.38k|    return count;
 2234|  2.38k|}
group.c:group_leave:
 1968|  2.38k|{
 1969|  2.38k|    const Group_c *g = get_group_c(g_c, groupnumber);
 1970|       |
 1971|  2.38k|    if (g == nullptr) {
  ------------------
  |  |   63|  2.38k|#define nullptr NULL
  ------------------
  |  Branch (1971:9): [True: 0, False: 2.38k]
  ------------------
 1972|      0|        return false;
 1973|      0|    }
 1974|       |
 1975|  2.38k|    if (permanent) {
  ------------------
  |  Branch (1975:9): [True: 0, False: 2.38k]
  ------------------
 1976|      0|        return group_kill_peer_send(g_c, groupnumber, g->peer_number);
 1977|  2.38k|    } else {
 1978|  2.38k|        return group_freeze_peer_send(g_c, groupnumber, g->peer_number);
 1979|  2.38k|    }
 1980|  2.38k|}
group.c:group_freeze_peer_send:
 1943|  2.38k|{
 1944|  2.38k|    uint8_t packet[GROUP_MESSAGE_KILL_PEER_LENGTH];
 1945|       |
 1946|  2.38k|    peer_num = net_htons(peer_num);
 1947|  2.38k|    memcpy(packet, &peer_num, sizeof(uint16_t));
 1948|       |
 1949|  2.38k|    return send_message_group(g_c, groupnumber, GROUP_MESSAGE_FREEZE_PEER_ID, packet, sizeof(packet)) > 0;
 1950|  2.38k|}
group.c:send_message_group:
 2630|  2.38k|{
 2631|  2.38k|    assert(len == 0 || data != nullptr);
 2632|  2.38k|    Group_c *g = get_group_c(g_c, groupnumber);
 2633|       |
 2634|  2.38k|    if (g == nullptr) {
  ------------------
  |  |   63|  2.38k|#define nullptr NULL
  ------------------
  |  Branch (2634:9): [True: 0, False: 2.38k]
  ------------------
 2635|      0|        return -1;
 2636|      0|    }
 2637|       |
 2638|  2.38k|    if (len > MAX_GROUP_MESSAGE_DATA_LEN) {
  ------------------
  |  |  188|  2.38k|#define MAX_GROUP_MESSAGE_DATA_LEN (MAX_CRYPTO_DATA_SIZE - (1 + MIN_MESSAGE_PACKET_LEN))
  |  |  ------------------
  |  |  |  |   93|  2.38k|#define MAX_CRYPTO_DATA_SIZE (uint16_t)(MAX_CRYPTO_PACKET_SIZE - CRYPTO_DATA_PACKET_MIN_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   88|  2.38k|#define MAX_CRYPTO_PACKET_SIZE (uint16_t)1400
  |  |  |  |  ------------------
  |  |  |  |               #define MAX_CRYPTO_DATA_SIZE (uint16_t)(MAX_CRYPTO_PACKET_SIZE - CRYPTO_DATA_PACKET_MIN_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   90|  2.38k|#define CRYPTO_DATA_PACKET_MIN_SIZE (uint16_t)(1 + sizeof(uint16_t) + (sizeof(uint32_t) + sizeof(uint32_t)) + CRYPTO_MAC_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   64|  2.38k|#define CRYPTO_MAC_SIZE                16
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MAX_GROUP_MESSAGE_DATA_LEN (MAX_CRYPTO_DATA_SIZE - (1 + MIN_MESSAGE_PACKET_LEN))
  |  |  ------------------
  |  |  |  |  209|  2.38k|#define MIN_MESSAGE_PACKET_LEN (sizeof(uint16_t) * 2 + sizeof(uint32_t) + 1)
  |  |  ------------------
  ------------------
  |  Branch (2638:9): [True: 0, False: 2.38k]
  ------------------
 2639|      0|        return -2;
 2640|      0|    }
 2641|       |
 2642|  2.38k|    if (g->status != GROUPCHAT_STATUS_CONNECTED || count_connected(g) == 0) {
  ------------------
  |  Branch (2642:9): [True: 0, False: 2.38k]
  |  Branch (2642:52): [True: 2.38k, False: 0]
  ------------------
 2643|  2.38k|        return -3;
 2644|  2.38k|    }
 2645|       |
 2646|      0|    const uint16_t packet_size = sizeof(uint16_t) + sizeof(uint32_t) + 1 + len;
 2647|      0|    VLA(uint8_t, packet, packet_size);
  ------------------
  |  |   59|      0|#define VLA ALLOC_VLA
  |  |  ------------------
  |  |  |  |   28|      0|#define ALLOC_VLA(type, name, size) type name[size]
  |  |  ------------------
  ------------------
 2648|      0|    const uint16_t peer_num = net_htons(g->peer_number);
 2649|      0|    memcpy(packet, &peer_num, sizeof(peer_num));
 2650|       |
 2651|      0|    ++g->message_number;
 2652|       |
 2653|      0|    if (g->message_number == 0) {
  ------------------
  |  Branch (2653:9): [True: 0, False: 0]
  ------------------
 2654|      0|        ++g->message_number;
 2655|      0|    }
 2656|       |
 2657|      0|    const uint32_t message_num = net_htonl(g->message_number);
 2658|      0|    memcpy(packet + sizeof(uint16_t), &message_num, sizeof(message_num));
 2659|       |
 2660|      0|    packet[sizeof(uint16_t) + sizeof(uint32_t)] = message_id;
 2661|       |
 2662|      0|    if (len != 0) {
  ------------------
  |  Branch (2662:9): [True: 0, False: 0]
  ------------------
 2663|      0|        memcpy(packet + sizeof(uint16_t) + sizeof(uint32_t) + 1, data, len);
 2664|      0|    }
 2665|       |
 2666|      0|    const unsigned int ret = send_message_all_connections(g_c, g, packet, packet_size, -1);
 2667|       |
 2668|      0|    if (ret == 0) {
  ------------------
  |  Branch (2668:9): [True: 0, False: 0]
  ------------------
 2669|      0|        return -4;
 2670|      0|    }
 2671|       |
 2672|      0|    return ret;
 2673|      0|}
group.c:conferences_section_size:
 3458|  4.48k|{
 3459|  4.48k|    uint32_t len = 0;
 3460|       |
 3461|  9.43k|    for (uint16_t i = 0; i < g_c->num_chats; ++i) {
  ------------------
  |  Branch (3461:26): [True: 4.95k, False: 4.48k]
  ------------------
 3462|  4.95k|        const Group_c *g = get_group_c(g_c, i);
 3463|       |
 3464|  4.95k|        if (g == nullptr || g->status != GROUPCHAT_STATUS_CONNECTED) {
  ------------------
  |  |   63|  9.91k|#define nullptr NULL
  ------------------
  |  Branch (3464:13): [True: 0, False: 4.95k]
  |  Branch (3464:29): [True: 0, False: 4.95k]
  ------------------
 3465|      0|            continue;
 3466|      0|        }
 3467|       |
 3468|  4.95k|        len += saved_conf_size(g);
 3469|  4.95k|    }
 3470|       |
 3471|  4.48k|    return len;
 3472|  4.48k|}
group.c:saved_conf_size:
 3390|  4.95k|{
 3391|  4.95k|    uint32_t len = SAVED_CONF_SIZE_CONSTANT + g->title_len;
  ------------------
  |  | 3386|  4.95k|#define SAVED_CONF_SIZE_CONSTANT (1 + GROUP_ID_LENGTH + sizeof(uint32_t) \
  |  |  ------------------
  |  |  |  |   53|  4.95k|#define GROUP_ID_LENGTH CRYPTO_SYMMETRIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   58|  4.95k|#define CRYPTO_SYMMETRIC_KEY_SIZE      CRYPTO_SHARED_KEY_SIZE
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   53|  4.95k|#define CRYPTO_SHARED_KEY_SIZE         32
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3387|  4.95k|      + sizeof(uint16_t) + sizeof(uint16_t) + sizeof(uint32_t) + 1)
  ------------------
 3392|       |
 3393|  10.5k|    for (uint32_t j = 0; j < g->numpeers + g->numfrozen; ++j) {
  ------------------
  |  Branch (3393:26): [True: 5.56k, False: 4.95k]
  ------------------
 3394|  5.56k|        const Group_Peer *peer = (j < g->numpeers) ? &g->group[j] : &g->frozen[j - g->numpeers];
  ------------------
  |  Branch (3394:34): [True: 4.95k, False: 612]
  ------------------
 3395|       |
 3396|  5.56k|        if (pk_equal(peer->real_pk, g->real_pk)) {
  ------------------
  |  Branch (3396:13): [True: 4.95k, False: 612]
  ------------------
 3397|  4.95k|            continue;
 3398|  4.95k|        }
 3399|       |
 3400|    612|        len += saved_peer_size(peer);
 3401|    612|    }
 3402|       |
 3403|  4.95k|    return len;
 3404|  4.95k|}
group.c:saved_peer_size:
 3358|    612|{
 3359|    612|    return SAVED_PEER_SIZE_CONSTANT + peer->nick_len;
  ------------------
  |  | 3355|    612|#define SAVED_PEER_SIZE_CONSTANT (2 * CRYPTO_PUBLIC_KEY_SIZE + sizeof(uint16_t) + sizeof(uint64_t) + 1)
  |  |  ------------------
  |  |  |  |   43|    612|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
 3360|    612|}
group.c:save_conf:
 3414|  1.65k|{
 3415|  1.65k|    *data = g->type;
 3416|  1.65k|    ++data;
 3417|       |
 3418|  1.65k|    memcpy(data, g->id, GROUP_ID_LENGTH);
  ------------------
  |  |   53|  1.65k|#define GROUP_ID_LENGTH CRYPTO_SYMMETRIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   58|  1.65k|#define CRYPTO_SYMMETRIC_KEY_SIZE      CRYPTO_SHARED_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   53|  1.65k|#define CRYPTO_SHARED_KEY_SIZE         32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3419|  1.65k|    data += GROUP_ID_LENGTH;
  ------------------
  |  |   53|  1.65k|#define GROUP_ID_LENGTH CRYPTO_SYMMETRIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   58|  1.65k|#define CRYPTO_SYMMETRIC_KEY_SIZE      CRYPTO_SHARED_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   53|  1.65k|#define CRYPTO_SHARED_KEY_SIZE         32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3420|       |
 3421|  1.65k|    host_to_lendian_bytes32(data, g->message_number + SAVE_OFFSET_MESSAGE_NUMBER);
  ------------------
  |  | 3410|  1.65k|#define SAVE_OFFSET_MESSAGE_NUMBER (1 << 16)
  ------------------
 3422|  1.65k|    data += sizeof(uint32_t);
 3423|       |
 3424|  1.65k|    host_to_lendian_bytes16(data, g->lossy_message_number + SAVE_OFFSET_LOSSY_MESSAGE_NUMBER);
  ------------------
  |  | 3411|  1.65k|#define SAVE_OFFSET_LOSSY_MESSAGE_NUMBER (1 << 13)
  ------------------
 3425|  1.65k|    data += sizeof(uint16_t);
 3426|       |
 3427|  1.65k|    host_to_lendian_bytes16(data, g->peer_number);
 3428|  1.65k|    data += sizeof(uint16_t);
 3429|       |
 3430|  1.65k|    uint8_t *const numsaved_location = data;
 3431|  1.65k|    data += sizeof(uint32_t);
 3432|       |
 3433|  1.65k|    *data = g->title_len;
 3434|  1.65k|    ++data;
 3435|       |
 3436|  1.65k|    memcpy(data, g->title, g->title_len);
 3437|  1.65k|    data += g->title_len;
 3438|       |
 3439|  1.65k|    uint32_t numsaved = 0;
 3440|       |
 3441|  3.50k|    for (uint32_t j = 0; j < g->numpeers + g->numfrozen; ++j) {
  ------------------
  |  Branch (3441:26): [True: 1.85k, False: 1.65k]
  ------------------
 3442|  1.85k|        const Group_Peer *peer = (j < g->numpeers) ? &g->group[j] : &g->frozen[j - g->numpeers];
  ------------------
  |  Branch (3442:34): [True: 1.65k, False: 204]
  ------------------
 3443|       |
 3444|  1.85k|        if (pk_equal(peer->real_pk, g->real_pk)) {
  ------------------
  |  Branch (3444:13): [True: 1.65k, False: 204]
  ------------------
 3445|  1.65k|            continue;
 3446|  1.65k|        }
 3447|       |
 3448|    204|        data = save_peer(peer, data);
 3449|    204|        ++numsaved;
 3450|    204|    }
 3451|       |
 3452|  1.65k|    host_to_lendian_bytes32(numsaved_location, numsaved);
 3453|       |
 3454|  1.65k|    return data;
 3455|  1.65k|}
group.c:save_peer:
 3363|    204|{
 3364|    204|    memcpy(data, peer->real_pk, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|    204|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 3365|    204|    data += CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|    204|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 3366|       |
 3367|    204|    memcpy(data, peer->temp_pk, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|    204|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 3368|    204|    data += CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|    204|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 3369|       |
 3370|    204|    host_to_lendian_bytes16(data, peer->peer_number);
 3371|    204|    data += sizeof(uint16_t);
 3372|       |
 3373|    204|    host_to_lendian_bytes64(data, peer->last_active);
 3374|    204|    data += sizeof(uint64_t);
 3375|       |
 3376|       |    // TODO(iphydf): This looks broken: nick_len can be > 255.
 3377|    204|    *data = peer->nick_len;
 3378|    204|    ++data;
 3379|       |
 3380|    204|    memcpy(data, peer->nick, peer->nick_len);
 3381|    204|    data += peer->nick_len;
 3382|       |
 3383|    204|    return data;
 3384|    204|}
group.c:load_conferences:
 3663|    461|{
 3664|    461|    const State_Load_Status res = load_conferences_helper(g_c, data, length);
 3665|       |
 3666|    461|    if (res == STATE_LOAD_STATUS_CONTINUE) {
  ------------------
  |  Branch (3666:9): [True: 397, False: 64]
  ------------------
 3667|    397|        return res;
 3668|    397|    }
 3669|       |
 3670|       |    // Loading failed, cleanup all Group_c
 3671|       |
 3672|       |    // save locally, because wipe_group_chat(...) modifies it
 3673|     64|    const uint16_t num_groups = g_c->num_chats;
 3674|       |
 3675|  3.61k|    for (uint16_t i = 0; i < num_groups; ++i) {
  ------------------
  |  Branch (3675:26): [True: 3.55k, False: 64]
  ------------------
 3676|  3.55k|        wipe_group_chat(g_c, i);
 3677|  3.55k|    }
 3678|       |
 3679|     64|    return res;
 3680|    461|}
group.c:load_conferences_helper:
 3613|    461|{
 3614|    461|    const uint8_t *init_data = data;
 3615|       |
 3616|  6.39k|    while (length >= (uint32_t)(data - init_data) + SAVED_CONF_SIZE_CONSTANT) {
  ------------------
  |  | 3386|  6.39k|#define SAVED_CONF_SIZE_CONSTANT (1 + GROUP_ID_LENGTH + sizeof(uint32_t) \
  |  |  ------------------
  |  |  |  |   53|  6.39k|#define GROUP_ID_LENGTH CRYPTO_SYMMETRIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   58|  6.39k|#define CRYPTO_SYMMETRIC_KEY_SIZE      CRYPTO_SHARED_KEY_SIZE
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   53|  6.39k|#define CRYPTO_SHARED_KEY_SIZE         32
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3387|  6.39k|      + sizeof(uint16_t) + sizeof(uint16_t) + sizeof(uint32_t) + 1)
  ------------------
  |  Branch (3616:12): [True: 5.99k, False: 397]
  ------------------
 3617|  5.99k|        const int groupnumber = create_group_chat(g_c);
 3618|       |
 3619|       |        // Helpful for testing
 3620|  5.99k|        assert(groupnumber != -1);
 3621|       |
 3622|  5.99k|        if (groupnumber == -1) {
  ------------------
  |  Branch (3622:13): [True: 0, False: 5.99k]
  ------------------
 3623|       |            // If this fails there's a serious problem, don't bother with cleanup
 3624|      0|            LOGGER_ERROR(g_c->m->log, "conference creation failed");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3625|      0|            return STATE_LOAD_STATUS_ERROR;
 3626|      0|        }
 3627|       |
 3628|  5.99k|        Group_c *g = &g_c->chats[groupnumber];
 3629|       |
 3630|  5.99k|        const uint32_t consumed = load_group(g, g_c, data, length - (uint32_t)(data - init_data));
 3631|       |
 3632|  5.99k|        if (consumed == 0) {
  ------------------
  |  Branch (3632:13): [True: 58, False: 5.93k]
  ------------------
 3633|       |            // remove partially loaded stuff, wipe_group_chat must be able to wipe a partially loaded group
 3634|     58|            const bool ret = wipe_group_chat(g_c, groupnumber);
 3635|       |
 3636|       |            // HACK: suppress unused variable warning
 3637|     58|            if (!ret) {
  ------------------
  |  Branch (3637:17): [True: 0, False: 58]
  ------------------
 3638|       |                // wipe_group_chat(...) must be able to wipe partially allocated groups
 3639|      0|                assert(ret);
 3640|      0|            }
 3641|       |
 3642|     58|            LOGGER_ERROR(g_c->m->log, "conference loading failed");
  ------------------
  |  |   80|     58|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     58|    do {                                                                         \
  |  |  |  |   70|     58|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    116|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     58|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     58|        }                                                                        \
  |  |  |  |   73|     58|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3643|     58|            return STATE_LOAD_STATUS_ERROR;
 3644|     58|        }
 3645|       |
 3646|  5.93k|        data += consumed;
 3647|       |
 3648|  5.93k|        const int peer_index = addpeer(g_c, groupnumber, g->real_pk, dht_get_self_public_key(g_c->m->dht), g->peer_number,
 3649|  5.93k|                                       nullptr, true, false);
  ------------------
  |  |   63|  5.93k|#define nullptr NULL
  ------------------
 3650|       |
 3651|  5.93k|        if (peer_index == -1) {
  ------------------
  |  Branch (3651:13): [True: 6, False: 5.93k]
  ------------------
 3652|      6|            LOGGER_ERROR(g_c->m->log, "adding peer %d failed", g->peer_number);
  ------------------
  |  |   80|      6|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      6|    do {                                                                         \
  |  |  |  |   70|      6|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     12|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      6|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      6|        }                                                                        \
  |  |  |  |   73|      6|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3653|      6|            return STATE_LOAD_STATUS_ERROR;
 3654|      6|        }
 3655|       |
 3656|  5.93k|        setnick(g_c, groupnumber, peer_index, g_c->m->name, g_c->m->name_length, nullptr, false);
  ------------------
  |  |   63|  5.93k|#define nullptr NULL
  ------------------
 3657|  5.93k|    }
 3658|       |
 3659|    397|    return STATE_LOAD_STATUS_CONTINUE;
 3660|    461|}
group.c:load_group:
 3506|  5.99k|{
 3507|  5.99k|    const uint8_t *init_data = data;
 3508|       |
 3509|       |    // Initialize to default values so we can unconditionally free in case of an error
 3510|  5.99k|    setup_conference(g);
 3511|       |
 3512|  5.99k|    g->type = *data;
 3513|  5.99k|    ++data;
 3514|       |
 3515|  5.99k|    memcpy(g->id, data, GROUP_ID_LENGTH);
  ------------------
  |  |   53|  5.99k|#define GROUP_ID_LENGTH CRYPTO_SYMMETRIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   58|  5.99k|#define CRYPTO_SYMMETRIC_KEY_SIZE      CRYPTO_SHARED_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   53|  5.99k|#define CRYPTO_SHARED_KEY_SIZE         32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3516|  5.99k|    data += GROUP_ID_LENGTH;
  ------------------
  |  |   53|  5.99k|#define GROUP_ID_LENGTH CRYPTO_SYMMETRIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   58|  5.99k|#define CRYPTO_SYMMETRIC_KEY_SIZE      CRYPTO_SHARED_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   53|  5.99k|#define CRYPTO_SHARED_KEY_SIZE         32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|       |
 3518|  5.99k|    lendian_bytes_to_host32(&g->message_number, data);
 3519|  5.99k|    data += sizeof(uint32_t);
 3520|       |
 3521|  5.99k|    lendian_bytes_to_host16(&g->lossy_message_number, data);
 3522|  5.99k|    data += sizeof(uint16_t);
 3523|       |
 3524|  5.99k|    lendian_bytes_to_host16(&g->peer_number, data);
 3525|  5.99k|    data += sizeof(uint16_t);
 3526|       |
 3527|  5.99k|    lendian_bytes_to_host32(&g->numfrozen, data);
 3528|  5.99k|    data += sizeof(uint32_t);
 3529|       |
 3530|  5.99k|    g->title_len = *data;
 3531|       |
 3532|  5.99k|    if (g->title_len > MAX_NAME_LENGTH) {
  ------------------
  |  |   35|  5.99k|#define MAX_NAME_LENGTH 128
  ------------------
  |  Branch (3532:9): [True: 12, False: 5.98k]
  ------------------
 3533|     12|        return 0;
 3534|     12|    }
 3535|       |
 3536|  5.98k|    ++data;
 3537|       |
 3538|  5.98k|    assert((data - init_data) < UINT32_MAX);
 3539|       |
 3540|  5.98k|    if (length < (uint32_t)(data - init_data) + g->title_len) {
  ------------------
  |  Branch (3540:9): [True: 2, False: 5.98k]
  ------------------
 3541|      2|        return 0;
 3542|      2|    }
 3543|       |
 3544|  5.98k|    memcpy(g->title, data, g->title_len);
 3545|  5.98k|    data += g->title_len;
 3546|       |
 3547|  6.37k|    for (uint32_t j = 0; j < g->numfrozen; ++j) {
  ------------------
  |  Branch (3547:26): [True: 439, False: 5.93k]
  ------------------
 3548|       |
 3549|    439|        assert((data - init_data) < UINT32_MAX);
 3550|       |
 3551|    439|        if (length < (uint32_t)(data - init_data) + SAVED_PEER_SIZE_CONSTANT) {
  ------------------
  |  | 3355|    439|#define SAVED_PEER_SIZE_CONSTANT (2 * CRYPTO_PUBLIC_KEY_SIZE + sizeof(uint16_t) + sizeof(uint64_t) + 1)
  |  |  ------------------
  |  |  |  |   43|    439|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  |  Branch (3551:13): [True: 30, False: 409]
  ------------------
 3552|     30|            return 0;
 3553|     30|        }
 3554|       |
 3555|       |        // This is inefficient, but allows us to check data consistency before allocating memory
 3556|    409|        Group_Peer *tmp_frozen = (Group_Peer *)mem_vrealloc(g_c->mem, g->frozen, j + 1, sizeof(Group_Peer));
 3557|       |
 3558|    409|        if (tmp_frozen == nullptr) {
  ------------------
  |  |   63|    409|#define nullptr NULL
  ------------------
  |  Branch (3558:13): [True: 0, False: 409]
  ------------------
 3559|       |            // Memory allocation failure
 3560|      0|            return 0;
 3561|      0|        }
 3562|       |
 3563|    409|        g->frozen = tmp_frozen;
 3564|       |
 3565|    409|        Group_Peer *peer = &g->frozen[j];
 3566|    409|        *peer = empty_group_peer;
 3567|       |
 3568|    409|        pk_copy(peer->real_pk, data);
 3569|    409|        data += CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|    409|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 3570|    409|        pk_copy(peer->temp_pk, data);
 3571|    409|        data += CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|    409|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 3572|       |
 3573|    409|        lendian_bytes_to_host16(&peer->peer_number, data);
 3574|    409|        data += sizeof(uint16_t);
 3575|       |
 3576|    409|        lendian_bytes_to_host64(&peer->last_active, data);
 3577|    409|        data += sizeof(uint64_t);
 3578|       |
 3579|    409|        peer->nick_len = *data;
 3580|       |
 3581|    409|        if (peer->nick_len > MAX_NAME_LENGTH) {
  ------------------
  |  |   35|    409|#define MAX_NAME_LENGTH 128
  ------------------
  |  Branch (3581:13): [True: 10, False: 399]
  ------------------
 3582|     10|            return 0;
 3583|     10|        }
 3584|       |
 3585|    399|        ++data;
 3586|    399|        assert((data - init_data) < UINT32_MAX);
 3587|       |
 3588|    399|        if (length < (uint32_t)(data - init_data) + peer->nick_len) {
  ------------------
  |  Branch (3588:13): [True: 4, False: 395]
  ------------------
 3589|      4|            return 0;
 3590|      4|        }
 3591|       |
 3592|    395|        memcpy(peer->nick, data, peer->nick_len);
 3593|    395|        data += peer->nick_len;
 3594|       |
 3595|       |        // NOTE: this relies on friends being loaded before conferences.
 3596|    395|        peer->is_friend = getfriend_id(g_c->m, peer->real_pk) != -1;
 3597|    395|    }
 3598|       |
 3599|  5.93k|    if (g->numfrozen > g->maxfrozen) {
  ------------------
  |  Branch (3599:9): [True: 0, False: 5.93k]
  ------------------
 3600|      0|        g->maxfrozen = g->numfrozen;
 3601|      0|    }
 3602|       |
 3603|  5.93k|    g->status = GROUPCHAT_STATUS_CONNECTED;
 3604|       |
 3605|  5.93k|    pk_copy(g->real_pk, nc_get_self_public_key(g_c->m->net_crypto));
 3606|       |
 3607|  5.93k|    assert((data - init_data) < UINT32_MAX);
 3608|       |
 3609|  5.93k|    return (uint32_t)(data - init_data);
 3610|  5.93k|}

new_gca_list:
  408|  1.97k|{
  409|  1.97k|    GC_Announces_List *announces_list = (GC_Announces_List *)mem_alloc(mem, sizeof(GC_Announces_List));
  410|       |
  411|  1.97k|    if (announces_list == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (411:9): [True: 0, False: 1.97k]
  ------------------
  412|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  413|      0|    }
  414|       |
  415|  1.97k|    announces_list->mem = mem;
  416|       |
  417|  1.97k|    return announces_list;
  418|  1.97k|}
kill_gca:
  421|  1.97k|{
  422|  1.97k|    if (announces_list == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (422:9): [True: 0, False: 1.97k]
  ------------------
  423|      0|        return;
  424|      0|    }
  425|       |
  426|  1.97k|    GC_Announces *root = announces_list->root_announces;
  427|       |
  428|  1.97k|    while (root != nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (428:12): [True: 0, False: 1.97k]
  ------------------
  429|      0|        GC_Announces *next = root->next_announce;
  430|      0|        mem_delete(announces_list->mem, root);
  431|      0|        root = next;
  432|      0|    }
  433|       |
  434|  1.97k|    mem_delete(announces_list->mem, announces_list);
  435|  1.97k|}

gc_peer_id_from_int:
  191|    148|{
  192|    148|    const GC_Peer_Id peer_id = {(force GC_Peer_Id_Value)value};
  193|    148|    return peer_id;
  194|    148|}
gc_peer_number_is_valid:
  234|    148|{
  235|    148|    return peer_number >= 0 && peer_number < (int)chat->numpeers;
  ------------------
  |  Branch (235:12): [True: 148, False: 0]
  |  Branch (235:32): [True: 148, False: 0]
  ------------------
  236|    148|}
get_gc_connection:
  248|    148|{
  249|    148|    GC_Peer *peer = get_gc_peer(chat, peer_number);
  250|       |
  251|    148|    if (peer == nullptr) {
  ------------------
  |  |   63|    148|#define nullptr NULL
  ------------------
  |  Branch (251:9): [True: 0, False: 148]
  ------------------
  252|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  253|      0|    }
  254|       |
  255|    148|    return &peer->gconn;
  256|    148|}
pack_gc_saved_peers:
  419|    288|{
  420|    288|    uint16_t packed_len = 0;
  421|    288|    uint16_t count = 0;
  422|       |
  423|  29.0k|    for (uint32_t i = 0; i < GC_MAX_SAVED_PEERS; ++i) {
  ------------------
  |  |   49|  29.0k|#define GC_MAX_SAVED_PEERS 100
  ------------------
  |  Branch (423:26): [True: 28.8k, False: 288]
  ------------------
  424|  28.8k|        const GC_SavedPeerInfo *saved_peer = &chat->saved_peers[i];
  425|       |
  426|  28.8k|        if (!saved_peer_is_valid(saved_peer)) {
  ------------------
  |  Branch (426:13): [True: 27.9k, False: 836]
  ------------------
  427|  27.9k|            continue;
  428|  27.9k|        }
  429|       |
  430|    836|        int packed_ipp_len = 0;
  431|    836|        int packed_tcp_len = 0;
  432|       |
  433|    836|        if (ipport_isset(&saved_peer->ip_port)) {
  ------------------
  |  Branch (433:13): [True: 668, False: 168]
  ------------------
  434|    668|            if (packed_len > length) {
  ------------------
  |  Branch (434:17): [True: 0, False: 668]
  ------------------
  435|      0|                return -1;
  436|      0|            }
  437|       |
  438|    668|            packed_ipp_len = pack_ip_port(chat->log, data + packed_len, length - packed_len, &saved_peer->ip_port);
  439|       |
  440|    668|            if (packed_ipp_len > 0) {
  ------------------
  |  Branch (440:17): [True: 668, False: 0]
  ------------------
  441|    668|                packed_len += packed_ipp_len;
  442|    668|            }
  443|    668|        }
  444|       |
  445|    836|        if (ipport_isset(&saved_peer->tcp_relay.ip_port)) {
  ------------------
  |  Branch (445:13): [True: 604, False: 232]
  ------------------
  446|    604|            if (packed_len > length) {
  ------------------
  |  Branch (446:17): [True: 0, False: 604]
  ------------------
  447|      0|                return -1;
  448|      0|            }
  449|       |
  450|    604|            packed_tcp_len = pack_nodes(chat->log, data + packed_len, length - packed_len, &saved_peer->tcp_relay, 1);
  451|       |
  452|    604|            if (packed_tcp_len > 0) {
  ------------------
  |  Branch (452:17): [True: 604, False: 0]
  ------------------
  453|    604|                packed_len += packed_tcp_len;
  454|    604|            }
  455|    604|        }
  456|       |
  457|    836|        if (packed_len + ENC_PUBLIC_KEY_SIZE > length) {
  ------------------
  |  |  122|    836|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|    836|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  |  Branch (457:13): [True: 0, False: 836]
  ------------------
  458|      0|            return -1;
  459|      0|        }
  460|       |
  461|    836|        if (packed_tcp_len > 0 || packed_ipp_len > 0) {
  ------------------
  |  Branch (461:13): [True: 604, False: 232]
  |  Branch (461:35): [True: 232, False: 0]
  ------------------
  462|    836|            memcpy(data + packed_len, chat->saved_peers[i].public_key, ENC_PUBLIC_KEY_SIZE);
  ------------------
  |  |  122|    836|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|    836|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  463|    836|            packed_len += ENC_PUBLIC_KEY_SIZE;
  ------------------
  |  |  122|    836|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|    836|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  464|    836|            ++count;
  465|    836|        } else {
  466|      0|            LOGGER_WARNING(chat->log, "Failed to pack saved peer");
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  467|      0|        }
  468|    836|    }
  469|       |
  470|    288|    if (processed != nullptr) {
  ------------------
  |  |   63|    288|#define nullptr NULL
  ------------------
  |  Branch (470:9): [True: 288, False: 0]
  ------------------
  471|    288|        *processed = packed_len;
  472|    288|    }
  473|       |
  474|    288|    return count;
  475|    288|}
unpack_gc_saved_peers:
  478|    109|{
  479|    109|    uint16_t count = 0;
  480|    109|    uint16_t unpacked_len = 0;
  481|       |
  482|    574|    for (size_t i = 0; unpacked_len < length; ++i) {
  ------------------
  |  Branch (482:24): [True: 569, False: 5]
  ------------------
  483|    569|        GC_SavedPeerInfo *saved_peer = &chat->saved_peers[i];
  484|       |
  485|    569|        const int ipp_len = unpack_ip_port(&saved_peer->ip_port, data + unpacked_len, length - unpacked_len, false);
  486|       |
  487|    569|        if (ipp_len > 0) {
  ------------------
  |  Branch (487:13): [True: 400, False: 169]
  ------------------
  488|    400|            unpacked_len += ipp_len;
  489|    400|        }
  490|       |
  491|    569|        if (unpacked_len > length) {
  ------------------
  |  Branch (491:13): [True: 0, False: 569]
  ------------------
  492|      0|            return -1;
  493|      0|        }
  494|       |
  495|    569|        uint16_t tcp_len_processed = 0;
  496|    569|        const int tcp_len = unpack_nodes(&saved_peer->tcp_relay, 1, &tcp_len_processed, data + unpacked_len,
  497|    569|                                         length - unpacked_len, true);
  498|       |
  499|    569|        if (tcp_len == 1 && tcp_len_processed > 0) {
  ------------------
  |  Branch (499:13): [True: 275, False: 294]
  |  Branch (499:29): [True: 275, False: 0]
  ------------------
  500|    275|            unpacked_len += tcp_len_processed;
  501|    294|        } else if (ipp_len <= 0) {
  ------------------
  |  Branch (501:20): [True: 102, False: 192]
  ------------------
  502|    102|            LOGGER_WARNING(chat->log, "Failed to unpack saved peer: Invalid connection info.");
  ------------------
  |  |   79|    102|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|    102|    do {                                                                         \
  |  |  |  |   70|    102|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    204|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|    102|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|    102|        }                                                                        \
  |  |  |  |   73|    102|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  503|    102|            return -1;
  504|    102|        }
  505|       |
  506|    467|        if (unpacked_len + ENC_PUBLIC_KEY_SIZE > length) {
  ------------------
  |  |  122|    467|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|    467|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  |  Branch (506:13): [True: 2, False: 465]
  ------------------
  507|      2|            return -1;
  508|      2|        }
  509|       |
  510|    465|        if (tcp_len > 0 || ipp_len > 0) {
  ------------------
  |  Branch (510:13): [True: 275, False: 190]
  |  Branch (510:28): [True: 190, False: 0]
  ------------------
  511|    465|            memcpy(saved_peer->public_key, data + unpacked_len, ENC_PUBLIC_KEY_SIZE);
  ------------------
  |  |  122|    465|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|    465|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  512|    465|            unpacked_len += ENC_PUBLIC_KEY_SIZE;
  ------------------
  |  |  122|    465|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|    465|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  513|    465|            ++count;
  514|    465|        } else {
  515|      0|            LOGGER_ERROR(chat->log, "Unpacked peer with bad connection info");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  516|      0|            return -1;
  517|      0|        }
  518|    465|    }
  519|       |
  520|      5|    return count;
  521|    109|}
gc_get_pk_jenkins_hash:
  580|    148|{
  581|    148|    return jenkins_one_at_a_time_hash(public_key, ENC_PUBLIC_KEY_SIZE);
  ------------------
  |  |  122|    148|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|    148|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  582|    148|}
get_peer_number_of_enc_pk:
  612|    148|{
  613|    148|    for (uint32_t i = 0; i < chat->numpeers; ++i) {
  ------------------
  |  Branch (613:26): [True: 0, False: 148]
  ------------------
  614|      0|        const GC_Connection *gconn = get_gc_connection(chat, i);
  615|       |
  616|      0|        assert(gconn != nullptr);
  617|       |
  618|      0|        if (gconn->pending_delete) {
  ------------------
  |  Branch (618:13): [True: 0, False: 0]
  ------------------
  619|      0|            continue;
  620|      0|        }
  621|       |
  622|      0|        if (confirmed && !gconn->confirmed) {
  ------------------
  |  Branch (622:13): [True: 0, False: 0]
  |  Branch (622:26): [True: 0, False: 0]
  ------------------
  623|      0|            continue;
  624|      0|        }
  625|       |
  626|      0|        if (memcmp(gconn->addr.public_key.enc, public_enc_key, ENC_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |  122|      0|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|      0|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  |  Branch (626:13): [True: 0, False: 0]
  ------------------
  627|      0|            return i;
  628|      0|        }
  629|      0|    }
  630|       |
  631|    148|    return -1;
  632|    148|}
gc_callback_message:
 6439|  1.49k|{
 6440|  1.49k|    GC_Session *c = m->group_handler;
 6441|  1.49k|    c->message = function;
 6442|  1.49k|}
gc_callback_private_message:
 6445|  1.49k|{
 6446|  1.49k|    GC_Session *c = m->group_handler;
 6447|  1.49k|    c->private_message = function;
 6448|  1.49k|}
gc_callback_custom_packet:
 6451|  1.49k|{
 6452|  1.49k|    GC_Session *c = m->group_handler;
 6453|  1.49k|    c->custom_packet = function;
 6454|  1.49k|}
gc_callback_custom_private_packet:
 6457|  1.49k|{
 6458|  1.49k|    GC_Session *c = m->group_handler;
 6459|  1.49k|    c->custom_private_packet = function;
 6460|  1.49k|}
gc_callback_moderation:
 6463|  1.49k|{
 6464|  1.49k|    GC_Session *c = m->group_handler;
 6465|  1.49k|    c->moderation = function;
 6466|  1.49k|}
gc_callback_nick_change:
 6469|  1.49k|{
 6470|  1.49k|    GC_Session *c = m->group_handler;
 6471|  1.49k|    c->nick_change = function;
 6472|  1.49k|}
gc_callback_status_change:
 6475|  1.49k|{
 6476|  1.49k|    GC_Session *c = m->group_handler;
 6477|  1.49k|    c->status_change = function;
 6478|  1.49k|}
gc_callback_topic_change:
 6481|  1.49k|{
 6482|  1.49k|    GC_Session *c = m->group_handler;
 6483|  1.49k|    c->topic_change = function;
 6484|  1.49k|}
gc_callback_topic_lock:
 6487|  1.49k|{
 6488|  1.49k|    GC_Session *c = m->group_handler;
 6489|  1.49k|    c->topic_lock = function;
 6490|  1.49k|}
gc_callback_voice_state:
 6493|  1.49k|{
 6494|  1.49k|    GC_Session *c = m->group_handler;
 6495|  1.49k|    c->voice_state = function;
 6496|  1.49k|}
gc_callback_peer_limit:
 6499|  1.49k|{
 6500|  1.49k|    GC_Session *c = m->group_handler;
 6501|  1.49k|    c->peer_limit = function;
 6502|  1.49k|}
gc_callback_privacy_state:
 6505|  1.49k|{
 6506|  1.49k|    GC_Session *c = m->group_handler;
 6507|  1.49k|    c->privacy_state = function;
 6508|  1.49k|}
gc_callback_password:
 6511|  1.49k|{
 6512|  1.49k|    GC_Session *c = m->group_handler;
 6513|  1.49k|    c->password = function;
 6514|  1.49k|}
gc_callback_peer_join:
 6517|  1.49k|{
 6518|  1.49k|    GC_Session *c = m->group_handler;
 6519|  1.49k|    c->peer_join = function;
 6520|  1.49k|}
gc_callback_peer_exit:
 6523|  1.49k|{
 6524|  1.49k|    GC_Session *c = m->group_handler;
 6525|  1.49k|    c->peer_exit = function;
 6526|  1.49k|}
gc_callback_self_join:
 6529|  1.49k|{
 6530|  1.49k|    GC_Session *c = m->group_handler;
 6531|  1.49k|    c->self_join = function;
 6532|  1.49k|}
gc_callback_rejected:
 6535|  1.49k|{
 6536|  1.49k|    GC_Session *c = m->group_handler;
 6537|  1.49k|    c->rejected = function;
 6538|  1.49k|}
peer_add:
 6635|    148|{
 6636|    148|    if (get_peer_number_of_enc_pk(chat, public_key, false) != -1) {
  ------------------
  |  Branch (6636:9): [True: 0, False: 148]
  ------------------
 6637|      0|        return -2;
 6638|      0|    }
 6639|       |
 6640|    148|    const GC_Peer_Id peer_id = get_new_peer_id(chat);
 6641|       |
 6642|    148|    if (!gc_peer_id_is_valid(peer_id)) {
  ------------------
  |  Branch (6642:9): [True: 0, False: 148]
  ------------------
 6643|      0|        LOGGER_WARNING(chat->log, "Failed to add peer: all peer ID's are taken?");
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6644|      0|        return -1;
 6645|      0|    }
 6646|       |
 6647|    148|    const int peer_number = chat->numpeers;
 6648|    148|    int tcp_connection_num = -1;
 6649|       |
 6650|    148|    if (peer_number > 0) {  // we don't need a connection to ourself
  ------------------
  |  Branch (6650:9): [True: 0, False: 148]
  ------------------
 6651|      0|        tcp_connection_num = new_tcp_connection_to(chat->tcp_conn, public_key, 0);
 6652|       |
 6653|      0|        if (tcp_connection_num == -1) {
  ------------------
  |  Branch (6653:13): [True: 0, False: 0]
  ------------------
 6654|      0|            LOGGER_WARNING(chat->log, "Failed to init tcp connection for peer %d", peer_number);
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6655|      0|        }
 6656|      0|    }
 6657|       |
 6658|    148|    GC_Message_Array_Entry *send = (GC_Message_Array_Entry *)mem_valloc(chat->mem, GCC_BUFFER_SIZE, sizeof(GC_Message_Array_Entry));
  ------------------
  |  |   56|    148|#define GCC_BUFFER_SIZE 2048
  ------------------
 6659|    148|    GC_Message_Array_Entry *recv = (GC_Message_Array_Entry *)mem_valloc(chat->mem, GCC_BUFFER_SIZE, sizeof(GC_Message_Array_Entry));
  ------------------
  |  |   56|    148|#define GCC_BUFFER_SIZE 2048
  ------------------
 6660|       |
 6661|    148|    if (send == nullptr || recv == nullptr) {
  ------------------
  |  |   63|    296|#define nullptr NULL
  ------------------
                  if (send == nullptr || recv == nullptr) {
  ------------------
  |  |   63|    148|#define nullptr NULL
  ------------------
  |  Branch (6661:9): [True: 0, False: 148]
  |  Branch (6661:28): [True: 0, False: 148]
  ------------------
 6662|      0|        LOGGER_ERROR(chat->log, "Failed to allocate memory for gconn buffers");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6663|       |
 6664|      0|        if (tcp_connection_num != -1) {
  ------------------
  |  Branch (6664:13): [True: 0, False: 0]
  ------------------
 6665|      0|            kill_tcp_connection_to(chat->tcp_conn, tcp_connection_num);
 6666|      0|        }
 6667|       |
 6668|      0|        mem_delete(chat->mem, send);
 6669|      0|        mem_delete(chat->mem, recv);
 6670|      0|        return -1;
 6671|      0|    }
 6672|       |
 6673|    148|    GC_Peer *tmp_group = (GC_Peer *)mem_vrealloc(chat->mem, chat->group, chat->numpeers + 1, sizeof(GC_Peer));
 6674|       |
 6675|    148|    if (tmp_group == nullptr) {
  ------------------
  |  |   63|    148|#define nullptr NULL
  ------------------
  |  Branch (6675:9): [True: 0, False: 148]
  ------------------
 6676|      0|        LOGGER_ERROR(chat->log, "Failed to allocate memory for group mem_vrealloc");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6677|       |
 6678|      0|        if (tcp_connection_num != -1) {
  ------------------
  |  Branch (6678:13): [True: 0, False: 0]
  ------------------
 6679|      0|            kill_tcp_connection_to(chat->tcp_conn, tcp_connection_num);
 6680|      0|        }
 6681|       |
 6682|      0|        mem_delete(chat->mem, send);
 6683|      0|        mem_delete(chat->mem, recv);
 6684|      0|        return -1;
 6685|      0|    }
 6686|       |
 6687|    148|    ++chat->numpeers;
 6688|    148|    chat->group = tmp_group;
 6689|       |
 6690|    148|    chat->group[peer_number] = (GC_Peer) {
 6691|    148|        0
 6692|    148|    };
 6693|       |
 6694|    148|    GC_Connection *gconn = &chat->group[peer_number].gconn;
 6695|       |
 6696|    148|    gconn->send_array = send;
 6697|    148|    gconn->recv_array = recv;
 6698|       |
 6699|    148|    gcc_set_ip_port(gconn, ipp);
 6700|    148|    chat->group[peer_number].role = GR_USER;
 6701|    148|    chat->group[peer_number].peer_id = peer_id;
 6702|    148|    chat->group[peer_number].ignore = false;
 6703|       |
 6704|    148|    crypto_memlock(gconn->session_secret_key, sizeof(gconn->session_secret_key));
 6705|       |
 6706|    148|    create_gc_session_keypair(chat->log, chat->rng, gconn->session_public_key, gconn->session_secret_key);
 6707|       |
 6708|    148|    if (peer_number > 0) {
  ------------------
  |  Branch (6708:9): [True: 0, False: 148]
  ------------------
 6709|      0|        memcpy(gconn->addr.public_key.enc, public_key, ENC_PUBLIC_KEY_SIZE);  // we get the sig key in the handshake
  ------------------
  |  |  122|      0|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|      0|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
 6710|    148|    } else {
 6711|    148|        gconn->addr.public_key = chat->self_public_key;
 6712|    148|    }
 6713|       |
 6714|    148|    const uint64_t tm = mono_time_get(chat->mono_time);
 6715|       |
 6716|    148|    gcc_set_send_message_id(gconn, 1);
 6717|    148|    gconn->public_key_hash = gc_get_pk_jenkins_hash(public_key);
 6718|    148|    gconn->last_received_packet_time = tm;
 6719|    148|    gconn->last_key_rotation = tm;
 6720|    148|    gconn->tcp_connection_num = tcp_connection_num;
 6721|    148|    gconn->last_sent_ip_time = tm;
 6722|    148|    gconn->last_sent_ping_time = tm - (GC_PING_TIMEOUT / 2) + (peer_number % (GC_PING_TIMEOUT / 2));
  ------------------
  |  |   28|    148|#define GC_PING_TIMEOUT 12
  ------------------
                  gconn->last_sent_ping_time = tm - (GC_PING_TIMEOUT / 2) + (peer_number % (GC_PING_TIMEOUT / 2));
  ------------------
  |  |   28|    148|#define GC_PING_TIMEOUT 12
  ------------------
 6723|    148|    gconn->self_is_closer = id_closest(get_chat_id(&chat->chat_public_key),
 6724|    148|                                       get_enc_key(&chat->self_public_key),
 6725|    148|                                       get_enc_key(&gconn->addr.public_key)) == 1;
 6726|    148|    return peer_number;
 6727|    148|}
gc_group_save:
 7430|  1.84k|{
 7431|  1.84k|    gc_save_pack_group(chat, bp);
 7432|  1.84k|}
gc_group_load:
 7435|  28.7k|{
 7436|  28.7k|    const int group_number = get_new_group_index(c->messenger->mem, c);
 7437|       |
 7438|  28.7k|    if (group_number < 0) {
  ------------------
  |  Branch (7438:9): [True: 0, False: 28.7k]
  ------------------
 7439|      0|        return -1;
 7440|      0|    }
 7441|       |
 7442|  28.7k|    const uint64_t tm = mono_time_get(c->messenger->mono_time);
 7443|       |
 7444|  28.7k|    Messenger *m = c->messenger;
 7445|  28.7k|    GC_Chat *chat = &c->chats[group_number];
 7446|       |
 7447|  28.7k|    chat->group_number = group_number;
 7448|  28.7k|    chat->numpeers = 0;
 7449|  28.7k|    chat->net = m->net;
 7450|  28.7k|    chat->mono_time = m->mono_time;
 7451|  28.7k|    chat->log = m->log;
 7452|  28.7k|    chat->mem = m->mem;
 7453|  28.7k|    chat->rng = m->rng;
 7454|  28.7k|    chat->last_ping_interval = tm;
 7455|  28.7k|    chat->friend_connection_id = -1;
 7456|       |
 7457|       |    // Initialise these first, because we may need to log/dealloc things on cleanup.
 7458|  28.7k|    chat->moderation.log = m->log;
 7459|  28.7k|    chat->moderation.mem = m->mem;
 7460|       |
 7461|  28.7k|    if (!gc_load_unpack_group(chat, bu)) {
  ------------------
  |  Branch (7461:9): [True: 28.6k, False: 111]
  ------------------
 7462|  28.6k|        LOGGER_ERROR(chat->log, "Failed to unpack group");
  ------------------
  |  |   80|  28.6k|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|  28.6k|    do {                                                                         \
  |  |  |  |   70|  28.6k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  57.2k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|  28.6k|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|  28.6k|        }                                                                        \
  |  |  |  |   73|  28.6k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 7463|  28.6k|        return -1;
 7464|  28.6k|    }
 7465|       |
 7466|    111|    init_gc_moderation(chat);
 7467|       |
 7468|    111|    if (!init_gc_tcp_connection(c, chat)) {
  ------------------
  |  Branch (7468:9): [True: 0, False: 111]
  ------------------
 7469|      0|        LOGGER_ERROR(chat->log, "Failed to init tcp connection");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 7470|      0|        return -1;
 7471|      0|    }
 7472|       |
 7473|    111|    if (chat->connection_state == CS_DISCONNECTED) {
  ------------------
  |  Branch (7473:9): [True: 2, False: 109]
  ------------------
 7474|      2|        return group_number;
 7475|      2|    }
 7476|       |
 7477|    109|    if (is_public_chat(chat)) {
  ------------------
  |  Branch (7477:9): [True: 95, False: 14]
  ------------------
 7478|     95|        if (!m_create_group_connection(m, chat)) {
  ------------------
  |  Branch (7478:13): [True: 0, False: 95]
  ------------------
 7479|      0|            LOGGER_ERROR(chat->log, "Failed to initialize group friend connection");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 7480|      0|        }
 7481|     95|    }
 7482|       |
 7483|    109|    return group_number;
 7484|    111|}
new_dht_groupchats:
 8059|  1.97k|{
 8060|  1.97k|    if (m == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (8060:9): [True: 0, False: 1.97k]
  ------------------
 8061|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 8062|      0|    }
 8063|       |
 8064|  1.97k|    GC_Session *c = (GC_Session *)mem_alloc(m->mem, sizeof(GC_Session));
 8065|       |
 8066|  1.97k|    if (c == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (8066:9): [True: 0, False: 1.97k]
  ------------------
 8067|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 8068|      0|    }
 8069|       |
 8070|  1.97k|    c->messenger = m;
 8071|  1.97k|    c->announces_list = m->group_announce;
 8072|  1.97k|    c->tcp_np = m->tcp_np;
 8073|       |
 8074|  1.97k|    networking_registerhandler(m->net, NET_PACKET_GC_LOSSLESS, &handle_gc_udp_packet, m);
 8075|  1.97k|    networking_registerhandler(m->net, NET_PACKET_GC_LOSSY, &handle_gc_udp_packet, m);
 8076|  1.97k|    networking_registerhandler(m->net, NET_PACKET_GC_HANDSHAKE, &handle_gc_udp_packet, m);
 8077|  1.97k|    onion_group_announce_register(m->onion_c, gc_handle_announce_response_callback, c);
 8078|       |
 8079|  1.97k|    return c;
 8080|  1.97k|}
gc_group_exit:
 8138|  5.49k|{
 8139|  5.49k|    chat->flag_exit = true;
 8140|  5.49k|    return group_can_handle_packets(chat) ? send_gc_self_exit(chat, message, length) : 0;
  ------------------
  |  Branch (8140:12): [True: 5.42k, False: 71]
  ------------------
 8141|  5.49k|}
kill_dht_groupchats:
 8151|  1.97k|{
 8152|  1.97k|    if (c == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (8152:9): [True: 0, False: 1.97k]
  ------------------
 8153|      0|        return;
 8154|      0|    }
 8155|       |
 8156|  8.52k|    for (uint32_t i = 0; i < c->chats_index; ++i) {
  ------------------
  |  Branch (8156:26): [True: 6.54k, False: 1.97k]
  ------------------
 8157|  6.54k|        GC_Chat *chat = &c->chats[i];
 8158|       |
 8159|  6.54k|        if (chat->connection_state == CS_NONE) {
  ------------------
  |  Branch (8159:13): [True: 1.05k, False: 5.49k]
  ------------------
 8160|  1.05k|            continue;
 8161|  1.05k|        }
 8162|       |
 8163|  5.49k|        if (kill_group(c, chat) != 0) {
  ------------------
  |  Branch (8163:13): [True: 0, False: 5.49k]
  ------------------
 8164|      0|            LOGGER_WARNING(c->messenger->log, "Failed to send group exit packet");
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8165|      0|        }
 8166|  5.49k|    }
 8167|       |
 8168|  1.97k|    networking_registerhandler(c->messenger->net, NET_PACKET_GC_LOSSY, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(c->messenger->net, NET_PACKET_GC_LOSSY, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
 8169|  1.97k|    networking_registerhandler(c->messenger->net, NET_PACKET_GC_LOSSLESS, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(c->messenger->net, NET_PACKET_GC_LOSSLESS, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
 8170|  1.97k|    networking_registerhandler(c->messenger->net, NET_PACKET_GC_HANDSHAKE, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(c->messenger->net, NET_PACKET_GC_HANDSHAKE, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
 8171|  1.97k|    onion_group_announce_register(c->messenger->onion_c, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  onion_group_announce_register(c->messenger->onion_c, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
 8172|       |
 8173|  1.97k|    mem_delete(c->messenger->mem, c->chats);
 8174|  1.97k|    mem_delete(c->messenger->mem, c);
 8175|  1.97k|}
gc_group_is_valid:
 8178|  10.1k|{
 8179|  10.1k|    return chat->connection_state != CS_NONE && chat->shared_state.version > 0;
  ------------------
  |  Branch (8179:12): [True: 5.23k, False: 4.88k]
  |  Branch (8179:49): [True: 4.14k, False: 1.08k]
  ------------------
 8180|  10.1k|}
gc_count_groups:
 8197|  4.86k|{
 8198|  4.86k|    uint32_t count = 0;
 8199|       |
 8200|  10.7k|    for (uint32_t i = 0; i < c->chats_index; ++i) {
  ------------------
  |  Branch (8200:26): [True: 5.84k, False: 4.86k]
  ------------------
 8201|  5.84k|        const GC_Chat *chat = &c->chats[i];
 8202|       |
 8203|  5.84k|        if (gc_group_is_valid(chat)) {
  ------------------
  |  Branch (8203:13): [True: 2.30k, False: 3.54k]
  ------------------
 8204|  2.30k|            ++count;
 8205|  2.30k|        }
 8206|  5.84k|    }
 8207|       |
 8208|  4.86k|    return count;
 8209|  4.86k|}
group_chats.c:get_gc_peer:
  239|    148|{
  240|    148|    if (!gc_peer_number_is_valid(chat, peer_number)) {
  ------------------
  |  Branch (240:9): [True: 0, False: 148]
  ------------------
  241|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  242|      0|    }
  243|       |
  244|    148|    return &chat->group[peer_number];
  245|    148|}
group_chats.c:saved_peer_is_valid:
  791|  28.8k|{
  792|  28.8k|    return ipport_isset(&saved_peer->ip_port) || ipport_isset(&saved_peer->tcp_relay.ip_port);
  ------------------
  |  Branch (792:12): [True: 668, False: 28.1k]
  |  Branch (792:50): [True: 168, False: 27.9k]
  ------------------
  793|  28.8k|}
group_chats.c:send_gc_broadcast_message:
 2318|  5.42k|{
 2319|  5.42k|    if (length + GC_BROADCAST_ENC_HEADER_SIZE > MAX_GC_PACKET_SIZE) {
  ------------------
  |  |   58|  5.42k|#define GC_BROADCAST_ENC_HEADER_SIZE 1
  ------------------
                  if (length + GC_BROADCAST_ENC_HEADER_SIZE > MAX_GC_PACKET_SIZE) {
  ------------------
  |  |   53|  5.42k|#define MAX_GC_PACKET_SIZE (MAX_GC_PACKET_CHUNK_SIZE * 100)
  |  |  ------------------
  |  |  |  |   37|  5.42k|#define MAX_GC_PACKET_CHUNK_SIZE 500
  |  |  ------------------
  ------------------
  |  Branch (2319:9): [True: 0, False: 5.42k]
  ------------------
 2320|      0|        LOGGER_ERROR(chat->log, "Failed to broadcast message: invalid length %u", length);
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2321|      0|        return false;
 2322|      0|    }
 2323|       |
 2324|  5.42k|    uint8_t *packet = (uint8_t *)mem_balloc(chat->mem, length + GC_BROADCAST_ENC_HEADER_SIZE);
  ------------------
  |  |   58|  5.42k|#define GC_BROADCAST_ENC_HEADER_SIZE 1
  ------------------
 2325|       |
 2326|  5.42k|    if (packet == nullptr) {
  ------------------
  |  |   63|  5.42k|#define nullptr NULL
  ------------------
  |  Branch (2326:9): [True: 0, False: 5.42k]
  ------------------
 2327|      0|        return false;
 2328|      0|    }
 2329|       |
 2330|  5.42k|    const uint16_t packet_len = make_gc_broadcast_header(data, length, packet, bc_type);
 2331|       |
 2332|  5.42k|    const bool ret = send_gc_lossless_packet_all_peers(chat, packet, packet_len, GP_BROADCAST);
 2333|       |
 2334|  5.42k|    mem_delete(chat->mem, packet);
 2335|       |
 2336|  5.42k|    return ret;
 2337|  5.42k|}
group_chats.c:get_peer_number_of_peer_id:
  700|    148|{
  701|    148|    for (uint32_t i = 0; i < chat->numpeers; ++i) {
  ------------------
  |  Branch (701:26): [True: 0, False: 148]
  ------------------
  702|      0|        if (chat->group[i].peer_id.value == peer_id.value) {
  ------------------
  |  Branch (702:13): [True: 0, False: 0]
  ------------------
  703|      0|            return i;
  704|      0|        }
  705|      0|    }
  706|       |
  707|    148|    return -1;
  708|    148|}
group_chats.c:kill_group_friend_connection:
  207|  5.49k|{
  208|  5.49k|    if (chat->friend_connection_id != -1) {
  ------------------
  |  Branch (208:9): [True: 95, False: 5.39k]
  ------------------
  209|     95|        m_kill_group_connection(c->messenger, chat);
  210|     95|    }
  211|  5.49k|}
group_chats.c:make_gc_broadcast_header:
 2302|  5.42k|{
 2303|  5.42k|    packet[0] = bc_type;
 2304|  5.42k|    const uint16_t header_len = sizeof(uint8_t);
 2305|       |
 2306|  5.42k|    if (data != nullptr && length > 0) {
  ------------------
  |  |   63|  10.8k|#define nullptr NULL
  ------------------
  |  Branch (2306:9): [True: 0, False: 5.42k]
  |  Branch (2306:28): [True: 0, False: 0]
  ------------------
 2307|      0|        memcpy(packet + header_len, data, length);
 2308|      0|    }
 2309|       |
 2310|  5.42k|    return length + header_len;
 2311|  5.42k|}
group_chats.c:send_gc_lossless_packet_all_peers:
 2245|  5.42k|{
 2246|  5.42k|    uint32_t sent = 0;
 2247|  5.42k|    uint32_t confirmed_peers = 0;
 2248|       |
 2249|  5.42k|    for (uint32_t i = 1; i < chat->numpeers; ++i) {
  ------------------
  |  Branch (2249:26): [True: 0, False: 5.42k]
  ------------------
 2250|      0|        GC_Connection *gconn = get_gc_connection(chat, i);
 2251|       |
 2252|      0|        assert(gconn != nullptr);
 2253|       |
 2254|      0|        if (!gconn->confirmed) {
  ------------------
  |  Branch (2254:13): [True: 0, False: 0]
  ------------------
 2255|      0|            continue;
 2256|      0|        }
 2257|       |
 2258|      0|        ++confirmed_peers;
 2259|       |
 2260|      0|        if (send_lossless_group_packet(chat, gconn, data, length, type)) {
  ------------------
  |  Branch (2260:13): [True: 0, False: 0]
  ------------------
 2261|      0|            ++sent;
 2262|      0|        }
 2263|      0|    }
 2264|       |
 2265|  5.42k|    return sent > 0 || confirmed_peers == 0;
  ------------------
  |  Branch (2265:12): [True: 0, False: 5.42k]
  |  Branch (2265:24): [True: 5.42k, False: 0]
  ------------------
 2266|  5.42k|}
group_chats.c:get_new_peer_id:
  717|    148|{
  718|    148|    for (uint32_t i = 0; i < UINT32_MAX - 1; ++i) {
  ------------------
  |  Branch (718:26): [True: 148, False: 0]
  ------------------
  719|    148|        const GC_Peer_Id peer_id = gc_peer_id_from_int(i);
  720|    148|        if (get_peer_number_of_peer_id(chat, peer_id) == -1) {
  ------------------
  |  Branch (720:13): [True: 148, False: 0]
  ------------------
  721|    148|            return peer_id;
  722|    148|        }
  723|    148|    }
  724|       |
  725|      0|    return gc_invalid_peer_id();
  726|    148|}
group_chats.c:gc_peer_id_is_valid:
  186|    148|{
  187|    148|    return peer_id.value != GC_INVALID_PEER_ID_VALUE;
  ------------------
  |  |  177|    148|#define GC_INVALID_PEER_ID_VALUE ((force GC_Peer_Id_Value)-1)
  ------------------
  188|    148|}
group_chats.c:add_tcp_relays_to_chat:
 7204|    111|{
 7205|    111|    const Messenger *m = c->messenger;
 7206|       |
 7207|    111|    const uint32_t num_relays = tcp_connections_count(nc_get_tcp_c(m->net_crypto));
 7208|       |
 7209|    111|    if (num_relays == 0) {
  ------------------
  |  Branch (7209:9): [True: 111, False: 0]
  ------------------
 7210|    111|        return;
 7211|    111|    }
 7212|       |
 7213|      0|    Node_format *tcp_relays = (Node_format *)mem_valloc(chat->mem, num_relays, sizeof(Node_format));
 7214|       |
 7215|      0|    if (tcp_relays == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (7215:9): [True: 0, False: 0]
  ------------------
 7216|      0|        return;
 7217|      0|    }
 7218|       |
 7219|      0|    const uint32_t num_copied = tcp_copy_connected_relays(nc_get_tcp_c(m->net_crypto), tcp_relays, (uint16_t)num_relays);
 7220|       |
 7221|      0|    for (uint32_t i = 0; i < num_copied; ++i) {
  ------------------
  |  Branch (7221:26): [True: 0, False: 0]
  ------------------
 7222|      0|        add_tcp_relay_global(chat->tcp_conn, &tcp_relays[i].ip_port, tcp_relays[i].public_key);
 7223|      0|    }
 7224|       |
 7225|      0|    mem_delete(chat->mem, tcp_relays);
 7226|      0|}
group_chats.c:get_new_group_index:
 7174|  28.7k|{
 7175|  28.7k|    if (c == nullptr) {
  ------------------
  |  |   63|  28.7k|#define nullptr NULL
  ------------------
  |  Branch (7175:9): [True: 0, False: 28.7k]
  ------------------
 7176|      0|        return -1;
 7177|      0|    }
 7178|       |
 7179|   847k|    for (uint32_t i = 0; i < c->chats_index; ++i) {
  ------------------
  |  Branch (7179:26): [True: 841k, False: 6.61k]
  ------------------
 7180|   841k|        if (c->chats[i].connection_state == CS_NONE) {
  ------------------
  |  Branch (7180:13): [True: 22.1k, False: 819k]
  ------------------
 7181|  22.1k|            return i;
 7182|  22.1k|        }
 7183|   841k|    }
 7184|       |
 7185|  6.61k|    if (!realloc_groupchats(mem, c, c->chats_index + 1)) {
  ------------------
  |  Branch (7185:9): [True: 0, False: 6.61k]
  ------------------
 7186|      0|        return -1;
 7187|      0|    }
 7188|       |
 7189|  6.61k|    const int new_index = c->chats_index;
 7190|       |
 7191|  6.61k|    c->chats[new_index] = empty_gc_chat;
 7192|       |
 7193|  72.8k|    for (size_t i = 0; i < sizeof(c->chats[new_index].saved_invites) / sizeof(*c->chats[new_index].saved_invites); ++i) {
  ------------------
  |  Branch (7193:24): [True: 66.1k, False: 6.61k]
  ------------------
 7194|  66.1k|        c->chats[new_index].saved_invites[i] = -1;
 7195|  66.1k|    }
 7196|       |
 7197|  6.61k|    ++c->chats_index;
 7198|       |
 7199|  6.61k|    return new_index;
 7200|  6.61k|}
group_chats.c:realloc_groupchats:
 7156|  7.08k|{
 7157|  7.08k|    if (n == 0) {
  ------------------
  |  Branch (7157:9): [True: 420, False: 6.66k]
  ------------------
 7158|    420|        mem_delete(mem, c->chats);
 7159|    420|        c->chats = nullptr;
  ------------------
  |  |   63|    420|#define nullptr NULL
  ------------------
 7160|    420|        return true;
 7161|    420|    }
 7162|       |
 7163|  6.66k|    GC_Chat *temp = (GC_Chat *)mem_vrealloc(mem, c->chats, n, sizeof(GC_Chat));
 7164|       |
 7165|  6.66k|    if (temp == nullptr) {
  ------------------
  |  |   63|  6.66k|#define nullptr NULL
  ------------------
  |  Branch (7165:9): [True: 0, False: 6.66k]
  ------------------
 7166|      0|        return false;
 7167|      0|    }
 7168|       |
 7169|  6.66k|    c->chats = temp;
 7170|  6.66k|    return true;
 7171|  6.66k|}
group_chats.c:init_gc_moderation:
 7276|    111|{
 7277|    111|    memcpy(chat->moderation.founder_public_sig_key,
 7278|    111|           get_sig_pk(&chat->shared_state.founder_public_key), SIG_PUBLIC_KEY_SIZE);
  ------------------
  |  |  132|    111|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   33|    111|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  ------------------
  ------------------
 7279|    111|    memcpy(chat->moderation.self_public_sig_key, get_sig_pk(&chat->self_public_key), SIG_PUBLIC_KEY_SIZE);
  ------------------
  |  |  132|    111|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   33|    111|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  ------------------
  ------------------
 7280|    111|    memcpy(chat->moderation.self_secret_sig_key, get_sig_sk(&chat->self_secret_key), SIG_SECRET_KEY_SIZE);
  ------------------
  |  |  137|    111|#define SIG_SECRET_KEY_SIZE            CRYPTO_SIGN_SECRET_KEY_SIZE
  |  |  ------------------
  |  |  |  |   38|    111|#define CRYPTO_SIGN_SECRET_KEY_SIZE    64
  |  |  ------------------
  ------------------
 7281|    111|    chat->moderation.shared_state_version = chat->shared_state.version;
 7282|    111|    chat->moderation.log = chat->log;
 7283|    111|    chat->moderation.mem = chat->mem;
 7284|    111|}
group_chats.c:init_gc_tcp_connection:
 7229|    111|{
 7230|    111|    const Messenger *m = c->messenger;
 7231|       |
 7232|    111|    chat->tcp_conn = new_tcp_connections(chat->log, chat->mem, chat->rng, m->ns, chat->mono_time, chat->self_secret_key.enc,
 7233|    111|                                         &m->options.proxy_info, c->tcp_np);
 7234|       |
 7235|    111|    if (chat->tcp_conn == nullptr) {
  ------------------
  |  |   63|    111|#define nullptr NULL
  ------------------
  |  Branch (7235:9): [True: 0, False: 111]
  ------------------
 7236|      0|        return false;
 7237|      0|    }
 7238|       |
 7239|    111|    add_tcp_relays_to_chat(c, chat);
 7240|       |
 7241|    111|    set_packet_tcp_connection_callback(chat->tcp_conn, &handle_gc_tcp_packet, c->messenger);
 7242|    111|    set_oob_packet_tcp_connection_callback(chat->tcp_conn, &handle_gc_tcp_oob_packet, c->messenger);
 7243|       |
 7244|    111|    return true;
 7245|    111|}
group_chats.c:is_public_chat:
  525|    109|{
  526|    109|    return chat->shared_state.privacy_state == GI_PUBLIC;
  527|    109|}
group_chats.c:group_can_handle_packets:
 6219|  5.49k|{
 6220|  5.49k|    const GC_Conn_State state = chat->connection_state;
 6221|  5.49k|    return state == CS_CONNECTING || state == CS_CONNECTED;
  ------------------
  |  Branch (6221:12): [True: 5.42k, False: 71]
  |  Branch (6221:38): [True: 0, False: 71]
  ------------------
 6222|  5.49k|}
group_chats.c:send_gc_self_exit:
 3340|  5.42k|{
 3341|  5.42k|    if (length > MAX_GC_PART_MESSAGE_SIZE) {
  ------------------
  |  |   26|  5.42k|#define MAX_GC_PART_MESSAGE_SIZE 128
  ------------------
  |  Branch (3341:9): [True: 0, False: 5.42k]
  ------------------
 3342|      0|        return -1;
 3343|      0|    }
 3344|       |
 3345|  5.42k|    if (!send_gc_broadcast_message(chat, partmessage, length, GM_PEER_EXIT)) {
  ------------------
  |  Branch (3345:9): [True: 0, False: 5.42k]
  ------------------
 3346|      0|        return -2;
 3347|      0|    }
 3348|       |
 3349|  5.42k|    return 0;
 3350|  5.42k|}
group_chats.c:group_delete:
 8107|  5.49k|{
 8108|  5.49k|    if (c == nullptr || chat == nullptr) {
  ------------------
  |  |   63|  10.9k|#define nullptr NULL
  ------------------
                  if (c == nullptr || chat == nullptr) {
  ------------------
  |  |   63|  5.49k|#define nullptr NULL
  ------------------
  |  Branch (8108:9): [True: 0, False: 5.49k]
  |  Branch (8108:25): [True: 0, False: 5.49k]
  ------------------
 8109|      0|        if (chat != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (8109:13): [True: 0, False: 0]
  ------------------
 8110|      0|            LOGGER_ERROR(chat->log, "Null pointer");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8111|      0|        }
 8112|       |
 8113|      0|        return;
 8114|      0|    }
 8115|       |
 8116|  5.49k|    group_cleanup(c, chat);
 8117|       |
 8118|  5.49k|    c->chats[chat->group_number] = empty_gc_chat;
 8119|       |
 8120|  5.49k|    uint32_t i;
 8121|       |
 8122|  11.0k|    for (i = c->chats_index; i > 0; --i) {
  ------------------
  |  Branch (8122:30): [True: 10.6k, False: 420]
  ------------------
 8123|  10.6k|        if (c->chats[i - 1].connection_state != CS_NONE) {
  ------------------
  |  Branch (8123:13): [True: 5.07k, False: 5.56k]
  ------------------
 8124|  5.07k|            break;
 8125|  5.07k|        }
 8126|  10.6k|    }
 8127|       |
 8128|  5.49k|    if (c->chats_index != i) {
  ------------------
  |  Branch (8128:9): [True: 468, False: 5.02k]
  ------------------
 8129|    468|        c->chats_index = i;
 8130|       |
 8131|    468|        if (!realloc_groupchats(c->messenger->mem, c, c->chats_index)) {
  ------------------
  |  Branch (8131:13): [True: 0, False: 468]
  ------------------
 8132|      0|            LOGGER_ERROR(c->messenger->log, "Failed to reallocate groupchats array");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8133|      0|        }
 8134|    468|    }
 8135|  5.49k|}
group_chats.c:group_cleanup:
 8083|  5.49k|{
 8084|  5.49k|    kill_group_friend_connection(c, chat);
 8085|       |
 8086|  5.49k|    mod_list_cleanup(&chat->moderation);
 8087|  5.49k|    sanctions_list_cleanup(&chat->moderation);
 8088|       |
 8089|  5.49k|    if (chat->tcp_conn != nullptr) {
  ------------------
  |  |   63|  5.49k|#define nullptr NULL
  ------------------
  |  Branch (8089:9): [True: 111, False: 5.38k]
  ------------------
 8090|    111|        kill_tcp_connections(chat->tcp_conn);
 8091|    111|    }
 8092|       |
 8093|  5.49k|    gcc_cleanup(chat);
 8094|       |
 8095|  5.49k|    if (chat->group != nullptr) {
  ------------------
  |  |   63|  5.49k|#define nullptr NULL
  ------------------
  |  Branch (8095:9): [True: 148, False: 5.34k]
  ------------------
 8096|    148|        mem_delete(chat->mem, chat->group);
 8097|    148|        chat->group = nullptr;
  ------------------
  |  |   63|    148|#define nullptr NULL
  ------------------
 8098|    148|    }
 8099|       |
 8100|  5.49k|    crypto_memunlock(&chat->self_secret_key, sizeof(chat->self_secret_key));
 8101|  5.49k|    crypto_memunlock(&chat->chat_secret_key, sizeof(chat->chat_secret_key));
 8102|  5.49k|    crypto_memunlock(chat->shared_state.password, sizeof(chat->shared_state.password));
 8103|  5.49k|}
group_chats.c:kill_group:
 8144|  5.49k|{
 8145|  5.49k|    const int ret = gc_group_exit(c, chat, nullptr, 0);
  ------------------
  |  |   63|  5.49k|#define nullptr NULL
  ------------------
 8146|  5.49k|    group_delete(c, chat);
 8147|  5.49k|    return ret;
 8148|  5.49k|}
group_chats.c:create_gc_session_keypair:
 8245|    148|{
 8246|    148|    if (crypto_new_keypair(rng, public_key, secret_key) != 0) {
  ------------------
  |  Branch (8246:9): [True: 0, False: 148]
  ------------------
 8247|      0|        LOGGER_FATAL(log, "Failed to create group session keypair");
  ------------------
  |  |   83|      0|    do {                                \
  |  |   84|      0|        LOGGER_ERROR(log, __VA_ARGS__); \
  |  |  ------------------
  |  |  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   85|      0|        logger_abort();                 \
  |  |   86|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (86:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 8248|      0|    }
 8249|    148|}

gcc_set_send_message_id:
   76|    148|{
   77|    148|    gconn->send_message_id = id;
   78|    148|    gconn->send_array_start = id % GCC_BUFFER_SIZE;
  ------------------
  |  |   56|    148|#define GCC_BUFFER_SIZE 2048
  ------------------
   79|    148|}
gcc_set_ip_port:
  277|    148|{
  278|    148|    if (ipp != nullptr && ipport_isset(ipp)) {
  ------------------
  |  |   63|    296|#define nullptr NULL
  ------------------
  |  Branch (278:9): [True: 0, False: 148]
  |  Branch (278:27): [True: 0, False: 0]
  ------------------
  279|      0|        gconn->addr.ip_port = *ipp;
  280|      0|    }
  281|    148|}
gcc_peer_cleanup:
  694|    148|{
  695|   303k|    for (size_t i = 0; i < GCC_BUFFER_SIZE; ++i) {
  ------------------
  |  |   56|   303k|#define GCC_BUFFER_SIZE 2048
  ------------------
  |  Branch (695:24): [True: 303k, False: 148]
  ------------------
  696|   303k|        mem_delete(mem, gconn->send_array[i].data);
  697|   303k|        mem_delete(mem, gconn->recv_array[i].data);
  698|   303k|    }
  699|       |
  700|    148|    mem_delete(mem, gconn->recv_array);
  701|    148|    mem_delete(mem, gconn->send_array);
  702|       |
  703|    148|    crypto_memunlock(gconn->session_secret_key, sizeof(gconn->session_secret_key));
  704|    148|    crypto_memunlock(gconn->session_shared_key, sizeof(gconn->session_shared_key));
  705|    148|    crypto_memzero(gconn, sizeof(GC_Connection));
  706|    148|}
gcc_cleanup:
  709|  5.49k|{
  710|  5.64k|    for (uint32_t i = 0; i < chat->numpeers; ++i) {
  ------------------
  |  Branch (710:26): [True: 148, False: 5.49k]
  ------------------
  711|    148|        GC_Connection *gconn = get_gc_connection(chat, i);
  712|    148|        assert(gconn != nullptr);
  713|       |
  714|    148|        gcc_peer_cleanup(chat->mem, gconn);
  715|    148|    }
  716|  5.49k|}

mod_list_unpack:
   43|    233|{
   44|    233|    if (length < num_mods * MOD_LIST_ENTRY_SIZE) {
  ------------------
  |  |   27|    233|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|    233|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|    233|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (44:9): [True: 0, False: 233]
  ------------------
   45|      0|        return -1;
   46|      0|    }
   47|       |
   48|    233|    mod_list_cleanup(moderation);
   49|       |
   50|    233|    if (num_mods == 0) {
  ------------------
  |  Branch (50:9): [True: 0, False: 233]
  ------------------
   51|      0|        return 0;
   52|      0|    }
   53|       |
   54|    233|    uint8_t **tmp_list = (uint8_t **)mem_valloc(moderation->mem, num_mods, sizeof(uint8_t *));
   55|       |
   56|    233|    if (tmp_list == nullptr) {
  ------------------
  |  |   63|    233|#define nullptr NULL
  ------------------
  |  Branch (56:9): [True: 0, False: 233]
  ------------------
   57|      0|        return -1;
   58|      0|    }
   59|       |
   60|    233|    uint16_t unpacked_len = 0;
   61|       |
   62|  3.96k|    for (uint16_t i = 0; i < num_mods; ++i) {
  ------------------
  |  Branch (62:26): [True: 3.72k, False: 233]
  ------------------
   63|  3.72k|        uint8_t *entry = (uint8_t *)mem_balloc(moderation->mem, MOD_LIST_ENTRY_SIZE);
  ------------------
  |  |   27|  3.72k|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|  3.72k|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|  3.72k|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   64|       |
   65|  3.72k|        if (entry == nullptr) {
  ------------------
  |  |   63|  3.72k|#define nullptr NULL
  ------------------
  |  Branch (65:13): [True: 0, False: 3.72k]
  ------------------
   66|      0|            free_uint8_t_pointer_array(moderation->mem, tmp_list, i);
   67|      0|            return -1;
   68|      0|        }
   69|       |
   70|  3.72k|        memcpy(entry, &data[i * MOD_LIST_ENTRY_SIZE], MOD_LIST_ENTRY_SIZE);
  ------------------
  |  |   27|  3.72k|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|  3.72k|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|  3.72k|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                      memcpy(entry, &data[i * MOD_LIST_ENTRY_SIZE], MOD_LIST_ENTRY_SIZE);
  ------------------
  |  |   27|  3.72k|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|  3.72k|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|  3.72k|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   71|  3.72k|        tmp_list[i] = entry;
   72|       |
   73|  3.72k|        unpacked_len += MOD_LIST_ENTRY_SIZE;
  ------------------
  |  |   27|  3.72k|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|  3.72k|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|  3.72k|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   74|  3.72k|    }
   75|       |
   76|    233|    moderation->mod_list = tmp_list;
   77|    233|    moderation->num_mods = num_mods;
   78|       |
   79|    233|    return unpacked_len;
   80|    233|}
mod_list_pack:
   83|    288|{
   84|  4.89k|    for (uint16_t i = 0; i < moderation->num_mods; ++i) {
  ------------------
  |  Branch (84:26): [True: 4.60k, False: 288]
  ------------------
   85|  4.60k|        memcpy(&data[i * MOD_LIST_ENTRY_SIZE], moderation->mod_list[i], MOD_LIST_ENTRY_SIZE);
  ------------------
  |  |   27|  4.60k|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|  4.60k|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|  4.60k|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                      memcpy(&data[i * MOD_LIST_ENTRY_SIZE], moderation->mod_list[i], MOD_LIST_ENTRY_SIZE);
  ------------------
  |  |   27|  4.60k|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|  4.60k|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|  4.60k|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   86|  4.60k|    }
   87|    288|}
mod_list_cleanup:
  228|  5.72k|{
  229|  5.72k|    free_uint8_t_pointer_array(moderation->mem, moderation->mod_list, moderation->num_mods);
  230|  5.72k|    moderation->num_mods = 0;
  231|  5.72k|    moderation->mod_list = nullptr;
  ------------------
  |  |   63|  5.72k|#define nullptr NULL
  ------------------
  232|  5.72k|}
sanctions_list_cleanup:
  856|  5.49k|{
  857|  5.49k|    mem_delete(moderation->mem, moderation->sanctions);
  858|       |
  859|  5.49k|    moderation->sanctions = nullptr;
  ------------------
  |  |   63|  5.49k|#define nullptr NULL
  ------------------
  860|  5.49k|    moderation->num_sanctions = 0;
  861|  5.49k|}

gca_onion_init:
   76|  1.97k|{
   77|  1.97k|    onion_announce_extra_data_callback(onion_a, GCA_MAX_SENT_ANNOUNCES * sizeof(GC_Announce), pack_group_announces,
  ------------------
  |  |   34|  1.97k|#define GCA_MAX_SENT_ANNOUNCES 4
  ------------------
   78|  1.97k|                                       group_announce);
   79|  1.97k|}

group_privacy_state_from_int:
   33|  5.49k|{
   34|  5.49k|    switch (value) {
   35|  5.31k|        case GI_PUBLIC: {
  ------------------
  |  Branch (35:9): [True: 5.31k, False: 177]
  ------------------
   36|  5.31k|            *out_enum = GI_PUBLIC;
   37|  5.31k|            return true;
   38|      0|        }
   39|       |
   40|     53|        case GI_PRIVATE: {
  ------------------
  |  Branch (40:9): [True: 53, False: 5.44k]
  ------------------
   41|     53|            *out_enum = GI_PRIVATE;
   42|     53|            return true;
   43|      0|        }
   44|       |
   45|    124|        default: {
  ------------------
  |  Branch (45:9): [True: 124, False: 5.36k]
  ------------------
   46|    124|            *out_enum = GI_PUBLIC;
   47|    124|            return false;
   48|      0|        }
   49|  5.49k|    }
   50|  5.49k|}
group_voice_state_from_int:
   53|  5.49k|{
   54|  5.49k|    switch (value) {
   55|  2.66k|        case GV_ALL: {
  ------------------
  |  Branch (55:9): [True: 2.66k, False: 2.82k]
  ------------------
   56|  2.66k|            *out_enum = GV_ALL;
   57|  2.66k|            return true;
   58|      0|        }
   59|       |
   60|     10|        case GV_MODS: {
  ------------------
  |  Branch (60:9): [True: 10, False: 5.48k]
  ------------------
   61|     10|            *out_enum = GV_MODS;
   62|     10|            return true;
   63|      0|        }
   64|       |
   65|      4|        case GV_FOUNDER: {
  ------------------
  |  Branch (65:9): [True: 4, False: 5.48k]
  ------------------
   66|      4|            *out_enum = GV_FOUNDER;
   67|      4|            return true;
   68|      0|        }
   69|       |
   70|  2.81k|        default: {
  ------------------
  |  Branch (70:9): [True: 2.81k, False: 2.68k]
  ------------------
   71|  2.81k|            *out_enum = GV_ALL;
   72|  2.81k|            return false;
   73|      0|        }
   74|  5.49k|    }
   75|  5.49k|}
gc_load_unpack_group:
  321|  28.7k|{
  322|  28.7k|    uint32_t actual_size;
  323|  28.7k|    if (!bin_unpack_array_fixed(bu, 7, &actual_size)) {
  ------------------
  |  Branch (323:9): [True: 3.04k, False: 25.6k]
  ------------------
  324|  3.04k|        LOGGER_ERROR(chat->log, "Group info array malformed: %u != 7", actual_size);
  ------------------
  |  |   80|  3.04k|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|  3.04k|    do {                                                                         \
  |  |  |  |   70|  3.04k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  6.08k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|  3.04k|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|  3.04k|        }                                                                        \
  |  |  |  |   73|  3.04k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  325|  3.04k|        return false;
  326|  3.04k|    }
  327|       |
  328|  25.6k|    return load_unpack_state_values(chat, bu)
  ------------------
  |  Branch (328:12): [True: 5.49k, False: 20.2k]
  ------------------
  329|  25.6k|           && load_unpack_state_bin(chat, bu)
  ------------------
  |  Branch (329:15): [True: 487, False: 5.00k]
  ------------------
  330|  25.6k|           && load_unpack_topic_info(chat, bu)
  ------------------
  |  Branch (330:15): [True: 391, False: 96]
  ------------------
  331|  25.6k|           && load_unpack_mod_list(chat, bu)
  ------------------
  |  Branch (331:15): [True: 360, False: 31]
  ------------------
  332|  25.6k|           && load_unpack_keys(chat, bu)
  ------------------
  |  Branch (332:15): [True: 184, False: 176]
  ------------------
  333|  25.6k|           && load_unpack_self_info(chat, bu)
  ------------------
  |  Branch (333:15): [True: 148, False: 36]
  ------------------
  334|  25.6k|           && load_unpack_saved_peers(chat, bu);
  ------------------
  |  Branch (334:15): [True: 111, False: 37]
  ------------------
  335|  28.7k|}
gc_save_pack_group:
  468|  1.84k|{
  469|  1.84k|    if (chat->numpeers == 0) {
  ------------------
  |  Branch (469:9): [True: 1.55k, False: 288]
  ------------------
  470|  1.55k|        LOGGER_ERROR(chat->log, "Failed to pack group: numpeers is 0");
  ------------------
  |  |   80|  1.55k|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|  1.55k|    do {                                                                         \
  |  |  |  |   70|  1.55k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  3.11k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|  1.55k|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|  1.55k|        }                                                                        \
  |  |  |  |   73|  1.55k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  471|  1.55k|        return;
  472|  1.55k|    }
  473|       |
  474|    288|    bin_pack_array(bp, 7);
  475|       |
  476|    288|    save_pack_state_values(chat, bp); // 1
  477|    288|    save_pack_state_bin(chat, bp); // 2
  478|    288|    save_pack_topic_info(chat, bp); // 3
  479|    288|    save_pack_mod_list(chat, bp); // 4
  480|    288|    save_pack_keys(chat, bp); // 5
  481|    288|    save_pack_self_info(chat, bp); // 6
  482|    288|    save_pack_saved_peers(chat, bp); // 7
  483|    288|}
group_pack.c:load_unpack_state_values:
   78|  25.6k|{
   79|  25.6k|    if (!bin_unpack_array_fixed(bu, 8, nullptr)) {
  ------------------
  |  |   63|  25.6k|#define nullptr NULL
  ------------------
  |  Branch (79:9): [True: 1.97k, False: 23.7k]
  ------------------
   80|  1.97k|        LOGGER_ERROR(chat->log, "Group state values array malformed");
  ------------------
  |  |   80|  1.97k|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|  1.97k|    do {                                                                         \
  |  |  |  |   70|  1.97k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  3.94k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|  1.97k|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|  1.97k|        }                                                                        \
  |  |  |  |   73|  1.97k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   81|  1.97k|        return false;
   82|  1.97k|    }
   83|       |
   84|  23.7k|    bool manually_disconnected = false;
   85|  23.7k|    uint8_t privacy_state = 0;
   86|  23.7k|    uint8_t voice_state = 0;
   87|       |
   88|  23.7k|    if (!(bin_unpack_bool(bu, &manually_disconnected)
  ------------------
  |  Branch (88:11): [True: 20.0k, False: 3.67k]
  ------------------
   89|  23.7k|            && bin_unpack_u16(bu, &chat->shared_state.group_name_len)
  ------------------
  |  Branch (89:16): [True: 18.4k, False: 1.59k]
  ------------------
   90|  23.7k|            && bin_unpack_u08(bu, &privacy_state)
  ------------------
  |  Branch (90:16): [True: 15.8k, False: 2.62k]
  ------------------
   91|  23.7k|            && bin_unpack_u16(bu, &chat->shared_state.maxpeers)
  ------------------
  |  Branch (91:16): [True: 13.7k, False: 2.08k]
  ------------------
   92|  23.7k|            && bin_unpack_u16(bu, &chat->shared_state.password_length)
  ------------------
  |  Branch (92:16): [True: 13.2k, False: 484]
  ------------------
   93|  23.7k|            && bin_unpack_u32(bu, &chat->shared_state.version)
  ------------------
  |  Branch (93:16): [True: 10.8k, False: 2.45k]
  ------------------
   94|  23.7k|            && bin_unpack_u32(bu, &chat->shared_state.topic_lock)
  ------------------
  |  Branch (94:16): [True: 6.70k, False: 4.10k]
  ------------------
   95|  23.7k|            && bin_unpack_u08(bu, &voice_state))) {
  ------------------
  |  Branch (95:16): [True: 5.49k, False: 1.21k]
  ------------------
   96|  18.2k|        LOGGER_ERROR(chat->log, "Failed to unpack state value");
  ------------------
  |  |   80|  18.2k|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|  18.2k|    do {                                                                         \
  |  |  |  |   70|  18.2k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  36.4k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|  18.2k|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|  18.2k|        }                                                                        \
  |  |  |  |   73|  18.2k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   97|  18.2k|        return false;
   98|  18.2k|    }
   99|       |
  100|  5.49k|    chat->connection_state = manually_disconnected ? CS_DISCONNECTED : CS_CONNECTING;
  ------------------
  |  Branch (100:30): [True: 71, False: 5.42k]
  ------------------
  101|  5.49k|    group_privacy_state_from_int(privacy_state, &chat->shared_state.privacy_state);
  102|  5.49k|    group_voice_state_from_int(voice_state, &chat->shared_state.voice_state);
  103|       |
  104|       |    // we always load saved groups as private in case the group became private while we were offline.
  105|       |    // this will have no detrimental effect if the group is public, as the correct privacy
  106|       |    // state will be set via sync.
  107|  5.49k|    chat->join_type = HJ_PRIVATE;
  108|       |
  109|  5.49k|    return true;
  110|  23.7k|}
group_pack.c:load_unpack_state_bin:
  113|  5.49k|{
  114|  5.49k|    if (!bin_unpack_array_fixed(bu, 5, nullptr)) {
  ------------------
  |  |   63|  5.49k|#define nullptr NULL
  ------------------
  |  Branch (114:9): [True: 4.76k, False: 732]
  ------------------
  115|  4.76k|        LOGGER_ERROR(chat->log, "Group state binary array malformed");
  ------------------
  |  |   80|  4.76k|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|  4.76k|    do {                                                                         \
  |  |  |  |   70|  4.76k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  9.52k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|  4.76k|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|  4.76k|        }                                                                        \
  |  |  |  |   73|  4.76k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  116|  4.76k|        return false;
  117|  4.76k|    }
  118|       |
  119|    732|    if (!bin_unpack_bin_fixed(bu, chat->shared_state_sig, SIGNATURE_SIZE)) {
  ------------------
  |  |   27|    732|#define SIGNATURE_SIZE CRYPTO_SIGNATURE_SIZE
  |  |  ------------------
  |  |  |  |   28|    732|#define CRYPTO_SIGNATURE_SIZE          64
  |  |  ------------------
  ------------------
  |  Branch (119:9): [True: 46, False: 686]
  ------------------
  120|     46|        LOGGER_ERROR(chat->log, "Failed to unpack shared state signature");
  ------------------
  |  |   80|     46|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     46|    do {                                                                         \
  |  |  |  |   70|     46|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     92|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     46|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     46|        }                                                                        \
  |  |  |  |   73|     46|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  121|     46|        return false;
  122|     46|    }
  123|       |
  124|    686|    if (!unpack_extended_public_key(&chat->shared_state.founder_public_key, bu)) {
  ------------------
  |  Branch (124:9): [True: 98, False: 588]
  ------------------
  125|     98|        LOGGER_ERROR(chat->log, "Failed to unpack founder public key");
  ------------------
  |  |   80|     98|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     98|    do {                                                                         \
  |  |  |  |   70|     98|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    196|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     98|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     98|        }                                                                        \
  |  |  |  |   73|     98|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  126|     98|        return false;
  127|     98|    }
  128|       |
  129|    588|    if (!(bin_unpack_bin_max(bu, chat->shared_state.group_name, &chat->shared_state.group_name_len, sizeof(chat->shared_state.group_name))
  ------------------
  |  Branch (129:11): [True: 518, False: 70]
  ------------------
  130|    588|            && bin_unpack_bin_max(bu, chat->shared_state.password, &chat->shared_state.password_length, sizeof(chat->shared_state.password))
  ------------------
  |  Branch (130:16): [True: 502, False: 16]
  ------------------
  131|    588|            && bin_unpack_bin_fixed(bu, chat->shared_state.mod_list_hash, MOD_MODERATION_HASH_SIZE))) {
  ------------------
  |  |   26|    502|#define MOD_MODERATION_HASH_SIZE CRYPTO_SHA256_SIZE
  |  |  ------------------
  |  |  |  |   74|    502|#define CRYPTO_SHA256_SIZE             32
  |  |  ------------------
  ------------------
  |  Branch (131:16): [True: 487, False: 15]
  ------------------
  132|    101|        LOGGER_ERROR(chat->log, "Failed to unpack state binary data");
  ------------------
  |  |   80|    101|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|    101|    do {                                                                         \
  |  |  |  |   70|    101|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    202|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|    101|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|    101|        }                                                                        \
  |  |  |  |   73|    101|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  133|    101|        return false;
  134|    101|    }
  135|       |
  136|    487|    return true;
  137|    588|}
group_pack.c:load_unpack_topic_info:
  140|    487|{
  141|    487|    if (!bin_unpack_array_fixed(bu, 6, nullptr)) {
  ------------------
  |  |   63|    487|#define nullptr NULL
  ------------------
  |  Branch (141:9): [True: 10, False: 477]
  ------------------
  142|     10|        LOGGER_ERROR(chat->log, "Group topic array malformed");
  ------------------
  |  |   80|     10|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     10|    do {                                                                         \
  |  |  |  |   70|     10|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     20|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     10|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     10|        }                                                                        \
  |  |  |  |   73|     10|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  143|     10|        return false;
  144|     10|    }
  145|       |
  146|    477|    if (!(bin_unpack_u32(bu, &chat->topic_info.version)
  ------------------
  |  Branch (146:11): [True: 463, False: 14]
  ------------------
  147|    477|            && bin_unpack_u16(bu, &chat->topic_info.length)
  ------------------
  |  Branch (147:16): [True: 453, False: 10]
  ------------------
  148|    477|            && bin_unpack_u16(bu, &chat->topic_info.checksum)
  ------------------
  |  Branch (148:16): [True: 452, False: 1]
  ------------------
  149|    477|            && bin_unpack_bin_max(bu, chat->topic_info.topic, &chat->topic_info.length, sizeof(chat->topic_info.topic))
  ------------------
  |  Branch (149:16): [True: 434, False: 18]
  ------------------
  150|    477|            && bin_unpack_bin_fixed(bu, chat->topic_info.public_sig_key, SIG_PUBLIC_KEY_SIZE)
  ------------------
  |  |  132|    434|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   33|    434|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  ------------------
  ------------------
  |  Branch (150:16): [True: 407, False: 27]
  ------------------
  151|    477|            && bin_unpack_bin_fixed(bu, chat->topic_sig, SIGNATURE_SIZE))) {
  ------------------
  |  |   27|    407|#define SIGNATURE_SIZE CRYPTO_SIGNATURE_SIZE
  |  |  ------------------
  |  |  |  |   28|    407|#define CRYPTO_SIGNATURE_SIZE          64
  |  |  ------------------
  ------------------
  |  Branch (151:16): [True: 391, False: 16]
  ------------------
  152|     86|        LOGGER_ERROR(chat->log, "Failed to unpack topic info");
  ------------------
  |  |   80|     86|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     86|    do {                                                                         \
  |  |  |  |   70|     86|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    172|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     86|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     86|        }                                                                        \
  |  |  |  |   73|     86|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  153|     86|        return false;
  154|     86|    }
  155|       |
  156|    391|    return true;
  157|    477|}
group_pack.c:load_unpack_mod_list:
  160|    391|{
  161|    391|    uint32_t actual_size = 0;
  162|    391|    if (!bin_unpack_array_fixed(bu, 2, &actual_size)) {
  ------------------
  |  Branch (162:9): [True: 11, False: 380]
  ------------------
  163|     11|        LOGGER_ERROR(chat->log, "Group mod list array malformed: %u != 2", actual_size);
  ------------------
  |  |   80|     11|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     11|    do {                                                                         \
  |  |  |  |   70|     11|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     22|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     11|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     11|        }                                                                        \
  |  |  |  |   73|     11|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  164|     11|        return false;
  165|     11|    }
  166|       |
  167|    380|    if (!bin_unpack_u16(bu, &chat->moderation.num_mods)) {
  ------------------
  |  Branch (167:9): [True: 10, False: 370]
  ------------------
  168|     10|        LOGGER_ERROR(chat->log, "Failed to unpack mod list value");
  ------------------
  |  |   80|     10|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     10|    do {                                                                         \
  |  |  |  |   70|     10|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     20|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     10|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     10|        }                                                                        \
  |  |  |  |   73|     10|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  169|     10|        return false;
  170|     10|    }
  171|       |
  172|    370|    if (chat->moderation.num_mods == 0) {
  ------------------
  |  Branch (172:9): [True: 127, False: 243]
  ------------------
  173|    127|        bin_unpack_nil(bu);
  174|    127|        return true;
  175|    127|    }
  176|       |
  177|    243|    if (chat->moderation.num_mods > MOD_MAX_NUM_MODERATORS) {
  ------------------
  |  |   46|    243|#define MOD_MAX_NUM_MODERATORS       ((MOD_MAX_NUM_MODERATORS_LIMIT / 16) + 3)
  |  |  ------------------
  |  |  |  |   43|    243|#define MOD_MAX_NUM_MODERATORS_LIMIT (((MAX_PACKET_SIZE_NO_HEADERS) / (MOD_LIST_ENTRY_SIZE)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   40|    243|#define MAX_PACKET_SIZE_NO_HEADERS 49900
  |  |  |  |  ------------------
  |  |  |  |               #define MOD_MAX_NUM_MODERATORS_LIMIT (((MAX_PACKET_SIZE_NO_HEADERS) / (MOD_LIST_ENTRY_SIZE)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    243|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  132|    243|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   33|    243|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (177:9): [True: 1, False: 242]
  ------------------
  178|      1|        LOGGER_ERROR(chat->log, "moderation count %u exceeds maximum %u", chat->moderation.num_mods, (unsigned int)MOD_MAX_NUM_MODERATORS);
  ------------------
  |  |   80|      1|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      1|    do {                                                                         \
  |  |  |  |   70|      1|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      2|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      1|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      1|        }                                                                        \
  |  |  |  |   73|      1|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  179|      1|        chat->moderation.num_mods = MOD_MAX_NUM_MODERATORS;
  ------------------
  |  |   46|      1|#define MOD_MAX_NUM_MODERATORS       ((MOD_MAX_NUM_MODERATORS_LIMIT / 16) + 3)
  |  |  ------------------
  |  |  |  |   43|      1|#define MOD_MAX_NUM_MODERATORS_LIMIT (((MAX_PACKET_SIZE_NO_HEADERS) / (MOD_LIST_ENTRY_SIZE)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   40|      1|#define MAX_PACKET_SIZE_NO_HEADERS 49900
  |  |  |  |  ------------------
  |  |  |  |               #define MOD_MAX_NUM_MODERATORS_LIMIT (((MAX_PACKET_SIZE_NO_HEADERS) / (MOD_LIST_ENTRY_SIZE)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      1|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  132|      1|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   33|      1|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  180|      1|    }
  181|       |
  182|    243|    uint8_t *packed_mod_list = (uint8_t *)mem_balloc(chat->mem, chat->moderation.num_mods * MOD_LIST_ENTRY_SIZE);
  ------------------
  |  |   27|    243|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|    243|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|    243|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  183|       |
  184|    243|    if (packed_mod_list == nullptr) {
  ------------------
  |  |   63|    243|#define nullptr NULL
  ------------------
  |  Branch (184:9): [True: 0, False: 243]
  ------------------
  185|      0|        LOGGER_ERROR(chat->log, "Failed to allocate memory for packed mod list");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  186|      0|        return false;
  187|      0|    }
  188|       |
  189|    243|    const size_t packed_size = chat->moderation.num_mods * MOD_LIST_ENTRY_SIZE;
  ------------------
  |  |   27|    243|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|    243|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|    243|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  190|       |
  191|    243|    if (!bin_unpack_bin_fixed(bu, packed_mod_list, packed_size)) {
  ------------------
  |  Branch (191:9): [True: 10, False: 233]
  ------------------
  192|     10|        LOGGER_ERROR(chat->log, "Failed to unpack mod list binary data");
  ------------------
  |  |   80|     10|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     10|    do {                                                                         \
  |  |  |  |   70|     10|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     20|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     10|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     10|        }                                                                        \
  |  |  |  |   73|     10|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  193|     10|        mem_delete(chat->mem, packed_mod_list);
  194|     10|        return false;
  195|     10|    }
  196|       |
  197|    233|    if (mod_list_unpack(&chat->moderation, packed_mod_list, packed_size, chat->moderation.num_mods) == -1) {
  ------------------
  |  Branch (197:9): [True: 0, False: 233]
  ------------------
  198|      0|        LOGGER_ERROR(chat->log, "Failed to unpack mod list info");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  199|      0|        mem_delete(chat->mem, packed_mod_list);
  200|      0|        return false;
  201|      0|    }
  202|       |
  203|    233|    mem_delete(chat->mem, packed_mod_list);
  204|       |
  205|    233|    return true;
  206|    233|}
group_pack.c:load_unpack_keys:
  209|    360|{
  210|    360|    if (!bin_unpack_array_fixed(bu, 4, nullptr)) {
  ------------------
  |  |   63|    360|#define nullptr NULL
  ------------------
  |  Branch (210:9): [True: 81, False: 279]
  ------------------
  211|     81|        LOGGER_ERROR(chat->log, "Group keys array malformed");
  ------------------
  |  |   80|     81|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     81|    do {                                                                         \
  |  |  |  |   70|     81|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    162|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     81|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     81|        }                                                                        \
  |  |  |  |   73|     81|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  212|     81|        return false;
  213|     81|    }
  214|       |
  215|    279|    if (!(unpack_extended_public_key(&chat->chat_public_key, bu)
  ------------------
  |  Branch (215:11): [True: 269, False: 10]
  ------------------
  216|    279|            && unpack_extended_secret_key(&chat->chat_secret_key, bu)
  ------------------
  |  Branch (216:16): [True: 234, False: 35]
  ------------------
  217|    279|            && unpack_extended_public_key(&chat->self_public_key, bu)
  ------------------
  |  Branch (217:16): [True: 202, False: 32]
  ------------------
  218|    279|            && unpack_extended_secret_key(&chat->self_secret_key, bu))) {
  ------------------
  |  Branch (218:16): [True: 184, False: 18]
  ------------------
  219|     95|        LOGGER_ERROR(chat->log, "Failed to unpack keys");
  ------------------
  |  |   80|     95|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     95|    do {                                                                         \
  |  |  |  |   70|     95|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    190|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     95|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     95|        }                                                                        \
  |  |  |  |   73|     95|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  220|     95|        return false;
  221|     95|    }
  222|       |
  223|    184|    return true;
  224|    279|}
group_pack.c:load_unpack_self_info:
  227|    184|{
  228|    184|    if (!bin_unpack_array_fixed(bu, 4, nullptr)) {
  ------------------
  |  |   63|    184|#define nullptr NULL
  ------------------
  |  Branch (228:9): [True: 10, False: 174]
  ------------------
  229|     10|        LOGGER_ERROR(chat->log, "Group self info array malformed");
  ------------------
  |  |   80|     10|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     10|    do {                                                                         \
  |  |  |  |   70|     10|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     20|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     10|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     10|        }                                                                        \
  |  |  |  |   73|     10|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  230|     10|        return false;
  231|     10|    }
  232|       |
  233|    174|    uint8_t self_nick[MAX_GC_NICK_SIZE];
  234|    174|    uint16_t self_nick_len = 0;
  235|    174|    uint8_t self_role = GR_USER;
  236|    174|    uint8_t self_status = GS_NONE;
  237|       |
  238|    174|    if (!(bin_unpack_u16(bu, &self_nick_len)
  ------------------
  |  Branch (238:11): [True: 173, False: 1]
  ------------------
  239|    174|            && bin_unpack_u08(bu, &self_role)
  ------------------
  |  Branch (239:16): [True: 170, False: 3]
  ------------------
  240|    174|            && bin_unpack_u08(bu, &self_status))) {
  ------------------
  |  Branch (240:16): [True: 160, False: 10]
  ------------------
  241|     14|        LOGGER_ERROR(chat->log, "Failed to unpack self values");
  ------------------
  |  |   80|     14|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     14|    do {                                                                         \
  |  |  |  |   70|     14|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     28|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     14|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     14|        }                                                                        \
  |  |  |  |   73|     14|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  242|     14|        return false;
  243|     14|    }
  244|       |
  245|    160|    if (self_nick_len > MAX_GC_NICK_SIZE) {
  ------------------
  |  |   27|    160|#define MAX_GC_NICK_SIZE 128
  ------------------
  |  Branch (245:9): [True: 1, False: 159]
  ------------------
  246|      1|        LOGGER_ERROR(chat->log, "self_nick too big (%u bytes), truncating to %d", self_nick_len, MAX_GC_NICK_SIZE);
  ------------------
  |  |   80|      1|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      1|    do {                                                                         \
  |  |  |  |   70|      1|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      2|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      1|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      1|        }                                                                        \
  |  |  |  |   73|      1|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  247|      1|        self_nick_len = MAX_GC_NICK_SIZE;
  ------------------
  |  |   27|      1|#define MAX_GC_NICK_SIZE 128
  ------------------
  248|      1|    }
  249|       |
  250|    160|    if (!bin_unpack_bin_fixed(bu, self_nick, self_nick_len)) {
  ------------------
  |  Branch (250:9): [True: 12, False: 148]
  ------------------
  251|     12|        LOGGER_ERROR(chat->log, "Failed to unpack self nick bytes");
  ------------------
  |  |   80|     12|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     12|    do {                                                                         \
  |  |  |  |   70|     12|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     24|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     12|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     12|        }                                                                        \
  |  |  |  |   73|     12|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  252|     12|        return false;
  253|     12|    }
  254|       |
  255|       |    // we have to add ourself before setting self info
  256|    148|    if (peer_add(chat, nullptr, chat->self_public_key.enc) != 0) {
  ------------------
  |  |   63|    148|#define nullptr NULL
  ------------------
  |  Branch (256:9): [True: 0, False: 148]
  ------------------
  257|      0|        LOGGER_ERROR(chat->log, "Failed to add self to peer list");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  258|      0|        return false;
  259|      0|    }
  260|       |
  261|    148|    if (chat->numpeers == 0) {
  ------------------
  |  Branch (261:9): [True: 0, False: 148]
  ------------------
  262|      0|        LOGGER_ERROR(chat->log, "Failed to unpack self: numpeers should be > 0");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  263|      0|        return false;
  264|      0|    }
  265|       |
  266|    148|    GC_Peer *self = &chat->group[0];
  267|       |
  268|    148|    self->gconn.addr.public_key = chat->self_public_key;
  269|    148|    memcpy(self->nick, self_nick, self_nick_len);
  270|    148|    self->nick_length = self_nick_len;
  271|    148|    self->role = (Group_Role)self_role;
  272|    148|    self->status = (Group_Peer_Status)self_status;
  273|    148|    self->gconn.confirmed = true;
  274|       |
  275|    148|    return true;
  276|    148|}
group_pack.c:load_unpack_saved_peers:
  279|    148|{
  280|    148|    if (!bin_unpack_array_fixed(bu, 2, nullptr)) {
  ------------------
  |  |   63|    148|#define nullptr NULL
  ------------------
  |  Branch (280:9): [True: 10, False: 138]
  ------------------
  281|     10|        LOGGER_ERROR(chat->log, "Group saved peers array malformed");
  ------------------
  |  |   80|     10|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     10|    do {                                                                         \
  |  |  |  |   70|     10|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     20|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     10|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     10|        }                                                                        \
  |  |  |  |   73|     10|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  282|     10|        return false;
  283|     10|    }
  284|       |
  285|       |    // Saved peers
  286|    138|    uint16_t saved_peers_size = 0;
  287|       |
  288|    138|    if (!bin_unpack_u16(bu, &saved_peers_size)) {
  ------------------
  |  Branch (288:9): [True: 6, False: 132]
  ------------------
  289|      6|        LOGGER_ERROR(chat->log, "Failed to unpack saved peers value");
  ------------------
  |  |   80|      6|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      6|    do {                                                                         \
  |  |  |  |   70|      6|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     12|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      6|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      6|        }                                                                        \
  |  |  |  |   73|      6|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  290|      6|        return false;
  291|      6|    }
  292|       |
  293|    132|    if (saved_peers_size == 0) {
  ------------------
  |  Branch (293:9): [True: 2, False: 130]
  ------------------
  294|      2|        bin_unpack_nil(bu);
  295|      2|        return true;
  296|      2|    }
  297|       |
  298|    130|    uint8_t *saved_peers = (uint8_t *)mem_balloc(chat->mem, saved_peers_size * GC_SAVED_PEER_SIZE);
  ------------------
  |  |   50|    130|#define GC_SAVED_PEER_SIZE (ENC_PUBLIC_KEY_SIZE + sizeof(Node_format) + sizeof(IP_Port))
  |  |  ------------------
  |  |  |  |  122|    130|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   43|    130|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  299|       |
  300|    130|    if (saved_peers == nullptr) {
  ------------------
  |  |   63|    130|#define nullptr NULL
  ------------------
  |  Branch (300:9): [True: 0, False: 130]
  ------------------
  301|      0|        LOGGER_ERROR(chat->log, "Failed to allocate memory for saved peer list");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  302|      0|        return false;
  303|      0|    }
  304|       |
  305|    130|    if (!bin_unpack_bin_fixed(bu, saved_peers, saved_peers_size)) {
  ------------------
  |  Branch (305:9): [True: 21, False: 109]
  ------------------
  306|     21|        LOGGER_ERROR(chat->log, "Failed to unpack saved peers binary data");
  ------------------
  |  |   80|     21|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     21|    do {                                                                         \
  |  |  |  |   70|     21|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     42|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     21|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     21|        }                                                                        \
  |  |  |  |   73|     21|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  307|     21|        mem_delete(chat->mem, saved_peers);
  308|     21|        return false;
  309|     21|    }
  310|       |
  311|    109|    if (unpack_gc_saved_peers(chat, saved_peers, saved_peers_size) == -1) {
  ------------------
  |  Branch (311:9): [True: 104, False: 5]
  ------------------
  312|    104|        LOGGER_ERROR(chat->log, "Failed to unpack saved peers");  // recoverable error
  ------------------
  |  |   80|    104|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|    104|    do {                                                                         \
  |  |  |  |   70|    104|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    208|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|    104|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|    104|        }                                                                        \
  |  |  |  |   73|    104|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  313|    104|    }
  314|       |
  315|    109|    mem_delete(chat->mem, saved_peers);
  316|       |
  317|    109|    return true;
  318|    130|}
group_pack.c:save_pack_state_values:
  338|    288|{
  339|    288|    bin_pack_array(bp, 8);
  340|    288|    bin_pack_bool(bp, chat->connection_state == CS_DISCONNECTED); // 1
  341|    288|    bin_pack_u16(bp, chat->shared_state.group_name_len); // 2
  342|    288|    bin_pack_u08(bp, chat->shared_state.privacy_state); // 3
  343|    288|    bin_pack_u16(bp, chat->shared_state.maxpeers); // 4
  344|    288|    bin_pack_u16(bp, chat->shared_state.password_length); // 5
  345|    288|    bin_pack_u32(bp, chat->shared_state.version); // 6
  346|    288|    bin_pack_u32(bp, chat->shared_state.topic_lock); // 7
  347|    288|    bin_pack_u08(bp, chat->shared_state.voice_state); // 8
  348|    288|}
group_pack.c:save_pack_state_bin:
  351|    288|{
  352|    288|    bin_pack_array(bp, 5);
  353|       |
  354|    288|    bin_pack_bin(bp, chat->shared_state_sig, SIGNATURE_SIZE); // 1
  ------------------
  |  |   27|    288|#define SIGNATURE_SIZE CRYPTO_SIGNATURE_SIZE
  |  |  ------------------
  |  |  |  |   28|    288|#define CRYPTO_SIGNATURE_SIZE          64
  |  |  ------------------
  ------------------
  355|    288|    pack_extended_public_key(&chat->shared_state.founder_public_key, bp); // 2
  356|    288|    bin_pack_bin(bp, chat->shared_state.group_name, chat->shared_state.group_name_len); // 3
  357|    288|    bin_pack_bin(bp, chat->shared_state.password, chat->shared_state.password_length); // 4
  358|    288|    bin_pack_bin(bp, chat->shared_state.mod_list_hash, MOD_MODERATION_HASH_SIZE); // 5
  ------------------
  |  |   26|    288|#define MOD_MODERATION_HASH_SIZE CRYPTO_SHA256_SIZE
  |  |  ------------------
  |  |  |  |   74|    288|#define CRYPTO_SHA256_SIZE             32
  |  |  ------------------
  ------------------
  359|    288|}
group_pack.c:save_pack_topic_info:
  362|    288|{
  363|    288|    bin_pack_array(bp, 6);
  364|       |
  365|    288|    bin_pack_u32(bp, chat->topic_info.version); // 1
  366|    288|    bin_pack_u16(bp, chat->topic_info.length); // 2
  367|    288|    bin_pack_u16(bp, chat->topic_info.checksum); // 3
  368|    288|    bin_pack_bin(bp, chat->topic_info.topic, chat->topic_info.length); // 4
  369|    288|    bin_pack_bin(bp, chat->topic_info.public_sig_key, SIG_PUBLIC_KEY_SIZE); // 5
  ------------------
  |  |  132|    288|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   33|    288|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  ------------------
  ------------------
  370|    288|    bin_pack_bin(bp, chat->topic_sig, SIGNATURE_SIZE); // 6
  ------------------
  |  |   27|    288|#define SIGNATURE_SIZE CRYPTO_SIGNATURE_SIZE
  |  |  ------------------
  |  |  |  |   28|    288|#define CRYPTO_SIGNATURE_SIZE          64
  |  |  ------------------
  ------------------
  371|    288|}
group_pack.c:save_pack_mod_list:
  374|    288|{
  375|    288|    bin_pack_array(bp, 2);
  376|       |
  377|    288|    const uint16_t num_mods = min_u16(chat->moderation.num_mods, MOD_MAX_NUM_MODERATORS);
  ------------------
  |  |   46|    288|#define MOD_MAX_NUM_MODERATORS       ((MOD_MAX_NUM_MODERATORS_LIMIT / 16) + 3)
  |  |  ------------------
  |  |  |  |   43|    288|#define MOD_MAX_NUM_MODERATORS_LIMIT (((MAX_PACKET_SIZE_NO_HEADERS) / (MOD_LIST_ENTRY_SIZE)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   40|    288|#define MAX_PACKET_SIZE_NO_HEADERS 49900
  |  |  |  |  ------------------
  |  |  |  |               #define MOD_MAX_NUM_MODERATORS_LIMIT (((MAX_PACKET_SIZE_NO_HEADERS) / (MOD_LIST_ENTRY_SIZE)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    288|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  132|    288|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   33|    288|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  378|       |
  379|    288|    if (num_mods == 0) {
  ------------------
  |  Branch (379:9): [True: 0, False: 288]
  ------------------
  380|      0|        bin_pack_u16(bp, num_mods); // 1
  381|      0|        bin_pack_nil(bp); // 2
  382|      0|        return;
  383|      0|    }
  384|       |
  385|    288|    uint8_t *packed_mod_list = (uint8_t *)mem_balloc(chat->mem, num_mods * MOD_LIST_ENTRY_SIZE);
  ------------------
  |  |   27|    288|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|    288|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|    288|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|       |
  387|       |    // we can still recover without the mod list
  388|    288|    if (packed_mod_list == nullptr) {
  ------------------
  |  |   63|    288|#define nullptr NULL
  ------------------
  |  Branch (388:9): [True: 0, False: 288]
  ------------------
  389|      0|        bin_pack_u16(bp, 0); // 1
  390|      0|        bin_pack_nil(bp); // 2
  391|      0|        LOGGER_ERROR(chat->log, "Failed to allocate memory for moderation list");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  392|      0|        return;
  393|      0|    }
  394|       |
  395|    288|    bin_pack_u16(bp, num_mods); // 1
  396|       |
  397|    288|    mod_list_pack(&chat->moderation, packed_mod_list);
  398|       |
  399|    288|    const size_t packed_size = num_mods * MOD_LIST_ENTRY_SIZE;
  ------------------
  |  |   27|    288|#define MOD_LIST_ENTRY_SIZE SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|    288|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|    288|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  400|       |
  401|    288|    bin_pack_bin(bp, packed_mod_list, packed_size); // 2
  402|       |
  403|    288|    mem_delete(chat->mem, packed_mod_list);
  404|    288|}
group_pack.c:save_pack_keys:
  407|    288|{
  408|    288|    bin_pack_array(bp, 4);
  409|       |
  410|    288|    pack_extended_public_key(&chat->chat_public_key, bp); // 1
  411|    288|    pack_extended_secret_key(&chat->chat_secret_key, bp); // 2
  412|    288|    pack_extended_public_key(&chat->self_public_key, bp); // 3
  413|    288|    pack_extended_secret_key(&chat->self_secret_key, bp); // 4
  414|    288|}
group_pack.c:save_pack_self_info:
  417|    288|{
  418|    288|    bin_pack_array(bp, 4);
  419|       |
  420|    288|    GC_Peer *self = &chat->group[0];
  421|       |
  422|    288|    if (self->nick_length > MAX_GC_NICK_SIZE) {
  ------------------
  |  |   27|    288|#define MAX_GC_NICK_SIZE 128
  ------------------
  |  Branch (422:9): [True: 0, False: 288]
  ------------------
  423|      0|        LOGGER_ERROR(chat->log, "self_nick is too big (%u). Truncating to %d", self->nick_length, MAX_GC_NICK_SIZE);
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  424|      0|        self->nick_length = MAX_GC_NICK_SIZE;
  ------------------
  |  |   27|      0|#define MAX_GC_NICK_SIZE 128
  ------------------
  425|      0|    }
  426|       |
  427|    288|    bin_pack_u16(bp, self->nick_length); // 1
  428|    288|    bin_pack_u08(bp, (uint8_t)self->role); // 2
  429|    288|    bin_pack_u08(bp, self->status); // 3
  430|    288|    bin_pack_bin(bp, self->nick, self->nick_length); // 4
  431|    288|}
group_pack.c:save_pack_saved_peers:
  434|    288|{
  435|    288|    bin_pack_array(bp, 2);
  436|       |
  437|    288|    uint8_t *saved_peers = (uint8_t *)mem_balloc(chat->mem, GC_MAX_SAVED_PEERS * GC_SAVED_PEER_SIZE);
  ------------------
  |  |   49|    288|#define GC_MAX_SAVED_PEERS 100
  ------------------
                  uint8_t *saved_peers = (uint8_t *)mem_balloc(chat->mem, GC_MAX_SAVED_PEERS * GC_SAVED_PEER_SIZE);
  ------------------
  |  |   50|    288|#define GC_SAVED_PEER_SIZE (ENC_PUBLIC_KEY_SIZE + sizeof(Node_format) + sizeof(IP_Port))
  |  |  ------------------
  |  |  |  |  122|    288|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   43|    288|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  438|       |
  439|       |    // we can still recover without the saved peers list
  440|    288|    if (saved_peers == nullptr) {
  ------------------
  |  |   63|    288|#define nullptr NULL
  ------------------
  |  Branch (440:9): [True: 0, False: 288]
  ------------------
  441|      0|        bin_pack_u16(bp, 0); // 1
  442|      0|        bin_pack_nil(bp); // 2
  443|      0|        LOGGER_ERROR(chat->log, "Failed to allocate memory for saved peers list");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  444|      0|        return;
  445|      0|    }
  446|       |
  447|    288|    uint16_t packed_size = 0;
  448|    288|    const int count = pack_gc_saved_peers(chat, saved_peers, GC_MAX_SAVED_PEERS * GC_SAVED_PEER_SIZE, &packed_size);
  ------------------
  |  |   49|    288|#define GC_MAX_SAVED_PEERS 100
  ------------------
                  const int count = pack_gc_saved_peers(chat, saved_peers, GC_MAX_SAVED_PEERS * GC_SAVED_PEER_SIZE, &packed_size);
  ------------------
  |  |   50|    288|#define GC_SAVED_PEER_SIZE (ENC_PUBLIC_KEY_SIZE + sizeof(Node_format) + sizeof(IP_Port))
  |  |  ------------------
  |  |  |  |  122|    288|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   43|    288|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  449|       |
  450|    288|    if (count < 0) {
  ------------------
  |  Branch (450:9): [True: 0, False: 288]
  ------------------
  451|      0|        LOGGER_ERROR(chat->log, "Failed to pack saved peers");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  452|      0|    }
  453|       |
  454|    288|    bin_pack_u16(bp, packed_size); // 1
  455|       |
  456|    288|    if (packed_size == 0) {
  ------------------
  |  Branch (456:9): [True: 72, False: 216]
  ------------------
  457|     72|        bin_pack_nil(bp); // 2
  458|     72|        mem_delete(chat->mem, saved_peers);
  459|     72|        return;
  460|     72|    }
  461|       |
  462|    216|    bin_pack_bin(bp, saved_peers, packed_size); // 2
  463|       |
  464|    216|    mem_delete(chat->mem, saved_peers);
  465|    216|}

bs_list_init:
  136|  1.97k|{
  137|  1.97k|    list->mem = mem;
  138|       |
  139|       |    // set initial values
  140|  1.97k|    list->n = 0;
  141|  1.97k|    list->element_size = element_size;
  142|  1.97k|    list->capacity = 0;
  143|  1.97k|    list->data = nullptr;
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  144|  1.97k|    list->ids = nullptr;
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  145|  1.97k|    list->cmp_callback = cmp_callback;
  146|       |
  147|  1.97k|    if (initial_capacity != 0) {
  ------------------
  |  Branch (147:9): [True: 1.97k, False: 0]
  ------------------
  148|  1.97k|        if (!resize(list, initial_capacity)) {
  ------------------
  |  Branch (148:13): [True: 0, False: 1.97k]
  ------------------
  149|      0|            return 0;
  150|      0|        }
  151|  1.97k|    }
  152|       |
  153|  1.97k|    list->capacity = initial_capacity;
  154|       |
  155|  1.97k|    return 1;
  156|  1.97k|}
bs_list_free:
  159|  1.97k|{
  160|  1.97k|    if (list == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (160:9): [True: 0, False: 1.97k]
  ------------------
  161|      0|        return;
  162|      0|    }
  163|       |
  164|       |    // free both arrays
  165|  1.97k|    mem_delete(list->mem, list->data);
  166|  1.97k|    list->data = nullptr;
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  167|       |
  168|  1.97k|    mem_delete(list->mem, list->ids);
  169|  1.97k|    list->ids = nullptr;
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  170|  1.97k|}
list.c:resize:
  110|  1.97k|{
  111|  1.97k|    if (new_size == 0) {
  ------------------
  |  Branch (111:9): [True: 0, False: 1.97k]
  ------------------
  112|      0|        bs_list_free(list);
  113|      0|        return true;
  114|      0|    }
  115|       |
  116|  1.97k|    uint8_t *data = (uint8_t *)mem_brealloc(list->mem, list->data, new_size * list->element_size);
  117|       |
  118|  1.97k|    if (data == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (118:9): [True: 0, False: 1.97k]
  ------------------
  119|      0|        return false;
  120|      0|    }
  121|       |
  122|  1.97k|    list->data = data;
  123|       |
  124|  1.97k|    int *ids = (int *)mem_vrealloc(list->mem, list->ids, new_size, sizeof(int));
  125|       |
  126|  1.97k|    if (ids == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (126:9): [True: 0, False: 1.97k]
  ------------------
  127|      0|        return false;
  128|      0|    }
  129|       |
  130|  1.97k|    list->ids = ids;
  131|       |
  132|  1.97k|    return true;
  133|  1.97k|}

logger_new:
   33|  1.97k|{
   34|  1.97k|    Logger *log = (Logger *)mem_alloc(mem, sizeof(Logger));
   35|       |
   36|  1.97k|    if (log == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (36:9): [True: 0, False: 1.97k]
  ------------------
   37|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   38|      0|    }
   39|       |
   40|  1.97k|    log->mem = mem;
   41|       |
   42|  1.97k|    return log;
   43|  1.97k|}
logger_kill:
   46|  1.97k|{
   47|  1.97k|    if (log == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (47:9): [True: 0, False: 1.97k]
  ------------------
   48|      0|        return;
   49|      0|    }
   50|       |
   51|  1.97k|    mem_delete(log->mem, log);
   52|  1.97k|}
logger_callback_log:
   55|  1.97k|{
   56|  1.97k|    assert(log != nullptr);
   57|  1.97k|    log->callback = function;
   58|  1.97k|    log->context  = context;
   59|  1.97k|    log->userdata = userdata;
   60|  1.97k|}
logger_write:
   64|  89.0k|{
   65|  89.0k|    if (log == nullptr) {
  ------------------
  |  |   63|  89.0k|#define nullptr NULL
  ------------------
  |  Branch (65:9): [True: 0, False: 89.0k]
  ------------------
   66|      0|        return;
   67|      0|    }
   68|       |
   69|  89.0k|    if (log->callback == nullptr) {
  ------------------
  |  |   63|  89.0k|#define nullptr NULL
  ------------------
  |  Branch (69:9): [True: 0, False: 89.0k]
  ------------------
   70|      0|        return;
   71|      0|    }
   72|       |
   73|       |    // Only pass the file name, not the entire file path, for privacy reasons.
   74|       |    // The full path may contain PII of the person compiling toxcore (their
   75|       |    // username and directory layout).
   76|  89.0k|    const char *filename = strrchr(file, '/');
   77|  89.0k|    file = filename != nullptr ? filename + 1 : file;
  ------------------
  |  |   63|  89.0k|#define nullptr NULL
  ------------------
  |  Branch (77:12): [True: 89.0k, False: 0]
  ------------------
   78|       |#if defined(_WIN32) || defined(__CYGWIN__)
   79|       |    // On Windows, the path separator *may* be a backslash, so we look for that
   80|       |    // one too.
   81|       |    const char *windows_filename = strrchr(file, '\\');
   82|       |    file = windows_filename != nullptr ? windows_filename + 1 : file;
   83|       |#endif /* WIN32 */
   84|       |
   85|       |    // Format message
   86|  89.0k|    char msg[1024];
   87|  89.0k|    va_list args;
   88|  89.0k|    va_start(args, format);
   89|  89.0k|    vsnprintf(msg, sizeof(msg), format, args);
   90|  89.0k|    va_end(args);
   91|       |
   92|  89.0k|    log->callback(log->context, level, file, line, func, msg, log->userdata);
   93|  89.0k|}

os_memory:
   42|  1.97k|{
   43|  1.97k|    return &os_memory_obj;
   44|  1.97k|}
mem_balloc:
   47|  10.0k|{
   48|  10.0k|    void *const ptr = mem->funcs->malloc(mem->obj, size);
   49|  10.0k|    return ptr;
   50|  10.0k|}
mem_brealloc:
   53|  1.97k|{
   54|  1.97k|    void *const new_ptr = mem->funcs->realloc(mem->obj, ptr, size);
   55|  1.97k|    return new_ptr;
   56|  1.97k|}
mem_alloc:
   59|  65.3k|{
   60|  65.3k|    void *const ptr = mem->funcs->calloc(mem->obj, 1, size);
   61|  65.3k|    return ptr;
   62|  65.3k|}
mem_valloc:
   65|  22.4k|{
   66|  22.4k|    const uint32_t bytes = nmemb * size;
   67|       |
   68|  22.4k|    if (size != 0 && bytes / size != nmemb) {
  ------------------
  |  Branch (68:9): [True: 22.4k, False: 0]
  |  Branch (68:22): [True: 0, False: 22.4k]
  ------------------
   69|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   70|      0|    }
   71|       |
   72|  22.4k|    void *const ptr = mem->funcs->calloc(mem->obj, nmemb, size);
   73|  22.4k|    return ptr;
   74|  22.4k|}
mem_vrealloc:
   77|  43.9k|{
   78|  43.9k|    const uint32_t bytes = nmemb * size;
   79|       |
   80|  43.9k|    if (size != 0 && bytes / size != nmemb) {
  ------------------
  |  Branch (80:9): [True: 43.9k, False: 0]
  |  Branch (80:22): [True: 0, False: 43.9k]
  ------------------
   81|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   82|      0|    }
   83|       |
   84|  43.9k|    void *const new_ptr = mem->funcs->realloc(mem->obj, ptr, bytes);
   85|  43.9k|    return new_ptr;
   86|  43.9k|}
mem_delete:
   89|  1.24M|{
   90|  1.24M|    mem->funcs->free(mem->obj, ptr);
   91|  1.24M|}

mono_time_new:
  111|  1.97k|{
  112|  1.97k|    Mono_Time *mono_time = (Mono_Time *)mem_alloc(mem, sizeof(Mono_Time));
  113|       |
  114|  1.97k|    if (mono_time == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (114:9): [True: 0, False: 1.97k]
  ------------------
  115|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  116|      0|    }
  117|       |
  118|  1.97k|#ifndef ESP_PLATFORM
  119|  1.97k|    pthread_rwlock_t *rwlock = (pthread_rwlock_t *)mem_alloc(mem, sizeof(pthread_rwlock_t));
  120|       |
  121|  1.97k|    if (rwlock == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (121:9): [True: 0, False: 1.97k]
  ------------------
  122|      0|        mem_delete(mem, mono_time);
  123|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  124|      0|    }
  125|       |
  126|  1.97k|    if (pthread_rwlock_init(rwlock, nullptr) != 0) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (126:9): [True: 0, False: 1.97k]
  ------------------
  127|      0|        mem_delete(mem, rwlock);
  128|      0|        mem_delete(mem, mono_time);
  129|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  130|      0|    }
  131|       |
  132|  1.97k|    mono_time->time_update_lock = rwlock;
  133|  1.97k|#endif /* ESP_PLATFORM */
  134|       |
  135|  1.97k|    mono_time_set_current_time_callback(mono_time, current_time_callback, user_data);
  136|       |
  137|  1.97k|    mono_time->cur_time = 0;
  138|  1.97k|#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
  139|       |    // Maximum reproducibility. Never return time = 0.
  140|  1.97k|    mono_time->base_time = 1000000000;
  141|       |#else
  142|       |    // Never return time = 0 in case time() returns 0 (e.g. on microcontrollers
  143|       |    // without battery-powered RTC or ones where NTP didn't initialise it yet).
  144|       |    mono_time->base_time = max_u64(1, (uint64_t)time(nullptr)) * UINT64_C(1000) - current_time_monotonic(mono_time);
  145|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  146|       |
  147|  1.97k|    mono_time_update(mono_time);
  148|       |
  149|  1.97k|    return mono_time;
  150|  1.97k|}
mono_time_free:
  153|  1.97k|{
  154|  1.97k|    if (mono_time == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (154:9): [True: 0, False: 1.97k]
  ------------------
  155|      0|        return;
  156|      0|    }
  157|  1.97k|#ifndef ESP_PLATFORM
  158|  1.97k|    pthread_rwlock_destroy(mono_time->time_update_lock);
  159|  1.97k|    mem_delete(mem, mono_time->time_update_lock);
  160|  1.97k|#endif /* ESP_PLATFORM */
  161|  1.97k|    mem_delete(mem, mono_time);
  162|  1.97k|}
mono_time_update:
  165|  1.97k|{
  166|  1.97k|    const uint64_t cur_time =
  167|  1.97k|        mono_time->base_time + mono_time->current_time_callback(mono_time->user_data);
  168|       |
  169|  1.97k|#ifndef ESP_PLATFORM
  170|  1.97k|    pthread_rwlock_wrlock(mono_time->time_update_lock);
  171|  1.97k|#endif /* ESP_PLATFORM */
  172|  1.97k|    mono_time->cur_time = cur_time;
  173|  1.97k|#ifndef ESP_PLATFORM
  174|  1.97k|    pthread_rwlock_unlock(mono_time->time_update_lock);
  175|  1.97k|#endif /* ESP_PLATFORM */
  176|  1.97k|}
mono_time_get_ms:
  179|  54.5k|{
  180|       |#if !defined(ESP_PLATFORM) && !defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  181|       |    // Fuzzing is only single thread for now, no locking needed */
  182|       |    pthread_rwlock_rdlock(mono_time->time_update_lock);
  183|       |#endif /* !ESP_PLATFORM */
  184|  54.5k|    const uint64_t cur_time = mono_time->cur_time;
  185|       |#if !defined(ESP_PLATFORM) && !defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  186|       |    pthread_rwlock_unlock(mono_time->time_update_lock);
  187|       |#endif /* !ESP_PLATFORM */
  188|  54.5k|    return cur_time;
  189|  54.5k|}
mono_time_get:
  192|  54.5k|{
  193|  54.5k|    return mono_time_get_ms(mono_time) / UINT64_C(1000);
  194|  54.5k|}
mono_time_set_current_time_callback:
  203|  1.97k|{
  204|  1.97k|    if (current_time_callback == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (204:9): [True: 0, False: 1.97k]
  ------------------
  205|      0|        mono_time->current_time_callback = current_time_monotonic_default;
  206|      0|        mono_time->user_data = mono_time;
  207|  1.97k|    } else {
  208|  1.97k|        mono_time->current_time_callback = current_time_callback;
  209|  1.97k|        mono_time->user_data = user_data;
  210|  1.97k|    }
  211|  1.97k|}

nc_get_self_public_key:
  165|  7.13k|{
  166|  7.13k|    return c->self_public_key;
  167|  7.13k|}
nc_get_tcp_c:
  175|  4.06k|{
  176|  4.06k|    return c->tcp_c;
  177|  4.06k|}
nc_get_dht:
  180|  1.97k|{
  181|  1.97k|    return c->dht;
  182|  1.97k|}
new_connection_handler:
 1885|  1.97k|{
 1886|  1.97k|    c->new_connection_callback = new_connection_callback;
 1887|  1.97k|    c->new_connection_callback_object = object;
 1888|  1.97k|}
copy_connected_tcp_relays:
 2230|  1.49k|{
 2231|  1.49k|    if (num == 0) {
  ------------------
  |  Branch (2231:9): [True: 6, False: 1.48k]
  ------------------
 2232|      6|        return 0;
 2233|      6|    }
 2234|       |
 2235|  1.48k|    return tcp_copy_connected_relays(c->tcp_c, tcp_relays, num);
 2236|  1.49k|}
crypto_kill:
 2839|    363|{
 2840|    363|    Crypto_Connection *conn = get_crypto_connection(c, crypt_connection_id);
 2841|       |
 2842|    363|    int ret = -1;
 2843|       |
 2844|    363|    if (conn != nullptr) {
  ------------------
  |  |   63|    363|#define nullptr NULL
  ------------------
  |  Branch (2844:9): [True: 0, False: 363]
  ------------------
 2845|      0|        if (conn->status == CRYPTO_CONN_ESTABLISHED) {
  ------------------
  |  Branch (2845:13): [True: 0, False: 0]
  ------------------
 2846|      0|            send_kill_packet(c, crypt_connection_id);
 2847|      0|        }
 2848|       |
 2849|      0|        kill_tcp_connection_to(c->tcp_c, conn->connection_number_tcp);
 2850|       |
 2851|      0|        bs_list_remove(&c->ip_port_list, (uint8_t *)&conn->ip_portv4, crypt_connection_id);
 2852|      0|        bs_list_remove(&c->ip_port_list, (uint8_t *)&conn->ip_portv6, crypt_connection_id);
 2853|      0|        clear_temp_packet(c, crypt_connection_id);
 2854|      0|        clear_buffer(c->mem, &conn->send_array);
 2855|      0|        clear_buffer(c->mem, &conn->recv_array);
 2856|      0|        ret = wipe_crypto_connection(c, crypt_connection_id);
 2857|      0|    }
 2858|       |
 2859|    363|    return ret;
 2860|    363|}
new_keys:
 2890|  1.97k|{
 2891|  1.97k|    crypto_new_keypair(c->rng, c->self_public_key, c->self_secret_key);
 2892|  1.97k|}
save_keys:
 2900|  1.49k|{
 2901|  1.49k|    memcpy(keys, c->self_public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|  1.49k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 2902|  1.49k|    memcpy(keys + CRYPTO_PUBLIC_KEY_SIZE, c->self_secret_key, CRYPTO_SECRET_KEY_SIZE);
  ------------------
  |  |   43|  1.49k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
                  memcpy(keys + CRYPTO_PUBLIC_KEY_SIZE, c->self_secret_key, CRYPTO_SECRET_KEY_SIZE);
  ------------------
  |  |   48|  1.49k|#define CRYPTO_SECRET_KEY_SIZE         32
  ------------------
 2903|  1.49k|}
load_secret_key:
 2909|    625|{
 2910|    625|    memcpy(c->self_secret_key, sk, CRYPTO_SECRET_KEY_SIZE);
  ------------------
  |  |   48|    625|#define CRYPTO_SECRET_KEY_SIZE         32
  ------------------
 2911|    625|    crypto_derive_public_key(c->self_public_key, c->self_secret_key);
 2912|    625|}
new_net_crypto:
 2919|  1.97k|{
 2920|  1.97k|    if (dht == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (2920:9): [True: 0, False: 1.97k]
  ------------------
 2921|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2922|      0|    }
 2923|       |
 2924|  1.97k|    Net_Crypto *temp = (Net_Crypto *)mem_alloc(mem, sizeof(Net_Crypto));
 2925|       |
 2926|  1.97k|    if (temp == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (2926:9): [True: 0, False: 1.97k]
  ------------------
 2927|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2928|      0|    }
 2929|       |
 2930|  1.97k|    temp->log = log;
 2931|  1.97k|    temp->mem = mem;
 2932|  1.97k|    temp->rng = rng;
 2933|  1.97k|    temp->mono_time = mono_time;
 2934|  1.97k|    temp->ns = ns;
 2935|       |
 2936|  1.97k|    temp->tcp_c = new_tcp_connections(log, mem, rng, ns, mono_time, dht_get_self_secret_key(dht), proxy_info, tcp_np);
 2937|       |
 2938|  1.97k|    if (temp->tcp_c == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (2938:9): [True: 0, False: 1.97k]
  ------------------
 2939|      0|        mem_delete(mem, temp);
 2940|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2941|      0|    }
 2942|       |
 2943|  1.97k|    set_packet_tcp_connection_callback(temp->tcp_c, &tcp_data_callback, temp);
 2944|  1.97k|    set_oob_packet_tcp_connection_callback(temp->tcp_c, &tcp_oob_callback, temp);
 2945|       |
 2946|  1.97k|    temp->dht = dht;
 2947|       |
 2948|  1.97k|    new_keys(temp);
 2949|  1.97k|    new_symmetric_key(rng, temp->secret_symmetric_key);
 2950|       |
 2951|  1.97k|    temp->current_sleep_time = CRYPTO_SEND_PACKET_INTERVAL;
  ------------------
  |  |   96|  1.97k|#define CRYPTO_SEND_PACKET_INTERVAL 1000
  ------------------
 2952|       |
 2953|  1.97k|    networking_registerhandler(dht_get_net(dht), NET_PACKET_COOKIE_REQUEST, &udp_handle_cookie_request, temp);
 2954|  1.97k|    networking_registerhandler(dht_get_net(dht), NET_PACKET_COOKIE_RESPONSE, &udp_handle_packet, temp);
 2955|  1.97k|    networking_registerhandler(dht_get_net(dht), NET_PACKET_CRYPTO_HS, &udp_handle_packet, temp);
 2956|  1.97k|    networking_registerhandler(dht_get_net(dht), NET_PACKET_CRYPTO_DATA, &udp_handle_packet, temp);
 2957|       |
 2958|  1.97k|    bs_list_init(&temp->ip_port_list, mem, sizeof(IP_Port), 8, ipport_cmp_handler);
 2959|       |
 2960|  1.97k|    return temp;
 2961|  1.97k|}
kill_net_crypto:
 3006|  1.97k|{
 3007|  1.97k|    if (c == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (3007:9): [True: 0, False: 1.97k]
  ------------------
 3008|      0|        return;
 3009|      0|    }
 3010|       |
 3011|  1.97k|    const Memory *mem = c->mem;
 3012|       |
 3013|  1.97k|    for (uint32_t i = 0; i < c->crypto_connections_length; ++i) {
  ------------------
  |  Branch (3013:26): [True: 0, False: 1.97k]
  ------------------
 3014|      0|        crypto_kill(c, i);
 3015|      0|    }
 3016|       |
 3017|  1.97k|    kill_tcp_connections(c->tcp_c);
 3018|  1.97k|    bs_list_free(&c->ip_port_list);
 3019|  1.97k|    networking_registerhandler(dht_get_net(c->dht), NET_PACKET_COOKIE_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht_get_net(c->dht), NET_PACKET_COOKIE_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
 3020|  1.97k|    networking_registerhandler(dht_get_net(c->dht), NET_PACKET_COOKIE_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht_get_net(c->dht), NET_PACKET_COOKIE_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
 3021|  1.97k|    networking_registerhandler(dht_get_net(c->dht), NET_PACKET_CRYPTO_HS, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht_get_net(c->dht), NET_PACKET_CRYPTO_HS, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
 3022|  1.97k|    networking_registerhandler(dht_get_net(c->dht), NET_PACKET_CRYPTO_DATA, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht_get_net(c->dht), NET_PACKET_CRYPTO_DATA, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
 3023|  1.97k|    crypto_memzero(c, sizeof(Net_Crypto));
 3024|  1.97k|    mem_delete(mem, c);
 3025|  1.97k|}
net_crypto.c:crypt_connection_id_is_valid:
  185|    363|{
  186|    363|    if ((uint32_t)crypt_connection_id >= c->crypto_connections_length) {
  ------------------
  |  Branch (186:9): [True: 363, False: 0]
  ------------------
  187|    363|        return false;
  188|    363|    }
  189|       |
  190|      0|    if (c->crypto_connections == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (190:9): [True: 0, False: 0]
  ------------------
  191|      0|        return false;
  192|      0|    }
  193|       |
  194|      0|    const Crypto_Conn_State status = c->crypto_connections[crypt_connection_id].status;
  195|       |
  196|      0|    return status != CRYPTO_CONN_NO_CONNECTION && status != CRYPTO_CONN_FREE;
  ------------------
  |  Branch (196:12): [True: 0, False: 0]
  |  Branch (196:51): [True: 0, False: 0]
  ------------------
  197|      0|}
net_crypto.c:get_crypto_connection:
  550|    363|{
  551|    363|    if (!crypt_connection_id_is_valid(c, crypt_connection_id)) {
  ------------------
  |  Branch (551:9): [True: 363, False: 0]
  ------------------
  552|    363|        return nullptr;
  ------------------
  |  |   63|    363|#define nullptr NULL
  ------------------
  553|    363|    }
  554|       |
  555|      0|    return &c->crypto_connections[crypt_connection_id];
  556|    363|}

netprof_new:
  139|  3.95k|{
  140|  3.95k|    Net_Profile *np = (Net_Profile *)mem_alloc(mem, sizeof(Net_Profile));
  141|       |
  142|  3.95k|    if (np == nullptr) {
  ------------------
  |  |   63|  3.95k|#define nullptr NULL
  ------------------
  |  Branch (142:9): [True: 0, False: 3.95k]
  ------------------
  143|      0|        LOGGER_ERROR(log, "failed to allocate memory for net profiler");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  144|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  145|      0|    }
  146|       |
  147|  3.95k|    return np;
  148|  3.95k|}
netprof_kill:
  151|  3.95k|{
  152|  3.95k|    if (net_profile != nullptr) {
  ------------------
  |  |   63|  3.95k|#define nullptr NULL
  ------------------
  |  Branch (152:9): [True: 3.95k, False: 0]
  ------------------
  153|  3.95k|        mem_delete(mem, net_profile);
  154|  3.95k|    }
  155|  3.95k|}

net_socket_from_native:
  368|  1.97k|{
  369|  1.97k|    const Socket res = {(force Socket_Value)sock};
  370|  1.97k|    return res;
  371|  1.97k|}
net_invalid_socket:
  374|  1.97k|{
  375|  1.97k|    return net_socket_from_native(INVALID_SOCKET);
  ------------------
  |  |  359|  1.97k|#define INVALID_SOCKET (-1)
  ------------------
  376|  1.97k|}
net_family_unspec:
  379|  3.95k|{
  380|  3.95k|    return family_unspec;
  381|  3.95k|}
net_family_ipv4:
  384|  14.9k|{
  385|  14.9k|    return family_ipv4;
  386|  14.9k|}
net_family_ipv6:
  389|  7.49k|{
  390|  7.49k|    return family_ipv6;
  391|  7.49k|}
net_family_tcp_ipv4:
  404|    772|{
  405|    772|    return family_tcp_ipv4;
  406|    772|}
net_family_tcp_ipv6:
  409|  9.04k|{
  410|  9.04k|    return family_tcp_ipv6;
  411|  9.04k|}
net_family_is_unspec:
  424|  13.9k|{
  425|  13.9k|    return family.value == family_unspec.value;
  426|  13.9k|}
net_family_is_ipv4:
  429|  58.3k|{
  430|  58.3k|    return family.value == family_ipv4.value;
  431|  58.3k|}
net_family_is_ipv6:
  434|  42.9k|{
  435|  42.9k|    return family.value == family_ipv6.value;
  436|  42.9k|}
net_family_is_tcp_ipv4:
  449|  15.3k|{
  450|  15.3k|    return family.value == family_tcp_ipv4.value;
  451|  15.3k|}
net_family_is_tcp_ipv6:
  454|  8.99k|{
  455|  8.99k|    return family.value == family_tcp_ipv6.value;
  456|  8.99k|}
sock_valid:
  469|  1.97k|{
  470|  1.97k|    const Socket invalid_socket = net_invalid_socket();
  471|  1.97k|    return sock.value != invalid_socket.value;
  472|  1.97k|}
os_network:
  681|  1.97k|{
  682|  1.97k|#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
  683|  1.97k|    if ((true)) {
  ------------------
  |  Branch (683:9): [Folded - Ignored]
  ------------------
  684|  1.97k|        return nullptr;
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  685|  1.97k|    }
  686|      0|#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  687|       |#ifdef OS_WIN32
  688|       |    WSADATA wsaData;
  689|       |
  690|       |    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != NO_ERROR) {
  691|       |        return nullptr;
  692|       |    }
  693|       |#endif /* OS_WIN32 */
  694|      0|    return &os_network_obj;
  695|  1.97k|}
kill_sock:
  929|  1.97k|{
  930|  1.97k|    ns->funcs->close(ns->obj, sock);
  931|  1.97k|}
set_socket_nonblock:
  934|  1.97k|{
  935|  1.97k|    return ns->funcs->socket_nonblock(ns->obj, sock, true) == 0;
  936|  1.97k|}
set_socket_nosigpipe:
  939|  1.97k|{
  940|       |#if defined(__APPLE__)
  941|       |    int set = 1;
  942|       |    return net_setsockopt(ns, sock, SOL_SOCKET, SO_NOSIGPIPE, &set, sizeof(int)) == 0;
  943|       |#else
  944|  1.97k|    return true;
  945|  1.97k|#endif /* __APPLE__ */
  946|  1.97k|}
set_socket_dualstack:
  959|  1.97k|{
  960|  1.97k|    int ipv6only = 0;
  961|  1.97k|    size_t optsize = sizeof(ipv6only);
  962|  1.97k|    const int res = net_getsockopt(ns, sock, IPPROTO_IPV6, IPV6_V6ONLY, &ipv6only, &optsize);
  963|       |
  964|  1.97k|    if ((res == 0) && (ipv6only == 0)) {
  ------------------
  |  Branch (964:9): [True: 1.97k, False: 0]
  |  Branch (964:23): [True: 1.97k, False: 0]
  ------------------
  965|  1.97k|        return true;
  966|  1.97k|    }
  967|       |
  968|      0|    ipv6only = 0;
  969|      0|    return net_setsockopt(ns, sock, IPPROTO_IPV6, IPV6_V6ONLY, &ipv6only, sizeof(ipv6only)) == 0;
  970|  1.97k|}
networking_registerhandler:
 1160|   124k|{
 1161|   124k|    net->packethandlers[byte].function = cb;
 1162|   124k|    net->packethandlers[byte].object = object;
 1163|   124k|}
new_networking_ex:
 1209|  1.97k|{
 1210|       |    /* If both from and to are 0, use default port range
 1211|       |     * If one is 0 and the other is non-0, use the non-0 value as only port
 1212|       |     * If from > to, swap
 1213|       |     */
 1214|  1.97k|    if (port_from == 0 && port_to == 0) {
  ------------------
  |  Branch (1214:9): [True: 1.97k, False: 0]
  |  Branch (1214:27): [True: 1.97k, False: 0]
  ------------------
 1215|  1.97k|        port_from = TOX_PORTRANGE_FROM;
  ------------------
  |  |  162|  1.97k|#define TOX_PORTRANGE_FROM 33445
  ------------------
 1216|  1.97k|        port_to = TOX_PORTRANGE_TO;
  ------------------
  |  |  163|  1.97k|#define TOX_PORTRANGE_TO   33545
  ------------------
 1217|  1.97k|    } else if (port_from == 0 && port_to != 0) {
  ------------------
  |  Branch (1217:16): [True: 0, False: 0]
  |  Branch (1217:34): [True: 0, False: 0]
  ------------------
 1218|      0|        port_from = port_to;
 1219|      0|    } else if (port_from != 0 && port_to == 0) {
  ------------------
  |  Branch (1219:16): [True: 0, False: 0]
  |  Branch (1219:34): [True: 0, False: 0]
  ------------------
 1220|      0|        port_to = port_from;
 1221|      0|    } else if (port_from > port_to) {
  ------------------
  |  Branch (1221:16): [True: 0, False: 0]
  ------------------
 1222|      0|        const uint16_t temp_port = port_from;
 1223|      0|        port_from = port_to;
 1224|      0|        port_to = temp_port;
 1225|      0|    }
 1226|       |
 1227|  1.97k|    if (error != nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (1227:9): [True: 1.97k, False: 0]
  ------------------
 1228|  1.97k|        *error = 2;
 1229|  1.97k|    }
 1230|       |
 1231|       |    /* maybe check for invalid IPs like 224+.x.y.z? if there is any IP set ever */
 1232|  1.97k|    if (!net_family_is_ipv4(ip->family) && !net_family_is_ipv6(ip->family)) {
  ------------------
  |  Branch (1232:9): [True: 1.97k, False: 0]
  |  Branch (1232:44): [True: 0, False: 1.97k]
  ------------------
 1233|      0|        LOGGER_ERROR(log, "invalid address family: %u", ip->family.value);
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1234|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1235|      0|    }
 1236|       |
 1237|  1.97k|    Networking_Core *temp = (Networking_Core *)mem_alloc(mem, sizeof(Networking_Core));
 1238|       |
 1239|  1.97k|    if (temp == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (1239:9): [True: 0, False: 1.97k]
  ------------------
 1240|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1241|      0|    }
 1242|       |
 1243|  1.97k|    Net_Profile *np = netprof_new(log, mem);
 1244|       |
 1245|  1.97k|    if (np == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (1245:9): [True: 0, False: 1.97k]
  ------------------
 1246|      0|        free(temp);
 1247|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1248|      0|    }
 1249|       |
 1250|  1.97k|    temp->udp_net_profile = np;
 1251|  1.97k|    temp->ns = ns;
 1252|  1.97k|    temp->log = log;
 1253|  1.97k|    temp->mem = mem;
 1254|  1.97k|    temp->family = ip->family;
 1255|  1.97k|    temp->port = 0;
 1256|       |
 1257|       |    /* Initialize our socket. */
 1258|       |    /* add log message what we're creating */
 1259|  1.97k|    temp->sock = net_socket(ns, temp->family, TOX_SOCK_DGRAM, TOX_PROTO_UDP);
  ------------------
  |  |  174|  1.97k|#define TOX_SOCK_DGRAM 2
  ------------------
                  temp->sock = net_socket(ns, temp->family, TOX_SOCK_DGRAM, TOX_PROTO_UDP);
  ------------------
  |  |  177|  1.97k|#define TOX_PROTO_UDP 2
  ------------------
 1260|       |
 1261|       |    /* Check for socket error. */
 1262|  1.97k|    if (!sock_valid(temp->sock)) {
  ------------------
  |  Branch (1262:9): [True: 0, False: 1.97k]
  ------------------
 1263|      0|        const int neterror = net_error();
 1264|      0|        Net_Strerror error_str;
 1265|      0|        LOGGER_ERROR(log, "failed to get a socket?! %d, %s", neterror, net_strerror(neterror, &error_str));
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1266|      0|        netprof_kill(mem, temp->udp_net_profile);
 1267|      0|        mem_delete(mem, temp);
 1268|       |
 1269|      0|        if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1269:13): [True: 0, False: 0]
  ------------------
 1270|      0|            *error = 1;
 1271|      0|        }
 1272|       |
 1273|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1274|      0|    }
 1275|       |
 1276|       |    /* Functions to increase the size of the send and receive UDP buffers.
 1277|       |     */
 1278|  1.97k|    int n = 1024 * 1024 * 2;
 1279|       |
 1280|  1.97k|    if (net_setsockopt(ns, temp->sock, SOL_SOCKET, SO_RCVBUF, &n, sizeof(n)) != 0) {
  ------------------
  |  Branch (1280:9): [True: 0, False: 1.97k]
  ------------------
 1281|      0|        LOGGER_WARNING(log, "failed to set socket option %d", SO_RCVBUF);
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1282|      0|    }
 1283|       |
 1284|  1.97k|    if (net_setsockopt(ns, temp->sock, SOL_SOCKET, SO_SNDBUF, &n, sizeof(n)) != 0) {
  ------------------
  |  Branch (1284:9): [True: 0, False: 1.97k]
  ------------------
 1285|      0|        LOGGER_WARNING(log, "failed to set socket option %d", SO_SNDBUF);
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1286|      0|    }
 1287|       |
 1288|       |    /* Enable broadcast on socket */
 1289|  1.97k|    int broadcast = 1;
 1290|       |
 1291|  1.97k|    if (net_setsockopt(ns, temp->sock, SOL_SOCKET, SO_BROADCAST, &broadcast, sizeof(broadcast)) != 0) {
  ------------------
  |  Branch (1291:9): [True: 0, False: 1.97k]
  ------------------
 1292|      0|        LOGGER_ERROR(log, "failed to set socket option %d", SO_BROADCAST);
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1293|      0|    }
 1294|       |
 1295|       |    /* iOS UDP sockets are weird and apparently can SIGPIPE */
 1296|  1.97k|    if (!set_socket_nosigpipe(ns, temp->sock)) {
  ------------------
  |  Branch (1296:9): [True: 0, False: 1.97k]
  ------------------
 1297|      0|        kill_networking(temp);
 1298|       |
 1299|      0|        if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1299:13): [True: 0, False: 0]
  ------------------
 1300|      0|            *error = 1;
 1301|      0|        }
 1302|       |
 1303|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1304|      0|    }
 1305|       |
 1306|       |    /* Set socket nonblocking. */
 1307|  1.97k|    if (!set_socket_nonblock(ns, temp->sock)) {
  ------------------
  |  Branch (1307:9): [True: 0, False: 1.97k]
  ------------------
 1308|      0|        kill_networking(temp);
 1309|       |
 1310|      0|        if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1310:13): [True: 0, False: 0]
  ------------------
 1311|      0|            *error = 1;
 1312|      0|        }
 1313|       |
 1314|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1315|      0|    }
 1316|       |
 1317|       |    /* Bind our socket to port PORT and the given IP address (usually 0.0.0.0 or ::) */
 1318|  1.97k|    uint16_t *portptr = nullptr;
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
 1319|  1.97k|    Network_Addr addr = {{0}};
 1320|       |
 1321|  1.97k|    if (net_family_is_ipv4(temp->family)) {
  ------------------
  |  Branch (1321:9): [True: 0, False: 1.97k]
  ------------------
 1322|      0|        struct sockaddr_in *addr4 = (struct sockaddr_in *)&addr.addr;
 1323|       |
 1324|      0|        addr.size = sizeof(struct sockaddr_in);
 1325|      0|        addr4->sin_family = AF_INET;
 1326|      0|        addr4->sin_port = 0;
 1327|      0|        fill_addr4(&ip->ip.v4, &addr4->sin_addr);
 1328|       |
 1329|      0|        portptr = &addr4->sin_port;
 1330|  1.97k|    } else if (net_family_is_ipv6(temp->family)) {
  ------------------
  |  Branch (1330:16): [True: 1.97k, False: 0]
  ------------------
 1331|  1.97k|        struct sockaddr_in6 *addr6 = (struct sockaddr_in6 *)&addr.addr;
 1332|       |
 1333|  1.97k|        addr.size = sizeof(struct sockaddr_in6);
 1334|  1.97k|        addr6->sin6_family = AF_INET6;
 1335|  1.97k|        addr6->sin6_port = 0;
 1336|  1.97k|        fill_addr6(&ip->ip.v6, &addr6->sin6_addr);
 1337|       |
 1338|  1.97k|        addr6->sin6_flowinfo = 0;
 1339|  1.97k|        addr6->sin6_scope_id = 0;
 1340|       |
 1341|  1.97k|        portptr = &addr6->sin6_port;
 1342|  1.97k|    } else {
 1343|      0|        mem_delete(mem, temp);
 1344|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1345|      0|    }
 1346|       |
 1347|  1.97k|    if (net_family_is_ipv6(ip->family)) {
  ------------------
  |  Branch (1347:9): [True: 1.97k, False: 0]
  ------------------
 1348|  1.97k|        const bool is_dualstack = set_socket_dualstack(ns, temp->sock);
 1349|       |
 1350|  1.97k|        if (is_dualstack) {
  ------------------
  |  Branch (1350:13): [True: 1.97k, False: 0]
  ------------------
 1351|  1.97k|            LOGGER_TRACE(log, "Dual-stack socket: enabled");
  ------------------
  |  |   76|  1.97k|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|  1.97k|    do {                                                                         \
  |  |  |  |   70|  1.97k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  3.95k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|  1.97k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1352|  1.97k|        } else {
 1353|      0|            LOGGER_ERROR(log, "Dual-stack socket failed to enable, won't be able to receive from/send to IPv4 addresses");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1354|      0|        }
 1355|       |
 1356|  1.97k|#ifndef ESP_PLATFORM
 1357|       |        /* multicast local nodes */
 1358|  1.97k|        struct ipv6_mreq mreq = {{{{0}}}};
 1359|  1.97k|        mreq.ipv6mr_multiaddr.s6_addr[0] = 0xFF;
 1360|  1.97k|        mreq.ipv6mr_multiaddr.s6_addr[1] = 0x02;
 1361|  1.97k|        mreq.ipv6mr_multiaddr.s6_addr[15] = 0x01;
 1362|  1.97k|        mreq.ipv6mr_interface = 0;
 1363|       |
 1364|  1.97k|        const int res = net_setsockopt(ns, temp->sock, IPPROTO_IPV6, IPV6_ADD_MEMBERSHIP, &mreq, sizeof(mreq));
 1365|       |
 1366|  1.97k|        const int neterror = net_error();
 1367|  1.97k|        Net_Strerror error_str;
 1368|       |
 1369|  1.97k|        if (res < 0) {
  ------------------
  |  Branch (1369:13): [True: 0, False: 1.97k]
  ------------------
 1370|      0|            LOGGER_INFO(log, "Failed to activate local multicast membership in FF02::1. (%d, %s)", neterror, net_strerror(neterror, &error_str));
  ------------------
  |  |   78|      0|#define LOGGER_INFO(log, ...)    LOGGER_WRITE(log, LOGGER_LEVEL_INFO, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1371|  1.97k|        } else {
 1372|  1.97k|            LOGGER_TRACE(log, "Local multicast group joined successfully. (%d, %s)", neterror, net_strerror(neterror, &error_str));
  ------------------
  |  |   76|  1.97k|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|  1.97k|    do {                                                                         \
  |  |  |  |   70|  1.97k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  3.95k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|  1.97k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1373|  1.97k|        }
 1374|  1.97k|#endif /* ESP_PLATFORM */
 1375|  1.97k|    }
 1376|       |
 1377|       |    /* A hanging program or a different user might block the standard port.
 1378|       |     * As long as it isn't a parameter coming from the commandline,
 1379|       |     * try a few ports after it, to see if we can find a "free" one.
 1380|       |     *
 1381|       |     * If we go on without binding, the first sendto() automatically binds to
 1382|       |     * a free port chosen by the system (i.e. anything from 1024 to 65535).
 1383|       |     *
 1384|       |     * Returning NULL after bind fails has both advantages and disadvantages:
 1385|       |     * advantage:
 1386|       |     *   we can rely on getting the port in the range 33445..33450, which
 1387|       |     *   enables us to tell joe user to open their firewall to a small range
 1388|       |     *
 1389|       |     * disadvantage:
 1390|       |     *   some clients might not test return of tox_new(), blindly assuming that
 1391|       |     *   it worked ok (which it did previously without a successful bind)
 1392|       |     */
 1393|  1.97k|    uint16_t port_to_try = port_from;
 1394|  1.97k|    *portptr = net_htons(port_to_try);
 1395|       |
 1396|  1.97k|    for (uint16_t tries = port_from; tries <= port_to; ++tries) {
  ------------------
  |  Branch (1396:38): [True: 1.97k, False: 0]
  ------------------
 1397|  1.97k|        const int res = net_bind(ns, temp->sock, &addr);
 1398|       |
 1399|  1.97k|        if (res == 0) {
  ------------------
  |  Branch (1399:13): [True: 1.97k, False: 0]
  ------------------
 1400|  1.97k|            temp->port = *portptr;
 1401|       |
 1402|  1.97k|            Ip_Ntoa ip_str;
 1403|  1.97k|            LOGGER_DEBUG(log, "Bound successfully to %s:%u", net_ip_ntoa(ip, &ip_str),
  ------------------
  |  |   77|  1.97k|#define LOGGER_DEBUG(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_DEBUG, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|  1.97k|    do {                                                                         \
  |  |  |  |   70|  1.97k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  3.95k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|  1.97k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1404|  1.97k|                         net_ntohs(temp->port));
 1405|       |
 1406|       |            /* errno isn't reset on success, only set on failure, the failed
 1407|       |             * binds with parallel clients yield a -EPERM to the outside if
 1408|       |             * errno isn't cleared here */
 1409|  1.97k|            if (tries > 0) {
  ------------------
  |  Branch (1409:17): [True: 1.97k, False: 0]
  ------------------
 1410|  1.97k|                errno = 0;
 1411|  1.97k|            }
 1412|       |
 1413|  1.97k|            if (error != nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (1413:17): [True: 1.97k, False: 0]
  ------------------
 1414|  1.97k|                *error = 0;
 1415|  1.97k|            }
 1416|       |
 1417|  1.97k|            return temp;
 1418|  1.97k|        }
 1419|       |
 1420|      0|        ++port_to_try;
 1421|       |
 1422|      0|        if (port_to_try > port_to) {
  ------------------
  |  Branch (1422:13): [True: 0, False: 0]
  ------------------
 1423|      0|            port_to_try = port_from;
 1424|      0|        }
 1425|       |
 1426|      0|        *portptr = net_htons(port_to_try);
 1427|      0|    }
 1428|       |
 1429|      0|    Ip_Ntoa ip_str;
 1430|      0|    const int neterror = net_error();
 1431|      0|    Net_Strerror error_str;
 1432|      0|    LOGGER_ERROR(log, "failed to bind socket: %d, %s IP: %s port_from: %u port_to: %u",
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1433|      0|                 neterror, net_strerror(neterror, &error_str), net_ip_ntoa(ip, &ip_str), port_from, port_to);
 1434|      0|    kill_networking(temp);
 1435|       |
 1436|      0|    if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1436:9): [True: 0, False: 0]
  ------------------
 1437|      0|        *error = 1;
 1438|      0|    }
 1439|       |
 1440|      0|    return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1441|  1.97k|}
kill_networking:
 1461|  1.97k|{
 1462|  1.97k|    if (net == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (1462:9): [True: 0, False: 1.97k]
  ------------------
 1463|      0|        return;
 1464|      0|    }
 1465|       |
 1466|  1.97k|    if (!net_family_is_unspec(net->family)) {
  ------------------
  |  Branch (1466:9): [True: 1.97k, False: 0]
  ------------------
 1467|       |        /* Socket is initialized, so we close it. */
 1468|  1.97k|        kill_sock(net->ns, net->sock);
 1469|  1.97k|    }
 1470|       |
 1471|  1.97k|    netprof_kill(net->mem, net->udp_net_profile);
 1472|  1.97k|    mem_delete(net->mem, net);
 1473|  1.97k|}
ip_reset:
 1586|  1.97k|{
 1587|  1.97k|    if (ip == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (1587:9): [True: 0, False: 1.97k]
  ------------------
 1588|      0|        return;
 1589|      0|    }
 1590|       |
 1591|  1.97k|    *ip = empty_ip;
 1592|  1.97k|}
ipport_reset:
 1598|  12.3k|{
 1599|  12.3k|    if (ipport == nullptr) {
  ------------------
  |  |   63|  12.3k|#define nullptr NULL
  ------------------
  |  Branch (1599:9): [True: 0, False: 12.3k]
  ------------------
 1600|      0|        return;
 1601|      0|    }
 1602|       |
 1603|  12.3k|    *ipport = empty_ip_port;
 1604|  12.3k|}
ip_init:
 1608|  1.97k|{
 1609|  1.97k|    if (ip == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (1609:9): [True: 0, False: 1.97k]
  ------------------
 1610|      0|        return;
 1611|      0|    }
 1612|       |
 1613|  1.97k|    ip_reset(ip);
 1614|  1.97k|    ip->family = ipv6enabled ? net_family_ipv6() : net_family_ipv4();
  ------------------
  |  Branch (1614:18): [True: 1.97k, False: 0]
  ------------------
 1615|  1.97k|}
ip_isset:
 1619|  2.10k|{
 1620|  2.10k|    if (ip == nullptr) {
  ------------------
  |  |   63|  2.10k|#define nullptr NULL
  ------------------
  |  Branch (1620:9): [True: 0, False: 2.10k]
  ------------------
 1621|      0|        return false;
 1622|      0|    }
 1623|       |
 1624|  2.10k|    return !net_family_is_unspec(ip->family);
 1625|  2.10k|}
ipport_isset:
 1629|  58.6k|{
 1630|  58.6k|    if (ipport == nullptr) {
  ------------------
  |  |   63|  58.6k|#define nullptr NULL
  ------------------
  |  Branch (1630:9): [True: 0, False: 58.6k]
  ------------------
 1631|      0|        return false;
 1632|      0|    }
 1633|       |
 1634|  58.6k|    if (ipport->port == 0) {
  ------------------
  |  Branch (1634:9): [True: 56.4k, False: 2.10k]
  ------------------
 1635|  56.4k|        return false;
 1636|  56.4k|    }
 1637|       |
 1638|  2.10k|    return ip_isset(&ipport->ip);
 1639|  58.6k|}
bin_pack_ip_port:
 1691|  11.7k|{
 1692|  11.7k|    bool is_ipv4;
 1693|  11.7k|    uint8_t family;
 1694|       |
 1695|  11.7k|    if (net_family_is_ipv4(ip_port->ip.family)) {
  ------------------
  |  Branch (1695:9): [True: 9.82k, False: 1.95k]
  ------------------
 1696|       |        // TODO(irungentoo): use functions to convert endianness
 1697|  9.82k|        is_ipv4 = true;
 1698|  9.82k|        family = TOX_AF_INET;
  ------------------
  |  |  168|  9.82k|#define TOX_AF_INET 2
  ------------------
 1699|  9.82k|    } else if (net_family_is_tcp_ipv4(ip_port->ip.family)) {
  ------------------
  |  Branch (1699:16): [True: 1.30k, False: 648]
  ------------------
 1700|  1.30k|        is_ipv4 = true;
 1701|  1.30k|        family = TOX_TCP_INET;
  ------------------
  |  |  170|  1.30k|#define TOX_TCP_INET 130
  ------------------
 1702|  1.30k|    } else if (net_family_is_ipv6(ip_port->ip.family)) {
  ------------------
  |  Branch (1702:16): [True: 618, False: 30]
  ------------------
 1703|    618|        is_ipv4 = false;
 1704|    618|        family = TOX_AF_INET6;
  ------------------
  |  |  169|    618|#define TOX_AF_INET6 10
  ------------------
 1705|    618|    } else if (net_family_is_tcp_ipv6(ip_port->ip.family)) {
  ------------------
  |  Branch (1705:16): [True: 30, False: 0]
  ------------------
 1706|     30|        is_ipv4 = false;
 1707|     30|        family = TOX_TCP_INET6;
  ------------------
  |  |  171|     30|#define TOX_TCP_INET6 138
  ------------------
 1708|     30|    } else {
 1709|      0|        Ip_Ntoa ip_str;
 1710|       |        // TODO(iphydf): Find out why we're trying to pack invalid IPs, stop
 1711|       |        // doing that, and turn this into an error.
 1712|      0|        LOGGER_TRACE(logger, "cannot pack invalid IP: %s", net_ip_ntoa(&ip_port->ip, &ip_str));
  ------------------
  |  |   76|      0|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1713|      0|        return false;
 1714|      0|    }
 1715|       |
 1716|  11.7k|    return bin_pack_u08_b(bp, family)
  ------------------
  |  Branch (1716:12): [True: 11.7k, False: 0]
  ------------------
 1717|  11.7k|           && bin_pack_ip(bp, &ip_port->ip, is_ipv4)
  ------------------
  |  Branch (1717:15): [True: 11.7k, False: 0]
  ------------------
 1718|  11.7k|           && bin_pack_u16_b(bp, net_ntohs(ip_port->port));
  ------------------
  |  Branch (1718:15): [True: 11.7k, False: 0]
  ------------------
 1719|  11.7k|}
pack_ip_port:
 1728|    668|{
 1729|    668|    const uint32_t size = bin_pack_obj_size(bin_pack_ip_port_handler, ip_port, logger);
 1730|       |
 1731|    668|    if (size > length) {
  ------------------
  |  Branch (1731:9): [True: 0, False: 668]
  ------------------
 1732|      0|        return -1;
 1733|      0|    }
 1734|       |
 1735|    668|    if (!bin_pack_obj(bin_pack_ip_port_handler, ip_port, logger, data, length)) {
  ------------------
  |  Branch (1735:9): [True: 0, False: 668]
  ------------------
 1736|      0|        return -1;
 1737|      0|    }
 1738|       |
 1739|    668|    assert(size < INT_MAX);
 1740|    668|    return (int)size;
 1741|    668|}
unpack_ip_port:
 1744|  13.3k|{
 1745|  13.3k|    if (data == nullptr) {
  ------------------
  |  |   63|  13.3k|#define nullptr NULL
  ------------------
  |  Branch (1745:9): [True: 0, False: 13.3k]
  ------------------
 1746|      0|        return -1;
 1747|      0|    }
 1748|       |
 1749|  13.3k|    bool is_ipv4;
 1750|  13.3k|    Family host_family;
 1751|       |
 1752|  13.3k|    if (data[0] == TOX_AF_INET) {
  ------------------
  |  |  168|  13.3k|#define TOX_AF_INET 2
  ------------------
  |  Branch (1752:9): [True: 10.4k, False: 2.91k]
  ------------------
 1753|  10.4k|        is_ipv4 = true;
 1754|  10.4k|        host_family = net_family_ipv4();
 1755|  10.4k|    } else if (data[0] == TOX_TCP_INET) {
  ------------------
  |  |  170|  2.91k|#define TOX_TCP_INET 130
  ------------------
  |  Branch (1755:16): [True: 898, False: 2.02k]
  ------------------
 1756|    898|        if (!tcp_enabled) {
  ------------------
  |  Branch (1756:13): [True: 126, False: 772]
  ------------------
 1757|    126|            return -1;
 1758|    126|        }
 1759|       |
 1760|    772|        is_ipv4 = true;
 1761|    772|        host_family = net_family_tcp_ipv4();
 1762|  2.02k|    } else if (data[0] == TOX_AF_INET6) {
  ------------------
  |  |  169|  2.02k|#define TOX_AF_INET6 10
  ------------------
  |  Branch (1762:16): [True: 1.03k, False: 984]
  ------------------
 1763|  1.03k|        is_ipv4 = false;
 1764|  1.03k|        host_family = net_family_ipv6();
 1765|  1.03k|    } else if (data[0] == TOX_TCP_INET6) {
  ------------------
  |  |  171|    984|#define TOX_TCP_INET6 138
  ------------------
  |  Branch (1765:16): [True: 87, False: 897]
  ------------------
 1766|     87|        if (!tcp_enabled) {
  ------------------
  |  Branch (1766:13): [True: 11, False: 76]
  ------------------
 1767|     11|            return -1;
 1768|     11|        }
 1769|       |
 1770|     76|        is_ipv4 = false;
 1771|     76|        host_family = net_family_tcp_ipv6();
 1772|    897|    } else {
 1773|    897|        return -1;
 1774|    897|    }
 1775|       |
 1776|  12.3k|    ipport_reset(ip_port);
 1777|       |
 1778|  12.3k|    if (is_ipv4) {
  ------------------
  |  Branch (1778:9): [True: 11.2k, False: 1.11k]
  ------------------
 1779|  11.2k|        const uint32_t size = 1 + SIZE_IP4 + sizeof(uint16_t);
  ------------------
  |  |  185|  11.2k|#define SIZE_IP4 4
  ------------------
 1780|       |
 1781|  11.2k|        if (size > length) {
  ------------------
  |  Branch (1781:13): [True: 49, False: 11.1k]
  ------------------
 1782|     49|            return -1;
 1783|     49|        }
 1784|       |
 1785|  11.1k|        ip_port->ip.family = host_family;
 1786|  11.1k|        memcpy(ip_port->ip.ip.v4.uint8, data + 1, SIZE_IP4);
  ------------------
  |  |  185|  11.1k|#define SIZE_IP4 4
  ------------------
 1787|  11.1k|        memcpy(&ip_port->port, data + 1 + SIZE_IP4, sizeof(uint16_t));
  ------------------
  |  |  185|  11.1k|#define SIZE_IP4 4
  ------------------
 1788|  11.1k|        return size;
 1789|  11.2k|    } else {
 1790|  1.11k|        const uint32_t size = 1 + SIZE_IP6 + sizeof(uint16_t);
  ------------------
  |  |  186|  1.11k|#define SIZE_IP6 16
  ------------------
 1791|       |
 1792|  1.11k|        if (size > length) {
  ------------------
  |  Branch (1792:13): [True: 66, False: 1.04k]
  ------------------
 1793|     66|            return -1;
 1794|     66|        }
 1795|       |
 1796|  1.04k|        ip_port->ip.family = host_family;
 1797|  1.04k|        memcpy(ip_port->ip.ip.v6.uint8, data + 1, SIZE_IP6);
  ------------------
  |  |  186|  1.04k|#define SIZE_IP6 16
  ------------------
 1798|  1.04k|        memcpy(&ip_port->port, data + 1 + SIZE_IP6, sizeof(uint16_t));
  ------------------
  |  |  186|  1.04k|#define SIZE_IP6 16
  ------------------
 1799|  1.04k|        return size;
 1800|  1.11k|    }
 1801|  12.3k|}
net_socket:
 2209|  1.97k|{
 2210|  1.97k|    const int platform_domain = make_family(domain);
 2211|  1.97k|    const int platform_type = make_socktype(type);
 2212|  1.97k|    const int platform_prot = make_proto(protocol);
 2213|  1.97k|    return ns->funcs->socket(ns->obj, platform_domain, platform_type, platform_prot);
 2214|  1.97k|}
net_htons:
 2228|  4.57k|{
 2229|  4.57k|    return htons(hostshort);
 2230|  4.57k|}
net_ntohs:
 2238|  12.3k|{
 2239|  12.3k|    return ntohs(hostshort);
 2240|  12.3k|}
net_pack_u16:
 2249|    388|{
 2250|    388|    bytes[0] = (v >> 8) & 0xff;
 2251|    388|    bytes[1] = v & 0xff;
 2252|    388|    return sizeof(v);
 2253|    388|}
net_pack_u32:
 2256|    194|{
 2257|    194|    uint8_t *p = bytes;
 2258|    194|    p += net_pack_u16(p, (v >> 16) & 0xffff);
 2259|    194|    p += net_pack_u16(p, v & 0xffff);
 2260|    194|    return p - bytes;
 2261|    194|}
net_pack_u64:
 2264|     97|{
 2265|     97|    uint8_t *p = bytes;
 2266|     97|    p += net_pack_u32(p, (v >> 32) & 0xffffffff);
 2267|     97|    p += net_pack_u32(p, v & 0xffffffff);
 2268|     97|    return p - bytes;
 2269|     97|}
net_unpack_u16:
 2278|    920|{
 2279|    920|    const uint8_t hi = bytes[0];
 2280|    920|    const uint8_t lo = bytes[1];
 2281|    920|    *v = ((uint16_t)hi << 8) | lo;
 2282|    920|    return sizeof(*v);
 2283|    920|}
net_unpack_u32:
 2286|    460|{
 2287|    460|    const uint8_t *p = bytes;
 2288|    460|    uint16_t hi;
 2289|    460|    uint16_t lo;
 2290|    460|    p += net_unpack_u16(p, &hi);
 2291|    460|    p += net_unpack_u16(p, &lo);
 2292|    460|    *v = ((uint32_t)hi << 16) | lo;
 2293|    460|    return p - bytes;
 2294|    460|}
net_unpack_u64:
 2297|    230|{
 2298|    230|    const uint8_t *p = bytes;
 2299|    230|    uint32_t hi;
 2300|    230|    uint32_t lo;
 2301|    230|    p += net_unpack_u32(p, &hi);
 2302|    230|    p += net_unpack_u32(p, &lo);
 2303|    230|    *v = ((uint64_t)hi << 32) | lo;
 2304|    230|    return p - bytes;
 2305|    230|}
net_error:
 2313|  1.97k|{
 2314|       |#ifdef OS_WIN32
 2315|       |    return WSAGetLastError();
 2316|       |#else
 2317|  1.97k|    return errno;
 2318|  1.97k|#endif /* OS_WIN32 */
 2319|  1.97k|}
network.c:net_setsockopt:
  708|  7.90k|{
  709|  7.90k|    return ns->funcs->setsockopt(ns->obj, sock, level, optname, optval, optlen);
  710|  7.90k|}
network.c:net_getsockopt:
  713|  1.97k|{
  714|  1.97k|    return ns->funcs->getsockopt(ns->obj, sock, level, optname, optval, optlen);
  715|  1.97k|}
network.c:fill_addr6:
  321|  1.97k|{
  322|  1.97k|    memcpy(addr->s6_addr, ip->uint8, sizeof(ip->uint8));
  323|  1.97k|}
network.c:net_bind:
  918|  1.97k|{
  919|  1.97k|    return ns->funcs->bind(ns->obj, sock, addr);
  920|  1.97k|}
network.c:bin_pack_ip:
 1678|  11.7k|{
 1679|  11.7k|    if (is_ipv4) {
  ------------------
  |  Branch (1679:9): [True: 11.1k, False: 648]
  ------------------
 1680|  11.1k|        return bin_pack_bin_b(bp, ip->ip.v4.uint8, SIZE_IP4);
  ------------------
  |  |  185|  11.1k|#define SIZE_IP4 4
  ------------------
 1681|  11.1k|    } else {
 1682|    648|        return bin_pack_bin_b(bp, ip->ip.v6.uint8, SIZE_IP6);
  ------------------
  |  |  186|    648|#define SIZE_IP6 16
  ------------------
 1683|    648|    }
 1684|  11.7k|}
network.c:bin_pack_ip_port_handler:
 1722|  1.33k|{
 1723|  1.33k|    const IP_Port *ip_port = (const IP_Port *)obj;
 1724|  1.33k|    return bin_pack_ip_port(bp, logger, ip_port);
 1725|  1.33k|}
network.c:make_family:
  256|  1.97k|{
  257|  1.97k|    switch (tox_family.value) {
  258|      0|        case TOX_AF_INET:
  ------------------
  |  |  168|      0|#define TOX_AF_INET 2
  ------------------
  |  Branch (258:9): [True: 0, False: 1.97k]
  ------------------
  259|      0|        case TCP_INET:
  ------------------
  |  |  181|      0|#define TCP_INET (TOX_AF_INET6 + 2)
  |  |  ------------------
  |  |  |  |  169|      0|#define TOX_AF_INET6 10
  |  |  ------------------
  ------------------
  |  Branch (259:9): [True: 0, False: 1.97k]
  ------------------
  260|      0|            return AF_INET;
  261|       |
  262|  1.97k|        case TOX_AF_INET6:
  ------------------
  |  |  169|  1.97k|#define TOX_AF_INET6 10
  ------------------
  |  Branch (262:9): [True: 1.97k, False: 0]
  ------------------
  263|  1.97k|        case TCP_INET6:
  ------------------
  |  |  182|  1.97k|#define TCP_INET6 (TOX_AF_INET6 + 3)
  |  |  ------------------
  |  |  |  |  169|  1.97k|#define TOX_AF_INET6 10
  |  |  ------------------
  ------------------
  |  Branch (263:9): [True: 0, False: 1.97k]
  ------------------
  264|  1.97k|            return AF_INET6;
  265|       |
  266|      0|        case TOX_AF_UNSPEC:
  ------------------
  |  |  167|      0|#define TOX_AF_UNSPEC 0
  ------------------
  |  Branch (266:9): [True: 0, False: 1.97k]
  ------------------
  267|      0|            return AF_UNSPEC;
  268|       |
  269|      0|        default:
  ------------------
  |  Branch (269:9): [True: 0, False: 1.97k]
  ------------------
  270|      0|            return tox_family.value;
  271|  1.97k|    }
  272|  1.97k|}
network.c:make_socktype:
  242|  1.97k|{
  243|  1.97k|    switch (type) {
  244|      0|        case TOX_SOCK_STREAM:
  ------------------
  |  |  173|      0|#define TOX_SOCK_STREAM 1
  ------------------
  |  Branch (244:9): [True: 0, False: 1.97k]
  ------------------
  245|      0|            return SOCK_STREAM;
  246|       |
  247|  1.97k|        case TOX_SOCK_DGRAM:
  ------------------
  |  |  174|  1.97k|#define TOX_SOCK_DGRAM 2
  ------------------
  |  Branch (247:9): [True: 1.97k, False: 0]
  ------------------
  248|  1.97k|            return SOCK_DGRAM;
  249|       |
  250|      0|        default:
  ------------------
  |  Branch (250:9): [True: 0, False: 1.97k]
  ------------------
  251|      0|            return type;
  252|  1.97k|    }
  253|  1.97k|}
network.c:make_proto:
  228|  1.97k|{
  229|  1.97k|    switch (proto) {
  230|      0|        case TOX_PROTO_TCP:
  ------------------
  |  |  176|      0|#define TOX_PROTO_TCP 1
  ------------------
  |  Branch (230:9): [True: 0, False: 1.97k]
  ------------------
  231|      0|            return IPPROTO_TCP;
  232|       |
  233|  1.97k|        case TOX_PROTO_UDP:
  ------------------
  |  |  177|  1.97k|#define TOX_PROTO_UDP 2
  ------------------
  |  Branch (233:9): [True: 1.97k, False: 0]
  ------------------
  234|  1.97k|            return IPPROTO_UDP;
  235|       |
  236|      0|        default:
  ------------------
  |  Branch (236:9): [True: 0, False: 1.97k]
  ------------------
  237|      0|            return proto;
  238|  1.97k|    }
  239|  1.97k|}

new_onion:
  706|  1.97k|{
  707|  1.97k|    if (dht == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (707:9): [True: 0, False: 1.97k]
  ------------------
  708|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  709|      0|    }
  710|       |
  711|  1.97k|    Onion *onion = (Onion *)mem_alloc(mem, sizeof(Onion));
  712|       |
  713|  1.97k|    if (onion == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (713:9): [True: 0, False: 1.97k]
  ------------------
  714|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  715|      0|    }
  716|       |
  717|  1.97k|    onion->log = log;
  718|  1.97k|    onion->dht = dht;
  719|  1.97k|    onion->net = dht_get_net(dht);
  720|  1.97k|    onion->mono_time = mono_time;
  721|  1.97k|    onion->rng = rng;
  722|  1.97k|    onion->mem = mem;
  723|  1.97k|    new_symmetric_key(rng, onion->secret_symmetric_key);
  724|  1.97k|    onion->timestamp = mono_time_get(onion->mono_time);
  725|       |
  726|  1.97k|    const uint8_t *secret_key = dht_get_self_secret_key(dht);
  727|  1.97k|    onion->shared_keys_1 = shared_key_cache_new(log, mono_time, mem, secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   38|  1.97k|#define KEYS_TIMEOUT 600
  ------------------
                  onion->shared_keys_1 = shared_key_cache_new(log, mono_time, mem, secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   37|  1.97k|#define MAX_KEYS_PER_SLOT 4
  ------------------
  728|  1.97k|    onion->shared_keys_2 = shared_key_cache_new(log, mono_time, mem, secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   38|  1.97k|#define KEYS_TIMEOUT 600
  ------------------
                  onion->shared_keys_2 = shared_key_cache_new(log, mono_time, mem, secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   37|  1.97k|#define MAX_KEYS_PER_SLOT 4
  ------------------
  729|  1.97k|    onion->shared_keys_3 = shared_key_cache_new(log, mono_time, mem, secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   38|  1.97k|#define KEYS_TIMEOUT 600
  ------------------
                  onion->shared_keys_3 = shared_key_cache_new(log, mono_time, mem, secret_key, KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   37|  1.97k|#define MAX_KEYS_PER_SLOT 4
  ------------------
  730|       |
  731|  1.97k|    if (onion->shared_keys_1 == nullptr ||
  ------------------
  |  |   63|  3.95k|#define nullptr NULL
  ------------------
  |  Branch (731:9): [True: 0, False: 1.97k]
  ------------------
  732|  1.97k|            onion->shared_keys_2 == nullptr ||
  ------------------
  |  |   63|  3.95k|#define nullptr NULL
  ------------------
  |  Branch (732:13): [True: 0, False: 1.97k]
  ------------------
  733|  1.97k|            onion->shared_keys_3 == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (733:13): [True: 0, False: 1.97k]
  ------------------
  734|       |        // cppcheck-suppress mismatchAllocDealloc
  735|      0|        kill_onion(onion);
  736|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  737|      0|    }
  738|       |
  739|  1.97k|    networking_registerhandler(onion->net, NET_PACKET_ONION_SEND_INITIAL, &handle_send_initial, onion);
  740|  1.97k|    networking_registerhandler(onion->net, NET_PACKET_ONION_SEND_1, &handle_send_1, onion);
  741|  1.97k|    networking_registerhandler(onion->net, NET_PACKET_ONION_SEND_2, &handle_send_2, onion);
  742|       |
  743|  1.97k|    networking_registerhandler(onion->net, NET_PACKET_ONION_RECV_3, &handle_recv_3, onion);
  744|  1.97k|    networking_registerhandler(onion->net, NET_PACKET_ONION_RECV_2, &handle_recv_2, onion);
  745|  1.97k|    networking_registerhandler(onion->net, NET_PACKET_ONION_RECV_1, &handle_recv_1, onion);
  746|       |
  747|  1.97k|    return onion;
  748|  1.97k|}
kill_onion:
  751|  1.97k|{
  752|  1.97k|    if (onion == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (752:9): [True: 0, False: 1.97k]
  ------------------
  753|      0|        return;
  754|      0|    }
  755|       |
  756|  1.97k|    networking_registerhandler(onion->net, NET_PACKET_ONION_SEND_INITIAL, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion->net, NET_PACKET_ONION_SEND_INITIAL, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  757|  1.97k|    networking_registerhandler(onion->net, NET_PACKET_ONION_SEND_1, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion->net, NET_PACKET_ONION_SEND_1, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  758|  1.97k|    networking_registerhandler(onion->net, NET_PACKET_ONION_SEND_2, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion->net, NET_PACKET_ONION_SEND_2, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  759|       |
  760|  1.97k|    networking_registerhandler(onion->net, NET_PACKET_ONION_RECV_3, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion->net, NET_PACKET_ONION_RECV_3, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  761|  1.97k|    networking_registerhandler(onion->net, NET_PACKET_ONION_RECV_2, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion->net, NET_PACKET_ONION_RECV_2, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  762|  1.97k|    networking_registerhandler(onion->net, NET_PACKET_ONION_RECV_1, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion->net, NET_PACKET_ONION_RECV_1, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  763|       |
  764|  1.97k|    crypto_memzero(onion->secret_symmetric_key, sizeof(onion->secret_symmetric_key));
  765|       |
  766|  1.97k|    shared_key_cache_free(onion->shared_keys_1);
  767|  1.97k|    shared_key_cache_free(onion->shared_keys_2);
  768|  1.97k|    shared_key_cache_free(onion->shared_keys_3);
  769|       |
  770|  1.97k|    mem_delete(onion->mem, onion);
  771|  1.97k|}

onion_announce_extra_data_callback:
   76|  1.97k|{
   77|  1.97k|    onion_a->extra_data_max_size = extra_data_max_size;
   78|  1.97k|    onion_a->extra_data_callback = extra_data_callback;
   79|  1.97k|    onion_a->extra_data_object = extra_data_object;
   80|  1.97k|}
new_onion_announce:
  684|  1.97k|{
  685|  1.97k|    if (dht == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (685:9): [True: 0, False: 1.97k]
  ------------------
  686|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  687|      0|    }
  688|       |
  689|  1.97k|    Onion_Announce *onion_a = (Onion_Announce *)mem_alloc(mem, sizeof(Onion_Announce));
  690|       |
  691|  1.97k|    if (onion_a == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (691:9): [True: 0, False: 1.97k]
  ------------------
  692|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  693|      0|    }
  694|       |
  695|  1.97k|    onion_a->log = log;
  696|  1.97k|    onion_a->rng = rng;
  697|  1.97k|    onion_a->mem = mem;
  698|  1.97k|    onion_a->mono_time = mono_time;
  699|  1.97k|    onion_a->dht = dht;
  700|  1.97k|    onion_a->net = dht_get_net(dht);
  701|  1.97k|    onion_a->extra_data_max_size = 0;
  702|  1.97k|    onion_a->extra_data_callback = nullptr;
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  703|  1.97k|    onion_a->extra_data_object = nullptr;
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  704|  1.97k|    new_hmac_key(rng, onion_a->hmac_key);
  705|       |
  706|  1.97k|    onion_a->shared_keys_recv = shared_key_cache_new(log, mono_time, mem, dht_get_self_secret_key(dht), KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   44|  1.97k|#define KEYS_TIMEOUT 600
  ------------------
                  onion_a->shared_keys_recv = shared_key_cache_new(log, mono_time, mem, dht_get_self_secret_key(dht), KEYS_TIMEOUT, MAX_KEYS_PER_SLOT);
  ------------------
  |  |   43|  1.97k|#define MAX_KEYS_PER_SLOT 4
  ------------------
  707|  1.97k|    if (onion_a->shared_keys_recv == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (707:9): [True: 0, False: 1.97k]
  ------------------
  708|       |        // cppcheck-suppress mismatchAllocDealloc
  709|      0|        kill_onion_announce(onion_a);
  710|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  711|      0|    }
  712|       |
  713|  1.97k|    networking_registerhandler(onion_a->net, NET_PACKET_ANNOUNCE_REQUEST, &handle_announce_request, onion_a);
  714|  1.97k|    networking_registerhandler(onion_a->net, NET_PACKET_ANNOUNCE_REQUEST_OLD, &handle_announce_request_old, onion_a);
  715|  1.97k|    networking_registerhandler(onion_a->net, NET_PACKET_ONION_DATA_REQUEST, &handle_data_request, onion_a);
  716|       |
  717|  1.97k|    return onion_a;
  718|  1.97k|}
kill_onion_announce:
  721|  1.97k|{
  722|  1.97k|    if (onion_a == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (722:9): [True: 0, False: 1.97k]
  ------------------
  723|      0|        return;
  724|      0|    }
  725|       |
  726|  1.97k|    networking_registerhandler(onion_a->net, NET_PACKET_ANNOUNCE_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion_a->net, NET_PACKET_ANNOUNCE_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  727|  1.97k|    networking_registerhandler(onion_a->net, NET_PACKET_ANNOUNCE_REQUEST_OLD, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion_a->net, NET_PACKET_ANNOUNCE_REQUEST_OLD, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  728|  1.97k|    networking_registerhandler(onion_a->net, NET_PACKET_ONION_DATA_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion_a->net, NET_PACKET_ONION_DATA_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  729|       |
  730|  1.97k|    crypto_memzero(onion_a->hmac_key, CRYPTO_HMAC_KEY_SIZE);
  ------------------
  |  |  162|  1.97k|#define CRYPTO_HMAC_KEY_SIZE           32
  ------------------
  731|  1.97k|    shared_key_cache_free(onion_a->shared_keys_recv);
  732|       |
  733|  1.97k|    mem_delete(onion_a->mem, onion_a);
  734|  1.97k|}

onion_get_friend:
  172|     95|{
  173|     95|    return &onion_c->friends_list[friend_num];
  174|     95|}
onion_friend_set_gc_public_key:
  187|     95|{
  188|     95|    memcpy(onion_friend->gc_public_key, public_key, ENC_PUBLIC_KEY_SIZE);
  ------------------
  |  |  122|     95|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|     95|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  189|     95|}
onion_friend_set_gc_data:
  192|     95|{
  193|     95|    if (gc_data_length > 0 && gc_data != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (193:9): [True: 0, False: 95]
  |  Branch (193:31): [True: 0, False: 0]
  ------------------
  194|      0|        memcpy(onion_friend->gc_data, gc_data, gc_data_length);
  195|      0|    }
  196|       |
  197|     95|    onion_friend->gc_data_length = gc_data_length;
  198|     95|    onion_friend->is_groupchat = true;
  199|     95|}
onion_get_dht:
  207|  1.97k|{
  208|  1.97k|    return onion_c->dht;
  209|  1.97k|}
onion_get_net_crypto:
  212|  1.97k|{
  213|  1.97k|    return onion_c->c;
  214|  1.97k|}
onion_add_bs_path_node:
  230|  1.92k|{
  231|  1.92k|    if (!net_family_is_ipv4(ip_port->ip.family) && !net_family_is_ipv6(ip_port->ip.family)) {
  ------------------
  |  Branch (231:9): [True: 72, False: 1.85k]
  |  Branch (231:52): [True: 0, False: 72]
  ------------------
  232|      0|        return false;
  233|      0|    }
  234|       |
  235|  45.2k|    for (unsigned int i = 0; i < MAX_PATH_NODES; ++i) {
  ------------------
  |  |   51|  45.2k|#define MAX_PATH_NODES 32
  ------------------
  |  Branch (235:30): [True: 44.2k, False: 1.04k]
  ------------------
  236|  44.2k|        if (pk_equal(public_key, onion_c->path_nodes_bs[i].public_key)) {
  ------------------
  |  Branch (236:13): [True: 888, False: 43.3k]
  ------------------
  237|    888|            return true;
  238|    888|        }
  239|  44.2k|    }
  240|       |
  241|  1.04k|    onion_c->path_nodes_bs[onion_c->path_nodes_index_bs % MAX_PATH_NODES].ip_port = *ip_port;
  ------------------
  |  |   51|  1.04k|#define MAX_PATH_NODES 32
  ------------------
  242|  1.04k|    memcpy(onion_c->path_nodes_bs[onion_c->path_nodes_index_bs % MAX_PATH_NODES].public_key, public_key,
  ------------------
  |  |   51|  1.04k|#define MAX_PATH_NODES 32
  ------------------
  243|  1.04k|           CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|  1.04k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  244|       |
  245|  1.04k|    const uint16_t last = onion_c->path_nodes_index_bs;
  246|  1.04k|    ++onion_c->path_nodes_index_bs;
  247|       |
  248|  1.04k|    if (onion_c->path_nodes_index_bs < last) {
  ------------------
  |  Branch (248:9): [True: 0, False: 1.04k]
  ------------------
  249|      0|        onion_c->path_nodes_index_bs = MAX_PATH_NODES + 1;
  ------------------
  |  |   51|      0|#define MAX_PATH_NODES 32
  ------------------
  250|      0|    }
  251|       |
  252|  1.04k|    return true;
  253|  1.92k|}
onion_backup_nodes:
  291|  1.49k|{
  292|  1.49k|    if (max_num == 0) {
  ------------------
  |  Branch (292:9): [True: 0, False: 1.49k]
  ------------------
  293|      0|        return 0;
  294|      0|    }
  295|       |
  296|  1.49k|    const uint16_t num_nodes = min_u16(onion_c->path_nodes_index, MAX_PATH_NODES);
  ------------------
  |  |   51|  1.49k|#define MAX_PATH_NODES 32
  ------------------
  297|  1.49k|    uint16_t i = 0;
  298|       |
  299|  1.49k|    while (i < max_num && i < num_nodes) {
  ------------------
  |  Branch (299:12): [True: 1.49k, False: 0]
  |  Branch (299:27): [True: 0, False: 1.49k]
  ------------------
  300|      0|        nodes[i] = onion_c->path_nodes[(onion_c->path_nodes_index - (1 + i)) % num_nodes];
  301|      0|        ++i;
  302|      0|    }
  303|       |
  304|  1.70k|    for (uint16_t j = 0; i < max_num && j < MAX_PATH_NODES && j < onion_c->path_nodes_index_bs; ++j) {
  ------------------
  |  |   51|  3.39k|#define MAX_PATH_NODES 32
  ------------------
  |  Branch (304:26): [True: 1.68k, False: 18]
  |  Branch (304:41): [True: 1.68k, False: 0]
  |  Branch (304:63): [True: 211, False: 1.47k]
  ------------------
  305|    211|        bool already_saved = false;
  306|       |
  307|    211|        for (uint16_t k = 0; k < num_nodes; ++k) {
  ------------------
  |  Branch (307:30): [True: 0, False: 211]
  ------------------
  308|      0|            if (pk_equal(nodes[k].public_key, onion_c->path_nodes_bs[j].public_key)) {
  ------------------
  |  Branch (308:17): [True: 0, False: 0]
  ------------------
  309|      0|                already_saved = true;
  310|      0|                break;
  311|      0|            }
  312|      0|        }
  313|       |
  314|    211|        if (!already_saved) {
  ------------------
  |  Branch (314:13): [True: 211, False: 0]
  ------------------
  315|    211|            nodes[i] = onion_c->path_nodes_bs[j];
  316|    211|            ++i;
  317|    211|        }
  318|    211|    }
  319|       |
  320|  1.49k|    return i;
  321|  1.49k|}
onion_friend_num:
 1493|    363|{
 1494|    790|    for (unsigned int i = 0; i < onion_c->num_friends; ++i) {
  ------------------
  |  Branch (1494:30): [True: 427, False: 363]
  ------------------
 1495|    427|        if (!onion_c->friends_list[i].is_valid) {
  ------------------
  |  Branch (1495:13): [True: 0, False: 427]
  ------------------
 1496|      0|            continue;
 1497|      0|        }
 1498|       |
 1499|    427|        if (pk_equal(public_key, onion_c->friends_list[i].real_public_key)) {
  ------------------
  |  Branch (1499:13): [True: 0, False: 427]
  ------------------
 1500|      0|            return i;
 1501|      0|        }
 1502|    427|    }
 1503|       |
 1504|    363|    return -1;
 1505|    363|}
onion_addfriend:
 1536|    363|{
 1537|    363|    const int num = onion_friend_num(onion_c, public_key);
 1538|       |
 1539|    363|    if (num != -1) {
  ------------------
  |  Branch (1539:9): [True: 0, False: 363]
  ------------------
 1540|      0|        return num;
 1541|      0|    }
 1542|       |
 1543|    363|    unsigned int index = -1;
 1544|       |
 1545|    790|    for (unsigned int i = 0; i < onion_c->num_friends; ++i) {
  ------------------
  |  Branch (1545:30): [True: 427, False: 363]
  ------------------
 1546|    427|        if (!onion_c->friends_list[i].is_valid) {
  ------------------
  |  Branch (1546:13): [True: 0, False: 427]
  ------------------
 1547|      0|            index = i;
 1548|      0|            break;
 1549|      0|        }
 1550|    427|    }
 1551|       |
 1552|    363|    if (index == (uint32_t) -1) {
  ------------------
  |  Branch (1552:9): [True: 363, False: 0]
  ------------------
 1553|    363|        if (realloc_onion_friends(onion_c, onion_c->num_friends + 1) == -1) {
  ------------------
  |  Branch (1553:13): [True: 0, False: 363]
  ------------------
 1554|      0|            return -1;
 1555|      0|        }
 1556|       |
 1557|    363|        index = onion_c->num_friends;
 1558|    363|        onion_c->friends_list[onion_c->num_friends] = empty_onion_friend;
 1559|    363|        ++onion_c->num_friends;
 1560|    363|    }
 1561|       |
 1562|    363|    onion_c->friends_list[index].is_valid = true;
 1563|    363|    memcpy(onion_c->friends_list[index].real_public_key, public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|    363|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
 1564|    363|    crypto_new_keypair(onion_c->rng, onion_c->friends_list[index].temp_public_key,
 1565|    363|                       onion_c->friends_list[index].temp_secret_key);
 1566|    363|    return index;
 1567|    363|}
onion_delfriend:
 1575|    363|{
 1576|    363|    if ((uint32_t)friend_num >= onion_c->num_friends) {
  ------------------
  |  Branch (1576:9): [True: 0, False: 363]
  ------------------
 1577|      0|        return -1;
 1578|      0|    }
 1579|       |
 1580|       |#if 0
 1581|       |
 1582|       |    if (onion_c->friends_list[friend_num].know_dht_public_key) {
 1583|       |        dht_delfriend(onion_c->dht, onion_c->friends_list[friend_num].dht_public_key, 0);
 1584|       |    }
 1585|       |
 1586|       |#endif /* 0 */
 1587|       |
 1588|    363|    crypto_memzero(&onion_c->friends_list[friend_num], sizeof(Onion_Friend));
 1589|    363|    unsigned int i;
 1590|       |
 1591|    726|    for (i = onion_c->num_friends; i != 0; --i) {
  ------------------
  |  Branch (1591:36): [True: 561, False: 165]
  ------------------
 1592|    561|        if (onion_c->friends_list[i - 1].is_valid) {
  ------------------
  |  Branch (1592:13): [True: 198, False: 363]
  ------------------
 1593|    198|            break;
 1594|    198|        }
 1595|    561|    }
 1596|       |
 1597|    363|    if (onion_c->num_friends != i) {
  ------------------
  |  Branch (1597:9): [True: 168, False: 195]
  ------------------
 1598|    168|        onion_c->num_friends = i;
 1599|    168|        realloc_onion_friends(onion_c, onion_c->num_friends);
 1600|    168|    }
 1601|       |
 1602|    363|    return friend_num;
 1603|    363|}
recv_tcp_relay_handler:
 1615|    363|{
 1616|    363|    if ((uint32_t)friend_num >= onion_c->num_friends) {
  ------------------
  |  Branch (1616:9): [True: 0, False: 363]
  ------------------
 1617|      0|        return -1;
 1618|      0|    }
 1619|       |
 1620|    363|    onion_c->friends_list[friend_num].tcp_relay_node_callback = callback;
 1621|    363|    onion_c->friends_list[friend_num].tcp_relay_node_callback_object = object;
 1622|    363|    onion_c->friends_list[friend_num].tcp_relay_node_callback_number = number;
 1623|    363|    return 0;
 1624|    363|}
onion_dht_pk_callback:
 1636|    363|{
 1637|    363|    if ((uint32_t)friend_num >= onion_c->num_friends) {
  ------------------
  |  Branch (1637:9): [True: 0, False: 363]
  ------------------
 1638|      0|        return -1;
 1639|      0|    }
 1640|       |
 1641|    363|    onion_c->friends_list[friend_num].dht_pk_callback = function;
 1642|    363|    onion_c->friends_list[friend_num].dht_pk_callback_object = object;
 1643|    363|    onion_c->friends_list[friend_num].dht_pk_callback_number = number;
 1644|    363|    return 0;
 1645|    363|}
oniondata_registerhandler:
 1886|  5.92k|{
 1887|  5.92k|    onion_c->onion_data_handlers[byte].function = cb;
 1888|  5.92k|    onion_c->onion_data_handlers[byte].object = object;
 1889|  5.92k|}
onion_group_announce_register:
 1892|  3.95k|{
 1893|  3.95k|    onion_c->group_announce_response = func;
 1894|  3.95k|    onion_c->group_announce_response_user_data = user_data;
 1895|  3.95k|}
new_onion_client:
 2173|  1.97k|{
 2174|  1.97k|    if (c == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (2174:9): [True: 0, False: 1.97k]
  ------------------
 2175|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2176|      0|    }
 2177|       |
 2178|  1.97k|    Onion_Client *onion_c = (Onion_Client *)mem_alloc(mem, sizeof(Onion_Client));
 2179|       |
 2180|  1.97k|    if (onion_c == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (2180:9): [True: 0, False: 1.97k]
  ------------------
 2181|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2182|      0|    }
 2183|       |
 2184|  1.97k|    onion_c->announce_ping_array = ping_array_new(mem, ANNOUNCE_ARRAY_SIZE, ANNOUNCE_TIMEOUT);
  ------------------
  |  |   36|  1.97k|#define ANNOUNCE_ARRAY_SIZE 256
  ------------------
                  onion_c->announce_ping_array = ping_array_new(mem, ANNOUNCE_ARRAY_SIZE, ANNOUNCE_TIMEOUT);
  ------------------
  |  |   37|  1.97k|#define ANNOUNCE_TIMEOUT 10
  ------------------
 2185|       |
 2186|  1.97k|    if (onion_c->announce_ping_array == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (2186:9): [True: 0, False: 1.97k]
  ------------------
 2187|      0|        mem_delete(mem, onion_c);
 2188|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 2189|      0|    }
 2190|       |
 2191|  1.97k|    onion_c->mono_time = mono_time;
 2192|  1.97k|    onion_c->logger = logger;
 2193|  1.97k|    onion_c->rng = rng;
 2194|  1.97k|    onion_c->mem = mem;
 2195|  1.97k|    onion_c->dht = nc_get_dht(c);
 2196|  1.97k|    onion_c->net = dht_get_net(onion_c->dht);
 2197|  1.97k|    onion_c->c = c;
 2198|  1.97k|    new_symmetric_key(rng, onion_c->secret_symmetric_key);
 2199|  1.97k|    crypto_new_keypair(rng, onion_c->temp_public_key, onion_c->temp_secret_key);
 2200|  1.97k|    networking_registerhandler(onion_c->net, NET_PACKET_ANNOUNCE_RESPONSE, &handle_announce_response, onion_c);
 2201|  1.97k|    networking_registerhandler(onion_c->net, NET_PACKET_ANNOUNCE_RESPONSE_OLD, &handle_announce_response_old, onion_c);
 2202|  1.97k|    networking_registerhandler(onion_c->net, NET_PACKET_ONION_DATA_RESPONSE, &handle_data_response, onion_c);
 2203|  1.97k|    oniondata_registerhandler(onion_c, ONION_DATA_DHTPK, &handle_dhtpk_announce, onion_c);
  ------------------
  |  |   65|  1.97k|#define ONION_DATA_DHTPK CRYPTO_PACKET_DHTPK
  |  |  ------------------
  |  |  |  |   67|  1.97k|#define CRYPTO_PACKET_DHTPK         156
  |  |  ------------------
  ------------------
 2204|  1.97k|    cryptopacket_registerhandler(onion_c->dht, CRYPTO_PACKET_DHTPK, &handle_dht_dhtpk, onion_c);
  ------------------
  |  |   67|  1.97k|#define CRYPTO_PACKET_DHTPK         156
  ------------------
 2205|  1.97k|    set_onion_packet_tcp_connection_callback(nc_get_tcp_c(onion_c->c), &handle_tcp_onion, onion_c);
 2206|       |
 2207|  1.97k|    return onion_c;
 2208|  1.97k|}
kill_onion_client:
 2211|  1.97k|{
 2212|  1.97k|    if (onion_c == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (2212:9): [True: 0, False: 1.97k]
  ------------------
 2213|      0|        return;
 2214|      0|    }
 2215|       |
 2216|  1.97k|    const Memory *mem = onion_c->mem;
 2217|       |
 2218|  1.97k|    ping_array_kill(onion_c->announce_ping_array);
 2219|  1.97k|    realloc_onion_friends(onion_c, 0);
 2220|  1.97k|    networking_registerhandler(onion_c->net, NET_PACKET_ANNOUNCE_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion_c->net, NET_PACKET_ANNOUNCE_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
 2221|  1.97k|    networking_registerhandler(onion_c->net, NET_PACKET_ANNOUNCE_RESPONSE_OLD, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion_c->net, NET_PACKET_ANNOUNCE_RESPONSE_OLD, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
 2222|  1.97k|    networking_registerhandler(onion_c->net, NET_PACKET_ONION_DATA_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(onion_c->net, NET_PACKET_ONION_DATA_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
 2223|  1.97k|    oniondata_registerhandler(onion_c, ONION_DATA_DHTPK, nullptr, nullptr);
  ------------------
  |  |   65|  1.97k|#define ONION_DATA_DHTPK CRYPTO_PACKET_DHTPK
  |  |  ------------------
  |  |  |  |   67|  1.97k|#define CRYPTO_PACKET_DHTPK         156
  |  |  ------------------
  ------------------
                  oniondata_registerhandler(onion_c, ONION_DATA_DHTPK, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  oniondata_registerhandler(onion_c, ONION_DATA_DHTPK, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
 2224|  1.97k|    cryptopacket_registerhandler(onion_c->dht, CRYPTO_PACKET_DHTPK, nullptr, nullptr);
  ------------------
  |  |   67|  1.97k|#define CRYPTO_PACKET_DHTPK         156
  ------------------
                  cryptopacket_registerhandler(onion_c->dht, CRYPTO_PACKET_DHTPK, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  cryptopacket_registerhandler(onion_c->dht, CRYPTO_PACKET_DHTPK, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
 2225|  1.97k|    set_onion_packet_tcp_connection_callback(nc_get_tcp_c(onion_c->c), nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  set_onion_packet_tcp_connection_callback(nc_get_tcp_c(onion_c->c), nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
 2226|  1.97k|    crypto_memzero(onion_c, sizeof(Onion_Client));
 2227|  1.97k|    mem_delete(mem, onion_c);
 2228|  1.97k|}
onion_client.c:realloc_onion_friends:
 1513|  2.50k|{
 1514|  2.50k|    if (num == 0) {
  ------------------
  |  Branch (1514:9): [True: 2.14k, False: 366]
  ------------------
 1515|  2.14k|        mem_delete(onion_c->mem, onion_c->friends_list);
 1516|  2.14k|        onion_c->friends_list = nullptr;
  ------------------
  |  |   63|  2.14k|#define nullptr NULL
  ------------------
 1517|  2.14k|        return 0;
 1518|  2.14k|    }
 1519|       |
 1520|    366|    Onion_Friend *newonion_friends = (Onion_Friend *)mem_vrealloc(onion_c->mem, onion_c->friends_list, num, sizeof(Onion_Friend));
 1521|       |
 1522|    366|    if (newonion_friends == nullptr) {
  ------------------
  |  |   63|    366|#define nullptr NULL
  ------------------
  |  Branch (1522:9): [True: 0, False: 366]
  ------------------
 1523|      0|        return -1;
 1524|      0|    }
 1525|       |
 1526|    366|    onion_c->friends_list = newonion_friends;
 1527|    366|    return 0;
 1528|    366|}

ping_new:
  328|  1.97k|{
  329|  1.97k|    Ping *ping = (Ping *)mem_alloc(mem, sizeof(Ping));
  330|       |
  331|  1.97k|    if (ping == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (331:9): [True: 0, False: 1.97k]
  ------------------
  332|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  333|      0|    }
  334|       |
  335|  1.97k|    ping->ping_array = ping_array_new(mem, PING_NUM_MAX, PING_TIMEOUT);
  ------------------
  |  |   23|  1.97k|#define PING_NUM_MAX 512
  ------------------
                  ping->ping_array = ping_array_new(mem, PING_NUM_MAX, PING_TIMEOUT);
  ------------------
  |  |   43|  1.97k|#define PING_TIMEOUT 5
  ------------------
  336|       |
  337|  1.97k|    if (ping->ping_array == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (337:9): [True: 0, False: 1.97k]
  ------------------
  338|      0|        mem_delete(mem, ping);
  339|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  340|      0|    }
  341|       |
  342|  1.97k|    ping->mono_time = mono_time;
  343|  1.97k|    ping->rng = rng;
  344|  1.97k|    ping->mem = mem;
  345|  1.97k|    ping->dht = dht;
  346|  1.97k|    networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_REQUEST, &handle_ping_request, dht);
  347|  1.97k|    networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_RESPONSE, &handle_ping_response, dht);
  348|       |
  349|  1.97k|    return ping;
  350|  1.97k|}
ping_kill:
  353|  1.97k|{
  354|  1.97k|    if (ping == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (354:9): [True: 0, False: 1.97k]
  ------------------
  355|      0|        return;
  356|      0|    }
  357|       |
  358|  1.97k|    networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_REQUEST, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  359|  1.97k|    networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
                  networking_registerhandler(dht_get_net(ping->dht), NET_PACKET_PING_RESPONSE, nullptr, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  360|  1.97k|    ping_array_kill(ping->ping_array);
  361|       |
  362|  1.97k|    mem_delete(mem, ping);
  363|  1.97k|}

ping_array_new:
   37|  5.92k|{
   38|  5.92k|    if (size == 0 || timeout == 0) {
  ------------------
  |  Branch (38:9): [True: 0, False: 5.92k]
  |  Branch (38:22): [True: 0, False: 5.92k]
  ------------------
   39|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   40|      0|    }
   41|       |
   42|  5.92k|    if ((size & (size - 1)) != 0) {
  ------------------
  |  Branch (42:9): [True: 0, False: 5.92k]
  ------------------
   43|       |        // Not a power of 2.
   44|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   45|      0|    }
   46|       |
   47|  5.92k|    Ping_Array *const empty_array = (Ping_Array *)mem_alloc(mem, sizeof(Ping_Array));
   48|       |
   49|  5.92k|    if (empty_array == nullptr) {
  ------------------
  |  |   63|  5.92k|#define nullptr NULL
  ------------------
  |  Branch (49:9): [True: 0, False: 5.92k]
  ------------------
   50|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   51|      0|    }
   52|       |
   53|  5.92k|    Ping_Array_Entry *entries = (Ping_Array_Entry *)mem_valloc(mem, size, sizeof(Ping_Array_Entry));
   54|       |
   55|  5.92k|    if (entries == nullptr) {
  ------------------
  |  |   63|  5.92k|#define nullptr NULL
  ------------------
  |  Branch (55:9): [True: 0, False: 5.92k]
  ------------------
   56|      0|        mem_delete(mem, empty_array);
   57|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   58|      0|    }
   59|       |
   60|  5.92k|    empty_array->mem = mem;
   61|  5.92k|    empty_array->entries = entries;
   62|  5.92k|    empty_array->last_deleted = 0;
   63|  5.92k|    empty_array->last_added = 0;
   64|  5.92k|    empty_array->total_size = size;
   65|  5.92k|    empty_array->timeout = timeout;
   66|  5.92k|    return empty_array;
   67|  5.92k|}
ping_array_kill:
   77|  5.92k|{
   78|  5.92k|    if (array == nullptr) {
  ------------------
  |  |   63|  5.92k|#define nullptr NULL
  ------------------
  |  Branch (78:9): [True: 0, False: 5.92k]
  ------------------
   79|      0|        return;
   80|      0|    }
   81|       |
   82|  5.92k|    while (array->last_deleted != array->last_added) {
  ------------------
  |  Branch (82:12): [True: 0, False: 5.92k]
  ------------------
   83|      0|        const uint32_t index = array->last_deleted % array->total_size;
   84|      0|        clear_entry(array, index);
   85|      0|        ++array->last_deleted;
   86|      0|    }
   87|       |
   88|  5.92k|    mem_delete(array->mem, array->entries);
   89|  5.92k|    mem_delete(array->mem, array);
   90|  5.92k|}

shared_key_cache_new:
   50|  13.8k|{
   51|  13.8k|    if (mono_time == nullptr || self_secret_key == nullptr || timeout == 0 || keys_per_slot == 0) {
  ------------------
  |  |   63|  27.6k|#define nullptr NULL
  ------------------
                  if (mono_time == nullptr || self_secret_key == nullptr || timeout == 0 || keys_per_slot == 0) {
  ------------------
  |  |   63|  27.6k|#define nullptr NULL
  ------------------
  |  Branch (51:9): [True: 0, False: 13.8k]
  |  Branch (51:33): [True: 0, False: 13.8k]
  |  Branch (51:63): [True: 0, False: 13.8k]
  |  Branch (51:79): [True: 0, False: 13.8k]
  ------------------
   52|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   53|      0|    }
   54|       |
   55|       |    // Time must not be zero, since we use that as special value for empty slots
   56|  13.8k|    if (mono_time_get(mono_time) == 0) {
  ------------------
  |  Branch (56:9): [True: 0, False: 13.8k]
  ------------------
   57|       |        // Fail loudly in debug environments
   58|      0|        LOGGER_FATAL(log, "time must not be zero (mono_time not initialised?)");
  ------------------
  |  |   83|      0|    do {                                \
  |  |   84|      0|        LOGGER_ERROR(log, __VA_ARGS__); \
  |  |  ------------------
  |  |  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   85|      0|        logger_abort();                 \
  |  |   86|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (86:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
   59|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   60|      0|    }
   61|       |
   62|  13.8k|    Shared_Key_Cache *res = (Shared_Key_Cache *)mem_alloc(mem, sizeof(Shared_Key_Cache));
   63|  13.8k|    if (res == nullptr) {
  ------------------
  |  |   63|  13.8k|#define nullptr NULL
  ------------------
  |  Branch (63:9): [True: 0, False: 13.8k]
  ------------------
   64|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   65|      0|    }
   66|       |
   67|  13.8k|    res->self_secret_key = self_secret_key;
   68|  13.8k|    res->mono_time = mono_time;
   69|  13.8k|    res->mem = mem;
   70|  13.8k|    res->log = log;
   71|  13.8k|    res->keys_per_slot = keys_per_slot;
   72|       |
   73|       |    // We take one byte from the public key for each bucket and store keys_per_slot elements there
   74|  13.8k|    const size_t cache_size = 256 * keys_per_slot;
   75|  13.8k|    Shared_Key *keys = (Shared_Key *)mem_valloc(mem, cache_size, sizeof(Shared_Key));
   76|       |
   77|  13.8k|    if (keys == nullptr) {
  ------------------
  |  |   63|  13.8k|#define nullptr NULL
  ------------------
  |  Branch (77:9): [True: 0, False: 13.8k]
  ------------------
   78|      0|        mem_delete(mem, res);
   79|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   80|      0|    }
   81|       |
   82|  13.8k|    crypto_memlock(keys, cache_size * sizeof(Shared_Key));
   83|       |
   84|  13.8k|    res->keys = keys;
   85|       |
   86|  13.8k|    return res;
   87|  13.8k|}
shared_key_cache_free:
   90|  13.8k|{
   91|  13.8k|    if (cache == nullptr) {
  ------------------
  |  |   63|  13.8k|#define nullptr NULL
  ------------------
  |  Branch (91:9): [True: 0, False: 13.8k]
  ------------------
   92|      0|        return;
   93|      0|    }
   94|       |
   95|  13.8k|    const size_t cache_size = 256 * cache->keys_per_slot;
   96|       |    // Don't leave key material in memory
   97|  13.8k|    crypto_memzero(cache->keys, cache_size * sizeof(Shared_Key));
   98|  13.8k|    crypto_memunlock(cache->keys, cache_size * sizeof(Shared_Key));
   99|  13.8k|    mem_delete(cache->mem, cache->keys);
  100|  13.8k|    mem_delete(cache->mem, cache);
  101|  13.8k|}

state_load:
   15|  2.69k|{
   16|  2.69k|    if (state_load_callback == nullptr || data == nullptr) {
  ------------------
  |  |   63|  5.39k|#define nullptr NULL
  ------------------
                  if (state_load_callback == nullptr || data == nullptr) {
  ------------------
  |  |   63|  2.69k|#define nullptr NULL
  ------------------
  |  Branch (16:9): [True: 0, False: 2.69k]
  |  Branch (16:43): [True: 0, False: 2.69k]
  ------------------
   17|      0|        LOGGER_ERROR(log, "state_load() called with invalid args.");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   18|      0|        return -1;
   19|      0|    }
   20|       |
   21|  2.69k|    const uint32_t size_head = sizeof(uint32_t) * 2;
   22|       |
   23|  37.6k|    while (length >= size_head) {
  ------------------
  |  Branch (23:12): [True: 35.3k, False: 2.30k]
  ------------------
   24|  35.3k|        uint32_t length_sub;
   25|  35.3k|        lendian_bytes_to_host32(&length_sub, data);
   26|       |
   27|  35.3k|        uint32_t cookie_type;
   28|  35.3k|        lendian_bytes_to_host32(&cookie_type, data + sizeof(uint32_t));
   29|       |
   30|  35.3k|        data += size_head;
   31|  35.3k|        length -= size_head;
   32|       |
   33|  35.3k|        if (length < length_sub) {
  ------------------
  |  Branch (33:13): [True: 235, False: 35.0k]
  ------------------
   34|       |            /* file truncated */
   35|    235|            LOGGER_ERROR(log, "state file too short: %u < %u", length, length_sub);
  ------------------
  |  |   80|    235|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|    235|    do {                                                                         \
  |  |  |  |   70|    235|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    470|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|    235|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|    235|        }                                                                        \
  |  |  |  |   73|    235|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   36|    235|            return -1;
   37|    235|        }
   38|       |
   39|  35.0k|        if (lendian_to_host16(cookie_type >> 16) != cookie_inner) {
  ------------------
  |  Branch (39:13): [True: 37, False: 35.0k]
  ------------------
   40|       |            /* something is not matching up in a bad way, give up */
   41|     37|            LOGGER_ERROR(log, "state file garbled: %04x != %04x", cookie_type >> 16, cookie_inner);
  ------------------
  |  |   80|     37|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     37|    do {                                                                         \
  |  |  |  |   70|     37|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     74|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     37|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     37|        }                                                                        \
  |  |  |  |   73|     37|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   42|     37|            return -1;
   43|     37|        }
   44|       |
   45|  35.0k|        const uint16_t type = lendian_to_host16(cookie_type & 0xFFFF);
   46|       |
   47|  35.0k|        switch (state_load_callback(outer, data, length_sub, type)) {
  ------------------
  |  Branch (47:17): [True: 0, False: 35.0k]
  ------------------
   48|  34.9k|            case STATE_LOAD_STATUS_CONTINUE: {
  ------------------
  |  Branch (48:13): [True: 34.9k, False: 117]
  ------------------
   49|  34.9k|                data += length_sub;
   50|  34.9k|                length -= length_sub;
   51|  34.9k|                break;
   52|      0|            }
   53|       |
   54|    110|            case STATE_LOAD_STATUS_ERROR: {
  ------------------
  |  Branch (54:13): [True: 110, False: 34.9k]
  ------------------
   55|    110|                LOGGER_ERROR(log, "Error occcured in state file (type: 0x%02x).", type);
  ------------------
  |  |   80|    110|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|    110|    do {                                                                         \
  |  |  |  |   70|    110|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    220|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|    110|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|    110|        }                                                                        \
  |  |  |  |   73|    110|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   56|    110|                return -1;
   57|      0|            }
   58|       |
   59|      7|            case STATE_LOAD_STATUS_END: {
  ------------------
  |  Branch (59:13): [True: 7, False: 35.0k]
  ------------------
   60|      7|                return 0;
   61|      0|            }
   62|  35.0k|        }
   63|  35.0k|    }
   64|       |
   65|  2.30k|    if (length != 0) {
  ------------------
  |  Branch (65:9): [True: 447, False: 1.86k]
  ------------------
   66|    447|        LOGGER_ERROR(log, "unparsed data in state file of length %u", length);
  ------------------
  |  |   80|    447|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|    447|    do {                                                                         \
  |  |  |  |   70|    447|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    894|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|    447|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|    447|        }                                                                        \
  |  |  |  |   73|    447|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   67|    447|        return -1;
   68|    447|    }
   69|       |
   70|  1.86k|    return 0;
   71|  2.30k|}
state_write_section_header:
   74|  18.1k|{
   75|  18.1k|    host_to_lendian_bytes32(data, len);
   76|  18.1k|    data += sizeof(uint32_t);
   77|  18.1k|    host_to_lendian_bytes32(data, (host_to_lendian16(cookie_type) << 16) | host_to_lendian16(section_type));
   78|  18.1k|    data += sizeof(uint32_t);
   79|  18.1k|    return data;
   80|  18.1k|}
lendian_to_host16:
   83|   106k|{
   84|       |#ifdef WORDS_BIGENDIAN
   85|       |    return (lendian << 8) | (lendian >> 8);
   86|       |#else
   87|   106k|    return lendian;
   88|   106k|#endif /* WORDS_BIGENDIAN */
   89|   106k|}
host_to_lendian16:
   92|  36.3k|{
   93|  36.3k|    return lendian_to_host16(host);
   94|  36.3k|}
host_to_lendian_bytes64:
   97|    204|{
   98|       |#ifdef WORDS_BIGENDIAN
   99|       |    num = ((num << 8) & 0xFF00FF00FF00FF00) | ((num >> 8) & 0xFF00FF00FF00FF);
  100|       |    num = ((num << 16) & 0xFFFF0000FFFF0000) | ((num >> 16) & 0xFFFF0000FFFF);
  101|       |    num = (num << 32) | (num >> 32);
  102|       |#endif /* WORDS_BIGENDIAN */
  103|    204|    memcpy(dest, &num, sizeof(uint64_t));
  104|    204|}
lendian_bytes_to_host64:
  107|    409|{
  108|    409|    uint64_t d;
  109|    409|    memcpy(&d, lendian, sizeof(uint64_t));
  110|       |#ifdef WORDS_BIGENDIAN
  111|       |    d = ((d << 8) & 0xFF00FF00FF00FF00) | ((d >> 8) & 0xFF00FF00FF00FF);
  112|       |    d = ((d << 16) & 0xFFFF0000FFFF0000) | ((d >> 16) & 0xFFFF0000FFFF);
  113|       |    d = (d << 32) | (d >> 32);
  114|       |#endif /* WORDS_BIGENDIAN */
  115|    409|    *dest = d;
  116|    409|}
host_to_lendian_bytes32:
  119|  44.1k|{
  120|       |#ifdef WORDS_BIGENDIAN
  121|       |    num = ((num << 8) & 0xFF00FF00) | ((num >> 8) & 0xFF00FF);
  122|       |    num = (num << 16) | (num >> 16);
  123|       |#endif /* WORDS_BIGENDIAN */
  124|  44.1k|    memcpy(dest, &num, sizeof(uint32_t));
  125|  44.1k|}
lendian_bytes_to_host32:
  128|  85.9k|{
  129|  85.9k|    uint32_t d;
  130|  85.9k|    memcpy(&d, lendian, sizeof(uint32_t));
  131|       |#ifdef WORDS_BIGENDIAN
  132|       |    d = ((d << 8) & 0xFF00FF00) | ((d >> 8) & 0xFF00FF);
  133|       |    d = (d << 16) | (d >> 16);
  134|       |#endif /* WORDS_BIGENDIAN */
  135|  85.9k|    *dest = d;
  136|  85.9k|}
host_to_lendian_bytes16:
  139|  3.50k|{
  140|       |#ifdef WORDS_BIGENDIAN
  141|       |    num = (num << 8) | (num >> 8);
  142|       |#endif /* WORDS_BIGENDIAN */
  143|  3.50k|    memcpy(dest, &num, sizeof(uint16_t));
  144|  3.50k|}
lendian_bytes_to_host16:
  147|  12.3k|{
  148|  12.3k|    uint16_t d;
  149|  12.3k|    memcpy(&d, lendian, sizeof(uint16_t));
  150|       |#ifdef WORDS_BIGENDIAN
  151|       |    d = (d << 8) | (d >> 8);
  152|       |#endif /* WORDS_BIGENDIAN */
  153|  12.3k|    *dest = d;
  154|  12.3k|}

tox_new_testing:
  951|  1.97k|{
  952|  1.97k|    if (testing == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (952:9): [True: 0, False: 1.97k]
  ------------------
  953|      0|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_NULL);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  954|      0|        SET_ERROR_PARAMETER(testing_error, TOX_ERR_NEW_TESTING_NULL);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  955|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  956|      0|    }
  957|       |
  958|  1.97k|    if (testing->operating_system == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (958:9): [True: 0, False: 1.97k]
  ------------------
  959|      0|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_NULL);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  960|      0|        SET_ERROR_PARAMETER(testing_error, TOX_ERR_NEW_TESTING_NULL);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  961|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  962|      0|    }
  963|       |
  964|  1.97k|    const Tox_System *sys = testing->operating_system;
  965|       |
  966|  1.97k|    if (sys->rng == nullptr || sys->ns == nullptr || sys->mem == nullptr) {
  ------------------
  |  |   63|  3.95k|#define nullptr NULL
  ------------------
                  if (sys->rng == nullptr || sys->ns == nullptr || sys->mem == nullptr) {
  ------------------
  |  |   63|  3.95k|#define nullptr NULL
  ------------------
                  if (sys->rng == nullptr || sys->ns == nullptr || sys->mem == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (966:9): [True: 0, False: 1.97k]
  |  Branch (966:32): [True: 0, False: 1.97k]
  |  Branch (966:54): [True: 0, False: 1.97k]
  ------------------
  967|      0|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_NULL);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  968|      0|        SET_ERROR_PARAMETER(testing_error, TOX_ERR_NEW_TESTING_NULL);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  969|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  970|      0|    }
  971|       |
  972|  1.97k|    SET_ERROR_PARAMETER(testing_error, TOX_ERR_NEW_TESTING_OK);
  ------------------
  |  |   44|  1.97k|    do {                              \
  |  |   45|  1.97k|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|  3.95k|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 1.97k]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|  1.97k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  973|  1.97k|    return tox_new_system(options, error, sys);
  974|  1.97k|}
tox_kill:
  977|  1.49k|{
  978|  1.49k|    if (tox == nullptr) {
  ------------------
  |  |   63|  1.49k|#define nullptr NULL
  ------------------
  |  Branch (978:9): [True: 0, False: 1.49k]
  ------------------
  979|      0|        return;
  980|      0|    }
  981|       |
  982|  1.49k|    tox_lock(tox);
  983|  1.49k|    LOGGER_ASSERT(tox->m->log, tox->toxav_object == nullptr, "Attempted to kill tox while toxav is still alive");
  ------------------
  |  |   89|  1.49k|    do {                                           \
  |  |   90|  1.49k|        if (!(cond)) {                             \
  |  |  ------------------
  |  |  |  Branch (90:13): [True: 0, False: 1.49k]
  |  |  ------------------
  |  |   91|      0|            LOGGER_ERROR(log, "Assertion failed"); \
  |  |  ------------------
  |  |  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   92|      0|            LOGGER_FATAL(log, __VA_ARGS__);        \
  |  |  ------------------
  |  |  |  |   83|      0|    do {                                \
  |  |  |  |   84|      0|        LOGGER_ERROR(log, __VA_ARGS__); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   85|      0|        logger_abort();                 \
  |  |  |  |   86|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (86:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   93|      0|        }                                          \
  |  |   94|  1.49k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (94:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  984|  1.49k|    kill_groupchats(tox->m->conferences_object);
  985|  1.49k|    kill_messenger(tox->m);
  986|  1.49k|    mono_time_free(tox->sys.mem, tox->mono_time);
  987|  1.49k|    tox_unlock(tox);
  988|       |
  989|  1.49k|    if (tox->mutex != nullptr) {
  ------------------
  |  |   63|  1.49k|#define nullptr NULL
  ------------------
  |  Branch (989:9): [True: 0, False: 1.49k]
  ------------------
  990|      0|        pthread_mutex_destroy(tox->mutex);
  991|      0|        mem_delete(tox->sys.mem, tox->mutex);
  992|      0|    }
  993|       |
  994|  1.49k|    mem_delete(tox->sys.mem, tox);
  995|  1.49k|}
tox_get_savedata_size:
 1008|  2.98k|{
 1009|  2.98k|    assert(tox != nullptr);
 1010|  2.98k|    tox_lock(tox);
 1011|  2.98k|    const size_t ret = 2 * sizeof(uint32_t)
 1012|  2.98k|                       + messenger_size(tox->m)
 1013|  2.98k|                       + conferences_size(tox->m->conferences_object)
 1014|  2.98k|                       + end_size();
 1015|  2.98k|    tox_unlock(tox);
 1016|  2.98k|    return ret;
 1017|  2.98k|}
tox_get_savedata:
 1020|  1.49k|{
 1021|  1.49k|    assert(tox != nullptr);
 1022|       |
 1023|  1.49k|    if (savedata == nullptr) {
  ------------------
  |  |   63|  1.49k|#define nullptr NULL
  ------------------
  |  Branch (1023:9): [True: 0, False: 1.49k]
  ------------------
 1024|      0|        return;
 1025|      0|    }
 1026|       |
 1027|  1.49k|    memzero(savedata, tox_get_savedata_size(tox));
 1028|       |
 1029|  1.49k|    tox_lock(tox);
 1030|       |
 1031|  1.49k|    const uint32_t size32 = sizeof(uint32_t);
 1032|       |
 1033|       |    // write cookie
 1034|  1.49k|    memzero(savedata, size32);
 1035|  1.49k|    savedata += size32;
 1036|  1.49k|    host_to_lendian_bytes32(savedata, STATE_COOKIE_GLOBAL);
  ------------------
  |  |   27|  1.49k|#define STATE_COOKIE_GLOBAL 0x15ed1b1f
  ------------------
 1037|  1.49k|    savedata += size32;
 1038|       |
 1039|  1.49k|    savedata = messenger_save(tox->m, savedata);
 1040|  1.49k|    savedata = conferences_save(tox->m->conferences_object, savedata);
 1041|  1.49k|    end_save(savedata);
 1042|       |
 1043|  1.49k|    tox_unlock(tox);
 1044|  1.49k|}
tox.c:tox_new_system:
  637|  1.97k|{
  638|  1.97k|    struct Tox_Options *default_options = nullptr;
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  639|  1.97k|    if (options == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (639:9): [True: 0, False: 1.97k]
  ------------------
  640|      0|        Tox_Err_Options_New err;
  641|      0|        default_options = tox_options_new(&err);
  642|       |
  643|      0|        switch (err) {
  ------------------
  |  Branch (643:17): [True: 0, False: 0]
  ------------------
  644|      0|            case TOX_ERR_OPTIONS_NEW_OK: {
  ------------------
  |  Branch (644:13): [True: 0, False: 0]
  ------------------
  645|      0|                assert(default_options != nullptr);
  646|      0|                break;
  647|      0|            }
  648|       |
  649|      0|            case TOX_ERR_OPTIONS_NEW_MALLOC: {
  ------------------
  |  Branch (649:13): [True: 0, False: 0]
  ------------------
  650|      0|                SET_ERROR_PARAMETER(error, TOX_ERR_NEW_MALLOC);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  651|      0|                return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  652|      0|            }
  653|      0|        }
  654|      0|    }
  655|       |
  656|  1.97k|    const struct Tox_Options *const opts = options != nullptr ? options : default_options;
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (656:44): [True: 1.97k, False: 0]
  ------------------
  657|  1.97k|    assert(opts != nullptr);
  658|       |
  659|  1.97k|    const Tox_System default_system = tox_default_system();
  660|       |
  661|  1.97k|    if (sys == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (661:9): [True: 0, False: 1.97k]
  ------------------
  662|      0|        sys = &default_system;
  663|      0|    }
  664|       |
  665|  1.97k|    if (sys->rng == nullptr || sys->ns == nullptr || sys->mem == nullptr) {
  ------------------
  |  |   63|  3.95k|#define nullptr NULL
  ------------------
                  if (sys->rng == nullptr || sys->ns == nullptr || sys->mem == nullptr) {
  ------------------
  |  |   63|  3.95k|#define nullptr NULL
  ------------------
                  if (sys->rng == nullptr || sys->ns == nullptr || sys->mem == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (665:9): [True: 0, False: 1.97k]
  |  Branch (665:32): [True: 0, False: 1.97k]
  |  Branch (665:54): [True: 0, False: 1.97k]
  ------------------
  666|       |        // TODO(iphydf): Not quite right, but similar.
  667|      0|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_MALLOC);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  668|      0|        tox_options_free(default_options);
  669|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  670|      0|    }
  671|       |
  672|  1.97k|    Messenger_Options m_options = {false};
  673|       |
  674|  1.97k|    m_options.dns_enabled = !tox_options_get_experimental_disable_dns(opts);
  675|       |
  676|  1.97k|    bool load_savedata_sk = false;
  677|  1.97k|    bool load_savedata_tox = false;
  678|       |
  679|  1.97k|    if (tox_options_get_savedata_type(opts) != TOX_SAVEDATA_TYPE_NONE) {
  ------------------
  |  Branch (679:9): [True: 1.97k, False: 0]
  ------------------
  680|  1.97k|        if (tox_options_get_savedata_data(opts) == nullptr || tox_options_get_savedata_length(opts) == 0) {
  ------------------
  |  |   63|  3.95k|#define nullptr NULL
  ------------------
  |  Branch (680:13): [True: 0, False: 1.97k]
  |  Branch (680:63): [True: 0, False: 1.97k]
  ------------------
  681|      0|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_LOAD_BAD_FORMAT);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  682|      0|            tox_options_free(default_options);
  683|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  684|      0|        }
  685|  1.97k|    }
  686|       |
  687|  1.97k|    if (tox_options_get_savedata_type(opts) == TOX_SAVEDATA_TYPE_SECRET_KEY) {
  ------------------
  |  Branch (687:9): [True: 0, False: 1.97k]
  ------------------
  688|      0|        if (tox_options_get_savedata_length(opts) != TOX_SECRET_KEY_SIZE) {
  ------------------
  |  |  219|      0|#define TOX_SECRET_KEY_SIZE            32
  ------------------
  |  Branch (688:13): [True: 0, False: 0]
  ------------------
  689|      0|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_LOAD_BAD_FORMAT);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  690|      0|            tox_options_free(default_options);
  691|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  692|      0|        }
  693|       |
  694|      0|        load_savedata_sk = true;
  695|  1.97k|    } else if (tox_options_get_savedata_type(opts) == TOX_SAVEDATA_TYPE_TOX_SAVE) {
  ------------------
  |  Branch (695:16): [True: 1.97k, False: 0]
  ------------------
  696|  1.97k|        if (tox_options_get_savedata_length(opts) < TOX_ENC_SAVE_MAGIC_LENGTH) {
  ------------------
  |  |   10|  1.97k|#define TOX_ENC_SAVE_MAGIC_LENGTH 8
  ------------------
  |  Branch (696:13): [True: 1, False: 1.97k]
  ------------------
  697|      1|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_LOAD_BAD_FORMAT);
  ------------------
  |  |   44|      1|    do {                              \
  |  |   45|      1|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      2|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      1|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  698|      1|            tox_options_free(default_options);
  699|      1|            return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  700|      1|        }
  701|       |
  702|  1.97k|        if (memcmp(tox_options_get_savedata_data(opts), TOX_ENC_SAVE_MAGIC_NUMBER, TOX_ENC_SAVE_MAGIC_LENGTH) == 0) {
  ------------------
  |  |    9|  1.97k|#define TOX_ENC_SAVE_MAGIC_NUMBER ((const uint8_t *)"toxEsave")
  ------------------
                      if (memcmp(tox_options_get_savedata_data(opts), TOX_ENC_SAVE_MAGIC_NUMBER, TOX_ENC_SAVE_MAGIC_LENGTH) == 0) {
  ------------------
  |  |   10|  1.97k|#define TOX_ENC_SAVE_MAGIC_LENGTH 8
  ------------------
  |  Branch (702:13): [True: 1, False: 1.97k]
  ------------------
  703|      1|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_LOAD_ENCRYPTED);
  ------------------
  |  |   44|      1|    do {                              \
  |  |   45|      1|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      2|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 1]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      1|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  704|      1|            tox_options_free(default_options);
  705|      1|            return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  706|      1|        }
  707|       |
  708|  1.97k|        load_savedata_tox = true;
  709|  1.97k|    }
  710|       |
  711|  1.97k|    m_options.ipv6enabled = tox_options_get_ipv6_enabled(opts);
  712|  1.97k|    m_options.udp_disabled = !tox_options_get_udp_enabled(opts);
  713|  1.97k|    m_options.port_range[0] = tox_options_get_start_port(opts);
  714|  1.97k|    m_options.port_range[1] = tox_options_get_end_port(opts);
  715|  1.97k|    m_options.tcp_server_port = tox_options_get_tcp_port(opts);
  716|  1.97k|    m_options.hole_punching_enabled = tox_options_get_hole_punching_enabled(opts);
  717|  1.97k|    m_options.local_discovery_enabled = tox_options_get_local_discovery_enabled(opts);
  718|  1.97k|    m_options.dht_announcements_enabled = tox_options_get_dht_announcements_enabled(opts);
  719|  1.97k|    m_options.groups_persistence_enabled = tox_options_get_experimental_groups_persistence(opts);
  720|       |
  721|  1.97k|    if (m_options.udp_disabled) {
  ------------------
  |  Branch (721:9): [True: 0, False: 1.97k]
  ------------------
  722|      0|        m_options.local_discovery_enabled = false;
  723|      0|    }
  724|       |
  725|  1.97k|    Tox *tox = (Tox *)mem_alloc(sys->mem, sizeof(Tox));
  726|       |
  727|  1.97k|    if (tox == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (727:9): [True: 0, False: 1.97k]
  ------------------
  728|      0|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_MALLOC);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  729|      0|        tox_options_free(default_options);
  730|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  731|      0|    }
  732|       |
  733|  1.97k|    tox->log_callback = tox_options_get_log_callback(opts);
  734|  1.97k|    m_options.log_callback = tox_log_handler;
  735|  1.97k|    m_options.log_context = tox;
  736|  1.97k|    m_options.log_user_data = tox_options_get_log_user_data(opts);
  737|       |
  738|  1.97k|    switch (tox_options_get_proxy_type(opts)) {
  739|      0|        case TOX_PROXY_TYPE_HTTP: {
  ------------------
  |  Branch (739:9): [True: 0, False: 1.97k]
  ------------------
  740|      0|            m_options.proxy_info.proxy_type = TCP_PROXY_HTTP;
  741|      0|            break;
  742|      0|        }
  743|       |
  744|      0|        case TOX_PROXY_TYPE_SOCKS5: {
  ------------------
  |  Branch (744:9): [True: 0, False: 1.97k]
  ------------------
  745|      0|            m_options.proxy_info.proxy_type = TCP_PROXY_SOCKS5;
  746|      0|            break;
  747|      0|        }
  748|       |
  749|  1.97k|        case TOX_PROXY_TYPE_NONE: {
  ------------------
  |  Branch (749:9): [True: 1.97k, False: 0]
  ------------------
  750|  1.97k|            m_options.proxy_info.proxy_type = TCP_PROXY_NONE;
  751|  1.97k|            break;
  752|      0|        }
  753|       |
  754|      0|        default: {
  ------------------
  |  Branch (754:9): [True: 0, False: 1.97k]
  ------------------
  755|      0|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_PROXY_BAD_TYPE);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  756|      0|            mem_delete(sys->mem, tox);
  757|      0|            tox_options_free(default_options);
  758|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  759|      0|        }
  760|  1.97k|    }
  761|       |
  762|  1.97k|    tox->sys = *sys;
  763|       |
  764|  1.97k|    if (m_options.proxy_info.proxy_type != TCP_PROXY_NONE) {
  ------------------
  |  Branch (764:9): [True: 0, False: 1.97k]
  ------------------
  765|      0|        if (tox_options_get_proxy_port(opts) == 0) {
  ------------------
  |  Branch (765:13): [True: 0, False: 0]
  ------------------
  766|      0|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_PROXY_BAD_PORT);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  767|      0|            mem_delete(sys->mem, tox);
  768|      0|            tox_options_free(default_options);
  769|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  770|      0|        }
  771|       |
  772|      0|        ip_init(&m_options.proxy_info.ip_port.ip, m_options.ipv6enabled);
  773|       |
  774|      0|        if (m_options.ipv6enabled) {
  ------------------
  |  Branch (774:13): [True: 0, False: 0]
  ------------------
  775|      0|            m_options.proxy_info.ip_port.ip.family = net_family_unspec();
  776|      0|        }
  777|       |
  778|      0|        const char *const proxy_host = tox_options_get_proxy_host(opts);
  779|      0|        const bool dns_enabled = !tox_options_get_experimental_disable_dns(opts);
  780|       |
  781|      0|        if (proxy_host == nullptr
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (781:13): [True: 0, False: 0]
  ------------------
  782|      0|                || !addr_resolve_or_parse_ip(tox->sys.ns, tox->sys.mem, proxy_host, &m_options.proxy_info.ip_port.ip, nullptr, dns_enabled)) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (782:20): [True: 0, False: 0]
  ------------------
  783|      0|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_PROXY_BAD_HOST);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  784|       |            // TODO(irungentoo): TOX_ERR_NEW_PROXY_NOT_FOUND if domain.
  785|      0|            mem_delete(sys->mem, tox);
  786|      0|            tox_options_free(default_options);
  787|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  788|      0|        }
  789|       |
  790|      0|        m_options.proxy_info.ip_port.port = net_htons(tox_options_get_proxy_port(opts));
  791|      0|    }
  792|       |
  793|  1.97k|    tox->mono_time = mono_time_new(tox->sys.mem, sys->mono_time_callback, sys->mono_time_user_data);
  794|       |
  795|  1.97k|    if (tox->mono_time == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (795:9): [True: 0, False: 1.97k]
  ------------------
  796|      0|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_MALLOC);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  797|      0|        mem_delete(sys->mem, tox);
  798|      0|        tox_options_free(default_options);
  799|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  800|      0|    }
  801|       |
  802|  1.97k|    if (tox_options_get_experimental_thread_safety(opts)) {
  ------------------
  |  Branch (802:9): [True: 0, False: 1.97k]
  ------------------
  803|      0|        pthread_mutex_t *mutex = (pthread_mutex_t *)mem_alloc(sys->mem, sizeof(pthread_mutex_t));
  804|       |
  805|      0|        if (mutex == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (805:13): [True: 0, False: 0]
  ------------------
  806|      0|            SET_ERROR_PARAMETER(error, TOX_ERR_NEW_MALLOC);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  807|      0|            mem_delete(sys->mem, tox);
  808|      0|            tox_options_free(default_options);
  809|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  810|      0|        }
  811|       |
  812|      0|        pthread_mutex_init(mutex, nullptr);
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  813|       |
  814|      0|        tox->mutex = mutex;
  815|  1.97k|    } else {
  816|  1.97k|        tox->mutex = nullptr;
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  817|  1.97k|    }
  818|       |
  819|  1.97k|    tox_lock(tox);
  820|       |
  821|  1.97k|    Messenger_Error m_error;
  822|  1.97k|    tox->m = new_messenger(tox->mono_time, tox->sys.mem, tox->sys.rng, tox->sys.ns, &m_options, &m_error);
  823|       |
  824|  1.97k|    if (tox->m == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (824:9): [True: 0, False: 1.97k]
  ------------------
  825|      0|        switch (m_error) {
  ------------------
  |  Branch (825:17): [True: 0, False: 0]
  ------------------
  826|      0|            case MESSENGER_ERROR_PORT:
  ------------------
  |  Branch (826:13): [True: 0, False: 0]
  ------------------
  827|      0|            case MESSENGER_ERROR_TCP_SERVER: {
  ------------------
  |  Branch (827:13): [True: 0, False: 0]
  ------------------
  828|      0|                SET_ERROR_PARAMETER(error, TOX_ERR_NEW_PORT_ALLOC);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  829|      0|                break;
  830|      0|            }
  831|      0|            case MESSENGER_ERROR_OTHER:
  ------------------
  |  Branch (831:13): [True: 0, False: 0]
  ------------------
  832|      0|            case MESSENGER_ERROR_NONE: {
  ------------------
  |  Branch (832:13): [True: 0, False: 0]
  ------------------
  833|      0|                SET_ERROR_PARAMETER(error, TOX_ERR_NEW_MALLOC);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  834|      0|                break;
  835|      0|            }
  836|      0|        }
  837|       |
  838|      0|        mono_time_free(tox->sys.mem, tox->mono_time);
  839|      0|        tox_unlock(tox);
  840|       |
  841|      0|        if (tox->mutex != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (841:13): [True: 0, False: 0]
  ------------------
  842|      0|            pthread_mutex_destroy(tox->mutex);
  843|      0|        }
  844|       |
  845|      0|        mem_delete(sys->mem, tox->mutex);
  846|      0|        mem_delete(sys->mem, tox);
  847|      0|        tox_options_free(default_options);
  848|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  849|      0|    }
  850|       |
  851|  1.97k|    tox->m->conferences_object = new_groupchats(tox->mono_time, sys->mem, tox->m);
  852|       |
  853|  1.97k|    if (tox->m->conferences_object == nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (853:9): [True: 0, False: 1.97k]
  ------------------
  854|      0|        kill_messenger(tox->m);
  855|       |
  856|      0|        mono_time_free(tox->sys.mem, tox->mono_time);
  857|      0|        tox_unlock(tox);
  858|       |
  859|      0|        if (tox->mutex != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (859:13): [True: 0, False: 0]
  ------------------
  860|      0|            pthread_mutex_destroy(tox->mutex);
  861|      0|        }
  862|       |
  863|      0|        mem_delete(sys->mem, tox->mutex);
  864|      0|        mem_delete(sys->mem, tox);
  865|       |
  866|      0|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_MALLOC);
  ------------------
  |  |   44|      0|    do {                              \
  |  |   45|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  867|      0|        tox_options_free(default_options);
  868|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  869|      0|    }
  870|       |
  871|  1.97k|    if (load_savedata_tox
  ------------------
  |  Branch (871:9): [True: 1.97k, False: 0]
  ------------------
  872|  1.97k|            && tox_load(tox, tox_options_get_savedata_data(opts), tox_options_get_savedata_length(opts)) == -1) {
  ------------------
  |  Branch (872:16): [True: 482, False: 1.49k]
  ------------------
  873|    482|        kill_groupchats(tox->m->conferences_object);
  874|    482|        kill_messenger(tox->m);
  875|       |
  876|    482|        mono_time_free(tox->sys.mem, tox->mono_time);
  877|    482|        tox_unlock(tox);
  878|       |
  879|    482|        if (tox->mutex != nullptr) {
  ------------------
  |  |   63|    482|#define nullptr NULL
  ------------------
  |  Branch (879:13): [True: 0, False: 482]
  ------------------
  880|      0|            pthread_mutex_destroy(tox->mutex);
  881|      0|        }
  882|       |
  883|    482|        mem_delete(sys->mem, tox->mutex);
  884|    482|        mem_delete(sys->mem, tox);
  885|       |
  886|    482|        SET_ERROR_PARAMETER(error, TOX_ERR_NEW_LOAD_BAD_FORMAT);
  ------------------
  |  |   44|    482|    do {                              \
  |  |   45|    482|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|    964|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 482]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|    482|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  887|    482|        tox_options_free(default_options);
  888|    482|        return nullptr;
  ------------------
  |  |   63|    482|#define nullptr NULL
  ------------------
  889|    482|    }
  890|       |
  891|  1.49k|    if (load_savedata_sk) {
  ------------------
  |  Branch (891:9): [True: 0, False: 1.49k]
  ------------------
  892|      0|        load_secret_key(tox->m->net_crypto, tox_options_get_savedata_data(opts));
  893|      0|    }
  894|       |
  895|  1.49k|    m_callback_namechange(tox->m, tox_friend_name_handler);
  896|  1.49k|    m_callback_core_connection(tox->m, tox_self_connection_status_handler);
  897|  1.49k|    m_callback_statusmessage(tox->m, tox_friend_status_message_handler);
  898|  1.49k|    m_callback_userstatus(tox->m, tox_friend_status_handler);
  899|  1.49k|    m_callback_connectionstatus(tox->m, tox_friend_connection_status_handler);
  900|  1.49k|    m_callback_typingchange(tox->m, tox_friend_typing_handler);
  901|  1.49k|    m_callback_read_receipt(tox->m, tox_friend_read_receipt_handler);
  902|  1.49k|    m_callback_friendrequest(tox->m, tox_friend_request_handler);
  903|  1.49k|    m_callback_friendmessage(tox->m, tox_friend_message_handler);
  904|  1.49k|    callback_file_control(tox->m, tox_file_recv_control_handler);
  905|  1.49k|    callback_file_reqchunk(tox->m, tox_file_chunk_request_handler);
  906|  1.49k|    callback_file_sendrequest(tox->m, tox_file_recv_handler);
  907|  1.49k|    callback_file_data(tox->m, tox_file_recv_chunk_handler);
  908|  1.49k|    dht_callback_nodes_response(tox->m->dht, tox_dht_nodes_response_handler);
  909|  1.49k|    g_callback_group_invite(tox->m->conferences_object, tox_conference_invite_handler);
  910|  1.49k|    g_callback_group_connected(tox->m->conferences_object, tox_conference_connected_handler);
  911|  1.49k|    g_callback_group_message(tox->m->conferences_object, tox_conference_message_handler);
  912|  1.49k|    g_callback_group_title(tox->m->conferences_object, tox_conference_title_handler);
  913|  1.49k|    g_callback_peer_name(tox->m->conferences_object, tox_conference_peer_name_handler);
  914|  1.49k|    g_callback_peer_list_changed(tox->m->conferences_object, tox_conference_peer_list_changed_handler);
  915|  1.49k|    custom_lossy_packet_registerhandler(tox->m, tox_friend_lossy_packet_handler);
  916|  1.49k|    custom_lossless_packet_registerhandler(tox->m, tox_friend_lossless_packet_handler);
  917|       |
  918|  1.49k|    m_callback_group_invite(tox->m, tox_group_invite_handler);
  919|  1.49k|    gc_callback_message(tox->m, tox_group_message_handler);
  920|  1.49k|    gc_callback_private_message(tox->m, tox_group_private_message_handler);
  921|  1.49k|    gc_callback_custom_packet(tox->m, tox_group_custom_packet_handler);
  922|  1.49k|    gc_callback_custom_private_packet(tox->m, tox_group_custom_private_packet_handler);
  923|  1.49k|    gc_callback_moderation(tox->m, tox_group_moderation_handler);
  924|  1.49k|    gc_callback_nick_change(tox->m, tox_group_peer_name_handler);
  925|  1.49k|    gc_callback_status_change(tox->m, tox_group_peer_status_handler);
  926|  1.49k|    gc_callback_topic_change(tox->m, tox_group_topic_handler);
  927|  1.49k|    gc_callback_peer_limit(tox->m, tox_group_peer_limit_handler);
  928|  1.49k|    gc_callback_privacy_state(tox->m, tox_group_privacy_state_handler);
  929|  1.49k|    gc_callback_topic_lock(tox->m, tox_group_topic_lock_handler);
  930|  1.49k|    gc_callback_password(tox->m, tox_group_password_handler);
  931|  1.49k|    gc_callback_peer_join(tox->m, tox_group_peer_join_handler);
  932|  1.49k|    gc_callback_peer_exit(tox->m, tox_group_peer_exit_handler);
  933|  1.49k|    gc_callback_self_join(tox->m, tox_group_self_join_handler);
  934|  1.49k|    gc_callback_rejected(tox->m, tox_group_join_fail_handler);
  935|  1.49k|    gc_callback_voice_state(tox->m, tox_group_voice_state_handler);
  936|       |
  937|  1.49k|    tox_unlock(tox);
  938|       |
  939|  1.49k|    SET_ERROR_PARAMETER(error, TOX_ERR_NEW_OK);
  ------------------
  |  |   44|  1.49k|    do {                              \
  |  |   45|  1.49k|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|  2.98k|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (45:13): [True: 0, False: 1.49k]
  |  |  ------------------
  |  |   46|      0|            *param = x;               \
  |  |   47|      0|        }                             \
  |  |   48|  1.49k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (48:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  940|       |
  941|  1.49k|    tox_options_free(default_options);
  942|  1.49k|    return tox;
  943|  1.97k|}
tox.c:tox_log_handler:
   85|  89.0k|{
   86|  89.0k|    Tox *tox = (Tox *)context;
   87|  89.0k|    assert(tox != nullptr);
   88|       |
   89|  89.0k|    if (tox->log_callback != nullptr) {
  ------------------
  |  |   63|  89.0k|#define nullptr NULL
  ------------------
  |  Branch (89:9): [True: 0, False: 89.0k]
  ------------------
   90|      0|        tox->log_callback(tox, (Tox_Log_Level)level, file, line, func, message, userdata);
   91|      0|    }
   92|  89.0k|}
tox.c:tox_load:
  617|  1.97k|{
  618|  1.97k|    uint32_t data32[2];
  619|  1.97k|    const uint32_t cookie_len = sizeof(data32);
  620|       |
  621|  1.97k|    if (length < cookie_len) {
  ------------------
  |  Branch (621:9): [True: 0, False: 1.97k]
  ------------------
  622|      0|        return -1;
  623|      0|    }
  624|       |
  625|  1.97k|    memcpy(data32, data, sizeof(uint32_t));
  626|  1.97k|    lendian_bytes_to_host32(data32 + 1, data + sizeof(uint32_t));
  627|       |
  628|  1.97k|    if (data32[0] != 0 || data32[1] != STATE_COOKIE_GLOBAL) {
  ------------------
  |  |   27|  1.97k|#define STATE_COOKIE_GLOBAL 0x15ed1b1f
  ------------------
  |  Branch (628:9): [True: 1, False: 1.97k]
  |  Branch (628:27): [True: 1, False: 1.97k]
  ------------------
  629|      2|        return -1;
  630|      2|    }
  631|       |
  632|  1.97k|    return state_load(tox->m->log, state_load_callback, tox, data + cookie_len,
  633|  1.97k|                      length - cookie_len, STATE_COOKIE_TYPE);
  ------------------
  |  |   29|  1.97k|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
  634|  1.97k|}
tox.c:state_load_callback:
  592|  34.3k|{
  593|  34.3k|    const Tox *tox = (const Tox *)outer;
  594|  34.3k|    State_Load_Status status = STATE_LOAD_STATUS_CONTINUE;
  595|       |
  596|  34.3k|    if (messenger_load_state_section(tox->m, data, length, type, &status)
  ------------------
  |  Branch (596:9): [True: 33.4k, False: 865]
  ------------------
  597|  34.3k|            || conferences_load_state_section(tox->m->conferences_object, data, length, type, &status)) {
  ------------------
  |  Branch (597:16): [True: 461, False: 404]
  ------------------
  598|  33.9k|        return status;
  599|  33.9k|    }
  600|       |
  601|    404|    if (type == STATE_TYPE_END) {
  ------------------
  |  Branch (601:9): [True: 8, False: 396]
  ------------------
  602|      8|        if (length != 0) {
  ------------------
  |  Branch (602:13): [True: 1, False: 7]
  ------------------
  603|      1|            return STATE_LOAD_STATUS_ERROR;
  604|      1|        }
  605|       |
  606|      7|        return STATE_LOAD_STATUS_END;
  607|      8|    }
  608|       |
  609|    396|    LOGGER_ERROR(tox->m->log, "Load state: contains unrecognized part (len %u, type %u)",
  ------------------
  |  |   80|    396|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|    396|    do {                                                                         \
  |  |  |  |   70|    396|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    792|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|    396|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|    396|        }                                                                        \
  |  |  |  |   73|    396|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  610|    396|                 length, type);
  611|       |
  612|    396|    return STATE_LOAD_STATUS_CONTINUE;
  613|    404|}
tox.c:end_size:
  998|  2.98k|{
  999|  2.98k|    return 2 * sizeof(uint32_t);
 1000|  2.98k|}
tox.c:end_save:
 1003|  1.49k|{
 1004|  1.49k|    state_write_section_header(data, STATE_COOKIE_TYPE, 0, STATE_TYPE_END);
  ------------------
  |  |   29|  1.49k|#define STATE_COOKIE_TYPE  0x01ce
  ------------------
 1005|  1.49k|}

tox_options_get_ipv6_enabled:
   22|  1.97k|{
   23|  1.97k|    return options->ipv6_enabled;
   24|  1.97k|}
tox_options_set_ipv6_enabled:
   26|  1.97k|{
   27|  1.97k|    options->ipv6_enabled = ipv6_enabled;
   28|  1.97k|}
tox_options_get_udp_enabled:
   30|  1.97k|{
   31|  1.97k|    return options->udp_enabled;
   32|  1.97k|}
tox_options_set_udp_enabled:
   34|  1.97k|{
   35|  1.97k|    options->udp_enabled = udp_enabled;
   36|  1.97k|}
tox_options_get_proxy_type:
   38|  1.97k|{
   39|  1.97k|    return options->proxy_type;
   40|  1.97k|}
tox_options_set_proxy_type:
   42|  1.97k|{
   43|  1.97k|    options->proxy_type = proxy_type;
   44|  1.97k|}
tox_options_set_proxy_host:
   50|  3.95k|{
   51|  3.95k|    if (!options->experimental_owned_data) {
  ------------------
  |  Branch (51:9): [True: 3.95k, False: 0]
  ------------------
   52|  3.95k|        options->proxy_host = proxy_host;
   53|  3.95k|        return true;
   54|  3.95k|    }
   55|       |
   56|      0|    if (options->owned_proxy_host != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (56:9): [True: 0, False: 0]
  ------------------
   57|      0|        free(options->owned_proxy_host);
   58|      0|        options->owned_proxy_host = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   59|      0|    }
   60|      0|    if (proxy_host == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (60:9): [True: 0, False: 0]
  ------------------
   61|      0|        options->proxy_host = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   62|      0|        return true;
   63|      0|    }
   64|       |
   65|      0|    const size_t proxy_host_length = strlen(proxy_host) + 1;
   66|      0|    char *owned_ptr = (char *)malloc(proxy_host_length);
   67|      0|    if (owned_ptr == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (67:9): [True: 0, False: 0]
  ------------------
   68|      0|        options->proxy_host = proxy_host;
   69|      0|        options->owned_proxy_host = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   70|      0|        return false;
   71|      0|    }
   72|       |
   73|      0|    memcpy(owned_ptr, proxy_host, proxy_host_length);
   74|      0|    options->proxy_host = owned_ptr;
   75|      0|    options->owned_proxy_host = owned_ptr;
   76|      0|    return true;
   77|      0|}
tox_options_get_start_port:
   87|  1.97k|{
   88|  1.97k|    return options->start_port;
   89|  1.97k|}
tox_options_get_end_port:
   95|  1.97k|{
   96|  1.97k|    return options->end_port;
   97|  1.97k|}
tox_options_get_tcp_port:
  103|  1.97k|{
  104|  1.97k|    return options->tcp_port;
  105|  1.97k|}
tox_options_get_hole_punching_enabled:
  111|  1.97k|{
  112|  1.97k|    return options->hole_punching_enabled;
  113|  1.97k|}
tox_options_set_hole_punching_enabled:
  115|  1.97k|{
  116|  1.97k|    options->hole_punching_enabled = hole_punching_enabled;
  117|  1.97k|}
tox_options_get_savedata_type:
  119|  5.93k|{
  120|  5.93k|    return options->savedata_type;
  121|  5.93k|}
tox_options_set_savedata_type:
  123|  1.97k|{
  124|  1.97k|    options->savedata_type = savedata_type;
  125|  1.97k|}
tox_options_get_savedata_length:
  127|  5.93k|{
  128|  5.93k|    return options->savedata_length;
  129|  5.93k|}
tox_options_get_log_callback:
  135|  1.97k|{
  136|  1.97k|    return options->log_callback;
  137|  1.97k|}
tox_options_get_log_user_data:
  143|  1.97k|{
  144|  1.97k|    return options->log_user_data;
  145|  1.97k|}
tox_options_get_local_discovery_enabled:
  151|  1.97k|{
  152|  1.97k|    return options->local_discovery_enabled;
  153|  1.97k|}
tox_options_set_local_discovery_enabled:
  155|  1.97k|{
  156|  1.97k|    options->local_discovery_enabled = local_discovery_enabled;
  157|  1.97k|}
tox_options_get_dht_announcements_enabled:
  159|  1.97k|{
  160|  1.97k|    return options->dht_announcements_enabled;
  161|  1.97k|}
tox_options_set_dht_announcements_enabled:
  163|  1.97k|{
  164|  1.97k|    options->dht_announcements_enabled = dht_announcements_enabled;
  165|  1.97k|}
tox_options_get_experimental_thread_safety:
  167|  1.97k|{
  168|  1.97k|    return options->experimental_thread_safety;
  169|  1.97k|}
tox_options_set_experimental_thread_safety:
  172|  1.97k|{
  173|  1.97k|    options->experimental_thread_safety = experimental_thread_safety;
  174|  1.97k|}
tox_options_get_experimental_groups_persistence:
  176|  1.97k|{
  177|  1.97k|    return options->experimental_groups_persistence;
  178|  1.97k|}
tox_options_set_experimental_groups_persistence:
  181|  3.95k|{
  182|  3.95k|    options->experimental_groups_persistence = experimental_groups_persistence;
  183|  3.95k|}
tox_options_get_experimental_disable_dns:
  185|  1.97k|{
  186|  1.97k|    return options->experimental_disable_dns;
  187|  1.97k|}
tox_options_set_experimental_disable_dns:
  189|  1.97k|{
  190|  1.97k|    options->experimental_disable_dns = experimental_disable_dns;
  191|  1.97k|}
tox_options_set_experimental_owned_data:
  198|  1.97k|{
  199|  1.97k|    options->experimental_owned_data = experimental_owned_data;
  200|  1.97k|}
tox_options_get_savedata_data:
  203|  5.93k|{
  204|  5.93k|    return options->savedata_data;
  205|  5.93k|}
tox_options_set_savedata_data:
  208|  5.93k|{
  209|  5.93k|    if (!options->experimental_owned_data) {
  ------------------
  |  Branch (209:9): [True: 5.93k, False: 0]
  ------------------
  210|  5.93k|        options->savedata_data = savedata_data;
  211|  5.93k|        options->savedata_length = length;
  212|  5.93k|        return true;
  213|  5.93k|    }
  214|       |
  215|      0|    if (options->owned_savedata_data != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (215:9): [True: 0, False: 0]
  ------------------
  216|      0|        free(options->owned_savedata_data);
  217|      0|        options->owned_savedata_data = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  218|      0|    }
  219|      0|    if (savedata_data == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (219:9): [True: 0, False: 0]
  ------------------
  220|      0|        options->savedata_data = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  221|      0|        options->savedata_length = 0;
  222|      0|        return true;
  223|      0|    }
  224|       |
  225|      0|    uint8_t *owned_ptr = (uint8_t *)malloc(length);
  226|      0|    if (owned_ptr == nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (226:9): [True: 0, False: 0]
  ------------------
  227|      0|        options->savedata_data = savedata_data;
  228|      0|        options->savedata_length = length;
  229|      0|        options->owned_savedata_data = nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  230|      0|        return false;
  231|      0|    }
  232|       |
  233|      0|    memcpy(owned_ptr, savedata_data, length);
  234|      0|    options->savedata_data = owned_ptr;
  235|      0|    options->savedata_length = length;
  236|      0|    options->owned_savedata_data = owned_ptr;
  237|      0|    return true;
  238|      0|}
tox_options_default:
  241|  1.97k|{
  242|  1.97k|    if (options != nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (242:9): [True: 1.97k, False: 0]
  ------------------
  243|       |        // Free any owned data.
  244|  1.97k|        tox_options_set_proxy_host(options, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  245|  1.97k|        tox_options_set_savedata_data(options, nullptr, 0);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  246|       |
  247|       |        // Set the rest to default values.
  248|  1.97k|        const Tox_Options default_options = {false};
  249|  1.97k|        *options = default_options;
  250|  1.97k|        tox_options_set_ipv6_enabled(options, true);
  251|  1.97k|        tox_options_set_udp_enabled(options, true);
  252|  1.97k|        tox_options_set_proxy_type(options, TOX_PROXY_TYPE_NONE);
  253|  1.97k|        tox_options_set_hole_punching_enabled(options, true);
  254|  1.97k|        tox_options_set_local_discovery_enabled(options, true);
  255|  1.97k|        tox_options_set_dht_announcements_enabled(options, true);
  256|  1.97k|        tox_options_set_experimental_thread_safety(options, false);
  257|  1.97k|        tox_options_set_experimental_groups_persistence(options, false);
  258|  1.97k|        tox_options_set_experimental_disable_dns(options, false);
  259|  1.97k|        tox_options_set_experimental_owned_data(options, false);
  260|  1.97k|    }
  261|  1.97k|}
tox_options_new:
  264|  1.97k|{
  265|  1.97k|    Tox_Options *options = (Tox_Options *)calloc(1, sizeof(Tox_Options));
  266|       |
  267|  1.97k|    if (options != nullptr) {
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  |  Branch (267:9): [True: 1.97k, False: 0]
  ------------------
  268|  1.97k|        tox_options_default(options);
  269|  1.97k|        SET_ERROR_PARAMETER(error, TOX_ERR_OPTIONS_NEW_OK);
  ------------------
  |  |   14|  1.97k|    do {                              \
  |  |   15|  1.97k|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|  3.95k|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (15:13): [True: 1.97k, False: 0]
  |  |  ------------------
  |  |   16|  1.97k|            *param = x;               \
  |  |   17|  1.97k|        }                             \
  |  |   18|  1.97k|    } while (0)
  |  |  ------------------
  |  |  |  Branch (18:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  270|  1.97k|        return options;
  271|  1.97k|    }
  272|       |
  273|      0|    SET_ERROR_PARAMETER(error, TOX_ERR_OPTIONS_NEW_MALLOC);
  ------------------
  |  |   14|      0|    do {                              \
  |  |   15|      0|        if (param != nullptr) {       \
  |  |  ------------------
  |  |  |  |   63|      0|#define nullptr NULL
  |  |  ------------------
  |  |  |  Branch (15:13): [True: 0, False: 0]
  |  |  ------------------
  |  |   16|      0|            *param = x;               \
  |  |   17|      0|        }                             \
  |  |   18|      0|    } while (0)
  |  |  ------------------
  |  |  |  Branch (18:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  274|      0|    return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  275|  1.97k|}
tox_options_free:
  278|  3.95k|{
  279|  3.95k|    if (options != nullptr) {
  ------------------
  |  |   63|  3.95k|#define nullptr NULL
  ------------------
  |  Branch (279:9): [True: 1.97k, False: 1.97k]
  ------------------
  280|       |        // Free any owned data.
  281|  1.97k|        tox_options_set_proxy_host(options, nullptr);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  282|  1.97k|        tox_options_set_savedata_data(options, nullptr, 0);
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
  283|  1.97k|        free(options);
  284|  1.97k|    }
  285|  3.95k|}

tox_default_system:
   36|  1.97k|{
   37|  1.97k|    const Tox_System sys = {
   38|  1.97k|        nullptr,  // mono_time_callback
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
   39|  1.97k|        nullptr,  // mono_time_user_data
  ------------------
  |  |   63|  1.97k|#define nullptr NULL
  ------------------
   40|  1.97k|        os_random(),
   41|  1.97k|        os_network(),
   42|  1.97k|        os_memory(),
   43|  1.97k|    };
   44|  1.97k|    return sys;
   45|  1.97k|}
tox_lock:
   48|  7.95k|{
   49|  7.95k|    if (tox->mutex != nullptr) {
  ------------------
  |  |   63|  7.95k|#define nullptr NULL
  ------------------
  |  Branch (49:9): [True: 0, False: 7.95k]
  ------------------
   50|      0|        pthread_mutex_lock(tox->mutex);
   51|      0|    }
   52|  7.95k|}
tox_unlock:
   55|  7.95k|{
   56|  7.95k|    if (tox->mutex != nullptr) {
  ------------------
  |  |   63|  7.95k|#define nullptr NULL
  ------------------
  |  Branch (56:9): [True: 0, False: 7.95k]
  ------------------
   57|      0|        pthread_mutex_unlock(tox->mutex);
   58|      0|    }
   59|  7.95k|}

free_uint8_t_pointer_array:
   27|  5.72k|{
   28|  5.72k|    if (ary == nullptr) {
  ------------------
  |  |   63|  5.72k|#define nullptr NULL
  ------------------
  |  Branch (28:9): [True: 5.49k, False: 233]
  ------------------
   29|  5.49k|        return;
   30|  5.49k|    }
   31|       |
   32|  3.96k|    for (size_t i = 0; i < n_items; ++i) {
  ------------------
  |  Branch (32:24): [True: 3.72k, False: 233]
  ------------------
   33|  3.72k|        if (ary[i] != nullptr) {
  ------------------
  |  |   63|  3.72k|#define nullptr NULL
  ------------------
  |  Branch (33:13): [True: 3.72k, False: 0]
  ------------------
   34|  3.72k|            mem_delete(mem, ary[i]);
   35|  3.72k|        }
   36|  3.72k|    }
   37|       |
   38|    233|    mem_delete(mem, ary);
   39|    233|}
data_checksum:
   42|    235|{
   43|    235|    uint8_t checksum[2] = {0};
   44|    235|    uint16_t check;
   45|       |
   46|  8.69k|    for (uint32_t i = 0; i < length; ++i) {
  ------------------
  |  Branch (46:26): [True: 8.46k, False: 235]
  ------------------
   47|  8.46k|        checksum[i % 2] ^= data[i];
   48|  8.46k|    }
   49|       |
   50|    235|    memcpy(&check, checksum, sizeof(check));
   51|    235|    return check;
   52|    235|}
memeq:
   79|  5.93k|{
   80|  5.93k|    return a_size == b_size && memcmp(a, b, a_size) == 0;
  ------------------
  |  Branch (80:12): [True: 5.45k, False: 478]
  |  Branch (80:32): [True: 5.45k, False: 0]
  ------------------
   81|  5.93k|}
memzero:
   99|  50.6k|{
  100|  50.6k|    if (data == nullptr || data_size == 0) {
  ------------------
  |  |   63|   101k|#define nullptr NULL
  ------------------
  |  Branch (100:9): [True: 0, False: 50.6k]
  |  Branch (100:28): [True: 0, False: 50.6k]
  ------------------
  101|      0|        return;
  102|      0|    }
  103|       |
  104|  50.6k|    memset(data, 0, data_size);
  105|  50.6k|}
min_u16:
  151|  1.78k|{
  152|  1.78k|    return a < b ? a : b;
  ------------------
  |  Branch (152:12): [True: 1.78k, False: 0]
  ------------------
  153|  1.78k|}
min_u32:
  155|     54|{
  156|     54|    return a < b ? a : b;
  ------------------
  |  Branch (156:12): [True: 27, False: 27]
  ------------------
  157|     54|}
jenkins_one_at_a_time_hash:
  169|    148|{
  170|    148|    uint32_t hash = 0;
  171|       |
  172|  4.88k|    for (uint32_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (172:26): [True: 4.73k, False: 148]
  ------------------
  173|  4.73k|        hash += key[i];
  174|  4.73k|        hash += (uint32_t)((uint64_t)hash << 10);
  175|  4.73k|        hash ^= hash >> 6;
  176|  4.73k|    }
  177|       |
  178|    148|    hash += (uint32_t)((uint64_t)hash << 3);
  179|    148|    hash ^= hash >> 11;
  180|    148|    hash += (uint32_t)((uint64_t)hash << 15);
  181|    148|    return hash;
  182|    148|}

