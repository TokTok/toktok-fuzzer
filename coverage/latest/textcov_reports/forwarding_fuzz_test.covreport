fuzz_support.cc:_ZZN6detail15func_conversionIPFPvP11Fuzz_SystemjjEXadL_ZN3$_18__invokeES3_jjEEEcvPFT_T0_DpT1_EIS1_S1_JjjEEEvENKUlS1_DpT_E_clIJjjEEEDaS1_SG_:
   31|    177|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFPvP11Fuzz_SystemjjEXadL_ZN3$_18__invokeES3_jjEEE13static_casterIS1_EcvT_IS3_EEv:
   22|    177|        {
   23|    177|            return static_cast<To>(obj);
   24|    177|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFvP11Fuzz_SystemPvEXadL_ZN3$_38__invokeES2_S3_EEEcvPFT_T0_DpT1_EIvS3_JS3_EEEvENKUlS3_DpT_E_clIJS3_EEEDaS3_SG_:
   31|    172|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFvP11Fuzz_SystemPvEXadL_ZN3$_38__invokeES2_S3_EEE13static_casterIS3_EcvT_IS2_EEv:
   22|    172|        {
   23|    172|            return static_cast<To>(obj);
   24|    172|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketEXadL_ZN3$_48__invokeES2_S3_EEEcvPFT_T0_DpT1_EIiPvJS3_EEEvENKUlSF_DpT_E_clIJS3_EEEDaSF_SH_:
   31|     56|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketEXadL_ZN3$_48__invokeES2_S3_EEE13static_casterIPvEcvT_IS2_EEv:
   22|     56|        {
   23|     56|            return static_cast<To>(obj);
   24|     56|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketPK12Network_AddrEXadL_ZN3$_68__invokeES2_S3_S6_EEEcvPFT_T0_DpT1_EIiPvJS3_S6_EEEvENKUlSI_DpT_E_clIJS3_S6_EEEDaSI_SK_:
   31|     56|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketPK12Network_AddrEXadL_ZN3$_68__invokeES2_S3_S6_EEE13static_casterIPvEcvT_IS2_EEv:
   22|     56|        {
   23|     56|            return static_cast<To>(obj);
   24|     56|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketPKhmPK12Network_AddrEXadL_ZN4$_138__invokeES2_S3_S5_mS8_EEEcvPFT_T0_DpT1_EIiPvJS3_S5_mS8_EEEvENKUlSK_DpT_E_clIJS3_S5_mS8_EEEDaSK_SM_:
   31|      6|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketPKhmPK12Network_AddrEXadL_ZN4$_138__invokeES2_S3_S5_mS8_EEE13static_casterIPvEcvT_IS2_EEv:
   22|      6|        {
   23|      6|            return static_cast<To>(obj);
   24|      6|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPF6SocketP11Fuzz_SystemiiiEXadL_ZN4$_148__invokeES3_iiiEEEcvPFT_T0_DpT1_EIS1_PvJiiiEEEvENKUlSF_DpT_E_clIJiiiEEEDaSF_SH_:
   31|     56|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPF6SocketP11Fuzz_SystemiiiEXadL_ZN4$_148__invokeES3_iiiEEE13static_casterIPvEcvT_IS3_EEv:
   22|     56|        {
   23|     56|            return static_cast<To>(obj);
   24|     56|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketbEXadL_ZN4$_158__invokeES2_S3_bEEEcvPFT_T0_DpT1_EIiPvJS3_bEEEvENKUlSF_DpT_E_clIJS3_bEEEDaSF_SH_:
   31|     56|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketbEXadL_ZN4$_158__invokeES2_S3_bEEE13static_casterIPvEcvT_IS2_EEv:
   22|     56|        {
   23|     56|            return static_cast<To>(obj);
   24|     56|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketiiPKvmEXadL_ZN4$_178__invokeES2_S3_iiS5_mEEEcvPFT_T0_DpT1_EIiPvJS3_iiS5_mEEEvENKUlSH_DpT_E_clIJS3_iiS5_mEEEDaSH_SJ_:
   31|    168|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketiiPKvmEXadL_ZN4$_178__invokeES2_S3_iiS5_mEEE13static_casterIPvEcvT_IS2_EEv:
   22|    168|        {
   23|    168|            return static_cast<To>(obj);
   24|    168|        }

_ZN6SystemC2ENSt3__110unique_ptrI10Tox_SystemNS0_14default_deleteIS2_EEEENS1_I6MemoryNS3_IS6_EEEENS1_I7NetworkNS3_IS9_EEEENS1_I6RandomNS3_ISC_EEEE:
   38|     62|    : sys(std::move(in_sys))
   39|     62|    , mem(std::move(in_mem))
   40|     62|    , ns(std::move(in_ns))
   41|     62|    , rng(std::move(in_rng))
   42|     62|{
   43|     62|}
_ZN6SystemD2Ev:
   46|     62|System::~System() { }
_ZN11Fuzz_SystemC2ER9Fuzz_Data:
  232|     62|    : System{
  233|     62|        std::make_unique<Tox_System>(),
  234|     62|        std::make_unique<Memory>(Memory{&fuzz_memory_funcs, this}),
  235|     62|        std::make_unique<Network>(Network{&fuzz_network_funcs, this}),
  236|     62|        std::make_unique<Random>(Random{&fuzz_random_funcs, this}),
  237|     62|    }
  238|     62|    , data(input)
  239|     62|{
  240|     62|    sys->mono_time_callback = [](void *self) { return static_cast<Fuzz_System *>(self)->clock; };
  241|     62|    sys->mono_time_user_data = this;
  242|     62|    sys->mem = mem.get();
  243|     62|    sys->ns = ns.get();
  244|     62|    sys->rng = rng.get();
  245|     62|}
fuzz_support.cc:_ZL12report_allocPKcS0_mPv:
   79|    173|{
   80|    173|    if (Fuzz_Data::FUZZ_DEBUG) {
  ------------------
  |  Branch (80:9): [Folded - Ignored]
  ------------------
   81|      0|        printf("%s: %s(%zu): %s\n", name, func, size, ptr == nullptr ? "false" : "true");
  ------------------
  |  Branch (81:55): [True: 0, False: 0]
  ------------------
   82|      0|    }
   83|    173|    return ptr;
   84|    173|}
fuzz_support.cc:_ZNK3$_1clEP11Fuzz_Systemjj:
  103|    177|    ![](Fuzz_System *self, uint32_t nmemb, uint32_t size) {
  104|    177|        return alloc_common<decltype(std::calloc), std::calloc>(
  105|    177|            "calloc", nmemb * size, self->data, nmemb, size);
  106|    177|    },
fuzz_support.cc:_ZL12alloc_commonIDoFPvmmETnT_XadL_Z6callocEEJjjEES0_PKcmR9Fuzz_DataDpT1_:
   88|    177|{
   89|    177|    CONSUME1_OR_RETURN_VAL(
  ------------------
  |  |  122|    177|    if (INPUT.size() < sizeof(TYPE)) {                 \
  |  |  ------------------
  |  |  |  Branch (122:9): [True: 118, False: 59]
  |  |  ------------------
  |  |  123|    118|        return VAL;                                    \
  |  |  124|    118|    }                                                  \
  |  |  125|    177|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   90|     59|        const bool, want_alloc, data, report_alloc("tox1", func, size, Func(args...)));
   91|     59|    if (!want_alloc) {
  ------------------
  |  Branch (91:9): [True: 4, False: 55]
  ------------------
   92|      4|        return nullptr;
   93|      4|    }
   94|     55|    return report_alloc("tox1", func, size, Func(args...));
   95|     59|}
fuzz_support.cc:_ZNK3$_3clEP11Fuzz_SystemPv:
  113|    172|    ![](Fuzz_System *self, void *ptr) { std::free(ptr); },
fuzz_support.cc:_ZNK3$_4clEP11Fuzz_System6Socket:
  117|     56|    /* .close = */ ![](Fuzz_System *self, Socket sock) { return 0; },
fuzz_support.cc:_ZNK3$_6clEP11Fuzz_System6SocketPK12Network_Addr:
  119|     56|    /* .bind = */ ![](Fuzz_System *self, Socket sock, const Network_Addr *addr) { return 0; },
fuzz_support.cc:_ZNK4$_13clEP11Fuzz_System6SocketPKhmPK12Network_Addr:
  157|      6|    ![](Fuzz_System *self, Socket sock, const uint8_t *buf, size_t len, const Network_Addr *addr) {
  158|      6|        assert(sock.value == 42 || sock.value == 1337);
  159|       |        // Always succeed.
  160|      6|        return static_cast<int>(len);
  161|      6|    },
fuzz_support.cc:_ZNK4$_14clEP11Fuzz_Systemiii:
  162|     56|    /* .socket = */ ![](Fuzz_System *self, int domain, int type, int proto) { return Socket{42}; },
fuzz_support.cc:_ZNK4$_15clEP11Fuzz_System6Socketb:
  163|     56|    /* .socket_nonblock = */ ![](Fuzz_System *self, Socket sock, bool nonblock) { return 0; },
fuzz_support.cc:_ZNK4$_17clEP11Fuzz_System6SocketiiPKvm:
  170|    168|    ![](Fuzz_System *self, Socket sock, int level, int optname, const void *optval, size_t optlen) {
  171|    168|        return 0;
  172|    168|    },

_ZNK9Fuzz_Data4sizeEv:
   69|    705|    std::size_t size() const { return size_; }
_ZN9Fuzz_Data8consume1EPKc:
   68|    220|    Consumer consume1(const char *func) { return Consumer{func, *this}; }
_ZN9Fuzz_Data8ConsumercvT_ItEEv:
   60|     79|        {
   61|     79|            const uint8_t *bytes = fd.consume(func, sizeof(T));
   62|     79|            T val;
   63|     79|            std::memcpy(&val, bytes, sizeof(T));
   64|     79|            return val;
   65|     79|        }
_ZN9Fuzz_Data7consumeEPKcm:
   75|    509|    {
   76|    509|        const uint8_t *val = data_;
   77|    509|        if (FUZZ_DEBUG) {
  ------------------
  |  Branch (77:13): [Folded - Ignored]
  ------------------
   78|      0|            if (pos() == TRACE_TRAP) {
  ------------------
  |  Branch (78:17): [True: 0, False: 0]
  ------------------
   79|      0|                __asm__("int $3");
   80|      0|            }
   81|      0|            if (count == 1) {
  ------------------
  |  Branch (81:17): [True: 0, False: 0]
  ------------------
   82|      0|                std::printf("consume@%zu(%s): %d (0x%02x)\n", pos(), func, val[0], val[0]);
   83|      0|            } else if (count != 0) {
  ------------------
  |  Branch (83:24): [True: 0, False: 0]
  ------------------
   84|      0|                std::printf("consume@%zu(%s): %02x..%02x[%zu]\n", pos(), func, val[0],
   85|      0|                    val[count - 1], count);
   86|      0|            }
   87|      0|        }
   88|    509|        data_ += count;
   89|    509|        size_ -= count;
   90|    509|        return val;
   91|    509|    }
forwarding_fuzz_test.cc:_Z18fuzz_select_targetIJXadL_ZN12_GLOBAL__N_122TestSendForwardRequestER9Fuzz_DataEEXadL_ZNS0_16TestForwardReplyES2_EEEEvPKhm:
  183|     82|{
  184|     82|    Fuzz_Data input{data, size};
  185|       |
  186|     82|    CONSUME1_OR_RETURN(const uint8_t, selector, input);
  ------------------
  |  |  105|     82|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 0, False: 82]
  |  |  ------------------
  |  |  106|      0|        return;                               \
  |  |  107|      0|    }                                         \
  |  |  108|     82|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
  187|     82|    return Fuzz_Target_Selector<Args...>::select(selector, input);
  188|     82|}
_ZN9Fuzz_DataC2EPKhm:
   32|     82|        : data_(input_data)
   33|     82|        , base_(input_data)
   34|     82|        , size_(input_size)
   35|     82|    {
   36|     82|    }
_ZN9Fuzz_Data8ConsumercvT_IhEEv:
   60|     82|        {
   61|     82|            const uint8_t *bytes = fd.consume(func, sizeof(T));
   62|     82|            T val;
   63|     82|            std::memcpy(&val, bytes, sizeof(T));
   64|     82|            return val;
   65|     82|        }
forwarding_fuzz_test.cc:_ZN20Fuzz_Target_SelectorIJXadL_ZN12_GLOBAL__N_122TestSendForwardRequestER9Fuzz_DataEEXadL_ZNS0_16TestForwardReplyES2_EEEE6selectEhS2_:
  164|     82|    {
  165|     82|        if (selector == sizeof...(Args)) {
  ------------------
  |  Branch (165:13): [True: 52, False: 30]
  ------------------
  166|     52|            return Arg(input);
  167|     52|        }
  168|     30|        return Fuzz_Target_Selector<Args...>::select(selector, input);
  169|     82|    }
forwarding_fuzz_test.cc:_ZN20Fuzz_Target_SelectorIJXadL_ZN12_GLOBAL__N_116TestForwardReplyER9Fuzz_DataEEEE6selectEhS2_:
  164|     30|    {
  165|     30|        if (selector == sizeof...(Args)) {
  ------------------
  |  Branch (165:13): [True: 29, False: 1]
  ------------------
  166|     29|            return Arg(input);
  167|     29|        }
  168|      1|        return Fuzz_Target_Selector<Args...>::select(selector, input);
  169|     30|    }
_ZN20Fuzz_Target_SelectorIJEE6selectEhR9Fuzz_Data:
  175|      1|    {
  176|       |        // The selector selected no function, so we do nothing and rely on the
  177|       |        // fuzzer to come up with a better selector.
  178|      1|    }
_ZN9Fuzz_Data8ConsumercvbEv:
   46|     59|        {
   47|       |            // Special case because memcpy causes UB for bool (which can't be
   48|       |            // anything other than 0 or 1).
   49|     59|            const bool val = fd.data_[0];
   50|     59|            if (FUZZ_DEBUG) {
  ------------------
  |  Branch (50:17): [Folded - Ignored]
  ------------------
   51|      0|                std::printf("consume@%zu(%s): bool %s\n", fd.pos(), func, val ? "true" : "false");
  ------------------
  |  Branch (51:75): [True: 0, False: 0]
  ------------------
   52|      0|            }
   53|     59|            ++fd.data_;
   54|     59|            --fd.size_;
   55|     59|            return val;
   56|     59|        }

send_forward_request:
   50|     44|{
   51|     44|    if (chain_length == 0 || chain_length > MAX_FORWARD_CHAIN_LENGTH
  ------------------
  |  |   27|     87|#define MAX_FORWARD_CHAIN_LENGTH 4
  ------------------
  |  Branch (51:9): [True: 1, False: 43]
  |  Branch (51:30): [True: 1, False: 42]
  ------------------
   52|     44|            || data_length > MAX_FORWARD_DATA_SIZE) {
  ------------------
  |  |   25|     42|#define MAX_FORWARD_DATA_SIZE (MAX_UDP_PACKET_SIZE - (1 + 1 + MAX_SENDBACK_SIZE))
  |  |  ------------------
  |  |  |  |  111|     42|#define MAX_UDP_PACKET_SIZE 2048
  |  |  ------------------
  |  |               #define MAX_FORWARD_DATA_SIZE (MAX_UDP_PACKET_SIZE - (1 + 1 + MAX_SENDBACK_SIZE))
  |  |  ------------------
  |  |  |  |   24|     42|#define MAX_SENDBACK_SIZE (0xff - 1)
  |  |  ------------------
  ------------------
  |  Branch (52:16): [True: 1, False: 41]
  ------------------
   53|      3|        return false;
   54|      3|    }
   55|       |
   56|     41|    const uint16_t len = forward_chain_packet_size(chain_length, data_length);
   57|     41|    VLA(uint8_t, packet, len);
  ------------------
  |  |   59|     41|#define VLA ALLOC_VLA
  |  |  ------------------
  |  |  |  |   28|     41|#define ALLOC_VLA(type, name, size) type name[size]
  |  |  ------------------
  ------------------
   58|       |
   59|     41|    return create_forward_chain_packet(chain_keys, chain_length, data, data_length, packet)
  ------------------
  |  Branch (59:12): [True: 41, False: 0]
  ------------------
   60|     41|           && sendpacket(net, forwarder, packet, len) == len;
  ------------------
  |  Branch (60:15): [True: 1, False: 40]
  ------------------
   61|     44|}
forward_chain_packet_size:
   64|     41|{
   65|     41|    return chain_length * (1 + CRYPTO_PUBLIC_KEY_SIZE) + data_length;
  ------------------
  |  |   43|     41|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
   66|     41|}
create_forward_chain_packet:
   71|     41|{
   72|     41|    if (chain_length == 0 || chain_length > MAX_FORWARD_CHAIN_LENGTH
  ------------------
  |  |   27|     82|#define MAX_FORWARD_CHAIN_LENGTH 4
  ------------------
  |  Branch (72:9): [True: 0, False: 41]
  |  Branch (72:30): [True: 0, False: 41]
  ------------------
   73|     41|            || data_length > MAX_FORWARD_DATA_SIZE) {
  ------------------
  |  |   25|     41|#define MAX_FORWARD_DATA_SIZE (MAX_UDP_PACKET_SIZE - (1 + 1 + MAX_SENDBACK_SIZE))
  |  |  ------------------
  |  |  |  |  111|     41|#define MAX_UDP_PACKET_SIZE 2048
  |  |  ------------------
  |  |               #define MAX_FORWARD_DATA_SIZE (MAX_UDP_PACKET_SIZE - (1 + 1 + MAX_SENDBACK_SIZE))
  |  |  ------------------
  |  |  |  |   24|     41|#define MAX_SENDBACK_SIZE (0xff - 1)
  |  |  ------------------
  ------------------
  |  Branch (73:16): [True: 0, False: 41]
  ------------------
   74|      0|        return false;
   75|      0|    }
   76|       |
   77|     41|    uint16_t offset = 0;
   78|       |
   79|     88|    for (uint16_t j = 0; j < chain_length; ++j) {
  ------------------
  |  Branch (79:26): [True: 47, False: 41]
  ------------------
   80|     47|        packet[offset] = NET_PACKET_FORWARD_REQUEST;
   81|     47|        ++offset;
   82|     47|        memcpy(packet + offset, chain_keys + j * CRYPTO_PUBLIC_KEY_SIZE, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|     47|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
                      memcpy(packet + offset, chain_keys + j * CRYPTO_PUBLIC_KEY_SIZE, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|     47|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
   83|     47|        offset += CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|     47|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
   84|     47|    }
   85|       |
   86|     41|    memcpy(packet + offset, data, data_length);
   87|     41|    return true;
   88|     41|}
forward_reply:
  318|     12|{
  319|     12|    if (sendback_length > MAX_SENDBACK_SIZE ||
  ------------------
  |  |   24|     24|#define MAX_SENDBACK_SIZE (0xff - 1)
  ------------------
  |  Branch (319:9): [True: 1, False: 11]
  ------------------
  320|     12|            length > MAX_FORWARD_DATA_SIZE) {
  ------------------
  |  |   25|     11|#define MAX_FORWARD_DATA_SIZE (MAX_UDP_PACKET_SIZE - (1 + 1 + MAX_SENDBACK_SIZE))
  |  |  ------------------
  |  |  |  |  111|     11|#define MAX_UDP_PACKET_SIZE 2048
  |  |  ------------------
  |  |               #define MAX_FORWARD_DATA_SIZE (MAX_UDP_PACKET_SIZE - (1 + 1 + MAX_SENDBACK_SIZE))
  |  |  ------------------
  |  |  |  |   24|     11|#define MAX_SENDBACK_SIZE (0xff - 1)
  |  |  ------------------
  ------------------
  |  Branch (320:13): [True: 1, False: 10]
  ------------------
  321|      2|        return false;
  322|      2|    }
  323|       |
  324|     10|    const uint16_t len = 1 + 1 + sendback_length + length;
  325|     10|    VLA(uint8_t, packet, len);
  ------------------
  |  |   59|     10|#define VLA ALLOC_VLA
  |  |  ------------------
  |  |  |  |   28|     10|#define ALLOC_VLA(type, name, size) type name[size]
  |  |  ------------------
  ------------------
  326|     10|    packet[0] = NET_PACKET_FORWARD_REPLY;
  327|     10|    packet[1] = (uint8_t) sendback_length;
  328|     10|    memcpy(packet + 1 + 1, sendback, sendback_length);
  329|     10|    memcpy(packet + 1 + 1 + sendback_length, data, length);
  330|     10|    return sendpacket(net, forwarder, packet, len) == len;
  331|     12|}

LLVMFuzzerTestOneInput:
   97|     82|{
   98|     82|    fuzz_select_target<TestSendForwardRequest, TestForwardReply>(data, size);
   99|     82|    return 0;
  100|     82|}
forwarding_fuzz_test.cc:_ZN12_GLOBAL__N_122TestSendForwardRequestER9Fuzz_Data:
   35|     52|{
   36|     52|    CONSUME1_OR_RETURN(const uint16_t, chain_length, input);
  ------------------
  |  |  105|     52|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 1, False: 51]
  |  |  ------------------
  |  |  106|      1|        return;                               \
  |  |  107|      1|    }                                         \
  |  |  108|     52|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   37|     51|    const uint16_t chain_keys_size = chain_length * CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|     51|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
   38|     51|    CONSUME_OR_RETURN(const uint8_t *chain_keys, input, chain_keys_size);
  ------------------
  |  |  139|     51|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 1, False: 50]
  |  |  ------------------
  |  |  140|      1|        return;                              \
  |  |  141|      1|    }                                        \
  |  |  142|     51|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   39|       |
   40|     50|    const auto prep = prepare(input);
   41|     50|    if (!prep.has_value()) {
  ------------------
  |  Branch (41:9): [True: 4, False: 46]
  ------------------
   42|      4|        return;
   43|      4|    }
   44|     46|    const auto [ipp, forwarder, data, data_size] = prep.value();
   45|       |
   46|       |    // rest of the fuzz data is input for malloc and network
   47|     46|    Fuzz_System sys(input);
   48|       |
   49|     46|    const Ptr<Logger> logger(logger_new(sys.mem.get()), logger_kill);
   50|     46|    if (logger == nullptr) {
  ------------------
  |  Branch (50:9): [True: 1, False: 45]
  ------------------
   51|      1|        return;
   52|      1|    }
   53|       |
   54|     45|    const Ptr<Networking_Core> net(new_networking_ex(logger.get(), sys.mem.get(), sys.ns.get(),
   55|     45|                                       &ipp.ip, ipp.port, ipp.port + 100, nullptr),
   56|     45|        kill_networking);
   57|     45|    if (net == nullptr) {
  ------------------
  |  Branch (57:9): [True: 1, False: 44]
  ------------------
   58|      1|        return;
   59|      1|    }
   60|       |
   61|     44|    send_forward_request(net.get(), &forwarder, chain_keys, chain_length, data, data_size);
   62|     44|}
forwarding_fuzz_test.cc:_ZN12_GLOBAL__N_17prepareER9Fuzz_Data:
   14|     77|{
   15|     77|    CONSUME_OR_RETURN_VAL(const uint8_t *ipp_packed, input, SIZE_IP_PORT, std::nullopt);
  ------------------
  |  |  145|     77|    if (INPUT.size() < SIZE) {                        \
  |  |  ------------------
  |  |  |  Branch (145:9): [True: 2, False: 75]
  |  |  ------------------
  |  |  146|      2|        return VAL;                                   \
  |  |  147|      2|    }                                                 \
  |  |  148|     77|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   16|     75|    IP_Port ipp{};
   17|     75|    unpack_ip_port(&ipp, ipp_packed, SIZE_IP6, true);
  ------------------
  |  |  186|     75|#define SIZE_IP6 16
  ------------------
   18|       |
   19|     75|    CONSUME_OR_RETURN_VAL(const uint8_t *forwarder_packed, input, SIZE_IP_PORT, std::nullopt);
  ------------------
  |  |  145|     75|    if (INPUT.size() < SIZE) {                        \
  |  |  ------------------
  |  |  |  Branch (145:9): [True: 5, False: 70]
  |  |  ------------------
  |  |  146|      5|        return VAL;                                   \
  |  |  147|      5|    }                                                 \
  |  |  148|     75|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   20|     70|    IP_Port forwarder{};
   21|     70|    unpack_ip_port(&forwarder, forwarder_packed, SIZE_IP6, true);
  ------------------
  |  |  186|     70|#define SIZE_IP6 16
  ------------------
   22|       |
   23|       |    // 2 bytes: size of the request
   24|     70|    CONSUME_OR_RETURN_VAL(const uint8_t *data_size_bytes, input, sizeof(uint16_t), std::nullopt);
  ------------------
  |  |  145|     70|    if (INPUT.size() < SIZE) {                        \
  |  |  ------------------
  |  |  |  Branch (145:9): [True: 6, False: 64]
  |  |  ------------------
  |  |  146|      6|        return VAL;                                   \
  |  |  147|      6|    }                                                 \
  |  |  148|     70|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   25|     64|    uint16_t data_size;
   26|     64|    std::memcpy(&data_size, data_size_bytes, sizeof(uint16_t));
   27|       |
   28|       |    // data bytes (max 64K)
   29|     64|    CONSUME_OR_RETURN_VAL(const uint8_t *data, input, data_size, std::nullopt);
  ------------------
  |  |  145|     64|    if (INPUT.size() < SIZE) {                        \
  |  |  ------------------
  |  |  |  Branch (145:9): [True: 2, False: 62]
  |  |  ------------------
  |  |  146|      2|        return VAL;                                   \
  |  |  147|      2|    }                                                 \
  |  |  148|     64|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   30|       |
   31|     62|    return {{ipp, forwarder, data, data_size}};
   32|     64|}
forwarding_fuzz_test.cc:_ZN12_GLOBAL__N_116TestForwardReplyER9Fuzz_Data:
   65|     29|{
   66|     29|    CONSUME1_OR_RETURN(const uint16_t, sendback_length, input);
  ------------------
  |  |  105|     29|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 1, False: 28]
  |  |  ------------------
  |  |  106|      1|        return;                               \
  |  |  107|      1|    }                                         \
  |  |  108|     29|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   67|     28|    CONSUME_OR_RETURN(const uint8_t *sendback, input, sendback_length);
  ------------------
  |  |  139|     28|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 1, False: 27]
  |  |  ------------------
  |  |  140|      1|        return;                              \
  |  |  141|      1|    }                                        \
  |  |  142|     28|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   68|       |
   69|     27|    const auto prep = prepare(input);
   70|     27|    if (!prep.has_value()) {
  ------------------
  |  Branch (70:9): [True: 11, False: 16]
  ------------------
   71|     11|        return;
   72|     11|    }
   73|     16|    const auto [ipp, forwarder, data, data_size] = prep.value();
   74|       |
   75|       |    // rest of the fuzz data is input for malloc and network
   76|     16|    Fuzz_System sys(input);
   77|       |
   78|     16|    const Ptr<Logger> logger(logger_new(sys.mem.get()), logger_kill);
   79|     16|    if (logger == nullptr) {
  ------------------
  |  Branch (79:9): [True: 1, False: 15]
  ------------------
   80|      1|        return;
   81|      1|    }
   82|       |
   83|     15|    const Ptr<Networking_Core> net(new_networking_ex(logger.get(), sys.mem.get(), sys.ns.get(),
   84|     15|                                       &ipp.ip, ipp.port, ipp.port + 100, nullptr),
   85|     15|        kill_networking);
   86|     15|    if (net == nullptr) {
  ------------------
  |  Branch (86:9): [True: 3, False: 12]
  ------------------
   87|      3|        return;
   88|      3|    }
   89|       |
   90|     12|    forward_reply(net.get(), &forwarder, sendback, sendback_length, data, data_size);
   91|     12|}

logger_new:
   33|     62|{
   34|     62|    Logger *log = (Logger *)mem_alloc(mem, sizeof(Logger));
   35|       |
   36|     62|    if (log == nullptr) {
  ------------------
  |  |   63|     62|#define nullptr NULL
  ------------------
  |  Branch (36:9): [True: 2, False: 60]
  ------------------
   37|      2|        return nullptr;
  ------------------
  |  |   63|      2|#define nullptr NULL
  ------------------
   38|      2|    }
   39|       |
   40|     60|    log->mem = mem;
   41|       |
   42|     60|    return log;
   43|     62|}
logger_kill:
   46|     60|{
   47|     60|    if (log == nullptr) {
  ------------------
  |  |   63|     60|#define nullptr NULL
  ------------------
  |  Branch (47:9): [True: 0, False: 60]
  ------------------
   48|      0|        return;
   49|      0|    }
   50|       |
   51|     60|    mem_delete(log->mem, log);
   52|     60|}
logger_write:
   64|     44|{
   65|     44|    if (log == nullptr) {
  ------------------
  |  |   63|     44|#define nullptr NULL
  ------------------
  |  Branch (65:9): [True: 0, False: 44]
  ------------------
   66|      0|        return;
   67|      0|    }
   68|       |
   69|     44|    if (log->callback == nullptr) {
  ------------------
  |  |   63|     44|#define nullptr NULL
  ------------------
  |  Branch (69:9): [True: 44, False: 0]
  ------------------
   70|     44|        return;
   71|     44|    }
   72|       |
   73|       |    // Only pass the file name, not the entire file path, for privacy reasons.
   74|       |    // The full path may contain PII of the person compiling toxcore (their
   75|       |    // username and directory layout).
   76|      0|    const char *filename = strrchr(file, '/');
   77|      0|    file = filename != nullptr ? filename + 1 : file;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (77:12): [True: 0, False: 0]
  ------------------
   78|       |#if defined(_WIN32) || defined(__CYGWIN__)
   79|       |    // On Windows, the path separator *may* be a backslash, so we look for that
   80|       |    // one too.
   81|       |    const char *windows_filename = strrchr(file, '\\');
   82|       |    file = windows_filename != nullptr ? windows_filename + 1 : file;
   83|       |#endif /* WIN32 */
   84|       |
   85|       |    // Format message
   86|      0|    char msg[1024];
   87|      0|    va_list args;
   88|      0|    va_start(args, format);
   89|      0|    vsnprintf(msg, sizeof(msg), format, args);
   90|      0|    va_end(args);
   91|       |
   92|      0|    log->callback(log->context, level, file, line, func, msg, log->userdata);
   93|      0|}

mem_alloc:
   59|    177|{
   60|    177|    void *const ptr = mem->funcs->calloc(mem->obj, 1, size);
   61|    177|    return ptr;
   62|    177|}
mem_delete:
   89|    172|{
   90|    172|    mem->funcs->free(mem->obj, ptr);
   91|    172|}

netprof_record_packet:
   72|      6|{
   73|      6|    if (profile == nullptr) {
  ------------------
  |  |   63|      6|#define nullptr NULL
  ------------------
  |  Branch (73:9): [True: 0, False: 6]
  ------------------
   74|      0|        return;
   75|      0|    }
   76|       |
   77|      6|    if (dir == PACKET_DIRECTION_SEND) {
  ------------------
  |  Branch (77:9): [True: 6, False: 0]
  ------------------
   78|      6|        ++profile->total_packets_sent;
   79|      6|        ++profile->packets_sent[id];
   80|       |
   81|      6|        profile->total_bytes_sent += length;
   82|      6|        profile->bytes_sent[id] += length;
   83|      6|    } else {
   84|      0|        ++profile->total_packets_recv;
   85|      0|        ++profile->packets_recv[id];
   86|       |
   87|      0|        profile->total_bytes_recv += length;
   88|      0|        profile->bytes_recv[id] += length;
   89|      0|    }
   90|      6|}
netprof_new:
  139|     57|{
  140|     57|    Net_Profile *np = (Net_Profile *)mem_alloc(mem, sizeof(Net_Profile));
  141|       |
  142|     57|    if (np == nullptr) {
  ------------------
  |  |   63|     57|#define nullptr NULL
  ------------------
  |  Branch (142:9): [True: 1, False: 56]
  ------------------
  143|      1|        LOGGER_ERROR(log, "failed to allocate memory for net profiler");
  ------------------
  |  |   80|      1|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      1|    do {                                                                         \
  |  |  |  |   70|      1|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      2|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      1|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      1|        }                                                                        \
  |  |  |  |   73|      1|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  144|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  145|      1|    }
  146|       |
  147|     56|    return np;
  148|     57|}
netprof_kill:
  151|     56|{
  152|     56|    if (net_profile != nullptr) {
  ------------------
  |  |   63|     56|#define nullptr NULL
  ------------------
  |  Branch (152:9): [True: 56, False: 0]
  ------------------
  153|     56|        mem_delete(mem, net_profile);
  154|     56|    }
  155|     56|}

net_socket_from_native:
  368|     56|{
  369|     56|    const Socket res = {(force Socket_Value)sock};
  370|     56|    return res;
  371|     56|}
net_invalid_socket:
  374|     56|{
  375|     56|    return net_socket_from_native(INVALID_SOCKET);
  ------------------
  |  |  359|     56|#define INVALID_SOCKET (-1)
  ------------------
  376|     56|}
net_family_ipv4:
  384|     69|{
  385|     69|    return family_ipv4;
  386|     69|}
net_family_ipv6:
  389|      3|{
  390|      3|    return family_ipv6;
  391|      3|}
net_family_tcp_ipv4:
  404|     44|{
  405|     44|    return family_tcp_ipv4;
  406|     44|}
net_family_tcp_ipv6:
  409|      5|{
  410|      5|    return family_tcp_ipv6;
  411|      5|}
net_family_is_unspec:
  424|    154|{
  425|    154|    return family.value == family_unspec.value;
  426|    154|}
net_family_is_ipv4:
  429|    263|{
  430|    263|    return family.value == family_ipv4.value;
  431|    263|}
net_family_is_ipv6:
  434|     64|{
  435|     64|    return family.value == family_ipv6.value;
  436|     64|}
net_family_is_tcp_ipv4:
  449|     41|{
  450|     41|    return family.value == family_tcp_ipv4.value;
  451|     41|}
sock_valid:
  469|     56|{
  470|     56|    const Socket invalid_socket = net_invalid_socket();
  471|     56|    return sock.value != invalid_socket.value;
  472|     56|}
kill_sock:
  929|     56|{
  930|     56|    ns->funcs->close(ns->obj, sock);
  931|     56|}
set_socket_nonblock:
  934|     56|{
  935|     56|    return ns->funcs->socket_nonblock(ns->obj, sock, true) == 0;
  936|     56|}
set_socket_nosigpipe:
  939|     56|{
  940|       |#if defined(__APPLE__)
  941|       |    int set = 1;
  942|       |    return net_setsockopt(ns, sock, SOL_SOCKET, SO_NOSIGPIPE, &set, sizeof(int)) == 0;
  943|       |#else
  944|     56|    return true;
  945|     56|#endif /* __APPLE__ */
  946|     56|}
send_packet:
 1005|     51|{
 1006|     51|    IP_Port ipp_copy = *ip_port;
 1007|       |
 1008|     51|    if (net_family_is_unspec(ip_port->ip.family)) {
  ------------------
  |  Branch (1008:9): [True: 4, False: 47]
  ------------------
 1009|       |        // TODO(iphydf): Make this an error. Currently this fails sometimes when
 1010|       |        // called from DHT.c:do_ping_and_sendnode_requests.
 1011|      4|        return -1;
 1012|      4|    }
 1013|       |
 1014|     47|    if (net_family_is_unspec(net->family)) { /* Socket not initialized */
  ------------------
  |  Branch (1014:9): [True: 0, False: 47]
  ------------------
 1015|       |        // TODO(iphydf): Make this an error. Currently, the onion client calls
 1016|       |        // this via DHT nodes requests.
 1017|      0|        LOGGER_WARNING(net->log, "attempted to send message of length %u on uninitialised socket", packet.length);
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1018|      0|        return -1;
 1019|      0|    }
 1020|       |
 1021|       |    /* socket TOX_AF_INET, but target IP NOT: can't send */
 1022|     47|    if (net_family_is_ipv4(net->family) && !net_family_is_ipv4(ipp_copy.ip.family)) {
  ------------------
  |  Branch (1022:9): [True: 47, False: 0]
  |  Branch (1022:44): [True: 41, False: 6]
  ------------------
 1023|       |        // TODO(iphydf): Make this an error. Occasionally we try to send to an
 1024|       |        // all-zero ip_port.
 1025|     41|        Ip_Ntoa ip_str;
 1026|     41|        LOGGER_WARNING(net->log, "attempted to send message with network family %d (probably IPv6) on IPv4 socket (%s)",
  ------------------
  |  |   79|     41|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     41|    do {                                                                         \
  |  |  |  |   70|     41|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     82|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     41|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     41|        }                                                                        \
  |  |  |  |   73|     41|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1027|     41|                       ipp_copy.ip.family.value, net_ip_ntoa(&ipp_copy.ip, &ip_str));
 1028|     41|        return -1;
 1029|     41|    }
 1030|       |
 1031|      6|    if (net_family_is_ipv4(ipp_copy.ip.family) && net_family_is_ipv6(net->family)) {
  ------------------
  |  Branch (1031:9): [True: 6, False: 0]
  |  Branch (1031:51): [True: 0, False: 6]
  ------------------
 1032|       |        /* must convert to IPV4-in-IPV6 address */
 1033|      0|        IP6 ip6;
 1034|       |
 1035|       |        /* there should be a macro for this in a standards compliant
 1036|       |         * environment, not found */
 1037|      0|        ip6.uint32[0] = 0;
 1038|      0|        ip6.uint32[1] = 0;
 1039|      0|        ip6.uint32[2] = net_htonl(0xFFFF);
 1040|      0|        ip6.uint32[3] = ipp_copy.ip.ip.v4.uint32;
 1041|       |
 1042|      0|        ipp_copy.ip.family = net_family_ipv6();
 1043|      0|        ipp_copy.ip.ip.v6 = ip6;
 1044|      0|    }
 1045|       |
 1046|      6|    Network_Addr addr;
 1047|       |
 1048|      6|    if (net_family_is_ipv4(ipp_copy.ip.family)) {
  ------------------
  |  Branch (1048:9): [True: 6, False: 0]
  ------------------
 1049|      6|        struct sockaddr_in *const addr4 = (struct sockaddr_in *)&addr.addr;
 1050|       |
 1051|      6|        addr.size = sizeof(struct sockaddr_in);
 1052|      6|        addr4->sin_family = AF_INET;
 1053|      6|        addr4->sin_port = ipp_copy.port;
 1054|      6|        fill_addr4(&ipp_copy.ip.ip.v4, &addr4->sin_addr);
 1055|      6|    } else if (net_family_is_ipv6(ipp_copy.ip.family)) {
  ------------------
  |  Branch (1055:16): [True: 0, False: 0]
  ------------------
 1056|      0|        struct sockaddr_in6 *const addr6 = (struct sockaddr_in6 *)&addr.addr;
 1057|       |
 1058|      0|        addr.size = sizeof(struct sockaddr_in6);
 1059|      0|        addr6->sin6_family = AF_INET6;
 1060|      0|        addr6->sin6_port = ipp_copy.port;
 1061|      0|        fill_addr6(&ipp_copy.ip.ip.v6, &addr6->sin6_addr);
 1062|       |
 1063|      0|        addr6->sin6_flowinfo = 0;
 1064|      0|        addr6->sin6_scope_id = 0;
 1065|      0|    } else {
 1066|      0|        LOGGER_ERROR(net->log, "unknown address type: %d", ipp_copy.ip.family.value);
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1067|      0|        return -1;
 1068|      0|    }
 1069|       |
 1070|      6|    const long res = net_sendto(net->ns, net->sock, packet.data, packet.length, &addr, &ipp_copy);
 1071|      6|    loglogdata(net->log, "O=>", packet.data, packet.length, ip_port, res);
 1072|       |
 1073|      6|    assert(res <= INT_MAX);
 1074|       |
 1075|      6|    if (res == packet.length && packet.data != nullptr) {
  ------------------
  |  |   63|      6|#define nullptr NULL
  ------------------
  |  Branch (1075:9): [True: 6, False: 0]
  |  Branch (1075:33): [True: 6, False: 0]
  ------------------
 1076|      6|        netprof_record_packet(net->udp_net_profile, packet.data[0], packet.length, PACKET_DIRECTION_SEND);
 1077|      6|    }
 1078|       |
 1079|      6|    return (int)res;
 1080|      6|}
sendpacket:
 1088|     51|{
 1089|     51|    const Packet packet = {data, length};
 1090|     51|    return send_packet(net, ip_port, packet);
 1091|     51|}
new_networking_ex:
 1209|     60|{
 1210|       |    /* If both from and to are 0, use default port range
 1211|       |     * If one is 0 and the other is non-0, use the non-0 value as only port
 1212|       |     * If from > to, swap
 1213|       |     */
 1214|     60|    if (port_from == 0 && port_to == 0) {
  ------------------
  |  Branch (1214:9): [True: 19, False: 41]
  |  Branch (1214:27): [True: 0, False: 19]
  ------------------
 1215|      0|        port_from = TOX_PORTRANGE_FROM;
  ------------------
  |  |  162|      0|#define TOX_PORTRANGE_FROM 33445
  ------------------
 1216|      0|        port_to = TOX_PORTRANGE_TO;
  ------------------
  |  |  163|      0|#define TOX_PORTRANGE_TO   33545
  ------------------
 1217|     60|    } else if (port_from == 0 && port_to != 0) {
  ------------------
  |  Branch (1217:16): [True: 19, False: 41]
  |  Branch (1217:34): [True: 19, False: 0]
  ------------------
 1218|     19|        port_from = port_to;
 1219|     41|    } else if (port_from != 0 && port_to == 0) {
  ------------------
  |  Branch (1219:16): [True: 41, False: 0]
  |  Branch (1219:34): [True: 1, False: 40]
  ------------------
 1220|      1|        port_to = port_from;
 1221|     40|    } else if (port_from > port_to) {
  ------------------
  |  Branch (1221:16): [True: 1, False: 39]
  ------------------
 1222|      1|        const uint16_t temp_port = port_from;
 1223|      1|        port_from = port_to;
 1224|      1|        port_to = temp_port;
 1225|      1|    }
 1226|       |
 1227|     60|    if (error != nullptr) {
  ------------------
  |  |   63|     60|#define nullptr NULL
  ------------------
  |  Branch (1227:9): [True: 0, False: 60]
  ------------------
 1228|      0|        *error = 2;
 1229|      0|    }
 1230|       |
 1231|       |    /* maybe check for invalid IPs like 224+.x.y.z? if there is any IP set ever */
 1232|     60|    if (!net_family_is_ipv4(ip->family) && !net_family_is_ipv6(ip->family)) {
  ------------------
  |  Branch (1232:9): [True: 2, False: 58]
  |  Branch (1232:44): [True: 2, False: 0]
  ------------------
 1233|      2|        LOGGER_ERROR(log, "invalid address family: %u", ip->family.value);
  ------------------
  |  |   80|      2|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      2|    do {                                                                         \
  |  |  |  |   70|      2|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      4|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      2|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      2|        }                                                                        \
  |  |  |  |   73|      2|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1234|      2|        return nullptr;
  ------------------
  |  |   63|      2|#define nullptr NULL
  ------------------
 1235|      2|    }
 1236|       |
 1237|     58|    Networking_Core *temp = (Networking_Core *)mem_alloc(mem, sizeof(Networking_Core));
 1238|       |
 1239|     58|    if (temp == nullptr) {
  ------------------
  |  |   63|     58|#define nullptr NULL
  ------------------
  |  Branch (1239:9): [True: 1, False: 57]
  ------------------
 1240|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
 1241|      1|    }
 1242|       |
 1243|     57|    Net_Profile *np = netprof_new(log, mem);
 1244|       |
 1245|     57|    if (np == nullptr) {
  ------------------
  |  |   63|     57|#define nullptr NULL
  ------------------
  |  Branch (1245:9): [True: 1, False: 56]
  ------------------
 1246|      1|        free(temp);
 1247|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
 1248|      1|    }
 1249|       |
 1250|     56|    temp->udp_net_profile = np;
 1251|     56|    temp->ns = ns;
 1252|     56|    temp->log = log;
 1253|     56|    temp->mem = mem;
 1254|     56|    temp->family = ip->family;
 1255|     56|    temp->port = 0;
 1256|       |
 1257|       |    /* Initialize our socket. */
 1258|       |    /* add log message what we're creating */
 1259|     56|    temp->sock = net_socket(ns, temp->family, TOX_SOCK_DGRAM, TOX_PROTO_UDP);
  ------------------
  |  |  174|     56|#define TOX_SOCK_DGRAM 2
  ------------------
                  temp->sock = net_socket(ns, temp->family, TOX_SOCK_DGRAM, TOX_PROTO_UDP);
  ------------------
  |  |  177|     56|#define TOX_PROTO_UDP 2
  ------------------
 1260|       |
 1261|       |    /* Check for socket error. */
 1262|     56|    if (!sock_valid(temp->sock)) {
  ------------------
  |  Branch (1262:9): [True: 0, False: 56]
  ------------------
 1263|      0|        const int neterror = net_error();
 1264|      0|        Net_Strerror error_str;
 1265|      0|        LOGGER_ERROR(log, "failed to get a socket?! %d, %s", neterror, net_strerror(neterror, &error_str));
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1266|      0|        netprof_kill(mem, temp->udp_net_profile);
 1267|      0|        mem_delete(mem, temp);
 1268|       |
 1269|      0|        if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1269:13): [True: 0, False: 0]
  ------------------
 1270|      0|            *error = 1;
 1271|      0|        }
 1272|       |
 1273|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1274|      0|    }
 1275|       |
 1276|       |    /* Functions to increase the size of the send and receive UDP buffers.
 1277|       |     */
 1278|     56|    int n = 1024 * 1024 * 2;
 1279|       |
 1280|     56|    if (net_setsockopt(ns, temp->sock, SOL_SOCKET, SO_RCVBUF, &n, sizeof(n)) != 0) {
  ------------------
  |  Branch (1280:9): [True: 0, False: 56]
  ------------------
 1281|      0|        LOGGER_WARNING(log, "failed to set socket option %d", SO_RCVBUF);
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1282|      0|    }
 1283|       |
 1284|     56|    if (net_setsockopt(ns, temp->sock, SOL_SOCKET, SO_SNDBUF, &n, sizeof(n)) != 0) {
  ------------------
  |  Branch (1284:9): [True: 0, False: 56]
  ------------------
 1285|      0|        LOGGER_WARNING(log, "failed to set socket option %d", SO_SNDBUF);
  ------------------
  |  |   79|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1286|      0|    }
 1287|       |
 1288|       |    /* Enable broadcast on socket */
 1289|     56|    int broadcast = 1;
 1290|       |
 1291|     56|    if (net_setsockopt(ns, temp->sock, SOL_SOCKET, SO_BROADCAST, &broadcast, sizeof(broadcast)) != 0) {
  ------------------
  |  Branch (1291:9): [True: 0, False: 56]
  ------------------
 1292|      0|        LOGGER_ERROR(log, "failed to set socket option %d", SO_BROADCAST);
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1293|      0|    }
 1294|       |
 1295|       |    /* iOS UDP sockets are weird and apparently can SIGPIPE */
 1296|     56|    if (!set_socket_nosigpipe(ns, temp->sock)) {
  ------------------
  |  Branch (1296:9): [True: 0, False: 56]
  ------------------
 1297|      0|        kill_networking(temp);
 1298|       |
 1299|      0|        if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1299:13): [True: 0, False: 0]
  ------------------
 1300|      0|            *error = 1;
 1301|      0|        }
 1302|       |
 1303|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1304|      0|    }
 1305|       |
 1306|       |    /* Set socket nonblocking. */
 1307|     56|    if (!set_socket_nonblock(ns, temp->sock)) {
  ------------------
  |  Branch (1307:9): [True: 0, False: 56]
  ------------------
 1308|      0|        kill_networking(temp);
 1309|       |
 1310|      0|        if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1310:13): [True: 0, False: 0]
  ------------------
 1311|      0|            *error = 1;
 1312|      0|        }
 1313|       |
 1314|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1315|      0|    }
 1316|       |
 1317|       |    /* Bind our socket to port PORT and the given IP address (usually 0.0.0.0 or ::) */
 1318|     56|    uint16_t *portptr = nullptr;
  ------------------
  |  |   63|     56|#define nullptr NULL
  ------------------
 1319|     56|    Network_Addr addr = {{0}};
 1320|       |
 1321|     56|    if (net_family_is_ipv4(temp->family)) {
  ------------------
  |  Branch (1321:9): [True: 56, False: 0]
  ------------------
 1322|     56|        struct sockaddr_in *addr4 = (struct sockaddr_in *)&addr.addr;
 1323|       |
 1324|     56|        addr.size = sizeof(struct sockaddr_in);
 1325|     56|        addr4->sin_family = AF_INET;
 1326|     56|        addr4->sin_port = 0;
 1327|     56|        fill_addr4(&ip->ip.v4, &addr4->sin_addr);
 1328|       |
 1329|     56|        portptr = &addr4->sin_port;
 1330|     56|    } else if (net_family_is_ipv6(temp->family)) {
  ------------------
  |  Branch (1330:16): [True: 0, False: 0]
  ------------------
 1331|      0|        struct sockaddr_in6 *addr6 = (struct sockaddr_in6 *)&addr.addr;
 1332|       |
 1333|      0|        addr.size = sizeof(struct sockaddr_in6);
 1334|      0|        addr6->sin6_family = AF_INET6;
 1335|      0|        addr6->sin6_port = 0;
 1336|      0|        fill_addr6(&ip->ip.v6, &addr6->sin6_addr);
 1337|       |
 1338|      0|        addr6->sin6_flowinfo = 0;
 1339|      0|        addr6->sin6_scope_id = 0;
 1340|       |
 1341|      0|        portptr = &addr6->sin6_port;
 1342|      0|    } else {
 1343|      0|        mem_delete(mem, temp);
 1344|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1345|      0|    }
 1346|       |
 1347|     56|    if (net_family_is_ipv6(ip->family)) {
  ------------------
  |  Branch (1347:9): [True: 0, False: 56]
  ------------------
 1348|      0|        const bool is_dualstack = set_socket_dualstack(ns, temp->sock);
 1349|       |
 1350|      0|        if (is_dualstack) {
  ------------------
  |  Branch (1350:13): [True: 0, False: 0]
  ------------------
 1351|      0|            LOGGER_TRACE(log, "Dual-stack socket: enabled");
  ------------------
  |  |   76|      0|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1352|      0|        } else {
 1353|      0|            LOGGER_ERROR(log, "Dual-stack socket failed to enable, won't be able to receive from/send to IPv4 addresses");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1354|      0|        }
 1355|       |
 1356|      0|#ifndef ESP_PLATFORM
 1357|       |        /* multicast local nodes */
 1358|      0|        struct ipv6_mreq mreq = {{{{0}}}};
 1359|      0|        mreq.ipv6mr_multiaddr.s6_addr[0] = 0xFF;
 1360|      0|        mreq.ipv6mr_multiaddr.s6_addr[1] = 0x02;
 1361|      0|        mreq.ipv6mr_multiaddr.s6_addr[15] = 0x01;
 1362|      0|        mreq.ipv6mr_interface = 0;
 1363|       |
 1364|      0|        const int res = net_setsockopt(ns, temp->sock, IPPROTO_IPV6, IPV6_ADD_MEMBERSHIP, &mreq, sizeof(mreq));
 1365|       |
 1366|      0|        const int neterror = net_error();
 1367|      0|        Net_Strerror error_str;
 1368|       |
 1369|      0|        if (res < 0) {
  ------------------
  |  Branch (1369:13): [True: 0, False: 0]
  ------------------
 1370|      0|            LOGGER_INFO(log, "Failed to activate local multicast membership in FF02::1. (%d, %s)", neterror, net_strerror(neterror, &error_str));
  ------------------
  |  |   78|      0|#define LOGGER_INFO(log, ...)    LOGGER_WRITE(log, LOGGER_LEVEL_INFO, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1371|      0|        } else {
 1372|      0|            LOGGER_TRACE(log, "Local multicast group joined successfully. (%d, %s)", neterror, net_strerror(neterror, &error_str));
  ------------------
  |  |   76|      0|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1373|      0|        }
 1374|      0|#endif /* ESP_PLATFORM */
 1375|      0|    }
 1376|       |
 1377|       |    /* A hanging program or a different user might block the standard port.
 1378|       |     * As long as it isn't a parameter coming from the commandline,
 1379|       |     * try a few ports after it, to see if we can find a "free" one.
 1380|       |     *
 1381|       |     * If we go on without binding, the first sendto() automatically binds to
 1382|       |     * a free port chosen by the system (i.e. anything from 1024 to 65535).
 1383|       |     *
 1384|       |     * Returning NULL after bind fails has both advantages and disadvantages:
 1385|       |     * advantage:
 1386|       |     *   we can rely on getting the port in the range 33445..33450, which
 1387|       |     *   enables us to tell joe user to open their firewall to a small range
 1388|       |     *
 1389|       |     * disadvantage:
 1390|       |     *   some clients might not test return of tox_new(), blindly assuming that
 1391|       |     *   it worked ok (which it did previously without a successful bind)
 1392|       |     */
 1393|     56|    uint16_t port_to_try = port_from;
 1394|     56|    *portptr = net_htons(port_to_try);
 1395|       |
 1396|     56|    for (uint16_t tries = port_from; tries <= port_to; ++tries) {
  ------------------
  |  Branch (1396:38): [True: 56, False: 0]
  ------------------
 1397|     56|        const int res = net_bind(ns, temp->sock, &addr);
 1398|       |
 1399|     56|        if (res == 0) {
  ------------------
  |  Branch (1399:13): [True: 56, False: 0]
  ------------------
 1400|     56|            temp->port = *portptr;
 1401|       |
 1402|     56|            Ip_Ntoa ip_str;
 1403|     56|            LOGGER_DEBUG(log, "Bound successfully to %s:%u", net_ip_ntoa(ip, &ip_str),
  ------------------
  |  |   77|     56|#define LOGGER_DEBUG(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_DEBUG, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     56|    do {                                                                         \
  |  |  |  |   70|     56|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    112|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|     56|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1404|     56|                         net_ntohs(temp->port));
 1405|       |
 1406|       |            /* errno isn't reset on success, only set on failure, the failed
 1407|       |             * binds with parallel clients yield a -EPERM to the outside if
 1408|       |             * errno isn't cleared here */
 1409|     56|            if (tries > 0) {
  ------------------
  |  Branch (1409:17): [True: 56, False: 0]
  ------------------
 1410|     56|                errno = 0;
 1411|     56|            }
 1412|       |
 1413|     56|            if (error != nullptr) {
  ------------------
  |  |   63|     56|#define nullptr NULL
  ------------------
  |  Branch (1413:17): [True: 0, False: 56]
  ------------------
 1414|      0|                *error = 0;
 1415|      0|            }
 1416|       |
 1417|     56|            return temp;
 1418|     56|        }
 1419|       |
 1420|      0|        ++port_to_try;
 1421|       |
 1422|      0|        if (port_to_try > port_to) {
  ------------------
  |  Branch (1422:13): [True: 0, False: 0]
  ------------------
 1423|      0|            port_to_try = port_from;
 1424|      0|        }
 1425|       |
 1426|      0|        *portptr = net_htons(port_to_try);
 1427|      0|    }
 1428|       |
 1429|      0|    Ip_Ntoa ip_str;
 1430|      0|    const int neterror = net_error();
 1431|      0|    Net_Strerror error_str;
 1432|      0|    LOGGER_ERROR(log, "failed to bind socket: %d, %s IP: %s port_from: %u port_to: %u",
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1433|      0|                 neterror, net_strerror(neterror, &error_str), net_ip_ntoa(ip, &ip_str), port_from, port_to);
 1434|      0|    kill_networking(temp);
 1435|       |
 1436|      0|    if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1436:9): [True: 0, False: 0]
  ------------------
 1437|      0|        *error = 1;
 1438|      0|    }
 1439|       |
 1440|      0|    return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1441|     56|}
kill_networking:
 1461|     56|{
 1462|     56|    if (net == nullptr) {
  ------------------
  |  |   63|     56|#define nullptr NULL
  ------------------
  |  Branch (1462:9): [True: 0, False: 56]
  ------------------
 1463|      0|        return;
 1464|      0|    }
 1465|       |
 1466|     56|    if (!net_family_is_unspec(net->family)) {
  ------------------
  |  Branch (1466:9): [True: 56, False: 0]
  ------------------
 1467|       |        /* Socket is initialized, so we close it. */
 1468|     56|        kill_sock(net->ns, net->sock);
 1469|     56|    }
 1470|       |
 1471|     56|    netprof_kill(net->mem, net->udp_net_profile);
 1472|     56|    mem_delete(net->mem, net);
 1473|     56|}
ipport_reset:
 1598|    121|{
 1599|    121|    if (ipport == nullptr) {
  ------------------
  |  |   63|    121|#define nullptr NULL
  ------------------
  |  Branch (1599:9): [True: 0, False: 121]
  ------------------
 1600|      0|        return;
 1601|      0|    }
 1602|       |
 1603|    121|    *ipport = empty_ip_port;
 1604|    121|}
unpack_ip_port:
 1744|    145|{
 1745|    145|    if (data == nullptr) {
  ------------------
  |  |   63|    145|#define nullptr NULL
  ------------------
  |  Branch (1745:9): [True: 0, False: 145]
  ------------------
 1746|      0|        return -1;
 1747|      0|    }
 1748|       |
 1749|    145|    bool is_ipv4;
 1750|    145|    Family host_family;
 1751|       |
 1752|    145|    if (data[0] == TOX_AF_INET) {
  ------------------
  |  |  168|    145|#define TOX_AF_INET 2
  ------------------
  |  Branch (1752:9): [True: 69, False: 76]
  ------------------
 1753|     69|        is_ipv4 = true;
 1754|     69|        host_family = net_family_ipv4();
 1755|     76|    } else if (data[0] == TOX_TCP_INET) {
  ------------------
  |  |  170|     76|#define TOX_TCP_INET 130
  ------------------
  |  Branch (1755:16): [True: 44, False: 32]
  ------------------
 1756|     44|        if (!tcp_enabled) {
  ------------------
  |  Branch (1756:13): [True: 0, False: 44]
  ------------------
 1757|      0|            return -1;
 1758|      0|        }
 1759|       |
 1760|     44|        is_ipv4 = true;
 1761|     44|        host_family = net_family_tcp_ipv4();
 1762|     44|    } else if (data[0] == TOX_AF_INET6) {
  ------------------
  |  |  169|     32|#define TOX_AF_INET6 10
  ------------------
  |  Branch (1762:16): [True: 3, False: 29]
  ------------------
 1763|      3|        is_ipv4 = false;
 1764|      3|        host_family = net_family_ipv6();
 1765|     29|    } else if (data[0] == TOX_TCP_INET6) {
  ------------------
  |  |  171|     29|#define TOX_TCP_INET6 138
  ------------------
  |  Branch (1765:16): [True: 5, False: 24]
  ------------------
 1766|      5|        if (!tcp_enabled) {
  ------------------
  |  Branch (1766:13): [True: 0, False: 5]
  ------------------
 1767|      0|            return -1;
 1768|      0|        }
 1769|       |
 1770|      5|        is_ipv4 = false;
 1771|      5|        host_family = net_family_tcp_ipv6();
 1772|     24|    } else {
 1773|     24|        return -1;
 1774|     24|    }
 1775|       |
 1776|    121|    ipport_reset(ip_port);
 1777|       |
 1778|    121|    if (is_ipv4) {
  ------------------
  |  Branch (1778:9): [True: 113, False: 8]
  ------------------
 1779|    113|        const uint32_t size = 1 + SIZE_IP4 + sizeof(uint16_t);
  ------------------
  |  |  185|    113|#define SIZE_IP4 4
  ------------------
 1780|       |
 1781|    113|        if (size > length) {
  ------------------
  |  Branch (1781:13): [True: 0, False: 113]
  ------------------
 1782|      0|            return -1;
 1783|      0|        }
 1784|       |
 1785|    113|        ip_port->ip.family = host_family;
 1786|    113|        memcpy(ip_port->ip.ip.v4.uint8, data + 1, SIZE_IP4);
  ------------------
  |  |  185|    113|#define SIZE_IP4 4
  ------------------
 1787|    113|        memcpy(&ip_port->port, data + 1 + SIZE_IP4, sizeof(uint16_t));
  ------------------
  |  |  185|    113|#define SIZE_IP4 4
  ------------------
 1788|    113|        return size;
 1789|    113|    } else {
 1790|      8|        const uint32_t size = 1 + SIZE_IP6 + sizeof(uint16_t);
  ------------------
  |  |  186|      8|#define SIZE_IP6 16
  ------------------
 1791|       |
 1792|      8|        if (size > length) {
  ------------------
  |  Branch (1792:13): [True: 8, False: 0]
  ------------------
 1793|      8|            return -1;
 1794|      8|        }
 1795|       |
 1796|      0|        ip_port->ip.family = host_family;
 1797|      0|        memcpy(ip_port->ip.ip.v6.uint8, data + 1, SIZE_IP6);
  ------------------
  |  |  186|      0|#define SIZE_IP6 16
  ------------------
 1798|      0|        memcpy(&ip_port->port, data + 1 + SIZE_IP6, sizeof(uint16_t));
  ------------------
  |  |  186|      0|#define SIZE_IP6 16
  ------------------
 1799|      0|        return size;
 1800|      8|    }
 1801|    121|}
net_ip_ntoa:
 1804|     41|{
 1805|     41|    assert(ip_str != nullptr);
 1806|       |
 1807|     41|    ip_str->ip_is_valid = false;
 1808|       |
 1809|     41|    if (ip == nullptr) {
  ------------------
  |  |   63|     41|#define nullptr NULL
  ------------------
  |  Branch (1809:9): [True: 0, False: 41]
  ------------------
 1810|      0|        snprintf(ip_str->buf, sizeof(ip_str->buf), "(IP invalid: NULL)");
 1811|      0|        ip_str->length = (uint16_t)strlen(ip_str->buf);
 1812|      0|        return ip_str->buf;
 1813|      0|    }
 1814|       |
 1815|     41|    if (!ip_parse_addr(ip, ip_str->buf, sizeof(ip_str->buf))) {
  ------------------
  |  Branch (1815:9): [True: 0, False: 41]
  ------------------
 1816|      0|        snprintf(ip_str->buf, sizeof(ip_str->buf), "(IP invalid, family %u)", ip->family.value);
 1817|      0|        ip_str->length = (uint16_t)strlen(ip_str->buf);
 1818|      0|        return ip_str->buf;
 1819|      0|    }
 1820|       |
 1821|       |    /* brute force protection against lacking termination */
 1822|     41|    ip_str->buf[sizeof(ip_str->buf) - 1] = '\0';
 1823|     41|    ip_str->length = (uint16_t)strlen(ip_str->buf);
 1824|     41|    ip_str->ip_is_valid = true;
 1825|       |
 1826|     41|    return ip_str->buf;
 1827|     41|}
ip_parse_addr:
 1830|     41|{
 1831|     41|    if (address == nullptr || ip == nullptr) {
  ------------------
  |  |   63|     82|#define nullptr NULL
  ------------------
                  if (address == nullptr || ip == nullptr) {
  ------------------
  |  |   63|     41|#define nullptr NULL
  ------------------
  |  Branch (1831:9): [True: 0, False: 41]
  |  Branch (1831:31): [True: 0, False: 41]
  ------------------
 1832|      0|        return false;
 1833|      0|    }
 1834|       |
 1835|     41|    if (net_family_is_ipv4(ip->family) || net_family_is_tcp_ipv4(ip->family)) {
  ------------------
  |  Branch (1835:9): [True: 0, False: 41]
  |  Branch (1835:43): [True: 41, False: 0]
  ------------------
 1836|     41|        struct in_addr addr;
 1837|     41|        assert(make_family(ip->family) == AF_INET);
 1838|     41|        fill_addr4(&ip->ip.v4, &addr);
 1839|     41|        return inet_ntop4(&addr, address, length) != nullptr;
  ------------------
  |  |   63|     41|#define nullptr NULL
  ------------------
 1840|     41|    }
 1841|       |
 1842|      0|    if (net_family_is_ipv6(ip->family) || net_family_is_tcp_ipv6(ip->family)) {
  ------------------
  |  Branch (1842:9): [True: 0, False: 0]
  |  Branch (1842:43): [True: 0, False: 0]
  ------------------
 1843|      0|        struct in6_addr addr;
 1844|      0|        assert(make_family(ip->family) == AF_INET6);
 1845|      0|        fill_addr6(&ip->ip.v6, &addr);
 1846|      0|        return inet_ntop6(&addr, address, length) != nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1847|      0|    }
 1848|       |
 1849|      0|    return false;
 1850|      0|}
net_socket:
 2209|     56|{
 2210|     56|    const int platform_domain = make_family(domain);
 2211|     56|    const int platform_type = make_socktype(type);
 2212|     56|    const int platform_prot = make_proto(protocol);
 2213|     56|    return ns->funcs->socket(ns->obj, platform_domain, platform_type, platform_prot);
 2214|     56|}
net_htons:
 2228|     56|{
 2229|     56|    return htons(hostshort);
 2230|     56|}
network.c:loglogdata:
  854|      6|{
  855|      6|    if (res < 0) { /* Windows doesn't necessarily know `%zu` */
  ------------------
  |  Branch (855:9): [True: 0, False: 6]
  ------------------
  856|      0|        Ip_Ntoa ip_str;
  857|      0|        const int error = net_error();
  858|      0|        Net_Strerror error_str;
  859|      0|        LOGGER_TRACE(log, "[%02x = %-21s] %s %3u%c %s:%u (%u: %s) | %08x%08x...%02x",
  ------------------
  |  |   76|      0|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  860|      0|                     buffer[0], net_packet_type_name((Net_Packet_Type)buffer[0]), message,
  861|      0|                     min_u16(buflen, 999), 'E',
  862|      0|                     net_ip_ntoa(&ip_port->ip, &ip_str), net_ntohs(ip_port->port), error,
  863|      0|                     net_strerror(error, &error_str), data_0(buflen, buffer), data_1(buflen, buffer), buffer[buflen - 1]);
  864|      6|    } else if ((res > 0) && ((size_t)res <= buflen)) {
  ------------------
  |  Branch (864:16): [True: 6, False: 0]
  |  Branch (864:29): [True: 6, False: 0]
  ------------------
  865|      6|        Ip_Ntoa ip_str;
  866|      6|        LOGGER_TRACE(log, "[%02x = %-21s] %s %3u%c %s:%u (%u: %s) | %08x%08x...%02x",
  ------------------
  |  |   76|      6|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      6|    do {                                                                         \
  |  |  |  |   70|      6|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     12|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (71:68): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      6|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  867|      6|                     buffer[0], net_packet_type_name((Net_Packet_Type)buffer[0]), message,
  868|      6|                     min_u16(res, 999), (size_t)res < buflen ? '<' : '=',
  869|      6|                     net_ip_ntoa(&ip_port->ip, &ip_str), net_ntohs(ip_port->port), 0, "OK",
  870|      6|                     data_0(buflen, buffer), data_1(buflen, buffer), buffer[buflen - 1]);
  871|      6|    } else { /* empty or overwrite */
  872|      0|        Ip_Ntoa ip_str;
  873|      0|        LOGGER_TRACE(log, "[%02x = %-21s] %s %lu%c%u %s:%u (%u: %s) | %08x%08x...%02x",
  ------------------
  |  |   76|      0|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (71:68): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  874|      0|                     buffer[0], net_packet_type_name((Net_Packet_Type)buffer[0]), message,
  875|      0|                     res, res == 0 ? '!' : '>', buflen,
  876|      0|                     net_ip_ntoa(&ip_port->ip, &ip_str), net_ntohs(ip_port->port), 0, "OK",
  877|      0|                     data_0(buflen, buffer), data_1(buflen, buffer), buffer[buflen - 1]);
  878|      0|    }
  879|      6|}
network.c:net_setsockopt:
  708|    168|{
  709|    168|    return ns->funcs->setsockopt(ns->obj, sock, level, optname, optval, optlen);
  710|    168|}
network.c:fill_addr4:
  316|    103|{
  317|    103|    addr->s_addr = ip->uint32;
  318|    103|}
network.c:net_sendto:
  895|      6|{
  896|      6|    return ns->funcs->sendto(ns->obj, sock, buf, len, addr);
  897|      6|}
network.c:net_bind:
  918|     56|{
  919|     56|    return ns->funcs->bind(ns->obj, sock, addr);
  920|     56|}
network.c:make_family:
  256|     97|{
  257|     97|    switch (tox_family.value) {
  258|     56|        case TOX_AF_INET:
  ------------------
  |  |  168|     56|#define TOX_AF_INET 2
  ------------------
  |  Branch (258:9): [True: 56, False: 41]
  ------------------
  259|     97|        case TCP_INET:
  ------------------
  |  |  181|     97|#define TCP_INET (TOX_AF_INET6 + 2)
  |  |  ------------------
  |  |  |  |  169|     97|#define TOX_AF_INET6 10
  |  |  ------------------
  ------------------
  |  Branch (259:9): [True: 41, False: 56]
  ------------------
  260|     97|            return AF_INET;
  261|       |
  262|      0|        case TOX_AF_INET6:
  ------------------
  |  |  169|      0|#define TOX_AF_INET6 10
  ------------------
  |  Branch (262:9): [True: 0, False: 97]
  ------------------
  263|      0|        case TCP_INET6:
  ------------------
  |  |  182|      0|#define TCP_INET6 (TOX_AF_INET6 + 3)
  |  |  ------------------
  |  |  |  |  169|      0|#define TOX_AF_INET6 10
  |  |  ------------------
  ------------------
  |  Branch (263:9): [True: 0, False: 97]
  ------------------
  264|      0|            return AF_INET6;
  265|       |
  266|      0|        case TOX_AF_UNSPEC:
  ------------------
  |  |  167|      0|#define TOX_AF_UNSPEC 0
  ------------------
  |  Branch (266:9): [True: 0, False: 97]
  ------------------
  267|      0|            return AF_UNSPEC;
  268|       |
  269|      0|        default:
  ------------------
  |  Branch (269:9): [True: 0, False: 97]
  ------------------
  270|      0|            return tox_family.value;
  271|     97|    }
  272|     97|}
network.c:inet_ntop4:
  122|     41|{
  123|     41|    return inet_ntop(AF_INET, addr, buf, bufsize);
  124|     41|}
network.c:make_socktype:
  242|     56|{
  243|     56|    switch (type) {
  244|      0|        case TOX_SOCK_STREAM:
  ------------------
  |  |  173|      0|#define TOX_SOCK_STREAM 1
  ------------------
  |  Branch (244:9): [True: 0, False: 56]
  ------------------
  245|      0|            return SOCK_STREAM;
  246|       |
  247|     56|        case TOX_SOCK_DGRAM:
  ------------------
  |  |  174|     56|#define TOX_SOCK_DGRAM 2
  ------------------
  |  Branch (247:9): [True: 56, False: 0]
  ------------------
  248|     56|            return SOCK_DGRAM;
  249|       |
  250|      0|        default:
  ------------------
  |  Branch (250:9): [True: 0, False: 56]
  ------------------
  251|      0|            return type;
  252|     56|    }
  253|     56|}
network.c:make_proto:
  228|     56|{
  229|     56|    switch (proto) {
  230|      0|        case TOX_PROTO_TCP:
  ------------------
  |  |  176|      0|#define TOX_PROTO_TCP 1
  ------------------
  |  Branch (230:9): [True: 0, False: 56]
  ------------------
  231|      0|            return IPPROTO_TCP;
  232|       |
  233|     56|        case TOX_PROTO_UDP:
  ------------------
  |  |  177|     56|#define TOX_PROTO_UDP 2
  ------------------
  |  Branch (233:9): [True: 56, False: 0]
  ------------------
  234|     56|            return IPPROTO_UDP;
  235|       |
  236|      0|        default:
  ------------------
  |  Branch (236:9): [True: 0, False: 56]
  ------------------
  237|      0|            return proto;
  238|     56|    }
  239|     56|}

