fuzz_support.cc:_ZZN6detail15func_conversionIPFPvP11Fuzz_SystemjjEXadL_ZN3$_18__invokeES3_jjEEEcvPFT_T0_DpT1_EIS1_S1_JjjEEEvENKUlS1_DpT_E_clIJjjEEEDaS1_SG_:
   31|    255|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFPvP11Fuzz_SystemjjEXadL_ZN3$_18__invokeES3_jjEEE13static_casterIS1_EcvT_IS3_EEv:
   22|    255|        {
   23|    255|            return static_cast<To>(obj);
   24|    255|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFvP11Fuzz_SystemPvEXadL_ZN3$_38__invokeES2_S3_EEEcvPFT_T0_DpT1_EIvS3_JS3_EEEvENKUlS3_DpT_E_clIJS3_EEEDaS3_SG_:
   31|    250|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFvP11Fuzz_SystemPvEXadL_ZN3$_38__invokeES2_S3_EEE13static_casterIS3_EcvT_IS2_EEv:
   22|    250|        {
   23|    250|            return static_cast<To>(obj);
   24|    250|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketEXadL_ZN3$_48__invokeES2_S3_EEEcvPFT_T0_DpT1_EIiPvJS3_EEEvENKUlSF_DpT_E_clIJS3_EEEDaSF_SH_:
   31|     82|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketEXadL_ZN3$_48__invokeES2_S3_EEE13static_casterIPvEcvT_IS2_EEv:
   22|     82|        {
   23|     82|            return static_cast<To>(obj);
   24|     82|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketPK12Network_AddrEXadL_ZN3$_68__invokeES2_S3_S6_EEEcvPFT_T0_DpT1_EIiPvJS3_S6_EEEvENKUlSI_DpT_E_clIJS3_S6_EEEDaSI_SK_:
   31|     82|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketPK12Network_AddrEXadL_ZN3$_68__invokeES2_S3_S6_EEE13static_casterIPvEcvT_IS2_EEv:
   22|     82|        {
   23|     82|            return static_cast<To>(obj);
   24|     82|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketPKhmPK12Network_AddrEXadL_ZN4$_138__invokeES2_S3_S5_mS8_EEEcvPFT_T0_DpT1_EIiPvJS3_S5_mS8_EEEvENKUlSK_DpT_E_clIJS3_S5_mS8_EEEDaSK_SM_:
   31|     53|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketPKhmPK12Network_AddrEXadL_ZN4$_138__invokeES2_S3_S5_mS8_EEE13static_casterIPvEcvT_IS2_EEv:
   22|     53|        {
   23|     53|            return static_cast<To>(obj);
   24|     53|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPF6SocketP11Fuzz_SystemiiiEXadL_ZN4$_148__invokeES3_iiiEEEcvPFT_T0_DpT1_EIS1_PvJiiiEEEvENKUlSF_DpT_E_clIJiiiEEEDaSF_SH_:
   31|     82|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPF6SocketP11Fuzz_SystemiiiEXadL_ZN4$_148__invokeES3_iiiEEE13static_casterIPvEcvT_IS3_EEv:
   22|     82|        {
   23|     82|            return static_cast<To>(obj);
   24|     82|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketbEXadL_ZN4$_158__invokeES2_S3_bEEEcvPFT_T0_DpT1_EIiPvJS3_bEEEvENKUlSF_DpT_E_clIJS3_bEEEDaSF_SH_:
   31|     82|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketbEXadL_ZN4$_158__invokeES2_S3_bEEE13static_casterIPvEcvT_IS2_EEv:
   22|     82|        {
   23|     82|            return static_cast<To>(obj);
   24|     82|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketiiPKvmEXadL_ZN4$_178__invokeES2_S3_iiS5_mEEEcvPFT_T0_DpT1_EIiPvJS3_iiS5_mEEEvENKUlSH_DpT_E_clIJS3_iiS5_mEEEDaSH_SJ_:
   31|    246|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketiiPKvmEXadL_ZN4$_178__invokeES2_S3_iiS5_mEEE13static_casterIPvEcvT_IS2_EEv:
   22|    246|        {
   23|    246|            return static_cast<To>(obj);
   24|    246|        }

_ZN6SystemC2ENSt3__110unique_ptrI10Tox_SystemNS0_14default_deleteIS2_EEEENS1_I6MemoryNS3_IS6_EEEENS1_I7NetworkNS3_IS9_EEEENS1_I6RandomNS3_ISC_EEEE:
   38|     88|    : sys(std::move(in_sys))
   39|     88|    , mem(std::move(in_mem))
   40|     88|    , ns(std::move(in_ns))
   41|     88|    , rng(std::move(in_rng))
   42|     88|{
   43|     88|}
_ZN6SystemD2Ev:
   46|     88|System::~System() { }
_ZN11Fuzz_SystemC2ER9Fuzz_Data:
  232|     88|    : System{
  233|     88|        std::make_unique<Tox_System>(),
  234|     88|        std::make_unique<Memory>(Memory{&fuzz_memory_funcs, this}),
  235|     88|        std::make_unique<Network>(Network{&fuzz_network_funcs, this}),
  236|     88|        std::make_unique<Random>(Random{&fuzz_random_funcs, this}),
  237|     88|    }
  238|     88|    , data(input)
  239|     88|{
  240|     88|    sys->mono_time_callback = [](void *self) { return static_cast<Fuzz_System *>(self)->clock; };
  241|     88|    sys->mono_time_user_data = this;
  242|     88|    sys->mem = mem.get();
  243|     88|    sys->ns = ns.get();
  244|     88|    sys->rng = rng.get();
  245|     88|}
fuzz_support.cc:_ZL12report_allocPKcS0_mPv:
   79|    251|{
   80|    251|    if (Fuzz_Data::FUZZ_DEBUG) {
  ------------------
  |  Branch (80:9): [Folded - Ignored]
  ------------------
   81|      0|        printf("%s: %s(%zu): %s\n", name, func, size, ptr == nullptr ? "false" : "true");
  ------------------
  |  Branch (81:55): [True: 0, False: 0]
  ------------------
   82|      0|    }
   83|    251|    return ptr;
   84|    251|}
fuzz_support.cc:_ZNK3$_1clEP11Fuzz_Systemjj:
  103|    255|    ![](Fuzz_System *self, uint32_t nmemb, uint32_t size) {
  104|    255|        return alloc_common<decltype(std::calloc), std::calloc>(
  105|    255|            "calloc", nmemb * size, self->data, nmemb, size);
  106|    255|    },
fuzz_support.cc:_ZL12alloc_commonIDoFPvmmETnT_XadL_Z6callocEEJjjEES0_PKcmR9Fuzz_DataDpT1_:
   88|    255|{
   89|    255|    CONSUME1_OR_RETURN_VAL(
  ------------------
  |  |  122|    255|    if (INPUT.size() < sizeof(TYPE)) {                 \
  |  |  ------------------
  |  |  |  Branch (122:9): [True: 168, False: 87]
  |  |  ------------------
  |  |  123|    168|        return VAL;                                    \
  |  |  124|    168|    }                                                  \
  |  |  125|    255|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   90|     87|        const bool, want_alloc, data, report_alloc("tox1", func, size, Func(args...)));
   91|     87|    if (!want_alloc) {
  ------------------
  |  Branch (91:9): [True: 4, False: 83]
  ------------------
   92|      4|        return nullptr;
   93|      4|    }
   94|     83|    return report_alloc("tox1", func, size, Func(args...));
   95|     87|}
fuzz_support.cc:_ZNK3$_3clEP11Fuzz_SystemPv:
  113|    250|    ![](Fuzz_System *self, void *ptr) { std::free(ptr); },
fuzz_support.cc:_ZNK3$_4clEP11Fuzz_System6Socket:
  117|     82|    /* .close = */ ![](Fuzz_System *self, Socket sock) { return 0; },
fuzz_support.cc:_ZNK3$_6clEP11Fuzz_System6SocketPK12Network_Addr:
  119|     82|    /* .bind = */ ![](Fuzz_System *self, Socket sock, const Network_Addr *addr) { return 0; },
fuzz_support.cc:_ZNK4$_13clEP11Fuzz_System6SocketPKhmPK12Network_Addr:
  157|     53|    ![](Fuzz_System *self, Socket sock, const uint8_t *buf, size_t len, const Network_Addr *addr) {
  158|     53|        assert(sock.value == 42 || sock.value == 1337);
  159|       |        // Always succeed.
  160|     53|        return static_cast<int>(len);
  161|     53|    },
fuzz_support.cc:_ZNK4$_14clEP11Fuzz_Systemiii:
  162|     82|    /* .socket = */ ![](Fuzz_System *self, int domain, int type, int proto) { return Socket{42}; },
fuzz_support.cc:_ZNK4$_15clEP11Fuzz_System6Socketb:
  163|     82|    /* .socket_nonblock = */ ![](Fuzz_System *self, Socket sock, bool nonblock) { return 0; },
fuzz_support.cc:_ZNK4$_17clEP11Fuzz_System6SocketiiPKvm:
  170|    246|    ![](Fuzz_System *self, Socket sock, int level, int optname, const void *optval, size_t optlen) {
  171|    246|        return 0;
  172|    246|    },

_ZNK9Fuzz_Data4sizeEv:
   69|    965|    std::size_t size() const { return size_; }
_ZN9Fuzz_Data8consume1EPKc:
   68|    300|    Consumer consume1(const char *func) { return Consumer{func, *this}; }
_ZN9Fuzz_Data8ConsumercvT_ItEEv:
   60|    105|        {
   61|    105|            const uint8_t *bytes = fd.consume(func, sizeof(T));
   62|    105|            T val;
   63|    105|            std::memcpy(&val, bytes, sizeof(T));
   64|    105|            return val;
   65|    105|        }
_ZN9Fuzz_Data7consumeEPKcm:
   75|    691|    {
   76|    691|        const uint8_t *val = data_;
   77|    691|        if (FUZZ_DEBUG) {
  ------------------
  |  Branch (77:13): [Folded - Ignored]
  ------------------
   78|      0|            if (pos() == TRACE_TRAP) {
  ------------------
  |  Branch (78:17): [True: 0, False: 0]
  ------------------
   79|      0|                __asm__("int $3");
   80|      0|            }
   81|      0|            if (count == 1) {
  ------------------
  |  Branch (81:17): [True: 0, False: 0]
  ------------------
   82|      0|                std::printf("consume@%zu(%s): %d (0x%02x)\n", pos(), func, val[0], val[0]);
   83|      0|            } else if (count != 0) {
  ------------------
  |  Branch (83:24): [True: 0, False: 0]
  ------------------
   84|      0|                std::printf("consume@%zu(%s): %02x..%02x[%zu]\n", pos(), func, val[0],
   85|      0|                    val[count - 1], count);
   86|      0|            }
   87|      0|        }
   88|    691|        data_ += count;
   89|    691|        size_ -= count;
   90|    691|        return val;
   91|    691|    }
forwarding_fuzz_test.cc:_Z18fuzz_select_targetIJXadL_ZN12_GLOBAL__N_122TestSendForwardRequestER9Fuzz_DataEEXadL_ZNS0_16TestForwardReplyES2_EEEEvPKhm:
  183|    108|{
  184|    108|    Fuzz_Data input{data, size};
  185|       |
  186|    108|    CONSUME1_OR_RETURN(const uint8_t, selector, input);
  ------------------
  |  |  105|    108|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 0, False: 108]
  |  |  ------------------
  |  |  106|      0|        return;                               \
  |  |  107|      0|    }                                         \
  |  |  108|    108|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
  187|    108|    return Fuzz_Target_Selector<Args...>::select(selector, input);
  188|    108|}
_ZN9Fuzz_DataC2EPKhm:
   32|    108|        : data_(input_data)
   33|    108|        , base_(input_data)
   34|    108|        , size_(input_size)
   35|    108|    {
   36|    108|    }
_ZN9Fuzz_Data8ConsumercvT_IhEEv:
   60|    108|        {
   61|    108|            const uint8_t *bytes = fd.consume(func, sizeof(T));
   62|    108|            T val;
   63|    108|            std::memcpy(&val, bytes, sizeof(T));
   64|    108|            return val;
   65|    108|        }
forwarding_fuzz_test.cc:_ZN20Fuzz_Target_SelectorIJXadL_ZN12_GLOBAL__N_122TestSendForwardRequestER9Fuzz_DataEEXadL_ZNS0_16TestForwardReplyES2_EEEE6selectEhS2_:
  164|    108|    {
  165|    108|        if (selector == sizeof...(Args)) {
  ------------------
  |  Branch (165:13): [True: 80, False: 28]
  ------------------
  166|     80|            return Arg(input);
  167|     80|        }
  168|     28|        return Fuzz_Target_Selector<Args...>::select(selector, input);
  169|    108|    }
forwarding_fuzz_test.cc:_ZN20Fuzz_Target_SelectorIJXadL_ZN12_GLOBAL__N_116TestForwardReplyER9Fuzz_DataEEEE6selectEhS2_:
  164|     28|    {
  165|     28|        if (selector == sizeof...(Args)) {
  ------------------
  |  Branch (165:13): [True: 27, False: 1]
  ------------------
  166|     27|            return Arg(input);
  167|     27|        }
  168|      1|        return Fuzz_Target_Selector<Args...>::select(selector, input);
  169|     28|    }
_ZN20Fuzz_Target_SelectorIJEE6selectEhR9Fuzz_Data:
  175|      1|    {
  176|       |        // The selector selected no function, so we do nothing and rely on the
  177|       |        // fuzzer to come up with a better selector.
  178|      1|    }
_ZN9Fuzz_Data8ConsumercvbEv:
   46|     87|        {
   47|       |            // Special case because memcpy causes UB for bool (which can't be
   48|       |            // anything other than 0 or 1).
   49|     87|            const bool val = fd.data_[0];
   50|     87|            if (FUZZ_DEBUG) {
  ------------------
  |  Branch (50:17): [Folded - Ignored]
  ------------------
   51|      0|                std::printf("consume@%zu(%s): bool %s\n", fd.pos(), func, val ? "true" : "false");
  ------------------
  |  Branch (51:75): [True: 0, False: 0]
  ------------------
   52|      0|            }
   53|     87|            ++fd.data_;
   54|     87|            --fd.size_;
   55|     87|            return val;
   56|     87|        }

send_forward_request:
   50|     72|{
   51|     72|    if (chain_length == 0 || chain_length > MAX_FORWARD_CHAIN_LENGTH
  ------------------
  |  |   27|    143|#define MAX_FORWARD_CHAIN_LENGTH 4
  ------------------
  |  Branch (51:9): [True: 1, False: 71]
  |  Branch (51:30): [True: 1, False: 70]
  ------------------
   52|     72|            || data_length > MAX_FORWARD_DATA_SIZE) {
  ------------------
  |  |   25|     70|#define MAX_FORWARD_DATA_SIZE (MAX_UDP_PACKET_SIZE - (1 + 1 + MAX_SENDBACK_SIZE))
  |  |  ------------------
  |  |  |  |  111|     70|#define MAX_UDP_PACKET_SIZE 2048
  |  |  ------------------
  |  |               #define MAX_FORWARD_DATA_SIZE (MAX_UDP_PACKET_SIZE - (1 + 1 + MAX_SENDBACK_SIZE))
  |  |  ------------------
  |  |  |  |   24|     70|#define MAX_SENDBACK_SIZE (0xff - 1)
  |  |  ------------------
  ------------------
  |  Branch (52:16): [True: 1, False: 69]
  ------------------
   53|      3|        return false;
   54|      3|    }
   55|       |
   56|     69|    const uint16_t len = forward_chain_packet_size(chain_length, data_length);
   57|     69|    VLA(uint8_t, packet, len);
  ------------------
  |  |   59|     69|#define VLA ALLOC_VLA
  |  |  ------------------
  |  |  |  |   28|     69|#define ALLOC_VLA(type, name, size) type name[size]
  |  |  ------------------
  ------------------
   58|       |
   59|     69|    return create_forward_chain_packet(chain_keys, chain_length, data, data_length, packet)
  ------------------
  |  Branch (59:12): [True: 69, False: 0]
  ------------------
   60|     69|           && sendpacket(net, forwarder, packet, len) == len;
  ------------------
  |  Branch (60:15): [True: 50, False: 19]
  ------------------
   61|     72|}
forward_chain_packet_size:
   64|     69|{
   65|     69|    return chain_length * (1 + CRYPTO_PUBLIC_KEY_SIZE) + data_length;
  ------------------
  |  |   43|     69|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
   66|     69|}
create_forward_chain_packet:
   71|     69|{
   72|     69|    if (chain_length == 0 || chain_length > MAX_FORWARD_CHAIN_LENGTH
  ------------------
  |  |   27|    138|#define MAX_FORWARD_CHAIN_LENGTH 4
  ------------------
  |  Branch (72:9): [True: 0, False: 69]
  |  Branch (72:30): [True: 0, False: 69]
  ------------------
   73|     69|            || data_length > MAX_FORWARD_DATA_SIZE) {
  ------------------
  |  |   25|     69|#define MAX_FORWARD_DATA_SIZE (MAX_UDP_PACKET_SIZE - (1 + 1 + MAX_SENDBACK_SIZE))
  |  |  ------------------
  |  |  |  |  111|     69|#define MAX_UDP_PACKET_SIZE 2048
  |  |  ------------------
  |  |               #define MAX_FORWARD_DATA_SIZE (MAX_UDP_PACKET_SIZE - (1 + 1 + MAX_SENDBACK_SIZE))
  |  |  ------------------
  |  |  |  |   24|     69|#define MAX_SENDBACK_SIZE (0xff - 1)
  |  |  ------------------
  ------------------
  |  Branch (73:16): [True: 0, False: 69]
  ------------------
   74|      0|        return false;
   75|      0|    }
   76|       |
   77|     69|    uint16_t offset = 0;
   78|       |
   79|    159|    for (uint16_t j = 0; j < chain_length; ++j) {
  ------------------
  |  Branch (79:26): [True: 90, False: 69]
  ------------------
   80|     90|        packet[offset] = NET_PACKET_FORWARD_REQUEST;
   81|     90|        ++offset;
   82|     90|        memcpy(packet + offset, chain_keys + j * CRYPTO_PUBLIC_KEY_SIZE, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|     90|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
                      memcpy(packet + offset, chain_keys + j * CRYPTO_PUBLIC_KEY_SIZE, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|     90|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
   83|     90|        offset += CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|     90|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
   84|     90|    }
   85|       |
   86|     69|    memcpy(packet + offset, data, data_length);
   87|     69|    return true;
   88|     69|}
forward_reply:
  328|     10|{
  329|     10|    if (sendback_length > MAX_SENDBACK_SIZE ||
  ------------------
  |  |   24|     20|#define MAX_SENDBACK_SIZE (0xff - 1)
  ------------------
  |  Branch (329:9): [True: 1, False: 9]
  ------------------
  330|     10|            length > MAX_FORWARD_DATA_SIZE) {
  ------------------
  |  |   25|      9|#define MAX_FORWARD_DATA_SIZE (MAX_UDP_PACKET_SIZE - (1 + 1 + MAX_SENDBACK_SIZE))
  |  |  ------------------
  |  |  |  |  111|      9|#define MAX_UDP_PACKET_SIZE 2048
  |  |  ------------------
  |  |               #define MAX_FORWARD_DATA_SIZE (MAX_UDP_PACKET_SIZE - (1 + 1 + MAX_SENDBACK_SIZE))
  |  |  ------------------
  |  |  |  |   24|      9|#define MAX_SENDBACK_SIZE (0xff - 1)
  |  |  ------------------
  ------------------
  |  Branch (330:13): [True: 1, False: 8]
  ------------------
  331|      2|        return false;
  332|      2|    }
  333|       |
  334|      8|    const uint16_t len = 1 + 1 + sendback_length + length;
  335|      8|    VLA(uint8_t, packet, len);
  ------------------
  |  |   59|      8|#define VLA ALLOC_VLA
  |  |  ------------------
  |  |  |  |   28|      8|#define ALLOC_VLA(type, name, size) type name[size]
  |  |  ------------------
  ------------------
  336|      8|    packet[0] = NET_PACKET_FORWARD_REPLY;
  337|      8|    packet[1] = (uint8_t) sendback_length;
  338|      8|    memcpy(packet + 1 + 1, sendback, sendback_length);
  339|      8|    memcpy(packet + 1 + 1 + sendback_length, data, length);
  340|      8|    return sendpacket(net, forwarder, packet, len) == len;
  341|     10|}

LLVMFuzzerTestOneInput:
   97|    108|{
   98|    108|    fuzz_select_target<TestSendForwardRequest, TestForwardReply>(data, size);
   99|    108|    return 0;
  100|    108|}
forwarding_fuzz_test.cc:_ZN12_GLOBAL__N_122TestSendForwardRequestER9Fuzz_Data:
   35|     80|{
   36|     80|    CONSUME1_OR_RETURN(const uint16_t, chain_length, input);
  ------------------
  |  |  105|     80|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 1, False: 79]
  |  |  ------------------
  |  |  106|      1|        return;                               \
  |  |  107|      1|    }                                         \
  |  |  108|     80|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   37|     79|    const uint16_t chain_keys_size = chain_length * CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|     79|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
   38|     79|    CONSUME_OR_RETURN(const uint8_t *chain_keys, input, chain_keys_size);
  ------------------
  |  |  139|     79|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 1, False: 78]
  |  |  ------------------
  |  |  140|      1|        return;                              \
  |  |  141|      1|    }                                        \
  |  |  142|     79|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   39|       |
   40|     78|    const auto prep = prepare(input);
   41|     78|    if (!prep.has_value()) {
  ------------------
  |  Branch (41:9): [True: 4, False: 74]
  ------------------
   42|      4|        return;
   43|      4|    }
   44|     74|    const auto [ipp, forwarder, data, data_size] = prep.value();
   45|       |
   46|       |    // rest of the fuzz data is input for malloc and network
   47|     74|    Fuzz_System sys(input);
   48|       |
   49|     74|    const Ptr<Logger> logger(logger_new(sys.mem.get()), logger_kill);
   50|     74|    if (logger == nullptr) {
  ------------------
  |  Branch (50:9): [True: 1, False: 73]
  ------------------
   51|      1|        return;
   52|      1|    }
   53|       |
   54|     73|    const Ptr<Networking_Core> net(new_networking_ex(logger.get(), sys.mem.get(), sys.ns.get(),
   55|     73|                                       &ipp.ip, ipp.port, ipp.port + 100, nullptr),
   56|     73|        kill_networking);
   57|     73|    if (net == nullptr) {
  ------------------
  |  Branch (57:9): [True: 1, False: 72]
  ------------------
   58|      1|        return;
   59|      1|    }
   60|       |
   61|     72|    send_forward_request(net.get(), &forwarder, chain_keys, chain_length, data, data_size);
   62|     72|}
forwarding_fuzz_test.cc:_ZN12_GLOBAL__N_17prepareER9Fuzz_Data:
   14|    103|{
   15|    103|    CONSUME_OR_RETURN_VAL(const uint8_t *ipp_packed, input, SIZE_IP_PORT, std::nullopt);
  ------------------
  |  |  145|    103|    if (INPUT.size() < SIZE) {                        \
  |  |  ------------------
  |  |  |  Branch (145:9): [True: 2, False: 101]
  |  |  ------------------
  |  |  146|      2|        return VAL;                                   \
  |  |  147|      2|    }                                                 \
  |  |  148|    103|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   16|    101|    IP_Port ipp{};
   17|    101|    unpack_ip_port(&ipp, ipp_packed, SIZE_IP6, true);
  ------------------
  |  |  186|    101|#define SIZE_IP6 16
  ------------------
   18|       |
   19|    101|    CONSUME_OR_RETURN_VAL(const uint8_t *forwarder_packed, input, SIZE_IP_PORT, std::nullopt);
  ------------------
  |  |  145|    101|    if (INPUT.size() < SIZE) {                        \
  |  |  ------------------
  |  |  |  Branch (145:9): [True: 5, False: 96]
  |  |  ------------------
  |  |  146|      5|        return VAL;                                   \
  |  |  147|      5|    }                                                 \
  |  |  148|    101|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   20|     96|    IP_Port forwarder{};
   21|     96|    unpack_ip_port(&forwarder, forwarder_packed, SIZE_IP6, true);
  ------------------
  |  |  186|     96|#define SIZE_IP6 16
  ------------------
   22|       |
   23|       |    // 2 bytes: size of the request
   24|     96|    CONSUME_OR_RETURN_VAL(const uint8_t *data_size_bytes, input, sizeof(uint16_t), std::nullopt);
  ------------------
  |  |  145|     96|    if (INPUT.size() < SIZE) {                        \
  |  |  ------------------
  |  |  |  Branch (145:9): [True: 6, False: 90]
  |  |  ------------------
  |  |  146|      6|        return VAL;                                   \
  |  |  147|      6|    }                                                 \
  |  |  148|     96|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   25|     90|    uint16_t data_size;
   26|     90|    std::memcpy(&data_size, data_size_bytes, sizeof(uint16_t));
   27|       |
   28|       |    // data bytes (max 64K)
   29|     90|    CONSUME_OR_RETURN_VAL(const uint8_t *data, input, data_size, std::nullopt);
  ------------------
  |  |  145|     90|    if (INPUT.size() < SIZE) {                        \
  |  |  ------------------
  |  |  |  Branch (145:9): [True: 2, False: 88]
  |  |  ------------------
  |  |  146|      2|        return VAL;                                   \
  |  |  147|      2|    }                                                 \
  |  |  148|     90|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   30|       |
   31|     88|    return {{ipp, forwarder, data, data_size}};
   32|     90|}
forwarding_fuzz_test.cc:_ZN12_GLOBAL__N_116TestForwardReplyER9Fuzz_Data:
   65|     27|{
   66|     27|    CONSUME1_OR_RETURN(const uint16_t, sendback_length, input);
  ------------------
  |  |  105|     27|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 1, False: 26]
  |  |  ------------------
  |  |  106|      1|        return;                               \
  |  |  107|      1|    }                                         \
  |  |  108|     27|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   67|     26|    CONSUME_OR_RETURN(const uint8_t *sendback, input, sendback_length);
  ------------------
  |  |  139|     26|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 1, False: 25]
  |  |  ------------------
  |  |  140|      1|        return;                              \
  |  |  141|      1|    }                                        \
  |  |  142|     26|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   68|       |
   69|     25|    const auto prep = prepare(input);
   70|     25|    if (!prep.has_value()) {
  ------------------
  |  Branch (70:9): [True: 11, False: 14]
  ------------------
   71|     11|        return;
   72|     11|    }
   73|     14|    const auto [ipp, forwarder, data, data_size] = prep.value();
   74|       |
   75|       |    // rest of the fuzz data is input for malloc and network
   76|     14|    Fuzz_System sys(input);
   77|       |
   78|     14|    const Ptr<Logger> logger(logger_new(sys.mem.get()), logger_kill);
   79|     14|    if (logger == nullptr) {
  ------------------
  |  Branch (79:9): [True: 1, False: 13]
  ------------------
   80|      1|        return;
   81|      1|    }
   82|       |
   83|     13|    const Ptr<Networking_Core> net(new_networking_ex(logger.get(), sys.mem.get(), sys.ns.get(),
   84|     13|                                       &ipp.ip, ipp.port, ipp.port + 100, nullptr),
   85|     13|        kill_networking);
   86|     13|    if (net == nullptr) {
  ------------------
  |  Branch (86:9): [True: 3, False: 10]
  ------------------
   87|      3|        return;
   88|      3|    }
   89|       |
   90|     10|    forward_reply(net.get(), &forwarder, sendback, sendback_length, data, data_size);
   91|     10|}

logger_new:
   33|     88|{
   34|     88|    Logger *log = (Logger *)mem_alloc(mem, sizeof(Logger));
   35|       |
   36|     88|    if (log == nullptr) {
  ------------------
  |  |   63|     88|#define nullptr NULL
  ------------------
  |  Branch (36:9): [True: 2, False: 86]
  ------------------
   37|      2|        return nullptr;
  ------------------
  |  |   63|      2|#define nullptr NULL
  ------------------
   38|      2|    }
   39|       |
   40|     86|    log->mem = mem;
   41|       |
   42|     86|    return log;
   43|     88|}
logger_kill:
   46|     86|{
   47|     86|    if (log == nullptr) {
  ------------------
  |  |   63|     86|#define nullptr NULL
  ------------------
  |  Branch (47:9): [True: 0, False: 86]
  ------------------
   48|      0|        return;
   49|      0|    }
   50|       |
   51|     86|    mem_delete(log->mem, log);
   52|     86|}
logger_write:
   64|     23|{
   65|     23|    if (log == nullptr) {
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
  |  Branch (65:9): [True: 0, False: 23]
  ------------------
   66|      0|        return;
   67|      0|    }
   68|       |
   69|     23|    if (log->callback == nullptr) {
  ------------------
  |  |   63|     23|#define nullptr NULL
  ------------------
  |  Branch (69:9): [True: 23, False: 0]
  ------------------
   70|     23|        return;
   71|     23|    }
   72|       |
   73|       |    // Only pass the file name, not the entire file path, for privacy reasons.
   74|       |    // The full path may contain PII of the person compiling toxcore (their
   75|       |    // username and directory layout).
   76|      0|    const char *filename = strrchr(file, '/');
   77|      0|    file = filename != nullptr ? filename + 1 : file;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (77:12): [True: 0, False: 0]
  ------------------
   78|       |#if defined(_WIN32) || defined(__CYGWIN__)
   79|       |    // On Windows, the path separator *may* be a backslash, so we look for that
   80|       |    // one too.
   81|       |    const char *windows_filename = strrchr(file, '\\');
   82|       |    file = windows_filename != nullptr ? windows_filename + 1 : file;
   83|       |#endif /* WIN32 */
   84|       |
   85|       |    // Format message
   86|      0|    char msg[1024];
   87|      0|    va_list args;
   88|      0|    va_start(args, format);
   89|      0|    vsnprintf(msg, sizeof(msg), format, args);
   90|      0|    va_end(args);
   91|       |
   92|      0|    log->callback(log->context, level, file, line, func, msg, log->userdata);
   93|      0|}

mem_alloc:
   63|    255|{
   64|    255|    void *const ptr = mem->funcs->calloc(mem->obj, 1, size);
   65|    255|    return ptr;
   66|    255|}
mem_delete:
   93|    250|{
   94|    250|    mem->funcs->free(mem->obj, ptr);
   95|    250|}

netprof_record_packet:
   74|     53|{
   75|     53|    if (profile == nullptr) {
  ------------------
  |  |   63|     53|#define nullptr NULL
  ------------------
  |  Branch (75:9): [True: 0, False: 53]
  ------------------
   76|      0|        return;
   77|      0|    }
   78|       |
   79|     53|    if (dir == PACKET_DIRECTION_SEND) {
  ------------------
  |  Branch (79:9): [True: 53, False: 0]
  ------------------
   80|     53|        ++profile->total_packets_sent;
   81|     53|        ++profile->packets_sent[id];
   82|       |
   83|     53|        profile->total_bytes_sent += length;
   84|     53|        profile->bytes_sent[id] += length;
   85|     53|    } else {
   86|      0|        ++profile->total_packets_recv;
   87|      0|        ++profile->packets_recv[id];
   88|       |
   89|      0|        profile->total_bytes_recv += length;
   90|      0|        profile->bytes_recv[id] += length;
   91|      0|    }
   92|     53|}
netprof_new:
  141|     83|{
  142|     83|    Net_Profile *np = (Net_Profile *)mem_alloc(mem, sizeof(Net_Profile));
  143|       |
  144|     83|    if (np == nullptr) {
  ------------------
  |  |   63|     83|#define nullptr NULL
  ------------------
  |  Branch (144:9): [True: 1, False: 82]
  ------------------
  145|      1|        LOGGER_ERROR(log, "failed to allocate memory for net profiler");
  ------------------
  |  |   87|      1|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      1|    do {                                                                         \
  |  |  |  |   77|      1|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      2|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      1|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      1|        }                                                                        \
  |  |  |  |   80|      1|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  146|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  147|      1|    }
  148|       |
  149|     82|    return np;
  150|     83|}
netprof_kill:
  153|     82|{
  154|     82|    if (net_profile != nullptr) {
  ------------------
  |  |   63|     82|#define nullptr NULL
  ------------------
  |  Branch (154:9): [True: 82, False: 0]
  ------------------
  155|     82|        mem_delete(mem, net_profile);
  156|     82|    }
  157|     82|}

net_socket_from_native:
  380|     82|{
  381|     82|    const Socket res = {(force Socket_Value)sock};
  382|     82|    return res;
  383|     82|}
net_invalid_socket:
  386|     82|{
  387|     82|    return net_socket_from_native(INVALID_SOCKET);
  ------------------
  |  |  371|     82|#define INVALID_SOCKET (-1)
  ------------------
  388|     82|}
net_family_ipv4:
  396|    142|{
  397|    142|    return family_ipv4;
  398|    142|}
net_family_ipv6:
  401|      3|{
  402|      3|    return family_ipv6;
  403|      3|}
net_family_tcp_ipv4:
  416|     23|{
  417|     23|    return family_tcp_ipv4;
  418|     23|}
net_family_tcp_ipv6:
  421|      5|{
  422|      5|    return family_tcp_ipv6;
  423|      5|}
net_family_is_unspec:
  436|    232|{
  437|    232|    return family.value == family_unspec.value;
  438|    232|}
net_family_is_ipv4:
  441|    440|{
  442|    440|    return family.value == family_ipv4.value;
  443|    440|}
net_family_is_ipv6:
  446|    137|{
  447|    137|    return family.value == family_ipv6.value;
  448|    137|}
net_family_is_tcp_ipv4:
  461|     20|{
  462|     20|    return family.value == family_tcp_ipv4.value;
  463|     20|}
sock_valid:
  481|     82|{
  482|     82|    const Socket invalid_socket = net_invalid_socket();
  483|     82|    return sock.value != invalid_socket.value;
  484|     82|}
kill_sock:
  969|     82|{
  970|     82|    ns->funcs->close(ns->obj, sock);
  971|     82|}
set_socket_nonblock:
  974|     82|{
  975|     82|    return ns->funcs->socket_nonblock(ns->obj, sock, true) == 0;
  976|     82|}
set_socket_nosigpipe:
  979|     82|{
  980|       |#if defined(__APPLE__)
  981|       |    int set = 1;
  982|       |    return net_setsockopt(ns, sock, SOL_SOCKET, SO_NOSIGPIPE, &set, sizeof(int)) == 0;
  983|       |#else
  984|     82|    return true;
  985|     82|#endif /* __APPLE__ */
  986|     82|}
send_packet:
 1045|     77|{
 1046|     77|    IP_Port ipp_copy = *ip_port;
 1047|       |
 1048|     77|    if (net_family_is_unspec(ip_port->ip.family)) {
  ------------------
  |  Branch (1048:9): [True: 4, False: 73]
  ------------------
 1049|       |        // TODO(iphydf): Make this an error. Currently this fails sometimes when
 1050|       |        // called from DHT.c:do_ping_and_sendnode_requests.
 1051|      4|        return -1;
 1052|      4|    }
 1053|       |
 1054|     73|    if (net_family_is_unspec(net->family)) { /* Socket not initialized */
  ------------------
  |  Branch (1054:9): [True: 0, False: 73]
  ------------------
 1055|       |        // TODO(iphydf): Make this an error. Currently, the onion client calls
 1056|       |        // this via DHT nodes requests.
 1057|      0|        LOGGER_WARNING(net->log, "attempted to send message of length %u on uninitialised socket", packet.length);
  ------------------
  |  |   86|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1058|      0|        return -1;
 1059|      0|    }
 1060|       |
 1061|       |    /* socket TOX_AF_INET, but target IP NOT: can't send */
 1062|     73|    if (net_family_is_ipv4(net->family) && !net_family_is_ipv4(ipp_copy.ip.family)) {
  ------------------
  |  Branch (1062:9): [True: 73, False: 0]
  |  Branch (1062:44): [True: 20, False: 53]
  ------------------
 1063|       |        // TODO(iphydf): Make this an error. Occasionally we try to send to an
 1064|       |        // all-zero ip_port.
 1065|     20|        Ip_Ntoa ip_str;
 1066|     20|        LOGGER_WARNING(net->log, "attempted to send message with network family %d (probably IPv6) on IPv4 socket (%s)",
  ------------------
  |  |   86|     20|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     20|    do {                                                                         \
  |  |  |  |   77|     20|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     40|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|     20|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|     20|        }                                                                        \
  |  |  |  |   80|     20|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1067|     20|                       ipp_copy.ip.family.value, net_ip_ntoa(&ipp_copy.ip, &ip_str));
 1068|     20|        return -1;
 1069|     20|    }
 1070|       |
 1071|     53|    if (net_family_is_ipv4(ipp_copy.ip.family) && net_family_is_ipv6(net->family)) {
  ------------------
  |  Branch (1071:9): [True: 53, False: 0]
  |  Branch (1071:51): [True: 0, False: 53]
  ------------------
 1072|       |        /* must convert to IPV4-in-IPV6 address */
 1073|      0|        IP6 ip6;
 1074|       |
 1075|       |        /* there should be a macro for this in a standards compliant
 1076|       |         * environment, not found */
 1077|      0|        ip6.uint32[0] = 0;
 1078|      0|        ip6.uint32[1] = 0;
 1079|      0|        ip6.uint32[2] = net_htonl(0xFFFF);
 1080|      0|        ip6.uint32[3] = ipp_copy.ip.ip.v4.uint32;
 1081|       |
 1082|      0|        ipp_copy.ip.family = net_family_ipv6();
 1083|      0|        ipp_copy.ip.ip.v6 = ip6;
 1084|      0|    }
 1085|       |
 1086|     53|    Network_Addr addr;
 1087|       |
 1088|     53|    if (net_family_is_ipv4(ipp_copy.ip.family)) {
  ------------------
  |  Branch (1088:9): [True: 53, False: 0]
  ------------------
 1089|     53|        struct sockaddr_in *const addr4 = (struct sockaddr_in *)&addr.addr;
 1090|       |
 1091|     53|        addr.size = sizeof(struct sockaddr_in);
 1092|     53|        addr4->sin_family = AF_INET;
 1093|     53|        addr4->sin_port = ipp_copy.port;
 1094|     53|        fill_addr4(&ipp_copy.ip.ip.v4, &addr4->sin_addr);
 1095|     53|    } else if (net_family_is_ipv6(ipp_copy.ip.family)) {
  ------------------
  |  Branch (1095:16): [True: 0, False: 0]
  ------------------
 1096|      0|        struct sockaddr_in6 *const addr6 = (struct sockaddr_in6 *)&addr.addr;
 1097|       |
 1098|      0|        addr.size = sizeof(struct sockaddr_in6);
 1099|      0|        addr6->sin6_family = AF_INET6;
 1100|      0|        addr6->sin6_port = ipp_copy.port;
 1101|      0|        fill_addr6(&ipp_copy.ip.ip.v6, &addr6->sin6_addr);
 1102|       |
 1103|      0|        addr6->sin6_flowinfo = 0;
 1104|      0|        addr6->sin6_scope_id = 0;
 1105|      0|    } else {
 1106|      0|        LOGGER_ERROR(net->log, "unknown address type: %d", ipp_copy.ip.family.value);
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1107|      0|        return -1;
 1108|      0|    }
 1109|       |
 1110|     53|    const long res = net_sendto(net->ns, net->sock, packet.data, packet.length, &addr, &ipp_copy);
 1111|     53|    loglogdata(net->log, "O=>", packet.data, packet.length, ip_port, res);
 1112|       |
 1113|     53|    assert(res <= INT_MAX);
 1114|       |
 1115|     53|    if (res == packet.length && packet.data != nullptr) {
  ------------------
  |  |   63|     53|#define nullptr NULL
  ------------------
  |  Branch (1115:9): [True: 53, False: 0]
  |  Branch (1115:33): [True: 53, False: 0]
  ------------------
 1116|     53|        netprof_record_packet(net->udp_net_profile, packet.data[0], packet.length, PACKET_DIRECTION_SEND);
 1117|     53|    }
 1118|       |
 1119|     53|    return (int)res;
 1120|     53|}
sendpacket:
 1128|     77|{
 1129|     77|    const Packet packet = {data, length};
 1130|     77|    return send_packet(net, ip_port, packet);
 1131|     77|}
new_networking_ex:
 1250|     86|{
 1251|       |    /* If both from and to are 0, use default port range
 1252|       |     * If one is 0 and the other is non-0, use the non-0 value as only port
 1253|       |     * If from > to, swap
 1254|       |     */
 1255|     86|    if (port_from == 0 && port_to == 0) {
  ------------------
  |  Branch (1255:9): [True: 25, False: 61]
  |  Branch (1255:27): [True: 0, False: 25]
  ------------------
 1256|      0|        port_from = TOX_PORTRANGE_FROM;
  ------------------
  |  |  162|      0|#define TOX_PORTRANGE_FROM 33445
  ------------------
 1257|      0|        port_to = TOX_PORTRANGE_TO;
  ------------------
  |  |  163|      0|#define TOX_PORTRANGE_TO   33545
  ------------------
 1258|     86|    } else if (port_from == 0 && port_to != 0) {
  ------------------
  |  Branch (1258:16): [True: 25, False: 61]
  |  Branch (1258:34): [True: 25, False: 0]
  ------------------
 1259|     25|        port_from = port_to;
 1260|     61|    } else if (port_from != 0 && port_to == 0) {
  ------------------
  |  Branch (1260:16): [True: 61, False: 0]
  |  Branch (1260:34): [True: 1, False: 60]
  ------------------
 1261|      1|        port_to = port_from;
 1262|     60|    } else if (port_from > port_to) {
  ------------------
  |  Branch (1262:16): [True: 2, False: 58]
  ------------------
 1263|      2|        const uint16_t temp_port = port_from;
 1264|      2|        port_from = port_to;
 1265|      2|        port_to = temp_port;
 1266|      2|    }
 1267|       |
 1268|     86|    if (error != nullptr) {
  ------------------
  |  |   63|     86|#define nullptr NULL
  ------------------
  |  Branch (1268:9): [True: 0, False: 86]
  ------------------
 1269|      0|        *error = 2;
 1270|      0|    }
 1271|       |
 1272|       |    /* maybe check for invalid IPs like 224+.x.y.z? if there is any IP set ever */
 1273|     86|    if (!net_family_is_ipv4(ip->family) && !net_family_is_ipv6(ip->family)) {
  ------------------
  |  Branch (1273:9): [True: 2, False: 84]
  |  Branch (1273:44): [True: 2, False: 0]
  ------------------
 1274|      2|        LOGGER_ERROR(log, "invalid address family: %u", ip->family.value);
  ------------------
  |  |   87|      2|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      2|    do {                                                                         \
  |  |  |  |   77|      2|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      4|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      2|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      2|        }                                                                        \
  |  |  |  |   80|      2|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1275|      2|        return nullptr;
  ------------------
  |  |   63|      2|#define nullptr NULL
  ------------------
 1276|      2|    }
 1277|       |
 1278|     84|    Networking_Core *temp = (Networking_Core *)mem_alloc(mem, sizeof(Networking_Core));
 1279|       |
 1280|     84|    if (temp == nullptr) {
  ------------------
  |  |   63|     84|#define nullptr NULL
  ------------------
  |  Branch (1280:9): [True: 1, False: 83]
  ------------------
 1281|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
 1282|      1|    }
 1283|       |
 1284|     83|    Net_Profile *np = netprof_new(log, mem);
 1285|       |
 1286|     83|    if (np == nullptr) {
  ------------------
  |  |   63|     83|#define nullptr NULL
  ------------------
  |  Branch (1286:9): [True: 1, False: 82]
  ------------------
 1287|      1|        free(temp);
 1288|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
 1289|      1|    }
 1290|       |
 1291|     82|    temp->udp_net_profile = np;
 1292|     82|    temp->ns = ns;
 1293|     82|    temp->log = log;
 1294|     82|    temp->mem = mem;
 1295|     82|    temp->family = ip->family;
 1296|     82|    temp->port = 0;
 1297|       |
 1298|       |    /* Initialize our socket. */
 1299|       |    /* add log message what we're creating */
 1300|     82|    temp->sock = net_socket(ns, temp->family, TOX_SOCK_DGRAM, TOX_PROTO_UDP);
  ------------------
  |  |  174|     82|#define TOX_SOCK_DGRAM 2
  ------------------
                  temp->sock = net_socket(ns, temp->family, TOX_SOCK_DGRAM, TOX_PROTO_UDP);
  ------------------
  |  |  177|     82|#define TOX_PROTO_UDP 2
  ------------------
 1301|       |
 1302|       |    /* Check for socket error. */
 1303|     82|    if (!sock_valid(temp->sock)) {
  ------------------
  |  Branch (1303:9): [True: 0, False: 82]
  ------------------
 1304|      0|        const int neterror = net_error();
 1305|      0|        Net_Strerror error_str;
 1306|      0|        LOGGER_ERROR(log, "failed to get a socket?! %d, %s", neterror, net_strerror(neterror, &error_str));
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1307|      0|        netprof_kill(mem, temp->udp_net_profile);
 1308|      0|        mem_delete(mem, temp);
 1309|       |
 1310|      0|        if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1310:13): [True: 0, False: 0]
  ------------------
 1311|      0|            *error = 1;
 1312|      0|        }
 1313|       |
 1314|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1315|      0|    }
 1316|       |
 1317|       |    /* Functions to increase the size of the send and receive UDP buffers.
 1318|       |     */
 1319|     82|    int n = 1024 * 1024 * 2;
 1320|       |
 1321|     82|    if (net_setsockopt(ns, temp->sock, SOL_SOCKET, SO_RCVBUF, &n, sizeof(n)) != 0) {
  ------------------
  |  Branch (1321:9): [True: 0, False: 82]
  ------------------
 1322|      0|        LOGGER_WARNING(log, "failed to set socket option %d", SO_RCVBUF);
  ------------------
  |  |   86|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1323|      0|    }
 1324|       |
 1325|     82|    if (net_setsockopt(ns, temp->sock, SOL_SOCKET, SO_SNDBUF, &n, sizeof(n)) != 0) {
  ------------------
  |  Branch (1325:9): [True: 0, False: 82]
  ------------------
 1326|      0|        LOGGER_WARNING(log, "failed to set socket option %d", SO_SNDBUF);
  ------------------
  |  |   86|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1327|      0|    }
 1328|       |
 1329|       |    /* Enable broadcast on socket */
 1330|     82|    int broadcast = 1;
 1331|       |
 1332|     82|    if (net_setsockopt(ns, temp->sock, SOL_SOCKET, SO_BROADCAST, &broadcast, sizeof(broadcast)) != 0) {
  ------------------
  |  Branch (1332:9): [True: 0, False: 82]
  ------------------
 1333|      0|        LOGGER_ERROR(log, "failed to set socket option %d", SO_BROADCAST);
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1334|      0|    }
 1335|       |
 1336|       |    /* iOS UDP sockets are weird and apparently can SIGPIPE */
 1337|     82|    if (!set_socket_nosigpipe(ns, temp->sock)) {
  ------------------
  |  Branch (1337:9): [True: 0, False: 82]
  ------------------
 1338|      0|        kill_networking(temp);
 1339|       |
 1340|      0|        if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1340:13): [True: 0, False: 0]
  ------------------
 1341|      0|            *error = 1;
 1342|      0|        }
 1343|       |
 1344|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1345|      0|    }
 1346|       |
 1347|       |    /* Set socket nonblocking. */
 1348|     82|    if (!set_socket_nonblock(ns, temp->sock)) {
  ------------------
  |  Branch (1348:9): [True: 0, False: 82]
  ------------------
 1349|      0|        kill_networking(temp);
 1350|       |
 1351|      0|        if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1351:13): [True: 0, False: 0]
  ------------------
 1352|      0|            *error = 1;
 1353|      0|        }
 1354|       |
 1355|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1356|      0|    }
 1357|       |
 1358|       |    /* Bind our socket to port PORT and the given IP address (usually 0.0.0.0 or ::) */
 1359|     82|    uint16_t *portptr = nullptr;
  ------------------
  |  |   63|     82|#define nullptr NULL
  ------------------
 1360|     82|    Network_Addr addr = {{0}};
 1361|       |
 1362|     82|    if (net_family_is_ipv4(temp->family)) {
  ------------------
  |  Branch (1362:9): [True: 82, False: 0]
  ------------------
 1363|     82|        struct sockaddr_in *addr4 = (struct sockaddr_in *)&addr.addr;
 1364|       |
 1365|     82|        addr.size = sizeof(struct sockaddr_in);
 1366|     82|        addr4->sin_family = AF_INET;
 1367|     82|        addr4->sin_port = 0;
 1368|     82|        fill_addr4(&ip->ip.v4, &addr4->sin_addr);
 1369|       |
 1370|     82|        portptr = &addr4->sin_port;
 1371|     82|    } else if (net_family_is_ipv6(temp->family)) {
  ------------------
  |  Branch (1371:16): [True: 0, False: 0]
  ------------------
 1372|      0|        struct sockaddr_in6 *addr6 = (struct sockaddr_in6 *)&addr.addr;
 1373|       |
 1374|      0|        addr.size = sizeof(struct sockaddr_in6);
 1375|      0|        addr6->sin6_family = AF_INET6;
 1376|      0|        addr6->sin6_port = 0;
 1377|      0|        fill_addr6(&ip->ip.v6, &addr6->sin6_addr);
 1378|       |
 1379|      0|        addr6->sin6_flowinfo = 0;
 1380|      0|        addr6->sin6_scope_id = 0;
 1381|       |
 1382|      0|        portptr = &addr6->sin6_port;
 1383|      0|    } else {
 1384|      0|        mem_delete(mem, temp);
 1385|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1386|      0|    }
 1387|       |
 1388|     82|    if (net_family_is_ipv6(ip->family)) {
  ------------------
  |  Branch (1388:9): [True: 0, False: 82]
  ------------------
 1389|      0|        const bool is_dualstack = set_socket_dualstack(ns, temp->sock);
 1390|       |
 1391|      0|        if (is_dualstack) {
  ------------------
  |  Branch (1391:13): [True: 0, False: 0]
  ------------------
 1392|      0|            LOGGER_TRACE(log, "Dual-stack socket: enabled");
  ------------------
  |  |   83|      0|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1393|      0|        } else {
 1394|      0|            LOGGER_ERROR(log, "Dual-stack socket failed to enable, won't be able to receive from/send to IPv4 addresses");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1395|      0|        }
 1396|       |
 1397|      0|#ifndef ESP_PLATFORM
 1398|       |        /* multicast local nodes */
 1399|      0|        struct ipv6_mreq mreq = {{{{0}}}};
 1400|      0|        mreq.ipv6mr_multiaddr.s6_addr[0] = 0xFF;
 1401|      0|        mreq.ipv6mr_multiaddr.s6_addr[1] = 0x02;
 1402|      0|        mreq.ipv6mr_multiaddr.s6_addr[15] = 0x01;
 1403|      0|        mreq.ipv6mr_interface = 0;
 1404|       |
 1405|      0|        const int res = net_setsockopt(ns, temp->sock, IPPROTO_IPV6, IPV6_ADD_MEMBERSHIP, &mreq, sizeof(mreq));
 1406|       |
 1407|      0|        const int neterror = net_error();
 1408|      0|        Net_Strerror error_str;
 1409|       |
 1410|      0|        if (res < 0) {
  ------------------
  |  Branch (1410:13): [True: 0, False: 0]
  ------------------
 1411|      0|            LOGGER_INFO(log, "Failed to activate local multicast membership in FF02::1. (%d, %s)", neterror, net_strerror(neterror, &error_str));
  ------------------
  |  |   85|      0|#define LOGGER_INFO(log, ...)    LOGGER_WRITE(log, LOGGER_LEVEL_INFO, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1412|      0|        } else {
 1413|      0|            LOGGER_TRACE(log, "Local multicast group joined successfully. (%d, %s)", neterror, net_strerror(neterror, &error_str));
  ------------------
  |  |   83|      0|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1414|      0|        }
 1415|      0|#endif /* ESP_PLATFORM */
 1416|      0|    }
 1417|       |
 1418|       |    /* A hanging program or a different user might block the standard port.
 1419|       |     * As long as it isn't a parameter coming from the commandline,
 1420|       |     * try a few ports after it, to see if we can find a "free" one.
 1421|       |     *
 1422|       |     * If we go on without binding, the first sendto() automatically binds to
 1423|       |     * a free port chosen by the system (i.e. anything from 1024 to 65535).
 1424|       |     *
 1425|       |     * Returning NULL after bind fails has both advantages and disadvantages:
 1426|       |     * advantage:
 1427|       |     *   we can rely on getting the port in the range 33445..33450, which
 1428|       |     *   enables us to tell joe user to open their firewall to a small range
 1429|       |     *
 1430|       |     * disadvantage:
 1431|       |     *   some clients might not test return of tox_new(), blindly assuming that
 1432|       |     *   it worked ok (which it did previously without a successful bind)
 1433|       |     */
 1434|     82|    uint16_t port_to_try = port_from;
 1435|     82|    *portptr = net_htons(port_to_try);
 1436|       |
 1437|     82|    for (uint16_t tries = port_from; tries <= port_to; ++tries) {
  ------------------
  |  Branch (1437:38): [True: 82, False: 0]
  ------------------
 1438|     82|        const int res = net_bind(ns, temp->sock, &addr);
 1439|       |
 1440|     82|        if (res == 0) {
  ------------------
  |  Branch (1440:13): [True: 82, False: 0]
  ------------------
 1441|     82|            temp->port = *portptr;
 1442|       |
 1443|     82|            Ip_Ntoa ip_str;
 1444|     82|            LOGGER_DEBUG(log, "Bound successfully to %s:%u", net_ip_ntoa(ip, &ip_str),
  ------------------
  |  |   84|     82|#define LOGGER_DEBUG(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_DEBUG, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     82|    do {                                                                         \
  |  |  |  |   77|     82|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    164|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|     82|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1445|     82|                         net_ntohs(temp->port));
 1446|       |
 1447|       |            /* errno isn't reset on success, only set on failure, the failed
 1448|       |             * binds with parallel clients yield a -EPERM to the outside if
 1449|       |             * errno isn't cleared here */
 1450|     82|            if (tries > 0) {
  ------------------
  |  Branch (1450:17): [True: 82, False: 0]
  ------------------
 1451|     82|                errno = 0;
 1452|     82|            }
 1453|       |
 1454|     82|            if (error != nullptr) {
  ------------------
  |  |   63|     82|#define nullptr NULL
  ------------------
  |  Branch (1454:17): [True: 0, False: 82]
  ------------------
 1455|      0|                *error = 0;
 1456|      0|            }
 1457|       |
 1458|     82|            return temp;
 1459|     82|        }
 1460|       |
 1461|      0|        ++port_to_try;
 1462|       |
 1463|      0|        if (port_to_try > port_to) {
  ------------------
  |  Branch (1463:13): [True: 0, False: 0]
  ------------------
 1464|      0|            port_to_try = port_from;
 1465|      0|        }
 1466|       |
 1467|      0|        *portptr = net_htons(port_to_try);
 1468|      0|    }
 1469|       |
 1470|      0|    Ip_Ntoa ip_str;
 1471|      0|    const int neterror = net_error();
 1472|      0|    Net_Strerror error_str;
 1473|      0|    LOGGER_ERROR(log, "failed to bind socket: %d, %s IP: %s port_from: %u port_to: %u",
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1474|      0|                 neterror, net_strerror(neterror, &error_str), net_ip_ntoa(ip, &ip_str), port_from, port_to);
 1475|      0|    kill_networking(temp);
 1476|       |
 1477|      0|    if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1477:9): [True: 0, False: 0]
  ------------------
 1478|      0|        *error = 1;
 1479|      0|    }
 1480|       |
 1481|      0|    return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1482|     82|}
kill_networking:
 1502|     82|{
 1503|     82|    if (net == nullptr) {
  ------------------
  |  |   63|     82|#define nullptr NULL
  ------------------
  |  Branch (1503:9): [True: 0, False: 82]
  ------------------
 1504|      0|        return;
 1505|      0|    }
 1506|       |
 1507|     82|    if (!net_family_is_unspec(net->family)) {
  ------------------
  |  Branch (1507:9): [True: 82, False: 0]
  ------------------
 1508|       |        /* Socket is initialized, so we close it. */
 1509|     82|        kill_sock(net->ns, net->sock);
 1510|     82|    }
 1511|       |
 1512|     82|    netprof_kill(net->mem, net->udp_net_profile);
 1513|     82|    mem_delete(net->mem, net);
 1514|     82|}
ipport_reset:
 1642|    173|{
 1643|    173|    if (ipport == nullptr) {
  ------------------
  |  |   63|    173|#define nullptr NULL
  ------------------
  |  Branch (1643:9): [True: 0, False: 173]
  ------------------
 1644|      0|        return;
 1645|      0|    }
 1646|       |
 1647|    173|    *ipport = empty_ip_port;
 1648|    173|}
unpack_ip_port:
 1790|    197|{
 1791|    197|    if (data == nullptr) {
  ------------------
  |  |   63|    197|#define nullptr NULL
  ------------------
  |  Branch (1791:9): [True: 0, False: 197]
  ------------------
 1792|      0|        return -1;
 1793|      0|    }
 1794|       |
 1795|    197|    bool is_ipv4;
 1796|    197|    Family host_family;
 1797|       |
 1798|    197|    if (data[0] == TOX_AF_INET) {
  ------------------
  |  |  168|    197|#define TOX_AF_INET 2
  ------------------
  |  Branch (1798:9): [True: 142, False: 55]
  ------------------
 1799|    142|        is_ipv4 = true;
 1800|    142|        host_family = net_family_ipv4();
 1801|    142|    } else if (data[0] == TOX_TCP_INET) {
  ------------------
  |  |  170|     55|#define TOX_TCP_INET 130
  ------------------
  |  Branch (1801:16): [True: 23, False: 32]
  ------------------
 1802|     23|        if (!tcp_enabled) {
  ------------------
  |  Branch (1802:13): [True: 0, False: 23]
  ------------------
 1803|      0|            return -1;
 1804|      0|        }
 1805|       |
 1806|     23|        is_ipv4 = true;
 1807|     23|        host_family = net_family_tcp_ipv4();
 1808|     32|    } else if (data[0] == TOX_AF_INET6) {
  ------------------
  |  |  169|     32|#define TOX_AF_INET6 10
  ------------------
  |  Branch (1808:16): [True: 3, False: 29]
  ------------------
 1809|      3|        is_ipv4 = false;
 1810|      3|        host_family = net_family_ipv6();
 1811|     29|    } else if (data[0] == TOX_TCP_INET6) {
  ------------------
  |  |  171|     29|#define TOX_TCP_INET6 138
  ------------------
  |  Branch (1811:16): [True: 5, False: 24]
  ------------------
 1812|      5|        if (!tcp_enabled) {
  ------------------
  |  Branch (1812:13): [True: 0, False: 5]
  ------------------
 1813|      0|            return -1;
 1814|      0|        }
 1815|       |
 1816|      5|        is_ipv4 = false;
 1817|      5|        host_family = net_family_tcp_ipv6();
 1818|     24|    } else {
 1819|     24|        return -1;
 1820|     24|    }
 1821|       |
 1822|    173|    ipport_reset(ip_port);
 1823|       |
 1824|    173|    if (is_ipv4) {
  ------------------
  |  Branch (1824:9): [True: 165, False: 8]
  ------------------
 1825|    165|        const uint32_t size = 1 + SIZE_IP4 + sizeof(uint16_t);
  ------------------
  |  |  185|    165|#define SIZE_IP4 4
  ------------------
 1826|       |
 1827|    165|        if (size > length) {
  ------------------
  |  Branch (1827:13): [True: 0, False: 165]
  ------------------
 1828|      0|            return -1;
 1829|      0|        }
 1830|       |
 1831|    165|        ip_port->ip.family = host_family;
 1832|    165|        memcpy(ip_port->ip.ip.v4.uint8, data + 1, SIZE_IP4);
  ------------------
  |  |  185|    165|#define SIZE_IP4 4
  ------------------
 1833|    165|        memcpy(&ip_port->port, data + 1 + SIZE_IP4, sizeof(uint16_t));
  ------------------
  |  |  185|    165|#define SIZE_IP4 4
  ------------------
 1834|    165|        return size;
 1835|    165|    } else {
 1836|      8|        const uint32_t size = 1 + SIZE_IP6 + sizeof(uint16_t);
  ------------------
  |  |  186|      8|#define SIZE_IP6 16
  ------------------
 1837|       |
 1838|      8|        if (size > length) {
  ------------------
  |  Branch (1838:13): [True: 8, False: 0]
  ------------------
 1839|      8|            return -1;
 1840|      8|        }
 1841|       |
 1842|      0|        ip_port->ip.family = host_family;
 1843|      0|        memcpy(ip_port->ip.ip.v6.uint8, data + 1, SIZE_IP6);
  ------------------
  |  |  186|      0|#define SIZE_IP6 16
  ------------------
 1844|      0|        memcpy(&ip_port->port, data + 1 + SIZE_IP6, sizeof(uint16_t));
  ------------------
  |  |  186|      0|#define SIZE_IP6 16
  ------------------
 1845|      0|        return size;
 1846|      8|    }
 1847|    173|}
net_ip_ntoa:
 1850|     20|{
 1851|     20|    assert(ip_str != nullptr);
 1852|       |
 1853|     20|    ip_str->ip_is_valid = false;
 1854|       |
 1855|     20|    if (ip == nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (1855:9): [True: 0, False: 20]
  ------------------
 1856|      0|        snprintf(ip_str->buf, sizeof(ip_str->buf), "(IP invalid: NULL)");
 1857|      0|        ip_str->length = (uint16_t)strlen(ip_str->buf);
 1858|      0|        return ip_str->buf;
 1859|      0|    }
 1860|       |
 1861|     20|    if (!ip_parse_addr(ip, ip_str->buf, sizeof(ip_str->buf))) {
  ------------------
  |  Branch (1861:9): [True: 0, False: 20]
  ------------------
 1862|      0|        snprintf(ip_str->buf, sizeof(ip_str->buf), "(IP invalid, family %u)", ip->family.value);
 1863|      0|        ip_str->length = (uint16_t)strlen(ip_str->buf);
 1864|      0|        return ip_str->buf;
 1865|      0|    }
 1866|       |
 1867|       |    /* brute force protection against lacking termination */
 1868|     20|    ip_str->buf[sizeof(ip_str->buf) - 1] = '\0';
 1869|     20|    ip_str->length = (uint16_t)strlen(ip_str->buf);
 1870|     20|    ip_str->ip_is_valid = true;
 1871|       |
 1872|     20|    return ip_str->buf;
 1873|     20|}
ip_parse_addr:
 1876|     20|{
 1877|     20|    if (address == nullptr || ip == nullptr) {
  ------------------
  |  |   63|     40|#define nullptr NULL
  ------------------
                  if (address == nullptr || ip == nullptr) {
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
  |  Branch (1877:9): [True: 0, False: 20]
  |  Branch (1877:31): [True: 0, False: 20]
  ------------------
 1878|      0|        return false;
 1879|      0|    }
 1880|       |
 1881|     20|    if (net_family_is_ipv4(ip->family) || net_family_is_tcp_ipv4(ip->family)) {
  ------------------
  |  Branch (1881:9): [True: 0, False: 20]
  |  Branch (1881:43): [True: 20, False: 0]
  ------------------
 1882|     20|        struct in_addr addr;
 1883|     20|        assert(make_family(ip->family) == AF_INET);
 1884|     20|        fill_addr4(&ip->ip.v4, &addr);
 1885|     20|        return inet_ntop4(&addr, address, length) != nullptr;
  ------------------
  |  |   63|     20|#define nullptr NULL
  ------------------
 1886|     20|    }
 1887|       |
 1888|      0|    if (net_family_is_ipv6(ip->family) || net_family_is_tcp_ipv6(ip->family)) {
  ------------------
  |  Branch (1888:9): [True: 0, False: 0]
  |  Branch (1888:43): [True: 0, False: 0]
  ------------------
 1889|      0|        struct in6_addr addr;
 1890|      0|        assert(make_family(ip->family) == AF_INET6);
 1891|      0|        fill_addr6(&ip->ip.v6, &addr);
 1892|      0|        return inet_ntop6(&addr, address, length) != nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1893|      0|    }
 1894|       |
 1895|      0|    return false;
 1896|      0|}
net_socket:
 2256|     82|{
 2257|     82|    const int platform_domain = make_family(domain);
 2258|     82|    const int platform_type = make_socktype(type);
 2259|     82|    const int platform_prot = make_proto(protocol);
 2260|     82|    return ns->funcs->socket(ns->obj, platform_domain, platform_type, platform_prot);
 2261|     82|}
net_htons:
 2275|     82|{
 2276|     82|    return htons(hostshort);
 2277|     82|}
network.c:loglogdata:
  888|     53|{
  889|     53|    if (res < 0) { /* Windows doesn't necessarily know `%zu` */
  ------------------
  |  Branch (889:9): [True: 0, False: 53]
  ------------------
  890|      0|        Ip_Ntoa ip_str;
  891|      0|        const int error = net_error();
  892|      0|        Net_Strerror error_str;
  893|      0|        LOGGER_TRACE(log, "[%02x = %-21s] %s %3u%c %s:%u (%u: %s) | %08x%08x...%02x",
  ------------------
  |  |   83|      0|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  894|      0|                     buffer[0], net_packet_type_name((Net_Packet_Type)buffer[0]), message,
  895|      0|                     min_u16(buflen, 999), 'E',
  896|      0|                     net_ip_ntoa(&ip_port->ip, &ip_str), net_ntohs(ip_port->port), error,
  897|      0|                     net_strerror(error, &error_str), data_0(buflen, buffer), data_1(buflen, buffer), buffer[buflen - 1]);
  898|     53|    } else if ((res > 0) && ((size_t)res <= buflen)) {
  ------------------
  |  Branch (898:16): [True: 53, False: 0]
  |  Branch (898:29): [True: 53, False: 0]
  ------------------
  899|     53|        Ip_Ntoa ip_str;
  900|     53|        LOGGER_TRACE(log, "[%02x = %-21s] %s %3u%c %s:%u (%u: %s) | %08x%08x...%02x",
  ------------------
  |  |   83|     53|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     53|    do {                                                                         \
  |  |  |  |   77|     53|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    106|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (78:68): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|     53|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  901|     53|                     buffer[0], net_packet_type_name((Net_Packet_Type)buffer[0]), message,
  902|     53|                     min_u16(res, 999), (size_t)res < buflen ? '<' : '=',
  903|     53|                     net_ip_ntoa(&ip_port->ip, &ip_str), net_ntohs(ip_port->port), 0, "OK",
  904|     53|                     data_0(buflen, buffer), data_1(buflen, buffer), buffer[buflen - 1]);
  905|     53|    } else { /* empty or overwrite */
  906|      0|        Ip_Ntoa ip_str;
  907|      0|        LOGGER_TRACE(log, "[%02x = %-21s] %s %lu%c%u %s:%u (%u: %s) | %08x%08x...%02x",
  ------------------
  |  |   83|      0|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (78:68): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  908|      0|                     buffer[0], net_packet_type_name((Net_Packet_Type)buffer[0]), message,
  909|      0|                     res, res == 0 ? '!' : '>', buflen,
  910|      0|                     net_ip_ntoa(&ip_port->ip, &ip_str), net_ntohs(ip_port->port), 0, "OK",
  911|      0|                     data_0(buflen, buffer), data_1(buflen, buffer), buffer[buflen - 1]);
  912|      0|    }
  913|     53|}
network.c:net_setsockopt:
  737|    246|{
  738|    246|    return ns->funcs->setsockopt(ns->obj, sock, level, optname, optval, optlen);
  739|    246|}
network.c:fill_addr4:
  327|    155|{
  328|    155|    addr->s_addr = ip->uint32;
  329|    155|}
network.c:net_sendto:
  932|     53|{
  933|     53|    return ns->funcs->sendto(ns->obj, sock, buf, len, addr);
  934|     53|}
network.c:net_bind:
  958|     82|{
  959|     82|    return ns->funcs->bind(ns->obj, sock, addr);
  960|     82|}
network.c:make_family:
  264|    102|{
  265|    102|    switch (tox_family.value) {
  266|     82|        case TOX_AF_INET:
  ------------------
  |  |  168|     82|#define TOX_AF_INET 2
  ------------------
  |  Branch (266:9): [True: 82, False: 20]
  ------------------
  267|    102|        case TCP_INET:
  ------------------
  |  |  181|    102|#define TCP_INET (TOX_AF_INET6 + 2)
  |  |  ------------------
  |  |  |  |  169|    102|#define TOX_AF_INET6 10
  |  |  ------------------
  ------------------
  |  Branch (267:9): [True: 20, False: 82]
  ------------------
  268|    102|            return AF_INET;
  269|       |
  270|      0|        case TOX_AF_INET6:
  ------------------
  |  |  169|      0|#define TOX_AF_INET6 10
  ------------------
  |  Branch (270:9): [True: 0, False: 102]
  ------------------
  271|      0|        case TCP_INET6:
  ------------------
  |  |  182|      0|#define TCP_INET6 (TOX_AF_INET6 + 3)
  |  |  ------------------
  |  |  |  |  169|      0|#define TOX_AF_INET6 10
  |  |  ------------------
  ------------------
  |  Branch (271:9): [True: 0, False: 102]
  ------------------
  272|      0|            return AF_INET6;
  273|       |
  274|      0|        case TOX_AF_UNSPEC:
  ------------------
  |  |  167|      0|#define TOX_AF_UNSPEC 0
  ------------------
  |  Branch (274:9): [True: 0, False: 102]
  ------------------
  275|      0|            return AF_UNSPEC;
  276|       |
  277|      0|        default:
  ------------------
  |  Branch (277:9): [True: 0, False: 102]
  ------------------
  278|      0|            return tox_family.value;
  279|    102|    }
  280|    102|}
network.c:inet_ntop4:
  123|     20|{
  124|     20|    return inet_ntop(AF_INET, addr, buf, bufsize);
  125|     20|}
network.c:make_socktype:
  250|     82|{
  251|     82|    switch (type) {
  252|      0|        case TOX_SOCK_STREAM:
  ------------------
  |  |  173|      0|#define TOX_SOCK_STREAM 1
  ------------------
  |  Branch (252:9): [True: 0, False: 82]
  ------------------
  253|      0|            return SOCK_STREAM;
  254|       |
  255|     82|        case TOX_SOCK_DGRAM:
  ------------------
  |  |  174|     82|#define TOX_SOCK_DGRAM 2
  ------------------
  |  Branch (255:9): [True: 82, False: 0]
  ------------------
  256|     82|            return SOCK_DGRAM;
  257|       |
  258|      0|        default:
  ------------------
  |  Branch (258:9): [True: 0, False: 82]
  ------------------
  259|      0|            return type;
  260|     82|    }
  261|     82|}
network.c:make_proto:
  236|     82|{
  237|     82|    switch (proto) {
  238|      0|        case TOX_PROTO_TCP:
  ------------------
  |  |  176|      0|#define TOX_PROTO_TCP 1
  ------------------
  |  Branch (238:9): [True: 0, False: 82]
  ------------------
  239|      0|            return IPPROTO_TCP;
  240|       |
  241|     82|        case TOX_PROTO_UDP:
  ------------------
  |  |  177|     82|#define TOX_PROTO_UDP 2
  ------------------
  |  Branch (241:9): [True: 82, False: 0]
  ------------------
  242|     82|            return IPPROTO_UDP;
  243|       |
  244|      0|        default:
  ------------------
  |  Branch (244:9): [True: 0, False: 82]
  ------------------
  245|      0|            return proto;
  246|     82|    }
  247|     82|}

