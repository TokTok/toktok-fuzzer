fuzz_support.cc:_ZZN6detail15func_conversionIPFPvP11Fuzz_SystemjjEXadL_ZN3$_18__invokeES3_jjEEEcvPFT_T0_DpT1_EIS1_S1_JjjEEEvENKUlS1_DpT_E_clIJjjEEEDaS1_SG_:
   31|    357|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFPvP11Fuzz_SystemjjEXadL_ZN3$_18__invokeES3_jjEEE13static_casterIS1_EcvT_IS3_EEv:
   22|    357|        {
   23|    357|            return static_cast<To>(obj);
   24|    357|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFvP11Fuzz_SystemPvEXadL_ZN3$_38__invokeES2_S3_EEEcvPFT_T0_DpT1_EIvS3_JS3_EEEvENKUlS3_DpT_E_clIJS3_EEEDaS3_SG_:
   31|    352|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFvP11Fuzz_SystemPvEXadL_ZN3$_38__invokeES2_S3_EEE13static_casterIS3_EcvT_IS2_EEv:
   22|    352|        {
   23|    352|            return static_cast<To>(obj);
   24|    352|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketEXadL_ZN3$_48__invokeES2_S3_EEEcvPFT_T0_DpT1_EIiPvJS3_EEEvENKUlSF_DpT_E_clIJS3_EEEDaSF_SH_:
   31|    116|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketEXadL_ZN3$_48__invokeES2_S3_EEE13static_casterIPvEcvT_IS2_EEv:
   22|    116|        {
   23|    116|            return static_cast<To>(obj);
   24|    116|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketPK12Network_AddrEXadL_ZN3$_68__invokeES2_S3_S6_EEEcvPFT_T0_DpT1_EIiPvJS3_S6_EEEvENKUlSI_DpT_E_clIJS3_S6_EEEDaSI_SK_:
   31|    116|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketPK12Network_AddrEXadL_ZN3$_68__invokeES2_S3_S6_EEE13static_casterIPvEcvT_IS2_EEv:
   22|    116|        {
   23|    116|            return static_cast<To>(obj);
   24|    116|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketPKhmPK12Network_AddrEXadL_ZN4$_138__invokeES2_S3_S5_mS8_EEEcvPFT_T0_DpT1_EIiPvJS3_S5_mS8_EEEvENKUlSK_DpT_E_clIJS3_S5_mS8_EEEDaSK_SM_:
   31|     89|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketPKhmPK12Network_AddrEXadL_ZN4$_138__invokeES2_S3_S5_mS8_EEE13static_casterIPvEcvT_IS2_EEv:
   22|     89|        {
   23|     89|            return static_cast<To>(obj);
   24|     89|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPF6SocketP11Fuzz_SystemiiiEXadL_ZN4$_148__invokeES3_iiiEEEcvPFT_T0_DpT1_EIS1_PvJiiiEEEvENKUlSF_DpT_E_clIJiiiEEEDaSF_SH_:
   31|    116|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPF6SocketP11Fuzz_SystemiiiEXadL_ZN4$_148__invokeES3_iiiEEE13static_casterIPvEcvT_IS3_EEv:
   22|    116|        {
   23|    116|            return static_cast<To>(obj);
   24|    116|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketbEXadL_ZN4$_158__invokeES2_S3_bEEEcvPFT_T0_DpT1_EIiPvJS3_bEEEvENKUlSF_DpT_E_clIJS3_bEEEDaSF_SH_:
   31|    116|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketbEXadL_ZN4$_158__invokeES2_S3_bEEE13static_casterIPvEcvT_IS2_EEv:
   22|    116|        {
   23|    116|            return static_cast<To>(obj);
   24|    116|        }
fuzz_support.cc:_ZZN6detail15func_conversionIPFiP11Fuzz_System6SocketiiPKvmEXadL_ZN4$_178__invokeES2_S3_iiS5_mEEEcvPFT_T0_DpT1_EIiPvJS3_iiS5_mEEEvENKUlSH_DpT_E_clIJS3_iiS5_mEEEDaSH_SJ_:
   31|    348|        return [](Arg obj, auto... args) { return f(static_caster<Arg>{obj}, args...); };
fuzz_support.cc:_ZNK6detail15func_conversionIPFiP11Fuzz_System6SocketiiPKvmEXadL_ZN4$_178__invokeES2_S3_iiS5_mEEE13static_casterIPvEcvT_IS2_EEv:
   22|    348|        {
   23|    348|            return static_cast<To>(obj);
   24|    348|        }

_ZN6SystemC2ENSt3__110unique_ptrI10Tox_SystemNS0_14default_deleteIS2_EEEENS1_I6MemoryNS3_IS6_EEEENS1_I7NetworkNS3_IS9_EEEENS1_I6RandomNS3_ISC_EEEE:
   38|    122|    : sys(std::move(in_sys))
   39|    122|    , mem(std::move(in_mem))
   40|    122|    , ns(std::move(in_ns))
   41|    122|    , rng(std::move(in_rng))
   42|    122|{
   43|    122|}
_ZN6SystemD2Ev:
   46|    122|System::~System() { }
_ZN11Fuzz_SystemC2ER9Fuzz_Data:
  232|    122|    : System{
  233|    122|        std::make_unique<Tox_System>(),
  234|    122|        std::make_unique<Memory>(Memory{&fuzz_memory_funcs, this}),
  235|    122|        std::make_unique<Network>(Network{&fuzz_network_funcs, this}),
  236|    122|        std::make_unique<Random>(Random{&fuzz_random_funcs, this}),
  237|    122|    }
  238|    122|    , data(input)
  239|    122|{
  240|    122|    sys->mono_time_callback = [](void *self) { return static_cast<Fuzz_System *>(self)->clock; };
  241|    122|    sys->mono_time_user_data = this;
  242|    122|    sys->mem = mem.get();
  243|    122|    sys->ns = ns.get();
  244|    122|    sys->rng = rng.get();
  245|    122|}
fuzz_support.cc:_ZL12report_allocPKcS0_mPv:
   79|    353|{
   80|    353|    if (Fuzz_Data::FUZZ_DEBUG) {
  ------------------
  |  Branch (80:9): [Folded - Ignored]
  ------------------
   81|      0|        printf("%s: %s(%zu): %s\n", name, func, size, ptr == nullptr ? "false" : "true");
  ------------------
  |  Branch (81:55): [True: 0, False: 0]
  ------------------
   82|      0|    }
   83|    353|    return ptr;
   84|    353|}
fuzz_support.cc:_ZNK3$_1clEP11Fuzz_Systemjj:
  103|    357|    ![](Fuzz_System *self, uint32_t nmemb, uint32_t size) {
  104|    357|        return alloc_common<decltype(std::calloc), std::calloc>(
  105|    357|            "calloc", nmemb * size, self->data, nmemb, size);
  106|    357|    },
fuzz_support.cc:_ZL12alloc_commonIDoFPvmmETnT_XadL_Z6callocEEJjjEES0_PKcmR9Fuzz_DataDpT1_:
   88|    357|{
   89|    357|    CONSUME1_OR_RETURN_VAL(
  ------------------
  |  |  122|    357|    if (INPUT.size() < sizeof(TYPE)) {                 \
  |  |  ------------------
  |  |  |  Branch (122:9): [True: 202, False: 155]
  |  |  ------------------
  |  |  123|    202|        return VAL;                                    \
  |  |  124|    202|    }                                                  \
  |  |  125|    357|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   90|    155|        const bool, want_alloc, data, report_alloc("tox1", func, size, Func(args...)));
   91|    155|    if (!want_alloc) {
  ------------------
  |  Branch (91:9): [True: 4, False: 151]
  ------------------
   92|      4|        return nullptr;
   93|      4|    }
   94|    151|    return report_alloc("tox1", func, size, Func(args...));
   95|    155|}
fuzz_support.cc:_ZNK3$_3clEP11Fuzz_SystemPv:
  113|    352|    ![](Fuzz_System *self, void *ptr) { std::free(ptr); },
fuzz_support.cc:_ZNK3$_4clEP11Fuzz_System6Socket:
  117|    116|    /* .close = */ ![](Fuzz_System *self, Socket sock) { return 0; },
fuzz_support.cc:_ZNK3$_6clEP11Fuzz_System6SocketPK12Network_Addr:
  119|    116|    /* .bind = */ ![](Fuzz_System *self, Socket sock, const Network_Addr *addr) { return 0; },
fuzz_support.cc:_ZNK4$_13clEP11Fuzz_System6SocketPKhmPK12Network_Addr:
  157|     89|    ![](Fuzz_System *self, Socket sock, const uint8_t *buf, size_t len, const Network_Addr *addr) {
  158|     89|        assert(sock.value == 42 || sock.value == 1337);
  159|       |        // Always succeed.
  160|     89|        return static_cast<int>(len);
  161|     89|    },
fuzz_support.cc:_ZNK4$_14clEP11Fuzz_Systemiii:
  162|    116|    /* .socket = */ ![](Fuzz_System *self, int domain, int type, int proto) { return Socket{42}; },
fuzz_support.cc:_ZNK4$_15clEP11Fuzz_System6Socketb:
  163|    116|    /* .socket_nonblock = */ ![](Fuzz_System *self, Socket sock, bool nonblock) { return 0; },
fuzz_support.cc:_ZNK4$_17clEP11Fuzz_System6SocketiiPKvm:
  170|    348|    ![](Fuzz_System *self, Socket sock, int level, int optname, const void *optval, size_t optlen) {
  171|    348|        return 0;
  172|    348|    },

_ZNK9Fuzz_Data4sizeEv:
   69|  1.30k|    std::size_t size() const { return size_; }
_ZN9Fuzz_Data8consume1EPKc:
   68|    436|    Consumer consume1(const char *func) { return Consumer{func, *this}; }
_ZN9Fuzz_Data8ConsumercvT_ItEEv:
   60|    139|        {
   61|    139|            const uint8_t *bytes = fd.consume(func, sizeof(T));
   62|    139|            T val;
   63|    139|            std::memcpy(&val, bytes, sizeof(T));
   64|    139|            return val;
   65|    139|        }
_ZN9Fuzz_Data7consumeEPKcm:
   75|    929|    {
   76|    929|        const uint8_t *val = data_;
   77|    929|        if (FUZZ_DEBUG) {
  ------------------
  |  Branch (77:13): [Folded - Ignored]
  ------------------
   78|      0|            if (pos() == TRACE_TRAP) {
  ------------------
  |  Branch (78:17): [True: 0, False: 0]
  ------------------
   79|      0|                __asm__("int $3");
   80|      0|            }
   81|      0|            if (count == 1) {
  ------------------
  |  Branch (81:17): [True: 0, False: 0]
  ------------------
   82|      0|                std::printf("consume@%zu(%s): %d (0x%02x)\n", pos(), func, val[0], val[0]);
   83|      0|            } else if (count != 0) {
  ------------------
  |  Branch (83:24): [True: 0, False: 0]
  ------------------
   84|      0|                std::printf("consume@%zu(%s): %02x..%02x[%zu]\n", pos(), func, val[0],
   85|      0|                    val[count - 1], count);
   86|      0|            }
   87|      0|        }
   88|    929|        data_ += count;
   89|    929|        size_ -= count;
   90|    929|        return val;
   91|    929|    }
forwarding_fuzz_test.cc:_Z18fuzz_select_targetIJXadL_ZN12_GLOBAL__N_122TestSendForwardRequestER9Fuzz_DataEEXadL_ZNS0_16TestForwardReplyES2_EEEEvPKhm:
  183|    142|{
  184|    142|    Fuzz_Data input{data, size};
  185|       |
  186|    142|    CONSUME1_OR_RETURN(const uint8_t, selector, input);
  ------------------
  |  |  105|    142|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 0, False: 142]
  |  |  ------------------
  |  |  106|      0|        return;                               \
  |  |  107|      0|    }                                         \
  |  |  108|    142|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
  187|    142|    return Fuzz_Target_Selector<Args...>::select(selector, input);
  188|    142|}
_ZN9Fuzz_DataC2EPKhm:
   32|    142|        : data_(input_data)
   33|    142|        , base_(input_data)
   34|    142|        , size_(input_size)
   35|    142|    {
   36|    142|    }
_ZN9Fuzz_Data8ConsumercvT_IhEEv:
   60|    142|        {
   61|    142|            const uint8_t *bytes = fd.consume(func, sizeof(T));
   62|    142|            T val;
   63|    142|            std::memcpy(&val, bytes, sizeof(T));
   64|    142|            return val;
   65|    142|        }
forwarding_fuzz_test.cc:_ZN20Fuzz_Target_SelectorIJXadL_ZN12_GLOBAL__N_122TestSendForwardRequestER9Fuzz_DataEEXadL_ZNS0_16TestForwardReplyES2_EEEE6selectEhS2_:
  164|    142|    {
  165|    142|        if (selector == sizeof...(Args)) {
  ------------------
  |  Branch (165:13): [True: 59, False: 83]
  ------------------
  166|     59|            return Arg(input);
  167|     59|        }
  168|     83|        return Fuzz_Target_Selector<Args...>::select(selector, input);
  169|    142|    }
forwarding_fuzz_test.cc:_ZN20Fuzz_Target_SelectorIJXadL_ZN12_GLOBAL__N_116TestForwardReplyER9Fuzz_DataEEEE6selectEhS2_:
  164|     83|    {
  165|     83|        if (selector == sizeof...(Args)) {
  ------------------
  |  Branch (165:13): [True: 82, False: 1]
  ------------------
  166|     82|            return Arg(input);
  167|     82|        }
  168|      1|        return Fuzz_Target_Selector<Args...>::select(selector, input);
  169|     83|    }
_ZN20Fuzz_Target_SelectorIJEE6selectEhR9Fuzz_Data:
  175|      1|    {
  176|       |        // The selector selected no function, so we do nothing and rely on the
  177|       |        // fuzzer to come up with a better selector.
  178|      1|    }
_ZN9Fuzz_Data8ConsumercvbEv:
   46|    155|        {
   47|       |            // Special case because memcpy causes UB for bool (which can't be
   48|       |            // anything other than 0 or 1).
   49|    155|            const bool val = fd.data_[0];
   50|    155|            if (FUZZ_DEBUG) {
  ------------------
  |  Branch (50:17): [Folded - Ignored]
  ------------------
   51|      0|                std::printf("consume@%zu(%s): bool %s\n", fd.pos(), func, val ? "true" : "false");
  ------------------
  |  Branch (51:75): [True: 0, False: 0]
  ------------------
   52|      0|            }
   53|    155|            ++fd.data_;
   54|    155|            --fd.size_;
   55|    155|            return val;
   56|    155|        }

send_forward_request:
   50|     51|{
   51|     51|    if (chain_length == 0 || chain_length > MAX_FORWARD_CHAIN_LENGTH
  ------------------
  |  |   27|    101|#define MAX_FORWARD_CHAIN_LENGTH 4
  ------------------
  |  Branch (51:9): [True: 1, False: 50]
  |  Branch (51:30): [True: 1, False: 49]
  ------------------
   52|     51|            || data_length > MAX_FORWARD_DATA_SIZE) {
  ------------------
  |  |   25|     49|#define MAX_FORWARD_DATA_SIZE (MAX_UDP_PACKET_SIZE - (1 + 1 + MAX_SENDBACK_SIZE))
  |  |  ------------------
  |  |  |  |  111|     49|#define MAX_UDP_PACKET_SIZE 2048
  |  |  ------------------
  |  |               #define MAX_FORWARD_DATA_SIZE (MAX_UDP_PACKET_SIZE - (1 + 1 + MAX_SENDBACK_SIZE))
  |  |  ------------------
  |  |  |  |   24|     49|#define MAX_SENDBACK_SIZE (0xff - 1)
  |  |  ------------------
  ------------------
  |  Branch (52:16): [True: 1, False: 48]
  ------------------
   53|      3|        return false;
   54|      3|    }
   55|       |
   56|     48|    const uint16_t len = forward_chain_packet_size(chain_length, data_length);
   57|     48|    VLA(uint8_t, packet, len);
  ------------------
  |  |   59|     48|#define VLA ALLOC_VLA
  |  |  ------------------
  |  |  |  |   28|     48|#define ALLOC_VLA(type, name, size) type name[size]
  |  |  ------------------
  ------------------
   58|       |
   59|     48|    return create_forward_chain_packet(chain_keys, chain_length, data, data_length, packet)
  ------------------
  |  Branch (59:12): [True: 48, False: 0]
  ------------------
   60|     48|           && sendpacket(net, forwarder, packet, len) == len;
  ------------------
  |  Branch (60:15): [True: 34, False: 14]
  ------------------
   61|     51|}
forward_chain_packet_size:
   64|     48|{
   65|     48|    return chain_length * (1 + CRYPTO_PUBLIC_KEY_SIZE) + data_length;
  ------------------
  |  |   43|     48|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
   66|     48|}
create_forward_chain_packet:
   71|     48|{
   72|     48|    if (chain_length == 0 || chain_length > MAX_FORWARD_CHAIN_LENGTH
  ------------------
  |  |   27|     96|#define MAX_FORWARD_CHAIN_LENGTH 4
  ------------------
  |  Branch (72:9): [True: 0, False: 48]
  |  Branch (72:30): [True: 0, False: 48]
  ------------------
   73|     48|            || data_length > MAX_FORWARD_DATA_SIZE) {
  ------------------
  |  |   25|     48|#define MAX_FORWARD_DATA_SIZE (MAX_UDP_PACKET_SIZE - (1 + 1 + MAX_SENDBACK_SIZE))
  |  |  ------------------
  |  |  |  |  111|     48|#define MAX_UDP_PACKET_SIZE 2048
  |  |  ------------------
  |  |               #define MAX_FORWARD_DATA_SIZE (MAX_UDP_PACKET_SIZE - (1 + 1 + MAX_SENDBACK_SIZE))
  |  |  ------------------
  |  |  |  |   24|     48|#define MAX_SENDBACK_SIZE (0xff - 1)
  |  |  ------------------
  ------------------
  |  Branch (73:16): [True: 0, False: 48]
  ------------------
   74|      0|        return false;
   75|      0|    }
   76|       |
   77|     48|    uint16_t offset = 0;
   78|       |
   79|    105|    for (uint16_t j = 0; j < chain_length; ++j) {
  ------------------
  |  Branch (79:26): [True: 57, False: 48]
  ------------------
   80|     57|        packet[offset] = NET_PACKET_FORWARD_REQUEST;
   81|     57|        ++offset;
   82|     57|        memcpy(packet + offset, chain_keys + j * CRYPTO_PUBLIC_KEY_SIZE, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|     57|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
                      memcpy(packet + offset, chain_keys + j * CRYPTO_PUBLIC_KEY_SIZE, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|     57|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
   83|     57|        offset += CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|     57|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
   84|     57|    }
   85|       |
   86|     48|    memcpy(packet + offset, data, data_length);
   87|     48|    return true;
   88|     48|}
forward_reply:
  328|     65|{
  329|     65|    if (sendback_length > MAX_SENDBACK_SIZE ||
  ------------------
  |  |   24|    130|#define MAX_SENDBACK_SIZE (0xff - 1)
  ------------------
  |  Branch (329:9): [True: 1, False: 64]
  ------------------
  330|     65|            length > MAX_FORWARD_DATA_SIZE) {
  ------------------
  |  |   25|     64|#define MAX_FORWARD_DATA_SIZE (MAX_UDP_PACKET_SIZE - (1 + 1 + MAX_SENDBACK_SIZE))
  |  |  ------------------
  |  |  |  |  111|     64|#define MAX_UDP_PACKET_SIZE 2048
  |  |  ------------------
  |  |               #define MAX_FORWARD_DATA_SIZE (MAX_UDP_PACKET_SIZE - (1 + 1 + MAX_SENDBACK_SIZE))
  |  |  ------------------
  |  |  |  |   24|     64|#define MAX_SENDBACK_SIZE (0xff - 1)
  |  |  ------------------
  ------------------
  |  Branch (330:13): [True: 1, False: 63]
  ------------------
  331|      2|        return false;
  332|      2|    }
  333|       |
  334|     63|    const uint16_t len = 1 + 1 + sendback_length + length;
  335|     63|    VLA(uint8_t, packet, len);
  ------------------
  |  |   59|     63|#define VLA ALLOC_VLA
  |  |  ------------------
  |  |  |  |   28|     63|#define ALLOC_VLA(type, name, size) type name[size]
  |  |  ------------------
  ------------------
  336|     63|    packet[0] = NET_PACKET_FORWARD_REPLY;
  337|     63|    packet[1] = (uint8_t) sendback_length;
  338|     63|    memcpy(packet + 1 + 1, sendback, sendback_length);
  339|     63|    memcpy(packet + 1 + 1 + sendback_length, data, length);
  340|     63|    return sendpacket(net, forwarder, packet, len) == len;
  341|     65|}

LLVMFuzzerTestOneInput:
   97|    142|{
   98|    142|    fuzz_select_target<TestSendForwardRequest, TestForwardReply>(data, size);
   99|    142|    return 0;
  100|    142|}
forwarding_fuzz_test.cc:_ZN12_GLOBAL__N_122TestSendForwardRequestER9Fuzz_Data:
   35|     59|{
   36|     59|    CONSUME1_OR_RETURN(const uint16_t, chain_length, input);
  ------------------
  |  |  105|     59|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 1, False: 58]
  |  |  ------------------
  |  |  106|      1|        return;                               \
  |  |  107|      1|    }                                         \
  |  |  108|     59|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   37|     58|    const uint16_t chain_keys_size = chain_length * CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|     58|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
   38|     58|    CONSUME_OR_RETURN(const uint8_t *chain_keys, input, chain_keys_size);
  ------------------
  |  |  139|     58|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 1, False: 57]
  |  |  ------------------
  |  |  140|      1|        return;                              \
  |  |  141|      1|    }                                        \
  |  |  142|     58|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   39|       |
   40|     57|    const auto prep = prepare(input);
   41|     57|    if (!prep.has_value()) {
  ------------------
  |  Branch (41:9): [True: 4, False: 53]
  ------------------
   42|      4|        return;
   43|      4|    }
   44|     53|    const auto [ipp, forwarder, data, data_size] = prep.value();
   45|       |
   46|       |    // rest of the fuzz data is input for malloc and network
   47|     53|    Fuzz_System sys(input);
   48|       |
   49|     53|    const Ptr<Logger> logger(logger_new(sys.mem.get()), logger_kill);
   50|     53|    if (logger == nullptr) {
  ------------------
  |  Branch (50:9): [True: 1, False: 52]
  ------------------
   51|      1|        return;
   52|      1|    }
   53|       |
   54|     52|    const Ptr<Networking_Core> net(new_networking_ex(logger.get(), sys.mem.get(), sys.ns.get(),
   55|     52|                                       &ipp.ip, ipp.port, ipp.port + 100, nullptr),
   56|     52|        kill_networking);
   57|     52|    if (net == nullptr) {
  ------------------
  |  Branch (57:9): [True: 1, False: 51]
  ------------------
   58|      1|        return;
   59|      1|    }
   60|       |
   61|     51|    send_forward_request(net.get(), &forwarder, chain_keys, chain_length, data, data_size);
   62|     51|}
forwarding_fuzz_test.cc:_ZN12_GLOBAL__N_17prepareER9Fuzz_Data:
   14|    137|{
   15|    137|    CONSUME_OR_RETURN_VAL(const uint8_t *ipp_packed, input, SIZE_IP_PORT, std::nullopt);
  ------------------
  |  |  145|    137|    if (INPUT.size() < SIZE) {                        \
  |  |  ------------------
  |  |  |  Branch (145:9): [True: 2, False: 135]
  |  |  ------------------
  |  |  146|      2|        return VAL;                                   \
  |  |  147|      2|    }                                                 \
  |  |  148|    137|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   16|    135|    IP_Port ipp{};
   17|    135|    unpack_ip_port(&ipp, ipp_packed, SIZE_IP6, true);
  ------------------
  |  |  186|    135|#define SIZE_IP6 16
  ------------------
   18|       |
   19|    135|    CONSUME_OR_RETURN_VAL(const uint8_t *forwarder_packed, input, SIZE_IP_PORT, std::nullopt);
  ------------------
  |  |  145|    135|    if (INPUT.size() < SIZE) {                        \
  |  |  ------------------
  |  |  |  Branch (145:9): [True: 5, False: 130]
  |  |  ------------------
  |  |  146|      5|        return VAL;                                   \
  |  |  147|      5|    }                                                 \
  |  |  148|    135|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   20|    130|    IP_Port forwarder{};
   21|    130|    unpack_ip_port(&forwarder, forwarder_packed, SIZE_IP6, true);
  ------------------
  |  |  186|    130|#define SIZE_IP6 16
  ------------------
   22|       |
   23|       |    // 2 bytes: size of the request
   24|    130|    CONSUME_OR_RETURN_VAL(const uint8_t *data_size_bytes, input, sizeof(uint16_t), std::nullopt);
  ------------------
  |  |  145|    130|    if (INPUT.size() < SIZE) {                        \
  |  |  ------------------
  |  |  |  Branch (145:9): [True: 6, False: 124]
  |  |  ------------------
  |  |  146|      6|        return VAL;                                   \
  |  |  147|      6|    }                                                 \
  |  |  148|    130|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   25|    124|    uint16_t data_size;
   26|    124|    std::memcpy(&data_size, data_size_bytes, sizeof(uint16_t));
   27|       |
   28|       |    // data bytes (max 64K)
   29|    124|    CONSUME_OR_RETURN_VAL(const uint8_t *data, input, data_size, std::nullopt);
  ------------------
  |  |  145|    124|    if (INPUT.size() < SIZE) {                        \
  |  |  ------------------
  |  |  |  Branch (145:9): [True: 2, False: 122]
  |  |  ------------------
  |  |  146|      2|        return VAL;                                   \
  |  |  147|      2|    }                                                 \
  |  |  148|    124|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   30|       |
   31|    122|    return {{ipp, forwarder, data, data_size}};
   32|    124|}
forwarding_fuzz_test.cc:_ZN12_GLOBAL__N_116TestForwardReplyER9Fuzz_Data:
   65|     82|{
   66|     82|    CONSUME1_OR_RETURN(const uint16_t, sendback_length, input);
  ------------------
  |  |  105|     82|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 1, False: 81]
  |  |  ------------------
  |  |  106|      1|        return;                               \
  |  |  107|      1|    }                                         \
  |  |  108|     82|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   67|     81|    CONSUME_OR_RETURN(const uint8_t *sendback, input, sendback_length);
  ------------------
  |  |  139|     81|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 1, False: 80]
  |  |  ------------------
  |  |  140|      1|        return;                              \
  |  |  141|      1|    }                                        \
  |  |  142|     81|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   68|       |
   69|     80|    const auto prep = prepare(input);
   70|     80|    if (!prep.has_value()) {
  ------------------
  |  Branch (70:9): [True: 11, False: 69]
  ------------------
   71|     11|        return;
   72|     11|    }
   73|     69|    const auto [ipp, forwarder, data, data_size] = prep.value();
   74|       |
   75|       |    // rest of the fuzz data is input for malloc and network
   76|     69|    Fuzz_System sys(input);
   77|       |
   78|     69|    const Ptr<Logger> logger(logger_new(sys.mem.get()), logger_kill);
   79|     69|    if (logger == nullptr) {
  ------------------
  |  Branch (79:9): [True: 1, False: 68]
  ------------------
   80|      1|        return;
   81|      1|    }
   82|       |
   83|     68|    const Ptr<Networking_Core> net(new_networking_ex(logger.get(), sys.mem.get(), sys.ns.get(),
   84|     68|                                       &ipp.ip, ipp.port, ipp.port + 100, nullptr),
   85|     68|        kill_networking);
   86|     68|    if (net == nullptr) {
  ------------------
  |  Branch (86:9): [True: 3, False: 65]
  ------------------
   87|      3|        return;
   88|      3|    }
   89|       |
   90|     65|    forward_reply(net.get(), &forwarder, sendback, sendback_length, data, data_size);
   91|     65|}

logger_new:
   33|    122|{
   34|    122|    Logger *log = (Logger *)mem_alloc(mem, sizeof(Logger));
   35|       |
   36|    122|    if (log == nullptr) {
  ------------------
  |  |   63|    122|#define nullptr NULL
  ------------------
  |  Branch (36:9): [True: 2, False: 120]
  ------------------
   37|      2|        return nullptr;
  ------------------
  |  |   63|      2|#define nullptr NULL
  ------------------
   38|      2|    }
   39|       |
   40|    120|    log->mem = mem;
   41|       |
   42|    120|    return log;
   43|    122|}
logger_kill:
   46|    120|{
   47|    120|    if (log == nullptr) {
  ------------------
  |  |   63|    120|#define nullptr NULL
  ------------------
  |  Branch (47:9): [True: 0, False: 120]
  ------------------
   48|      0|        return;
   49|      0|    }
   50|       |
   51|    120|    mem_delete(log->mem, log);
   52|    120|}
logger_write:
   64|     19|{
   65|     19|    if (log == nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (65:9): [True: 0, False: 19]
  ------------------
   66|      0|        return;
   67|      0|    }
   68|       |
   69|     19|    if (log->callback == nullptr) {
  ------------------
  |  |   63|     19|#define nullptr NULL
  ------------------
  |  Branch (69:9): [True: 19, False: 0]
  ------------------
   70|     19|        return;
   71|     19|    }
   72|       |
   73|       |    // Only pass the file name, not the entire file path, for privacy reasons.
   74|       |    // The full path may contain PII of the person compiling toxcore (their
   75|       |    // username and directory layout).
   76|      0|    const char *filename = strrchr(file, '/');
   77|      0|    file = filename != nullptr ? filename + 1 : file;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (77:12): [True: 0, False: 0]
  ------------------
   78|       |#if defined(_WIN32) || defined(__CYGWIN__)
   79|       |    // On Windows, the path separator *may* be a backslash, so we look for that
   80|       |    // one too.
   81|       |    const char *windows_filename = strrchr(file, '\\');
   82|       |    file = windows_filename != nullptr ? windows_filename + 1 : file;
   83|       |#endif /* WIN32 */
   84|       |
   85|       |    // Format message
   86|      0|    char msg[1024];
   87|      0|    va_list args;
   88|      0|    va_start(args, format);
   89|      0|    vsnprintf(msg, sizeof(msg), format, args);
   90|      0|    va_end(args);
   91|       |
   92|      0|    log->callback(log->context, level, file, line, func, msg, log->userdata);
   93|      0|}

mem_alloc:
   63|    357|{
   64|    357|    void *const ptr = mem->funcs->calloc(mem->obj, 1, size);
   65|    357|    return ptr;
   66|    357|}
mem_delete:
   93|    352|{
   94|    352|    mem->funcs->free(mem->obj, ptr);
   95|    352|}

netprof_record_packet:
   74|     89|{
   75|     89|    if (profile == nullptr) {
  ------------------
  |  |   63|     89|#define nullptr NULL
  ------------------
  |  Branch (75:9): [True: 0, False: 89]
  ------------------
   76|      0|        return;
   77|      0|    }
   78|       |
   79|     89|    if (dir == PACKET_DIRECTION_SEND) {
  ------------------
  |  Branch (79:9): [True: 89, False: 0]
  ------------------
   80|     89|        ++profile->total_packets_sent;
   81|     89|        ++profile->packets_sent[id];
   82|       |
   83|     89|        profile->total_bytes_sent += length;
   84|     89|        profile->bytes_sent[id] += length;
   85|     89|    } else {
   86|      0|        ++profile->total_packets_recv;
   87|      0|        ++profile->packets_recv[id];
   88|       |
   89|      0|        profile->total_bytes_recv += length;
   90|      0|        profile->bytes_recv[id] += length;
   91|      0|    }
   92|     89|}
netprof_new:
  141|    117|{
  142|    117|    Net_Profile *np = (Net_Profile *)mem_alloc(mem, sizeof(Net_Profile));
  143|       |
  144|    117|    if (np == nullptr) {
  ------------------
  |  |   63|    117|#define nullptr NULL
  ------------------
  |  Branch (144:9): [True: 1, False: 116]
  ------------------
  145|      1|        LOGGER_ERROR(log, "failed to allocate memory for net profiler");
  ------------------
  |  |   87|      1|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      1|    do {                                                                         \
  |  |  |  |   77|      1|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      2|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      1|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      1|        }                                                                        \
  |  |  |  |   80|      1|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  146|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
  147|      1|    }
  148|       |
  149|    116|    return np;
  150|    117|}
netprof_kill:
  153|    116|{
  154|    116|    if (net_profile != nullptr) {
  ------------------
  |  |   63|    116|#define nullptr NULL
  ------------------
  |  Branch (154:9): [True: 116, False: 0]
  ------------------
  155|    116|        mem_delete(mem, net_profile);
  156|    116|    }
  157|    116|}

net_socket_from_native:
  380|    116|{
  381|    116|    const Socket res = {(force Socket_Value)sock};
  382|    116|    return res;
  383|    116|}
net_invalid_socket:
  386|    116|{
  387|    116|    return net_socket_from_native(INVALID_SOCKET);
  ------------------
  |  |  371|    116|#define INVALID_SOCKET (-1)
  ------------------
  388|    116|}
net_family_ipv4:
  396|    212|{
  397|    212|    return family_ipv4;
  398|    212|}
net_family_ipv6:
  401|      3|{
  402|      3|    return family_ipv6;
  403|      3|}
net_family_tcp_ipv4:
  416|     19|{
  417|     19|    return family_tcp_ipv4;
  418|     19|}
net_family_tcp_ipv6:
  421|      5|{
  422|      5|    return family_tcp_ipv6;
  423|      5|}
net_family_is_unspec:
  436|    332|{
  437|    332|    return family.value == family_unspec.value;
  438|    332|}
net_family_is_ipv4:
  441|    640|{
  442|    640|    return family.value == family_ipv4.value;
  443|    640|}
net_family_is_ipv6:
  446|    207|{
  447|    207|    return family.value == family_ipv6.value;
  448|    207|}
net_family_is_tcp_ipv4:
  461|     16|{
  462|     16|    return family.value == family_tcp_ipv4.value;
  463|     16|}
sock_valid:
  481|    116|{
  482|    116|    const Socket invalid_socket = net_invalid_socket();
  483|    116|    return sock.value != invalid_socket.value;
  484|    116|}
kill_sock:
  965|    116|{
  966|    116|    ns->funcs->close(ns->obj, sock);
  967|    116|}
set_socket_nonblock:
  970|    116|{
  971|    116|    return ns->funcs->socket_nonblock(ns->obj, sock, true) == 0;
  972|    116|}
set_socket_nosigpipe:
  975|    116|{
  976|       |#if defined(__APPLE__)
  977|       |    int set = 1;
  978|       |    return net_setsockopt(ns, sock, SOL_SOCKET, SO_NOSIGPIPE, &set, sizeof(int)) == 0;
  979|       |#else
  980|    116|    return true;
  981|    116|#endif /* __APPLE__ */
  982|    116|}
send_packet:
 1041|    111|{
 1042|    111|    IP_Port ipp_copy = *ip_port;
 1043|       |
 1044|    111|    if (net_family_is_unspec(ip_port->ip.family)) {
  ------------------
  |  Branch (1044:9): [True: 6, False: 105]
  ------------------
 1045|       |        // TODO(iphydf): Make this an error. Currently this fails sometimes when
 1046|       |        // called from DHT.c:do_ping_and_sendnode_requests.
 1047|      6|        return -1;
 1048|      6|    }
 1049|       |
 1050|    105|    if (net_family_is_unspec(net->family)) { /* Socket not initialized */
  ------------------
  |  Branch (1050:9): [True: 0, False: 105]
  ------------------
 1051|       |        // TODO(iphydf): Make this an error. Currently, the onion client calls
 1052|       |        // this via DHT nodes requests.
 1053|      0|        LOGGER_WARNING(net->log, "attempted to send message of length %u on uninitialised socket", packet.length);
  ------------------
  |  |   86|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1054|      0|        return -1;
 1055|      0|    }
 1056|       |
 1057|       |    /* socket TOX_AF_INET, but target IP NOT: can't send */
 1058|    105|    if (net_family_is_ipv4(net->family) && !net_family_is_ipv4(ipp_copy.ip.family)) {
  ------------------
  |  Branch (1058:9): [True: 105, False: 0]
  |  Branch (1058:44): [True: 16, False: 89]
  ------------------
 1059|       |        // TODO(iphydf): Make this an error. Occasionally we try to send to an
 1060|       |        // all-zero ip_port.
 1061|     16|        Ip_Ntoa ip_str;
 1062|     16|        LOGGER_WARNING(net->log, "attempted to send message with network family %d (probably IPv6) on IPv4 socket (%s)",
  ------------------
  |  |   86|     16|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     16|    do {                                                                         \
  |  |  |  |   77|     16|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     32|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|     16|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|     16|        }                                                                        \
  |  |  |  |   80|     16|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1063|     16|                       ipp_copy.ip.family.value, net_ip_ntoa(&ipp_copy.ip, &ip_str));
 1064|     16|        return -1;
 1065|     16|    }
 1066|       |
 1067|     89|    if (net_family_is_ipv4(ipp_copy.ip.family) && net_family_is_ipv6(net->family)) {
  ------------------
  |  Branch (1067:9): [True: 89, False: 0]
  |  Branch (1067:51): [True: 0, False: 89]
  ------------------
 1068|       |        /* must convert to IPV4-in-IPV6 address */
 1069|      0|        IP6 ip6;
 1070|       |
 1071|       |        /* there should be a macro for this in a standards compliant
 1072|       |         * environment, not found */
 1073|      0|        ip6.uint32[0] = 0;
 1074|      0|        ip6.uint32[1] = 0;
 1075|      0|        ip6.uint32[2] = net_htonl(0xFFFF);
 1076|      0|        ip6.uint32[3] = ipp_copy.ip.ip.v4.uint32;
 1077|       |
 1078|      0|        ipp_copy.ip.family = net_family_ipv6();
 1079|      0|        ipp_copy.ip.ip.v6 = ip6;
 1080|      0|    }
 1081|       |
 1082|     89|    Network_Addr addr;
 1083|       |
 1084|     89|    if (net_family_is_ipv4(ipp_copy.ip.family)) {
  ------------------
  |  Branch (1084:9): [True: 89, False: 0]
  ------------------
 1085|     89|        struct sockaddr_in *const addr4 = (struct sockaddr_in *)&addr.addr;
 1086|       |
 1087|     89|        addr.size = sizeof(struct sockaddr_in);
 1088|     89|        addr4->sin_family = AF_INET;
 1089|     89|        addr4->sin_port = ipp_copy.port;
 1090|     89|        fill_addr4(&ipp_copy.ip.ip.v4, &addr4->sin_addr);
 1091|     89|    } else if (net_family_is_ipv6(ipp_copy.ip.family)) {
  ------------------
  |  Branch (1091:16): [True: 0, False: 0]
  ------------------
 1092|      0|        struct sockaddr_in6 *const addr6 = (struct sockaddr_in6 *)&addr.addr;
 1093|       |
 1094|      0|        addr.size = sizeof(struct sockaddr_in6);
 1095|      0|        addr6->sin6_family = AF_INET6;
 1096|      0|        addr6->sin6_port = ipp_copy.port;
 1097|      0|        fill_addr6(&ipp_copy.ip.ip.v6, &addr6->sin6_addr);
 1098|       |
 1099|      0|        addr6->sin6_flowinfo = 0;
 1100|      0|        addr6->sin6_scope_id = 0;
 1101|      0|    } else {
 1102|      0|        LOGGER_ERROR(net->log, "unknown address type: %d", ipp_copy.ip.family.value);
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1103|      0|        return -1;
 1104|      0|    }
 1105|       |
 1106|     89|    const long res = net_sendto(net->ns, net->sock, packet.data, packet.length, &addr, &ipp_copy);
 1107|     89|    loglogdata(net->log, "O=>", packet.data, packet.length, ip_port, res);
 1108|       |
 1109|     89|    assert(res <= INT_MAX);
 1110|       |
 1111|     89|    if (res == packet.length && packet.data != nullptr) {
  ------------------
  |  |   63|     89|#define nullptr NULL
  ------------------
  |  Branch (1111:9): [True: 89, False: 0]
  |  Branch (1111:33): [True: 89, False: 0]
  ------------------
 1112|     89|        netprof_record_packet(net->udp_net_profile, packet.data[0], packet.length, PACKET_DIRECTION_SEND);
 1113|     89|    }
 1114|       |
 1115|     89|    return (int)res;
 1116|     89|}
sendpacket:
 1124|    111|{
 1125|    111|    const Packet packet = {data, length};
 1126|    111|    return send_packet(net, ip_port, packet);
 1127|    111|}
new_networking_ex:
 1246|    120|{
 1247|       |    /* If both from and to are 0, use default port range
 1248|       |     * If one is 0 and the other is non-0, use the non-0 value as only port
 1249|       |     * If from > to, swap
 1250|       |     */
 1251|    120|    if (port_from == 0 && port_to == 0) {
  ------------------
  |  Branch (1251:9): [True: 33, False: 87]
  |  Branch (1251:27): [True: 0, False: 33]
  ------------------
 1252|      0|        port_from = TOX_PORTRANGE_FROM;
  ------------------
  |  |  162|      0|#define TOX_PORTRANGE_FROM 33445
  ------------------
 1253|      0|        port_to = TOX_PORTRANGE_TO;
  ------------------
  |  |  163|      0|#define TOX_PORTRANGE_TO   33545
  ------------------
 1254|    120|    } else if (port_from == 0 && port_to != 0) {
  ------------------
  |  Branch (1254:16): [True: 33, False: 87]
  |  Branch (1254:34): [True: 33, False: 0]
  ------------------
 1255|     33|        port_from = port_to;
 1256|     87|    } else if (port_from != 0 && port_to == 0) {
  ------------------
  |  Branch (1256:16): [True: 87, False: 0]
  |  Branch (1256:34): [True: 1, False: 86]
  ------------------
 1257|      1|        port_to = port_from;
 1258|     86|    } else if (port_from > port_to) {
  ------------------
  |  Branch (1258:16): [True: 1, False: 85]
  ------------------
 1259|      1|        const uint16_t temp_port = port_from;
 1260|      1|        port_from = port_to;
 1261|      1|        port_to = temp_port;
 1262|      1|    }
 1263|       |
 1264|    120|    if (error != nullptr) {
  ------------------
  |  |   63|    120|#define nullptr NULL
  ------------------
  |  Branch (1264:9): [True: 0, False: 120]
  ------------------
 1265|      0|        *error = 2;
 1266|      0|    }
 1267|       |
 1268|       |    /* maybe check for invalid IPs like 224+.x.y.z? if there is any IP set ever */
 1269|    120|    if (!net_family_is_ipv4(ip->family) && !net_family_is_ipv6(ip->family)) {
  ------------------
  |  Branch (1269:9): [True: 2, False: 118]
  |  Branch (1269:44): [True: 2, False: 0]
  ------------------
 1270|      2|        LOGGER_ERROR(log, "invalid address family: %u", ip->family.value);
  ------------------
  |  |   87|      2|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      2|    do {                                                                         \
  |  |  |  |   77|      2|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      4|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      2|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      2|        }                                                                        \
  |  |  |  |   80|      2|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1271|      2|        return nullptr;
  ------------------
  |  |   63|      2|#define nullptr NULL
  ------------------
 1272|      2|    }
 1273|       |
 1274|    118|    Networking_Core *temp = (Networking_Core *)mem_alloc(mem, sizeof(Networking_Core));
 1275|       |
 1276|    118|    if (temp == nullptr) {
  ------------------
  |  |   63|    118|#define nullptr NULL
  ------------------
  |  Branch (1276:9): [True: 1, False: 117]
  ------------------
 1277|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
 1278|      1|    }
 1279|       |
 1280|    117|    Net_Profile *np = netprof_new(log, mem);
 1281|       |
 1282|    117|    if (np == nullptr) {
  ------------------
  |  |   63|    117|#define nullptr NULL
  ------------------
  |  Branch (1282:9): [True: 1, False: 116]
  ------------------
 1283|      1|        free(temp);
 1284|      1|        return nullptr;
  ------------------
  |  |   63|      1|#define nullptr NULL
  ------------------
 1285|      1|    }
 1286|       |
 1287|    116|    temp->udp_net_profile = np;
 1288|    116|    temp->ns = ns;
 1289|    116|    temp->log = log;
 1290|    116|    temp->mem = mem;
 1291|    116|    temp->family = ip->family;
 1292|    116|    temp->port = 0;
 1293|       |
 1294|       |    /* Initialize our socket. */
 1295|       |    /* add log message what we're creating */
 1296|    116|    temp->sock = net_socket(ns, temp->family, TOX_SOCK_DGRAM, TOX_PROTO_UDP);
  ------------------
  |  |  174|    116|#define TOX_SOCK_DGRAM 2
  ------------------
                  temp->sock = net_socket(ns, temp->family, TOX_SOCK_DGRAM, TOX_PROTO_UDP);
  ------------------
  |  |  177|    116|#define TOX_PROTO_UDP 2
  ------------------
 1297|       |
 1298|       |    /* Check for socket error. */
 1299|    116|    if (!sock_valid(temp->sock)) {
  ------------------
  |  Branch (1299:9): [True: 0, False: 116]
  ------------------
 1300|      0|        const int neterror = net_error();
 1301|      0|        Net_Strerror error_str;
 1302|      0|        LOGGER_ERROR(log, "failed to get a socket?! %d, %s", neterror, net_strerror(neterror, &error_str));
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1303|      0|        netprof_kill(mem, temp->udp_net_profile);
 1304|      0|        mem_delete(mem, temp);
 1305|       |
 1306|      0|        if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1306:13): [True: 0, False: 0]
  ------------------
 1307|      0|            *error = 1;
 1308|      0|        }
 1309|       |
 1310|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1311|      0|    }
 1312|       |
 1313|       |    /* Functions to increase the size of the send and receive UDP buffers.
 1314|       |     */
 1315|    116|    int n = 1024 * 1024 * 2;
 1316|       |
 1317|    116|    if (net_setsockopt(ns, temp->sock, SOL_SOCKET, SO_RCVBUF, &n, sizeof(n)) != 0) {
  ------------------
  |  Branch (1317:9): [True: 0, False: 116]
  ------------------
 1318|      0|        LOGGER_WARNING(log, "failed to set socket option %d", SO_RCVBUF);
  ------------------
  |  |   86|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1319|      0|    }
 1320|       |
 1321|    116|    if (net_setsockopt(ns, temp->sock, SOL_SOCKET, SO_SNDBUF, &n, sizeof(n)) != 0) {
  ------------------
  |  Branch (1321:9): [True: 0, False: 116]
  ------------------
 1322|      0|        LOGGER_WARNING(log, "failed to set socket option %d", SO_SNDBUF);
  ------------------
  |  |   86|      0|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1323|      0|    }
 1324|       |
 1325|       |    /* Enable broadcast on socket */
 1326|    116|    int broadcast = 1;
 1327|       |
 1328|    116|    if (net_setsockopt(ns, temp->sock, SOL_SOCKET, SO_BROADCAST, &broadcast, sizeof(broadcast)) != 0) {
  ------------------
  |  Branch (1328:9): [True: 0, False: 116]
  ------------------
 1329|      0|        LOGGER_ERROR(log, "failed to set socket option %d", SO_BROADCAST);
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1330|      0|    }
 1331|       |
 1332|       |    /* iOS UDP sockets are weird and apparently can SIGPIPE */
 1333|    116|    if (!set_socket_nosigpipe(ns, temp->sock)) {
  ------------------
  |  Branch (1333:9): [True: 0, False: 116]
  ------------------
 1334|      0|        kill_networking(temp);
 1335|       |
 1336|      0|        if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1336:13): [True: 0, False: 0]
  ------------------
 1337|      0|            *error = 1;
 1338|      0|        }
 1339|       |
 1340|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1341|      0|    }
 1342|       |
 1343|       |    /* Set socket nonblocking. */
 1344|    116|    if (!set_socket_nonblock(ns, temp->sock)) {
  ------------------
  |  Branch (1344:9): [True: 0, False: 116]
  ------------------
 1345|      0|        kill_networking(temp);
 1346|       |
 1347|      0|        if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1347:13): [True: 0, False: 0]
  ------------------
 1348|      0|            *error = 1;
 1349|      0|        }
 1350|       |
 1351|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1352|      0|    }
 1353|       |
 1354|       |    /* Bind our socket to port PORT and the given IP address (usually 0.0.0.0 or ::) */
 1355|    116|    uint16_t *portptr = nullptr;
  ------------------
  |  |   63|    116|#define nullptr NULL
  ------------------
 1356|    116|    Network_Addr addr = {{0}};
 1357|       |
 1358|    116|    if (net_family_is_ipv4(temp->family)) {
  ------------------
  |  Branch (1358:9): [True: 116, False: 0]
  ------------------
 1359|    116|        struct sockaddr_in *addr4 = (struct sockaddr_in *)&addr.addr;
 1360|       |
 1361|    116|        addr.size = sizeof(struct sockaddr_in);
 1362|    116|        addr4->sin_family = AF_INET;
 1363|    116|        addr4->sin_port = 0;
 1364|    116|        fill_addr4(&ip->ip.v4, &addr4->sin_addr);
 1365|       |
 1366|    116|        portptr = &addr4->sin_port;
 1367|    116|    } else if (net_family_is_ipv6(temp->family)) {
  ------------------
  |  Branch (1367:16): [True: 0, False: 0]
  ------------------
 1368|      0|        struct sockaddr_in6 *addr6 = (struct sockaddr_in6 *)&addr.addr;
 1369|       |
 1370|      0|        addr.size = sizeof(struct sockaddr_in6);
 1371|      0|        addr6->sin6_family = AF_INET6;
 1372|      0|        addr6->sin6_port = 0;
 1373|      0|        fill_addr6(&ip->ip.v6, &addr6->sin6_addr);
 1374|       |
 1375|      0|        addr6->sin6_flowinfo = 0;
 1376|      0|        addr6->sin6_scope_id = 0;
 1377|       |
 1378|      0|        portptr = &addr6->sin6_port;
 1379|      0|    } else {
 1380|      0|        mem_delete(mem, temp);
 1381|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1382|      0|    }
 1383|       |
 1384|    116|    if (net_family_is_ipv6(ip->family)) {
  ------------------
  |  Branch (1384:9): [True: 0, False: 116]
  ------------------
 1385|      0|        const bool is_dualstack = set_socket_dualstack(ns, temp->sock);
 1386|       |
 1387|      0|        if (is_dualstack) {
  ------------------
  |  Branch (1387:13): [True: 0, False: 0]
  ------------------
 1388|      0|            LOGGER_TRACE(log, "Dual-stack socket: enabled");
  ------------------
  |  |   83|      0|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1389|      0|        } else {
 1390|      0|            LOGGER_ERROR(log, "Dual-stack socket failed to enable, won't be able to receive from/send to IPv4 addresses");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1391|      0|        }
 1392|       |
 1393|      0|#ifndef ESP_PLATFORM
 1394|       |        /* multicast local nodes */
 1395|      0|        struct ipv6_mreq mreq = {{{{0}}}};
 1396|      0|        mreq.ipv6mr_multiaddr.s6_addr[0] = 0xFF;
 1397|      0|        mreq.ipv6mr_multiaddr.s6_addr[1] = 0x02;
 1398|      0|        mreq.ipv6mr_multiaddr.s6_addr[15] = 0x01;
 1399|      0|        mreq.ipv6mr_interface = 0;
 1400|       |
 1401|      0|        const int res = net_setsockopt(ns, temp->sock, IPPROTO_IPV6, IPV6_ADD_MEMBERSHIP, &mreq, sizeof(mreq));
 1402|       |
 1403|      0|        const int neterror = net_error();
 1404|      0|        Net_Strerror error_str;
 1405|       |
 1406|      0|        if (res < 0) {
  ------------------
  |  Branch (1406:13): [True: 0, False: 0]
  ------------------
 1407|      0|            LOGGER_INFO(log, "Failed to activate local multicast membership in FF02::1. (%d, %s)", neterror, net_strerror(neterror, &error_str));
  ------------------
  |  |   85|      0|#define LOGGER_INFO(log, ...)    LOGGER_WRITE(log, LOGGER_LEVEL_INFO, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1408|      0|        } else {
 1409|      0|            LOGGER_TRACE(log, "Local multicast group joined successfully. (%d, %s)", neterror, net_strerror(neterror, &error_str));
  ------------------
  |  |   83|      0|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1410|      0|        }
 1411|      0|#endif /* ESP_PLATFORM */
 1412|      0|    }
 1413|       |
 1414|       |    /* A hanging program or a different user might block the standard port.
 1415|       |     * As long as it isn't a parameter coming from the commandline,
 1416|       |     * try a few ports after it, to see if we can find a "free" one.
 1417|       |     *
 1418|       |     * If we go on without binding, the first sendto() automatically binds to
 1419|       |     * a free port chosen by the system (i.e. anything from 1024 to 65535).
 1420|       |     *
 1421|       |     * Returning NULL after bind fails has both advantages and disadvantages:
 1422|       |     * advantage:
 1423|       |     *   we can rely on getting the port in the range 33445..33450, which
 1424|       |     *   enables us to tell joe user to open their firewall to a small range
 1425|       |     *
 1426|       |     * disadvantage:
 1427|       |     *   some clients might not test return of tox_new(), blindly assuming that
 1428|       |     *   it worked ok (which it did previously without a successful bind)
 1429|       |     */
 1430|    116|    uint16_t port_to_try = port_from;
 1431|    116|    *portptr = net_htons(port_to_try);
 1432|       |
 1433|    116|    for (uint16_t tries = port_from; tries <= port_to; ++tries) {
  ------------------
  |  Branch (1433:38): [True: 116, False: 0]
  ------------------
 1434|    116|        const int res = net_bind(ns, temp->sock, &addr);
 1435|       |
 1436|    116|        if (res == 0) {
  ------------------
  |  Branch (1436:13): [True: 116, False: 0]
  ------------------
 1437|    116|            temp->port = *portptr;
 1438|       |
 1439|    116|            Ip_Ntoa ip_str;
 1440|    116|            LOGGER_DEBUG(log, "Bound successfully to %s:%u", net_ip_ntoa(ip, &ip_str),
  ------------------
  |  |   84|    116|#define LOGGER_DEBUG(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_DEBUG, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|    116|    do {                                                                         \
  |  |  |  |   77|    116|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    232|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|    116|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1441|    116|                         net_ntohs(temp->port));
 1442|       |
 1443|       |            /* errno isn't reset on success, only set on failure, the failed
 1444|       |             * binds with parallel clients yield a -EPERM to the outside if
 1445|       |             * errno isn't cleared here */
 1446|    116|            if (tries > 0) {
  ------------------
  |  Branch (1446:17): [True: 116, False: 0]
  ------------------
 1447|    116|                errno = 0;
 1448|    116|            }
 1449|       |
 1450|    116|            if (error != nullptr) {
  ------------------
  |  |   63|    116|#define nullptr NULL
  ------------------
  |  Branch (1450:17): [True: 0, False: 116]
  ------------------
 1451|      0|                *error = 0;
 1452|      0|            }
 1453|       |
 1454|    116|            return temp;
 1455|    116|        }
 1456|       |
 1457|      0|        ++port_to_try;
 1458|       |
 1459|      0|        if (port_to_try > port_to) {
  ------------------
  |  Branch (1459:13): [True: 0, False: 0]
  ------------------
 1460|      0|            port_to_try = port_from;
 1461|      0|        }
 1462|       |
 1463|      0|        *portptr = net_htons(port_to_try);
 1464|      0|    }
 1465|       |
 1466|      0|    Ip_Ntoa ip_str;
 1467|      0|    const int neterror = net_error();
 1468|      0|    Net_Strerror error_str;
 1469|      0|    LOGGER_ERROR(log, "failed to bind socket: %d, %s IP: %s port_from: %u port_to: %u",
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1470|      0|                 neterror, net_strerror(neterror, &error_str), net_ip_ntoa(ip, &ip_str), port_from, port_to);
 1471|      0|    kill_networking(temp);
 1472|       |
 1473|      0|    if (error != nullptr) {
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (1473:9): [True: 0, False: 0]
  ------------------
 1474|      0|        *error = 1;
 1475|      0|    }
 1476|       |
 1477|      0|    return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1478|    116|}
kill_networking:
 1498|    116|{
 1499|    116|    if (net == nullptr) {
  ------------------
  |  |   63|    116|#define nullptr NULL
  ------------------
  |  Branch (1499:9): [True: 0, False: 116]
  ------------------
 1500|      0|        return;
 1501|      0|    }
 1502|       |
 1503|    116|    if (!net_family_is_unspec(net->family)) {
  ------------------
  |  Branch (1503:9): [True: 116, False: 0]
  ------------------
 1504|       |        /* Socket is initialized, so we close it. */
 1505|    116|        kill_sock(net->ns, net->sock);
 1506|    116|    }
 1507|       |
 1508|    116|    netprof_kill(net->mem, net->udp_net_profile);
 1509|    116|    mem_delete(net->mem, net);
 1510|    116|}
ipport_reset:
 1638|    239|{
 1639|    239|    if (ipport == nullptr) {
  ------------------
  |  |   63|    239|#define nullptr NULL
  ------------------
  |  Branch (1639:9): [True: 0, False: 239]
  ------------------
 1640|      0|        return;
 1641|      0|    }
 1642|       |
 1643|    239|    *ipport = empty_ip_port;
 1644|    239|}
unpack_ip_port:
 1786|    265|{
 1787|    265|    if (data == nullptr) {
  ------------------
  |  |   63|    265|#define nullptr NULL
  ------------------
  |  Branch (1787:9): [True: 0, False: 265]
  ------------------
 1788|      0|        return -1;
 1789|      0|    }
 1790|       |
 1791|    265|    bool is_ipv4;
 1792|    265|    Family host_family;
 1793|       |
 1794|    265|    if (data[0] == TOX_AF_INET) {
  ------------------
  |  |  168|    265|#define TOX_AF_INET 2
  ------------------
  |  Branch (1794:9): [True: 212, False: 53]
  ------------------
 1795|    212|        is_ipv4 = true;
 1796|    212|        host_family = net_family_ipv4();
 1797|    212|    } else if (data[0] == TOX_TCP_INET) {
  ------------------
  |  |  170|     53|#define TOX_TCP_INET 130
  ------------------
  |  Branch (1797:16): [True: 19, False: 34]
  ------------------
 1798|     19|        if (!tcp_enabled) {
  ------------------
  |  Branch (1798:13): [True: 0, False: 19]
  ------------------
 1799|      0|            return -1;
 1800|      0|        }
 1801|       |
 1802|     19|        is_ipv4 = true;
 1803|     19|        host_family = net_family_tcp_ipv4();
 1804|     34|    } else if (data[0] == TOX_AF_INET6) {
  ------------------
  |  |  169|     34|#define TOX_AF_INET6 10
  ------------------
  |  Branch (1804:16): [True: 3, False: 31]
  ------------------
 1805|      3|        is_ipv4 = false;
 1806|      3|        host_family = net_family_ipv6();
 1807|     31|    } else if (data[0] == TOX_TCP_INET6) {
  ------------------
  |  |  171|     31|#define TOX_TCP_INET6 138
  ------------------
  |  Branch (1807:16): [True: 5, False: 26]
  ------------------
 1808|      5|        if (!tcp_enabled) {
  ------------------
  |  Branch (1808:13): [True: 0, False: 5]
  ------------------
 1809|      0|            return -1;
 1810|      0|        }
 1811|       |
 1812|      5|        is_ipv4 = false;
 1813|      5|        host_family = net_family_tcp_ipv6();
 1814|     26|    } else {
 1815|     26|        return -1;
 1816|     26|    }
 1817|       |
 1818|    239|    ipport_reset(ip_port);
 1819|       |
 1820|    239|    if (is_ipv4) {
  ------------------
  |  Branch (1820:9): [True: 231, False: 8]
  ------------------
 1821|    231|        const uint32_t size = 1 + SIZE_IP4 + sizeof(uint16_t);
  ------------------
  |  |  185|    231|#define SIZE_IP4 4
  ------------------
 1822|       |
 1823|    231|        if (size > length) {
  ------------------
  |  Branch (1823:13): [True: 0, False: 231]
  ------------------
 1824|      0|            return -1;
 1825|      0|        }
 1826|       |
 1827|    231|        ip_port->ip.family = host_family;
 1828|    231|        memcpy(ip_port->ip.ip.v4.uint8, data + 1, SIZE_IP4);
  ------------------
  |  |  185|    231|#define SIZE_IP4 4
  ------------------
 1829|    231|        memcpy(&ip_port->port, data + 1 + SIZE_IP4, sizeof(uint16_t));
  ------------------
  |  |  185|    231|#define SIZE_IP4 4
  ------------------
 1830|    231|        return size;
 1831|    231|    } else {
 1832|      8|        const uint32_t size = 1 + SIZE_IP6 + sizeof(uint16_t);
  ------------------
  |  |  186|      8|#define SIZE_IP6 16
  ------------------
 1833|       |
 1834|      8|        if (size > length) {
  ------------------
  |  Branch (1834:13): [True: 8, False: 0]
  ------------------
 1835|      8|            return -1;
 1836|      8|        }
 1837|       |
 1838|      0|        ip_port->ip.family = host_family;
 1839|      0|        memcpy(ip_port->ip.ip.v6.uint8, data + 1, SIZE_IP6);
  ------------------
  |  |  186|      0|#define SIZE_IP6 16
  ------------------
 1840|      0|        memcpy(&ip_port->port, data + 1 + SIZE_IP6, sizeof(uint16_t));
  ------------------
  |  |  186|      0|#define SIZE_IP6 16
  ------------------
 1841|      0|        return size;
 1842|      8|    }
 1843|    239|}
net_ip_ntoa:
 1846|     16|{
 1847|     16|    assert(ip_str != nullptr);
 1848|       |
 1849|     16|    ip_str->ip_is_valid = false;
 1850|       |
 1851|     16|    if (ip == nullptr) {
  ------------------
  |  |   63|     16|#define nullptr NULL
  ------------------
  |  Branch (1851:9): [True: 0, False: 16]
  ------------------
 1852|      0|        snprintf(ip_str->buf, sizeof(ip_str->buf), "(IP invalid: NULL)");
 1853|      0|        ip_str->length = (uint16_t)strlen(ip_str->buf);
 1854|      0|        return ip_str->buf;
 1855|      0|    }
 1856|       |
 1857|     16|    if (!ip_parse_addr(ip, ip_str->buf, sizeof(ip_str->buf))) {
  ------------------
  |  Branch (1857:9): [True: 0, False: 16]
  ------------------
 1858|      0|        snprintf(ip_str->buf, sizeof(ip_str->buf), "(IP invalid, family %u)", ip->family.value);
 1859|      0|        ip_str->length = (uint16_t)strlen(ip_str->buf);
 1860|      0|        return ip_str->buf;
 1861|      0|    }
 1862|       |
 1863|       |    /* brute force protection against lacking termination */
 1864|     16|    ip_str->buf[sizeof(ip_str->buf) - 1] = '\0';
 1865|     16|    ip_str->length = (uint16_t)strlen(ip_str->buf);
 1866|     16|    ip_str->ip_is_valid = true;
 1867|       |
 1868|     16|    return ip_str->buf;
 1869|     16|}
ip_parse_addr:
 1872|     16|{
 1873|     16|    if (address == nullptr || ip == nullptr) {
  ------------------
  |  |   63|     32|#define nullptr NULL
  ------------------
                  if (address == nullptr || ip == nullptr) {
  ------------------
  |  |   63|     16|#define nullptr NULL
  ------------------
  |  Branch (1873:9): [True: 0, False: 16]
  |  Branch (1873:31): [True: 0, False: 16]
  ------------------
 1874|      0|        return false;
 1875|      0|    }
 1876|       |
 1877|     16|    if (net_family_is_ipv4(ip->family) || net_family_is_tcp_ipv4(ip->family)) {
  ------------------
  |  Branch (1877:9): [True: 0, False: 16]
  |  Branch (1877:43): [True: 16, False: 0]
  ------------------
 1878|     16|        struct in_addr addr;
 1879|     16|        assert(make_family(ip->family) == AF_INET);
 1880|     16|        fill_addr4(&ip->ip.v4, &addr);
 1881|     16|        return inet_ntop4(&addr, address, length) != nullptr;
  ------------------
  |  |   63|     16|#define nullptr NULL
  ------------------
 1882|     16|    }
 1883|       |
 1884|      0|    if (net_family_is_ipv6(ip->family) || net_family_is_tcp_ipv6(ip->family)) {
  ------------------
  |  Branch (1884:9): [True: 0, False: 0]
  |  Branch (1884:43): [True: 0, False: 0]
  ------------------
 1885|      0|        struct in6_addr addr;
 1886|      0|        assert(make_family(ip->family) == AF_INET6);
 1887|      0|        fill_addr6(&ip->ip.v6, &addr);
 1888|      0|        return inet_ntop6(&addr, address, length) != nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
 1889|      0|    }
 1890|       |
 1891|      0|    return false;
 1892|      0|}
net_socket:
 2252|    116|{
 2253|    116|    const int platform_domain = make_family(domain);
 2254|    116|    const int platform_type = make_socktype(type);
 2255|    116|    const int platform_prot = make_proto(protocol);
 2256|    116|    return ns->funcs->socket(ns->obj, platform_domain, platform_type, platform_prot);
 2257|    116|}
net_htons:
 2271|    116|{
 2272|    116|    return htons(hostshort);
 2273|    116|}
network.c:loglogdata:
  884|     89|{
  885|     89|    if (res < 0) { /* Windows doesn't necessarily know `%zu` */
  ------------------
  |  Branch (885:9): [True: 0, False: 89]
  ------------------
  886|      0|        Ip_Ntoa ip_str;
  887|      0|        const int error = net_error();
  888|      0|        Net_Strerror error_str;
  889|      0|        LOGGER_TRACE(log, "[%02x = %-21s] %s %3u%c %s:%u (%u: %s) | %08x%08x...%02x",
  ------------------
  |  |   83|      0|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  890|      0|                     buffer[0], net_packet_type_name((Net_Packet_Type)buffer[0]), message,
  891|      0|                     min_u16(buflen, 999), 'E',
  892|      0|                     net_ip_ntoa(&ip_port->ip, &ip_str), net_ntohs(ip_port->port), error,
  893|      0|                     net_strerror(error, &error_str), data_0(buflen, buffer), data_1(buflen, buffer), buffer[buflen - 1]);
  894|     89|    } else if ((res > 0) && ((size_t)res <= buflen)) {
  ------------------
  |  Branch (894:16): [True: 89, False: 0]
  |  Branch (894:29): [True: 89, False: 0]
  ------------------
  895|     89|        Ip_Ntoa ip_str;
  896|     89|        LOGGER_TRACE(log, "[%02x = %-21s] %s %3u%c %s:%u (%u: %s) | %08x%08x...%02x",
  ------------------
  |  |   83|     89|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     89|    do {                                                                         \
  |  |  |  |   77|     89|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    178|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (78:68): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|     89|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  897|     89|                     buffer[0], net_packet_type_name((Net_Packet_Type)buffer[0]), message,
  898|     89|                     min_u16(res, 999), (size_t)res < buflen ? '<' : '=',
  899|     89|                     net_ip_ntoa(&ip_port->ip, &ip_str), net_ntohs(ip_port->port), 0, "OK",
  900|     89|                     data_0(buflen, buffer), data_1(buflen, buffer), buffer[buflen - 1]);
  901|     89|    } else { /* empty or overwrite */
  902|      0|        Ip_Ntoa ip_str;
  903|      0|        LOGGER_TRACE(log, "[%02x = %-21s] %s %lu%c%u %s:%u (%u: %s) | %08x%08x...%02x",
  ------------------
  |  |   83|      0|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (78:68): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  904|      0|                     buffer[0], net_packet_type_name((Net_Packet_Type)buffer[0]), message,
  905|      0|                     res, res == 0 ? '!' : '>', buflen,
  906|      0|                     net_ip_ntoa(&ip_port->ip, &ip_str), net_ntohs(ip_port->port), 0, "OK",
  907|      0|                     data_0(buflen, buffer), data_1(buflen, buffer), buffer[buflen - 1]);
  908|      0|    }
  909|     89|}
network.c:net_setsockopt:
  733|    348|{
  734|    348|    return ns->funcs->setsockopt(ns->obj, sock, level, optname, optval, optlen);
  735|    348|}
network.c:fill_addr4:
  327|    221|{
  328|    221|    addr->s_addr = ip->uint32;
  329|    221|}
network.c:net_sendto:
  928|     89|{
  929|     89|    return ns->funcs->sendto(ns->obj, sock, buf, len, addr);
  930|     89|}
network.c:net_bind:
  954|    116|{
  955|    116|    return ns->funcs->bind(ns->obj, sock, addr);
  956|    116|}
network.c:make_family:
  264|    132|{
  265|    132|    switch (tox_family.value) {
  266|    116|        case TOX_AF_INET:
  ------------------
  |  |  168|    116|#define TOX_AF_INET 2
  ------------------
  |  Branch (266:9): [True: 116, False: 16]
  ------------------
  267|    132|        case TCP_INET:
  ------------------
  |  |  181|    132|#define TCP_INET (TOX_AF_INET6 + 2)
  |  |  ------------------
  |  |  |  |  169|    132|#define TOX_AF_INET6 10
  |  |  ------------------
  ------------------
  |  Branch (267:9): [True: 16, False: 116]
  ------------------
  268|    132|            return AF_INET;
  269|       |
  270|      0|        case TOX_AF_INET6:
  ------------------
  |  |  169|      0|#define TOX_AF_INET6 10
  ------------------
  |  Branch (270:9): [True: 0, False: 132]
  ------------------
  271|      0|        case TCP_INET6:
  ------------------
  |  |  182|      0|#define TCP_INET6 (TOX_AF_INET6 + 3)
  |  |  ------------------
  |  |  |  |  169|      0|#define TOX_AF_INET6 10
  |  |  ------------------
  ------------------
  |  Branch (271:9): [True: 0, False: 132]
  ------------------
  272|      0|            return AF_INET6;
  273|       |
  274|      0|        case TOX_AF_UNSPEC:
  ------------------
  |  |  167|      0|#define TOX_AF_UNSPEC 0
  ------------------
  |  Branch (274:9): [True: 0, False: 132]
  ------------------
  275|      0|            return AF_UNSPEC;
  276|       |
  277|      0|        default:
  ------------------
  |  Branch (277:9): [True: 0, False: 132]
  ------------------
  278|      0|            return tox_family.value;
  279|    132|    }
  280|    132|}
network.c:inet_ntop4:
  123|     16|{
  124|     16|    return inet_ntop(AF_INET, addr, buf, bufsize);
  125|     16|}
network.c:make_socktype:
  250|    116|{
  251|    116|    switch (type) {
  252|      0|        case TOX_SOCK_STREAM:
  ------------------
  |  |  173|      0|#define TOX_SOCK_STREAM 1
  ------------------
  |  Branch (252:9): [True: 0, False: 116]
  ------------------
  253|      0|            return SOCK_STREAM;
  254|       |
  255|    116|        case TOX_SOCK_DGRAM:
  ------------------
  |  |  174|    116|#define TOX_SOCK_DGRAM 2
  ------------------
  |  Branch (255:9): [True: 116, False: 0]
  ------------------
  256|    116|            return SOCK_DGRAM;
  257|       |
  258|      0|        default:
  ------------------
  |  Branch (258:9): [True: 0, False: 116]
  ------------------
  259|      0|            return type;
  260|    116|    }
  261|    116|}
network.c:make_proto:
  236|    116|{
  237|    116|    switch (proto) {
  238|      0|        case TOX_PROTO_TCP:
  ------------------
  |  |  176|      0|#define TOX_PROTO_TCP 1
  ------------------
  |  Branch (238:9): [True: 0, False: 116]
  ------------------
  239|      0|            return IPPROTO_TCP;
  240|       |
  241|    116|        case TOX_PROTO_UDP:
  ------------------
  |  |  177|    116|#define TOX_PROTO_UDP 2
  ------------------
  |  Branch (241:9): [True: 116, False: 0]
  ------------------
  242|    116|            return IPPROTO_UDP;
  243|       |
  244|      0|        default:
  ------------------
  |  Branch (244:9): [True: 0, False: 116]
  ------------------
  245|      0|            return proto;
  246|    116|    }
  247|    116|}

