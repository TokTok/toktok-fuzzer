_ZNK9Fuzz_Data4sizeEv:
   69|  12.5k|    std::size_t size() const { return size_; }
_ZN9Fuzz_Data8consume1EPKc:
   68|  7.99k|    Consumer consume1(const char *func) { return Consumer{func, *this}; }
_ZN9Fuzz_Data8ConsumercvT_IhEEv:
   60|  5.98k|        {
   61|  5.98k|            const uint8_t *bytes = fd.consume(func, sizeof(T));
   62|  5.98k|            T val;
   63|  5.98k|            std::memcpy(&val, bytes, sizeof(T));
   64|  5.98k|            return val;
   65|  5.98k|        }
_ZN9Fuzz_Data7consumeEPKcm:
   75|  12.4k|    {
   76|  12.4k|        const uint8_t *val = data_;
   77|  12.4k|        if (FUZZ_DEBUG) {
  ------------------
  |  Branch (77:13): [Folded - Ignored]
  ------------------
   78|      0|            if (pos() == TRACE_TRAP) {
  ------------------
  |  Branch (78:17): [True: 0, False: 0]
  ------------------
   79|      0|                __asm__("int $3");
   80|      0|            }
   81|      0|            if (count == 1) {
  ------------------
  |  Branch (81:17): [True: 0, False: 0]
  ------------------
   82|      0|                std::printf("consume@%zu(%s): %d (0x%02x)\n", pos(), func, val[0], val[0]);
   83|      0|            } else if (count != 0) {
  ------------------
  |  Branch (83:24): [True: 0, False: 0]
  ------------------
   84|      0|                std::printf("consume@%zu(%s): %02x..%02x[%zu]\n", pos(), func, val[0],
   85|      0|                    val[count - 1], count);
   86|      0|            }
   87|      0|        }
   88|  12.4k|        data_ += count;
   89|  12.4k|        size_ -= count;
   90|  12.4k|        return val;
   91|  12.4k|    }
_ZN9Fuzz_Data8ConsumercvT_ItEEv:
   60|  2.00k|        {
   61|  2.00k|            const uint8_t *bytes = fd.consume(func, sizeof(T));
   62|  2.00k|            T val;
   63|  2.00k|            std::memcpy(&val, bytes, sizeof(T));
   64|  2.00k|            return val;
   65|  2.00k|        }
_ZNK9Fuzz_Data4dataEv:
   71|    114|    const uint8_t *data() const { return data_; }
_ZNK9Fuzz_Data5emptyEv:
   72|  4.42k|    bool empty() const { return size_ == 0; }
group_announce_fuzz_test.cc:_Z18fuzz_select_targetIJXadL_ZN12_GLOBAL__N_123TestUnpackAnnouncesListER9Fuzz_DataEEXadL_ZNS0_24TestUnpackPublicAnnounceES2_EEXadL_ZNS0_9TestDoGcaES2_EEEEvPKhm:
  183|    358|{
  184|    358|    Fuzz_Data input{data, size};
  185|       |
  186|    358|    CONSUME1_OR_RETURN(const uint8_t, selector, input);
  ------------------
  |  |  105|    358|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 0, False: 358]
  |  |  ------------------
  |  |  106|      0|        return;                               \
  |  |  107|      0|    }                                         \
  |  |  108|    358|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
  187|    358|    return Fuzz_Target_Selector<Args...>::select(selector, input);
  188|    358|}
_ZN9Fuzz_DataC2EPKhm:
   32|    358|        : data_(input_data)
   33|    358|        , base_(input_data)
   34|    358|        , size_(input_size)
   35|    358|    {
   36|    358|    }
group_announce_fuzz_test.cc:_ZN20Fuzz_Target_SelectorIJXadL_ZN12_GLOBAL__N_123TestUnpackAnnouncesListER9Fuzz_DataEEXadL_ZNS0_24TestUnpackPublicAnnounceES2_EEXadL_ZNS0_9TestDoGcaES2_EEEE6selectEhS2_:
  164|    358|    {
  165|    358|        if (selector == sizeof...(Args)) {
  ------------------
  |  Branch (165:13): [True: 106, False: 252]
  ------------------
  166|    106|            return Arg(input);
  167|    106|        }
  168|    252|        return Fuzz_Target_Selector<Args...>::select(selector, input);
  169|    358|    }
group_announce_fuzz_test.cc:_ZN20Fuzz_Target_SelectorIJXadL_ZN12_GLOBAL__N_124TestUnpackPublicAnnounceER9Fuzz_DataEEXadL_ZNS0_9TestDoGcaES2_EEEE6selectEhS2_:
  164|    252|    {
  165|    252|        if (selector == sizeof...(Args)) {
  ------------------
  |  Branch (165:13): [True: 11, False: 241]
  ------------------
  166|     11|            return Arg(input);
  167|     11|        }
  168|    241|        return Fuzz_Target_Selector<Args...>::select(selector, input);
  169|    252|    }
group_announce_fuzz_test.cc:_ZN20Fuzz_Target_SelectorIJXadL_ZN12_GLOBAL__N_19TestDoGcaER9Fuzz_DataEEEE6selectEhS2_:
  164|    241|    {
  165|    241|        if (selector == sizeof...(Args)) {
  ------------------
  |  Branch (165:13): [True: 240, False: 1]
  ------------------
  166|    240|            return Arg(input);
  167|    240|        }
  168|      1|        return Fuzz_Target_Selector<Args...>::select(selector, input);
  169|    241|    }
_ZN20Fuzz_Target_SelectorIJEE6selectEhR9Fuzz_Data:
  175|      1|    {
  176|       |        // The selector selected no function, so we do nothing and rely on the
  177|       |        // fuzzer to come up with a better selector.
  178|      1|    }

cmp_init:
  837|  3.45k|                                         cmp_writer *write) {
  838|  3.45k|  ctx->error = CMP_ERROR_NONE;
  839|  3.45k|  ctx->buf = buf;
  840|  3.45k|  ctx->read = read;
  841|  3.45k|  ctx->skip = skip;
  842|  3.45k|  ctx->write = write;
  843|  3.45k|}

pack_nodes:
  413|  1.03k|{
  414|  1.03k|    const uint32_t size = bin_pack_obj_array_b_size(bin_pack_node_handler, nodes, number, logger);
  415|  1.03k|    if (!bin_pack_obj_array_b(bin_pack_node_handler, nodes, number, logger, data, length)) {
  ------------------
  |  Branch (415:9): [True: 0, False: 1.03k]
  ------------------
  416|      0|        return -1;
  417|      0|    }
  418|  1.03k|    return size;
  419|  1.03k|}
unpack_nodes:
  423|  2.33k|{
  424|  2.33k|    uint32_t num = 0;
  425|  2.33k|    uint32_t len_processed = 0;
  426|       |
  427|  3.13k|    while (num < max_num_nodes && len_processed < length) {
  ------------------
  |  Branch (427:12): [True: 1.01k, False: 2.11k]
  |  Branch (427:35): [True: 951, False: 66]
  ------------------
  428|    951|        const int ipp_size = unpack_ip_port(&nodes[num].ip_port, data + len_processed, length - len_processed, tcp_enabled);
  429|       |
  430|    951|        if (ipp_size == -1) {
  ------------------
  |  Branch (430:13): [True: 81, False: 870]
  ------------------
  431|     81|            break;
  432|     81|        }
  433|       |
  434|    870|        len_processed += ipp_size;
  435|       |
  436|    870|        if (len_processed + CRYPTO_PUBLIC_KEY_SIZE > length) {
  ------------------
  |  |   43|    870|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  |  Branch (436:13): [True: 71, False: 799]
  ------------------
  437|     71|            return -1;
  438|     71|        }
  439|       |
  440|    799|        memcpy(nodes[num].public_key, data + len_processed, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|    799|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  441|    799|        len_processed += CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|    799|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  442|    799|        ++num;
  443|       |
  444|    799|#ifndef NDEBUG
  445|    799|        const uint32_t increment = ipp_size + CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|    799|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  446|    799|        assert(increment == PACKED_NODE_SIZE_IP4 || increment == PACKED_NODE_SIZE_IP6);
  447|    799|#endif /* NDEBUG */
  448|    799|    }
  449|       |
  450|  2.26k|    if (num == 0 && max_num_nodes > 0 && length > 0) {
  ------------------
  |  Branch (450:9): [True: 1.46k, False: 799]
  |  Branch (450:21): [True: 147, False: 1.31k]
  |  Branch (450:42): [True: 81, False: 66]
  ------------------
  451|     81|        return -1;
  452|     81|    }
  453|       |
  454|  2.18k|    if (processed_data_len != nullptr) {
  ------------------
  |  |   63|  2.18k|#define nullptr NULL
  ------------------
  |  Branch (454:9): [True: 2.18k, False: 0]
  ------------------
  455|  2.18k|        *processed_data_len = len_processed;
  456|  2.18k|    }
  457|       |
  458|  2.18k|    return num;
  459|  2.26k|}
DHT.c:bin_pack_node_handler:
  406|  1.54k|{
  407|  1.54k|    const Node_format *nodes = (const Node_format *)arr;
  408|  1.54k|    return bin_pack_ip_port(bp, logger, &nodes[index].ip_port)
  ------------------
  |  Branch (408:12): [True: 1.54k, False: 0]
  ------------------
  409|  1.54k|           && bin_pack_bin_b(bp, nodes[index].public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|  1.54k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  |  Branch (409:15): [True: 1.54k, False: 0]
  ------------------
  410|  1.54k|}

bin_pack_obj_size:
   64|    690|{
   65|    690|    Bin_Pack bp;
   66|    690|    bin_pack_init(&bp, nullptr, 0);
  ------------------
  |  |   63|    690|#define nullptr NULL
  ------------------
   67|    690|    if (!callback(obj, logger, &bp)) {
  ------------------
  |  Branch (67:9): [True: 0, False: 690]
  ------------------
   68|      0|        return UINT32_MAX;
   69|      0|    }
   70|    690|    return bp.bytes_pos;
   71|    690|}
bin_pack_obj:
   74|    690|{
   75|    690|    Bin_Pack bp;
   76|    690|    bin_pack_init(&bp, buf, buf_size);
   77|    690|    return callback(obj, logger, &bp);
   78|    690|}
bin_pack_obj_array_b_size:
   81|  1.03k|{
   82|  1.03k|    Bin_Pack bp;
   83|  1.03k|    bin_pack_init(&bp, nullptr, 0);
  ------------------
  |  |   63|  1.03k|#define nullptr NULL
  ------------------
   84|  1.03k|    if (arr == nullptr) {
  ------------------
  |  |   63|  1.03k|#define nullptr NULL
  ------------------
  |  Branch (84:9): [True: 0, False: 1.03k]
  ------------------
   85|      0|        assert(arr_size == 0);
   86|      0|    }
   87|  1.81k|    for (uint32_t i = 0; i < arr_size; ++i) {
  ------------------
  |  Branch (87:26): [True: 773, False: 1.03k]
  ------------------
   88|    773|        if (!callback(arr, i, logger, &bp)) {
  ------------------
  |  Branch (88:13): [True: 0, False: 773]
  ------------------
   89|      0|            return UINT32_MAX;
   90|      0|        }
   91|    773|    }
   92|  1.03k|    return bp.bytes_pos;
   93|  1.03k|}
bin_pack_obj_array_b:
   96|  1.03k|{
   97|  1.03k|    Bin_Pack bp;
   98|  1.03k|    bin_pack_init(&bp, buf, buf_size);
   99|  1.03k|    if (arr == nullptr) {
  ------------------
  |  |   63|  1.03k|#define nullptr NULL
  ------------------
  |  Branch (99:9): [True: 0, False: 1.03k]
  ------------------
  100|      0|        assert(arr_size == 0);
  101|      0|    }
  102|  1.81k|    for (uint32_t i = 0; i < arr_size; ++i) {
  ------------------
  |  Branch (102:26): [True: 773, False: 1.03k]
  ------------------
  103|    773|        if (!callback(arr, i, logger, &bp)) {
  ------------------
  |  Branch (103:13): [True: 0, False: 773]
  ------------------
  104|      0|            return false;
  105|      0|        }
  106|    773|    }
  107|  1.03k|    return true;
  108|  1.03k|}
bin_pack_u08_b:
  176|  8.77k|{
  177|  8.77k|    return bp->ctx.write(&bp->ctx, &val, 1) == 1;
  178|  8.77k|}
bin_pack_u16_b:
  181|  2.92k|{
  182|  2.92k|    return bin_pack_u08_b(bp, (val >> 8) & 0xff)
  ------------------
  |  Branch (182:12): [True: 2.92k, False: 0]
  ------------------
  183|  2.92k|           && bin_pack_u08_b(bp, val & 0xff);
  ------------------
  |  Branch (183:15): [True: 2.92k, False: 0]
  ------------------
  184|  2.92k|}
bin_pack_bin_b:
  199|  4.47k|{
  200|  4.47k|    return bp->ctx.write(&bp->ctx, data, length) == length;
  201|  4.47k|}
bin_pack.c:bin_pack_init:
   56|  3.45k|{
   57|  3.45k|    bp->bytes = buf;
   58|  3.45k|    bp->bytes_size = buf_size;
   59|  3.45k|    bp->bytes_pos = 0;
   60|  3.45k|    cmp_init(&bp->ctx, bp, null_reader, null_skipper, buf_writer);
   61|  3.45k|}
bin_pack.c:buf_writer:
   35|  13.2k|{
   36|  13.2k|    const uint8_t *bytes = (const uint8_t *)data;
   37|  13.2k|    Bin_Pack *bp = (Bin_Pack *)ctx->buf;
   38|  13.2k|    assert(bp != nullptr);
   39|  13.2k|    const uint32_t new_pos = bp->bytes_pos + count;
   40|  13.2k|    if (new_pos < bp->bytes_pos) {
  ------------------
  |  Branch (40:9): [True: 0, False: 13.2k]
  ------------------
   41|       |        // 32 bit overflow.
   42|      0|        return 0;
   43|      0|    }
   44|  13.2k|    if (bp->bytes != nullptr) {
  ------------------
  |  |   63|  13.2k|#define nullptr NULL
  ------------------
  |  Branch (44:9): [True: 6.62k, False: 6.62k]
  ------------------
   45|  6.62k|        if (new_pos > bp->bytes_size) {
  ------------------
  |  Branch (45:13): [True: 0, False: 6.62k]
  ------------------
   46|       |            // Buffer too small.
   47|      0|            return 0;
   48|      0|        }
   49|  6.62k|        memcpy(&bp->bytes[bp->bytes_pos], bytes, count);
   50|  6.62k|    }
   51|  13.2k|    bp->bytes_pos += count;
   52|  13.2k|    return count;
   53|  13.2k|}

gca_get_announces:
   62|    950|{
   63|    950|    if (gc_announces == nullptr || gc_announces_list == nullptr || chat_id == nullptr || max_nodes == 0
  ------------------
  |  |   63|  1.90k|#define nullptr NULL
  ------------------
                  if (gc_announces == nullptr || gc_announces_list == nullptr || chat_id == nullptr || max_nodes == 0
  ------------------
  |  |   63|  1.90k|#define nullptr NULL
  ------------------
                  if (gc_announces == nullptr || gc_announces_list == nullptr || chat_id == nullptr || max_nodes == 0
  ------------------
  |  |   63|  1.90k|#define nullptr NULL
  ------------------
  |  Branch (63:9): [True: 0, False: 950]
  |  Branch (63:36): [True: 0, False: 950]
  |  Branch (63:68): [True: 0, False: 950]
  |  Branch (63:90): [True: 99, False: 851]
  ------------------
   64|    950|            || except_public_key == nullptr) {
  ------------------
  |  |   63|    851|#define nullptr NULL
  ------------------
  |  Branch (64:16): [True: 0, False: 851]
  ------------------
   65|     99|        return -1;
   66|     99|    }
   67|       |
   68|    851|    const GC_Announces *announces = get_announces_by_chat_id(gc_announces_list, chat_id);
   69|       |
   70|    851|    if (announces == nullptr) {
  ------------------
  |  |   63|    851|#define nullptr NULL
  ------------------
  |  Branch (70:9): [True: 427, False: 424]
  ------------------
   71|    427|        return 0;
   72|    427|    }
   73|       |
   74|    424|    uint16_t added_count = 0;
   75|       |
   76|  2.76k|    for (size_t i = 0; i < announces->index && i < GCA_MAX_SAVED_ANNOUNCES_PER_GC && added_count < max_nodes; ++i) {
  ------------------
  |  |   28|  5.16k|#define GCA_MAX_SAVED_ANNOUNCES_PER_GC 16
  ------------------
  |  Branch (76:24): [True: 2.40k, False: 358]
  |  Branch (76:48): [True: 2.33k, False: 66]
  |  Branch (76:86): [True: 2.33k, False: 0]
  ------------------
   77|  2.33k|        const size_t index = i % GCA_MAX_SAVED_ANNOUNCES_PER_GC;
  ------------------
  |  |   28|  2.33k|#define GCA_MAX_SAVED_ANNOUNCES_PER_GC 16
  ------------------
   78|       |
   79|  2.33k|        if (memcmp(except_public_key, announces->peer_announces[index].base_announce.peer_public_key,
  ------------------
  |  Branch (79:13): [True: 200, False: 2.13k]
  ------------------
   80|  2.33k|                   ENC_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |  122|  2.33k|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|  2.33k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
   81|    200|            continue;
   82|    200|        }
   83|       |
   84|  2.13k|        bool already_added = false;
   85|       |
   86|  8.81k|        for (size_t j = 0; j < added_count; ++j) {
  ------------------
  |  Branch (86:28): [True: 7.36k, False: 1.44k]
  ------------------
   87|  7.36k|            if (memcmp(gc_announces[j].peer_public_key, announces->peer_announces[index].base_announce.peer_public_key,
  ------------------
  |  Branch (87:17): [True: 692, False: 6.67k]
  ------------------
   88|  7.36k|                       ENC_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |  122|  7.36k|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|  7.36k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
   89|    692|                already_added = true;
   90|    692|                break;
   91|    692|            }
   92|  7.36k|        }
   93|       |
   94|  2.13k|        if (!already_added) {
  ------------------
  |  Branch (94:13): [True: 1.44k, False: 692]
  ------------------
   95|  1.44k|            gc_announces[added_count] = announces->peer_announces[index].base_announce;
   96|  1.44k|            ++added_count;
   97|  1.44k|        }
   98|  2.13k|    }
   99|       |
  100|    424|    return added_count;
  101|    851|}
gca_pack_announce:
  109|  1.10k|{
  110|  1.10k|    if (length < GCA_ANNOUNCE_MAX_SIZE) {
  ------------------
  |  |   37|  1.10k|#define GCA_ANNOUNCE_MAX_SIZE (ENC_PUBLIC_KEY_SIZE + 1 + 1 + (PACKED_NODE_SIZE_IP6 * 2))
  |  |  ------------------
  |  |  |  |  122|  1.10k|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   43|  1.10k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define GCA_ANNOUNCE_MAX_SIZE (ENC_PUBLIC_KEY_SIZE + 1 + 1 + (PACKED_NODE_SIZE_IP6 * 2))
  |  |  ------------------
  |  |  |  |   72|  1.10k|#define PACKED_NODE_SIZE_IP6 (1 + SIZE_IP6 + sizeof(uint16_t) + CRYPTO_PUBLIC_KEY_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  186|  1.10k|#define SIZE_IP6 16
  |  |  |  |  ------------------
  |  |  |  |               #define PACKED_NODE_SIZE_IP6 (1 + SIZE_IP6 + sizeof(uint16_t) + CRYPTO_PUBLIC_KEY_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   43|  1.10k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (110:9): [True: 4, False: 1.10k]
  ------------------
  111|      4|        LOGGER_ERROR(log, "Invalid announce length: %u", length);
  ------------------
  |  |   80|      4|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      4|    do {                                                                         \
  |  |  |  |   70|      4|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      8|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      4|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      4|        }                                                                        \
  |  |  |  |   73|      4|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  112|      4|        return -1;
  113|      4|    }
  114|       |
  115|  1.10k|    if (data == nullptr) {
  ------------------
  |  |   63|  1.10k|#define nullptr NULL
  ------------------
  |  Branch (115:9): [True: 0, False: 1.10k]
  ------------------
  116|      0|        LOGGER_ERROR(log, "data is null");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  117|      0|        return -1;
  118|      0|    }
  119|       |
  120|  1.10k|    if (announce == nullptr) {
  ------------------
  |  |   63|  1.10k|#define nullptr NULL
  ------------------
  |  Branch (120:9): [True: 0, False: 1.10k]
  ------------------
  121|      0|        LOGGER_ERROR(log, "announce is null");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|      0|        return -1;
  123|      0|    }
  124|       |
  125|  1.10k|    uint16_t offset = 0;
  126|  1.10k|    memcpy(data + offset, announce->peer_public_key, ENC_PUBLIC_KEY_SIZE);
  ------------------
  |  |  122|  1.10k|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|  1.10k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  127|  1.10k|    offset += ENC_PUBLIC_KEY_SIZE;
  ------------------
  |  |  122|  1.10k|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|  1.10k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  128|       |
  129|  1.10k|    data[offset] = announce->ip_port_is_set ? 1 : 0;
  ------------------
  |  Branch (129:20): [True: 690, False: 412]
  ------------------
  130|  1.10k|    ++offset;
  131|       |
  132|  1.10k|    data[offset] = announce->tcp_relays_count;
  133|  1.10k|    ++offset;
  134|       |
  135|  1.10k|    if (!announce->ip_port_is_set && announce->tcp_relays_count == 0) {
  ------------------
  |  Branch (135:9): [True: 412, False: 690]
  |  Branch (135:38): [True: 65, False: 347]
  ------------------
  136|     65|        LOGGER_ERROR(log, "Failed to pack announce: no valid ip_port or tcp relay");
  ------------------
  |  |   80|     65|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     65|    do {                                                                         \
  |  |  |  |   70|     65|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    130|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     65|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     65|        }                                                                        \
  |  |  |  |   73|     65|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  137|     65|        return -1;
  138|     65|    }
  139|       |
  140|  1.03k|    if (announce->ip_port_is_set) {
  ------------------
  |  Branch (140:9): [True: 690, False: 347]
  ------------------
  141|    690|        const int ip_port_length = pack_ip_port(log, data + offset, length - offset, &announce->ip_port);
  142|       |
  143|    690|        if (ip_port_length == -1) {
  ------------------
  |  Branch (143:13): [True: 0, False: 690]
  ------------------
  144|      0|            LOGGER_ERROR(log, "Failed to pack ip_port");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  145|      0|            return -1;
  146|      0|        }
  147|       |
  148|    690|        offset += ip_port_length;
  149|    690|    }
  150|       |
  151|  1.03k|    const int nodes_length = pack_nodes(log, data + offset, length - offset, announce->tcp_relays,
  152|  1.03k|                                        announce->tcp_relays_count);
  153|       |
  154|  1.03k|    if (nodes_length == -1) {
  ------------------
  |  Branch (154:9): [True: 0, False: 1.03k]
  ------------------
  155|      0|        LOGGER_ERROR(log, "Failed to pack TCP nodes");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  156|      0|        return -1;
  157|      0|    }
  158|       |
  159|  1.03k|    return nodes_length + offset;
  160|  1.03k|}
gca_pack_public_announce:
  228|      8|{
  229|      8|    if (public_announce == nullptr || data == nullptr || length < CHAT_ID_SIZE) {
  ------------------
  |  |   63|     16|#define nullptr NULL
  ------------------
                  if (public_announce == nullptr || data == nullptr || length < CHAT_ID_SIZE) {
  ------------------
  |  |   63|     16|#define nullptr NULL
  ------------------
                  if (public_announce == nullptr || data == nullptr || length < CHAT_ID_SIZE) {
  ------------------
  |  |  142|      8|#define CHAT_ID_SIZE                   SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|      8|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|      8|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (229:9): [True: 0, False: 8]
  |  Branch (229:39): [True: 0, False: 8]
  |  Branch (229:58): [True: 1, False: 7]
  ------------------
  230|      1|        return -1;
  231|      1|    }
  232|       |
  233|      7|    memcpy(data, public_announce->chat_public_key, CHAT_ID_SIZE);
  ------------------
  |  |  142|      7|#define CHAT_ID_SIZE                   SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|      7|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|      7|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  234|       |
  235|      7|    const int packed_size = gca_pack_announce(log, data + CHAT_ID_SIZE, length - CHAT_ID_SIZE,
  ------------------
  |  |  142|      7|#define CHAT_ID_SIZE                   SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|      7|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|      7|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  const int packed_size = gca_pack_announce(log, data + CHAT_ID_SIZE, length - CHAT_ID_SIZE,
  ------------------
  |  |  142|      7|#define CHAT_ID_SIZE                   SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|      7|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|      7|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  236|      7|                            &public_announce->base_announce);
  237|       |
  238|      7|    if (packed_size < 0) {
  ------------------
  |  Branch (238:9): [True: 6, False: 1]
  ------------------
  239|      6|        LOGGER_ERROR(log, "Failed to pack public group announce");
  ------------------
  |  |   80|      6|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      6|    do {                                                                         \
  |  |  |  |   70|      6|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     12|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      6|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      6|        }                                                                        \
  |  |  |  |   73|      6|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  240|      6|        return -1;
  241|      6|    }
  242|       |
  243|      1|    return packed_size + CHAT_ID_SIZE;
  ------------------
  |  |  142|      1|#define CHAT_ID_SIZE                   SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|      1|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|      1|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  244|      7|}
gca_unpack_public_announce:
  248|  1.90k|{
  249|  1.90k|    if (length < CHAT_ID_SIZE) {
  ------------------
  |  |  142|  1.90k|#define CHAT_ID_SIZE                   SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|  1.90k|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|  1.90k|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (249:9): [True: 219, False: 1.68k]
  ------------------
  250|    219|        LOGGER_ERROR(log, "invalid public announce length: %u", length);
  ------------------
  |  |   80|    219|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|    219|    do {                                                                         \
  |  |  |  |   70|    219|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    438|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|    219|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|    219|        }                                                                        \
  |  |  |  |   73|    219|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  251|    219|        return -1;
  252|    219|    }
  253|       |
  254|  1.68k|    if (data == nullptr) {
  ------------------
  |  |   63|  1.68k|#define nullptr NULL
  ------------------
  |  Branch (254:9): [True: 0, False: 1.68k]
  ------------------
  255|      0|        LOGGER_ERROR(log, "data is null");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|      0|        return -1;
  257|      0|    }
  258|       |
  259|  1.68k|    if (public_announce == nullptr) {
  ------------------
  |  |   63|  1.68k|#define nullptr NULL
  ------------------
  |  Branch (259:9): [True: 0, False: 1.68k]
  ------------------
  260|      0|        LOGGER_ERROR(log, "public_announce is null");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  261|      0|        return -1;
  262|      0|    }
  263|       |
  264|  1.68k|    memcpy(public_announce->chat_public_key, data, CHAT_ID_SIZE);
  ------------------
  |  |  142|  1.68k|#define CHAT_ID_SIZE                   SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|  1.68k|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|  1.68k|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  265|       |
  266|  1.68k|    const int base_announce_size = gca_unpack_announce(log, data + ENC_PUBLIC_KEY_SIZE, length - ENC_PUBLIC_KEY_SIZE,
  ------------------
  |  |  122|  1.68k|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|  1.68k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
                  const int base_announce_size = gca_unpack_announce(log, data + ENC_PUBLIC_KEY_SIZE, length - ENC_PUBLIC_KEY_SIZE,
  ------------------
  |  |  122|  1.68k|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|  1.68k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  267|  1.68k|                                   &public_announce->base_announce);
  268|       |
  269|  1.68k|    if (base_announce_size == -1) {
  ------------------
  |  Branch (269:9): [True: 907, False: 776]
  ------------------
  270|    907|        LOGGER_ERROR(log, "Failed to unpack group announce");
  ------------------
  |  |   80|    907|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|    907|    do {                                                                         \
  |  |  |  |   70|    907|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  1.81k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|    907|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|    907|        }                                                                        \
  |  |  |  |   73|    907|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  271|    907|        return -1;
  272|    907|    }
  273|       |
  274|    776|    return base_announce_size + CHAT_ID_SIZE;
  ------------------
  |  |  142|    776|#define CHAT_ID_SIZE                   SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|    776|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|    776|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  275|  1.68k|}
gca_pack_announces_list:
  279|     68|{
  280|     68|    if (data == nullptr) {
  ------------------
  |  |   63|     68|#define nullptr NULL
  ------------------
  |  Branch (280:9): [True: 0, False: 68]
  ------------------
  281|      0|        LOGGER_ERROR(log, "data is null");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  282|      0|        return -1;
  283|      0|    }
  284|       |
  285|     68|    if (announces == nullptr) {
  ------------------
  |  |   63|     68|#define nullptr NULL
  ------------------
  |  Branch (285:9): [True: 0, False: 68]
  ------------------
  286|      0|        LOGGER_ERROR(log, "announces is null");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  287|      0|        return -1;
  288|      0|    }
  289|       |
  290|     68|    uint16_t offset = 0;
  291|       |
  292|  1.10k|    for (size_t i = 0; i < announces_count; ++i) {
  ------------------
  |  Branch (292:24): [True: 1.09k, False: 5]
  ------------------
  293|  1.09k|        const int packed_length = gca_pack_announce(log, data + offset, length - offset, &announces[i]);
  294|       |
  295|  1.09k|        if (packed_length < 0) {
  ------------------
  |  Branch (295:13): [True: 63, False: 1.03k]
  ------------------
  296|     63|            LOGGER_ERROR(log, "Failed to pack group announce");
  ------------------
  |  |   80|     63|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     63|    do {                                                                         \
  |  |  |  |   70|     63|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    126|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     63|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     63|        }                                                                        \
  |  |  |  |   73|     63|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  297|     63|            return -1;
  298|     63|        }
  299|       |
  300|  1.03k|        offset += packed_length;
  301|  1.03k|    }
  302|       |
  303|      5|    if (processed != nullptr) {
  ------------------
  |  |   63|      5|#define nullptr NULL
  ------------------
  |  Branch (303:9): [True: 5, False: 0]
  ------------------
  304|      5|        *processed = offset;
  305|      5|    }
  306|       |
  307|      5|    return announces_count;
  308|     68|}
gca_unpack_announces_list:
  312|    104|{
  313|    104|    if (data == nullptr) {
  ------------------
  |  |   63|    104|#define nullptr NULL
  ------------------
  |  Branch (313:9): [True: 0, False: 104]
  ------------------
  314|      0|        LOGGER_ERROR(log, "data is null");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  315|      0|        return -1;
  316|      0|    }
  317|       |
  318|    104|    if (announces == nullptr) {
  ------------------
  |  |   63|    104|#define nullptr NULL
  ------------------
  |  Branch (318:9): [True: 0, False: 104]
  ------------------
  319|      0|        LOGGER_ERROR(log, "announces is null");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  320|      0|        return -1;
  321|      0|    }
  322|       |
  323|    104|    uint16_t offset = 0;
  324|    104|    int announces_count = 0;
  325|       |
  326|  1.44k|    for (size_t i = 0; i < max_count && length > offset; ++i) {
  ------------------
  |  Branch (326:24): [True: 1.44k, False: 6]
  |  Branch (326:41): [True: 1.37k, False: 62]
  ------------------
  327|  1.37k|        const int unpacked_length = gca_unpack_announce(log, data + offset, length - offset, &announces[i]);
  328|       |
  329|  1.37k|        if (unpacked_length == -1) {
  ------------------
  |  Branch (329:13): [True: 36, False: 1.34k]
  ------------------
  330|     36|            LOGGER_WARNING(log, "Failed to unpack group announce: %d %d", length, offset);
  ------------------
  |  |   79|     36|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|     36|    do {                                                                         \
  |  |  |  |   70|     36|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     72|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|     36|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|     36|        }                                                                        \
  |  |  |  |   73|     36|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  331|     36|            return -1;
  332|     36|        }
  333|       |
  334|  1.34k|        offset += unpacked_length;
  335|  1.34k|        ++announces_count;
  336|  1.34k|    }
  337|       |
  338|     68|    return announces_count;
  339|    104|}
gca_add_announce:
  365|    768|{
  366|    768|    if (gc_announces_list == nullptr || public_announce == nullptr) {
  ------------------
  |  |   63|  1.53k|#define nullptr NULL
  ------------------
                  if (gc_announces_list == nullptr || public_announce == nullptr) {
  ------------------
  |  |   63|    768|#define nullptr NULL
  ------------------
  |  Branch (366:9): [True: 0, False: 768]
  |  Branch (366:41): [True: 0, False: 768]
  ------------------
  367|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  368|      0|    }
  369|       |
  370|    768|    GC_Announces *announces = get_announces_by_chat_id(gc_announces_list, public_announce->chat_public_key);
  371|       |
  372|       |    // No entry for this chat_id exists so we create one
  373|    768|    if (announces == nullptr) {
  ------------------
  |  |   63|    768|#define nullptr NULL
  ------------------
  |  Branch (373:9): [True: 474, False: 294]
  ------------------
  374|    474|        announces = gca_new_announces(mem, gc_announces_list, public_announce);
  375|       |
  376|    474|        if (announces == nullptr) {
  ------------------
  |  |   63|    474|#define nullptr NULL
  ------------------
  |  Branch (376:13): [True: 0, False: 474]
  ------------------
  377|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  378|      0|        }
  379|    474|    }
  380|       |
  381|    768|    const uint64_t cur_time = mono_time_get(mono_time);
  382|       |
  383|    768|    announces->last_announce_received_timestamp = cur_time;
  384|       |
  385|    768|    const uint64_t index = announces->index % GCA_MAX_SAVED_ANNOUNCES_PER_GC;
  ------------------
  |  |   28|    768|#define GCA_MAX_SAVED_ANNOUNCES_PER_GC 16
  ------------------
  386|       |
  387|    768|    GC_Peer_Announce *gc_peer_announce = &announces->peer_announces[index];
  388|       |
  389|    768|    gc_peer_announce->base_announce = public_announce->base_announce;
  390|       |
  391|    768|    gc_peer_announce->timestamp = cur_time;
  392|       |
  393|    768|    ++announces->index;
  394|       |
  395|    768|    return gc_peer_announce;
  396|    768|}
new_gca_list:
  408|    240|{
  409|    240|    GC_Announces_List *announces_list = (GC_Announces_List *)mem_alloc(mem, sizeof(GC_Announces_List));
  410|       |
  411|    240|    if (announces_list == nullptr) {
  ------------------
  |  |   63|    240|#define nullptr NULL
  ------------------
  |  Branch (411:9): [True: 0, False: 240]
  ------------------
  412|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  413|      0|    }
  414|       |
  415|    240|    announces_list->mem = mem;
  416|       |
  417|    240|    return announces_list;
  418|    240|}
kill_gca:
  421|    240|{
  422|    240|    if (announces_list == nullptr) {
  ------------------
  |  |   63|    240|#define nullptr NULL
  ------------------
  |  Branch (422:9): [True: 0, False: 240]
  ------------------
  423|      0|        return;
  424|      0|    }
  425|       |
  426|    240|    GC_Announces *root = announces_list->root_announces;
  427|       |
  428|    483|    while (root != nullptr) {
  ------------------
  |  |   63|    483|#define nullptr NULL
  ------------------
  |  Branch (428:12): [True: 243, False: 240]
  ------------------
  429|    243|        GC_Announces *next = root->next_announce;
  430|    243|        mem_delete(announces_list->mem, root);
  431|    243|        root = next;
  432|    243|    }
  433|       |
  434|    240|    mem_delete(announces_list->mem, announces_list);
  435|    240|}
do_gca:
  444|    367|{
  445|    367|    if (gc_announces_list == nullptr) {
  ------------------
  |  |   63|    367|#define nullptr NULL
  ------------------
  |  Branch (445:9): [True: 0, False: 367]
  ------------------
  446|      0|        return;
  447|      0|    }
  448|       |
  449|    367|    if (!mono_time_is_timeout(mono_time, gc_announces_list->last_timeout_check, GCA_DO_GCA_TIMEOUT)) {
  ------------------
  |  |  441|    367|#define GCA_DO_GCA_TIMEOUT 1
  ------------------
  |  Branch (449:9): [True: 345, False: 22]
  ------------------
  450|    345|        return;
  451|    345|    }
  452|       |
  453|     22|    gc_announces_list->last_timeout_check = mono_time_get(mono_time);
  454|       |
  455|     22|    GC_Announces *announces = gc_announces_list->root_announces;
  456|       |
  457|    100|    while (announces != nullptr) {
  ------------------
  |  |   63|    100|#define nullptr NULL
  ------------------
  |  Branch (457:12): [True: 78, False: 22]
  ------------------
  458|     78|        if (mono_time_is_timeout(mono_time, announces->last_announce_received_timestamp, GCA_ANNOUNCE_SAVE_TIMEOUT)) {
  ------------------
  |  |  438|     78|#define GCA_ANNOUNCE_SAVE_TIMEOUT 30
  ------------------
  |  Branch (458:13): [True: 0, False: 78]
  ------------------
  459|      0|            GC_Announces *to_delete = announces;
  460|      0|            announces = announces->next_announce;
  461|      0|            remove_announces(gc_announces_list, to_delete);
  462|      0|            continue;
  463|      0|        }
  464|       |
  465|     78|        announces = announces->next_announce;
  466|     78|    }
  467|     22|}
cleanup_gca:
  470|    639|{
  471|    639|    if (gc_announces_list == nullptr || chat_id == nullptr) {
  ------------------
  |  |   63|  1.27k|#define nullptr NULL
  ------------------
                  if (gc_announces_list == nullptr || chat_id == nullptr) {
  ------------------
  |  |   63|    639|#define nullptr NULL
  ------------------
  |  Branch (471:9): [True: 0, False: 639]
  |  Branch (471:41): [True: 0, False: 639]
  ------------------
  472|      0|        return;
  473|      0|    }
  474|       |
  475|    639|    GC_Announces *announces = get_announces_by_chat_id(gc_announces_list, chat_id);
  476|       |
  477|    639|    if (announces != nullptr) {
  ------------------
  |  |   63|    639|#define nullptr NULL
  ------------------
  |  Branch (477:9): [True: 231, False: 408]
  ------------------
  478|    231|        remove_announces(gc_announces_list, announces);
  479|    231|    }
  480|    639|}
group_announce.c:get_announces_by_chat_id:
   46|  2.25k|{
   47|  2.25k|    GC_Announces *announces = gc_announces_list->root_announces;
   48|       |
   49|  4.42k|    while (announces != nullptr) {
  ------------------
  |  |   63|  4.42k|#define nullptr NULL
  ------------------
  |  Branch (49:12): [True: 3.11k, False: 1.30k]
  ------------------
   50|  3.11k|        if (memcmp(announces->chat_id, chat_id, CHAT_ID_SIZE) == 0) {
  ------------------
  |  |  142|  3.11k|#define CHAT_ID_SIZE                   SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|  3.11k|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|  3.11k|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (50:13): [True: 949, False: 2.16k]
  ------------------
   51|    949|            return announces;
   52|    949|        }
   53|       |
   54|  2.16k|        announces = announces->next_announce;
   55|  2.16k|    }
   56|       |
   57|  1.30k|    return nullptr;
  ------------------
  |  |   63|  1.30k|#define nullptr NULL
  ------------------
   58|  2.25k|}
group_announce.c:gca_unpack_announce:
  169|  3.06k|{
  170|  3.06k|    if (length < ENC_PUBLIC_KEY_SIZE + 2) {
  ------------------
  |  |  122|  3.06k|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|  3.06k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  |  Branch (170:9): [True: 202, False: 2.85k]
  ------------------
  171|    202|        LOGGER_ERROR(log, "Invalid announce length: %u", length);
  ------------------
  |  |   80|    202|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|    202|    do {                                                                         \
  |  |  |  |   70|    202|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    404|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|    202|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|    202|        }                                                                        \
  |  |  |  |   73|    202|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  172|    202|        return -1;
  173|    202|    }
  174|       |
  175|  2.85k|    if (data == nullptr) {
  ------------------
  |  |   63|  2.85k|#define nullptr NULL
  ------------------
  |  Branch (175:9): [True: 0, False: 2.85k]
  ------------------
  176|      0|        LOGGER_ERROR(log, "data is null");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  177|      0|        return -1;
  178|      0|    }
  179|       |
  180|  2.85k|    if (announce == nullptr) {
  ------------------
  |  |   63|  2.85k|#define nullptr NULL
  ------------------
  |  Branch (180:9): [True: 0, False: 2.85k]
  ------------------
  181|      0|        LOGGER_ERROR(log, "announce is null");
  ------------------
  |  |   80|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  182|      0|        return -1;
  183|      0|    }
  184|       |
  185|  2.85k|    uint16_t offset = 0;
  186|  2.85k|    memcpy(announce->peer_public_key, data + offset, ENC_PUBLIC_KEY_SIZE);
  ------------------
  |  |  122|  2.85k|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|  2.85k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  187|  2.85k|    offset += ENC_PUBLIC_KEY_SIZE;
  ------------------
  |  |  122|  2.85k|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|  2.85k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  188|       |
  189|  2.85k|    net_unpack_bool(&data[offset], &announce->ip_port_is_set);
  190|  2.85k|    ++offset;
  191|       |
  192|  2.85k|    announce->tcp_relays_count = data[offset];
  193|  2.85k|    ++offset;
  194|       |
  195|  2.85k|    if (announce->tcp_relays_count > GCA_MAX_ANNOUNCED_TCP_RELAYS) {
  ------------------
  |  |   31|  2.85k|#define GCA_MAX_ANNOUNCED_TCP_RELAYS 1
  ------------------
  |  Branch (195:9): [True: 66, False: 2.79k]
  ------------------
  196|     66|        return -1;
  197|     66|    }
  198|       |
  199|  2.79k|    if (announce->ip_port_is_set) {
  ------------------
  |  Branch (199:9): [True: 1.32k, False: 1.47k]
  ------------------
  200|  1.32k|        if (length - offset == 0) {
  ------------------
  |  Branch (200:13): [True: 194, False: 1.12k]
  ------------------
  201|    194|            return -1;
  202|    194|        }
  203|       |
  204|  1.12k|        const int ip_port_length = unpack_ip_port(&announce->ip_port, data + offset, length - offset, false);
  205|       |
  206|  1.12k|        if (ip_port_length == -1) {
  ------------------
  |  Branch (206:13): [True: 263, False: 865]
  ------------------
  207|    263|            LOGGER_ERROR(log, "Failed to unpack ip_port");
  ------------------
  |  |   80|    263|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|    263|    do {                                                                         \
  |  |  |  |   70|    263|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    526|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|    263|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|    263|        }                                                                        \
  |  |  |  |   73|    263|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  208|    263|            return -1;
  209|    263|        }
  210|       |
  211|    865|        offset += ip_port_length;
  212|    865|    }
  213|       |
  214|  2.33k|    uint16_t nodes_length;
  215|  2.33k|    const int nodes_count = unpack_nodes(announce->tcp_relays, announce->tcp_relays_count, &nodes_length,
  216|  2.33k|                                         data + offset, length - offset, true);
  217|       |
  218|  2.33k|    if (nodes_count != announce->tcp_relays_count) {
  ------------------
  |  Branch (218:9): [True: 218, False: 2.11k]
  ------------------
  219|    218|        LOGGER_ERROR(log, "Failed to unpack TCP nodes");
  ------------------
  |  |   80|    218|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|    218|    do {                                                                         \
  |  |  |  |   70|    218|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    436|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|    218|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|    218|        }                                                                        \
  |  |  |  |   73|    218|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  220|    218|        return -1;
  221|    218|    }
  222|       |
  223|  2.11k|    return offset + nodes_length;
  224|  2.33k|}
group_announce.c:gca_new_announces:
  342|    474|{
  343|    474|    GC_Announces *announces = (GC_Announces *)mem_alloc(mem, sizeof(GC_Announces));
  344|       |
  345|    474|    if (announces == nullptr) {
  ------------------
  |  |   63|    474|#define nullptr NULL
  ------------------
  |  Branch (345:9): [True: 0, False: 474]
  ------------------
  346|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  347|      0|    }
  348|       |
  349|    474|    announces->index = 0;
  350|    474|    announces->prev_announce = nullptr;
  ------------------
  |  |   63|    474|#define nullptr NULL
  ------------------
  351|       |
  352|    474|    if (gc_announces_list->root_announces != nullptr) {
  ------------------
  |  |   63|    474|#define nullptr NULL
  ------------------
  |  Branch (352:9): [True: 300, False: 174]
  ------------------
  353|    300|        gc_announces_list->root_announces->prev_announce = announces;
  354|    300|    }
  355|       |
  356|    474|    announces->next_announce = gc_announces_list->root_announces;
  357|    474|    gc_announces_list->root_announces = announces;
  358|    474|    memcpy(announces->chat_id, public_announce->chat_public_key, CHAT_ID_SIZE);
  ------------------
  |  |  142|    474|#define CHAT_ID_SIZE                   SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|    474|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|    474|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  359|       |
  360|    474|    return announces;
  361|    474|}
group_announce.c:remove_announces:
   23|    231|{
   24|    231|    if (announces == nullptr || gc_announces_list == nullptr) {
  ------------------
  |  |   63|    462|#define nullptr NULL
  ------------------
                  if (announces == nullptr || gc_announces_list == nullptr) {
  ------------------
  |  |   63|    231|#define nullptr NULL
  ------------------
  |  Branch (24:9): [True: 0, False: 231]
  |  Branch (24:33): [True: 0, False: 231]
  ------------------
   25|      0|        return;
   26|      0|    }
   27|       |
   28|    231|    if (announces->prev_announce != nullptr) {
  ------------------
  |  |   63|    231|#define nullptr NULL
  ------------------
  |  Branch (28:9): [True: 66, False: 165]
  ------------------
   29|     66|        announces->prev_announce->next_announce = announces->next_announce;
   30|    165|    } else {
   31|    165|        gc_announces_list->root_announces = announces->next_announce;
   32|    165|    }
   33|       |
   34|    231|    if (announces->next_announce != nullptr) {
  ------------------
  |  |   63|    231|#define nullptr NULL
  ------------------
  |  Branch (34:9): [True: 145, False: 86]
  ------------------
   35|    145|        announces->next_announce->prev_announce = announces->prev_announce;
   36|    145|    }
   37|       |
   38|    231|    mem_delete(gc_announces_list->mem, announces);
   39|    231|}

LLVMFuzzerTestOneInput:
  113|    358|{
  114|    358|    fuzz_select_target<TestUnpackAnnouncesList, TestUnpackPublicAnnounce, TestDoGca>(data, size);
  115|    358|    return 0;
  116|    358|}
group_announce_fuzz_test.cc:_ZN12_GLOBAL__N_123TestUnpackAnnouncesListER9Fuzz_Data:
   14|    106|{
   15|    106|    CONSUME1_OR_RETURN(const uint8_t, max_count, input);
  ------------------
  |  |  105|    106|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 1, False: 105]
  |  |  ------------------
  |  |  106|      1|        return;                               \
  |  |  107|      1|    }                                         \
  |  |  108|    106|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   16|       |    // Always allocate at least something to avoid passing nullptr to functions below.
   17|    105|    std::vector<GC_Announce> announces(max_count + 1);
   18|       |
   19|       |    // TODO(iphydf): How do we know the packed size?
   20|    105|    CONSUME1_OR_RETURN(const uint16_t, packed_size, input);
  ------------------
  |  |  105|    105|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 1, False: 104]
  |  |  ------------------
  |  |  106|      1|        return;                               \
  |  |  107|      1|    }                                         \
  |  |  108|    105|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   21|       |
   22|    104|    Test_Memory mem;
   23|    104|    Logger *logger = logger_new(mem);
   24|    104|    if (gca_unpack_announces_list(logger, input.data(), input.size(), announces.data(), max_count)
  ------------------
  |  Branch (24:9): [True: 68, False: 36]
  ------------------
   25|    104|        != -1) {
   26|       |        // Always allocate at least something to avoid passing nullptr to functions below.
   27|     68|        std::vector<uint8_t> packed(packed_size + 1);
   28|     68|        size_t processed;
   29|     68|        gca_pack_announces_list(
   30|     68|            logger, packed.data(), packed_size, announces.data(), max_count, &processed);
   31|     68|    }
   32|    104|    logger_kill(logger);
   33|    104|}
group_announce_fuzz_test.cc:_ZN12_GLOBAL__N_124TestUnpackPublicAnnounceER9Fuzz_Data:
   36|     11|{
   37|     11|    GC_Public_Announce public_announce;
   38|       |
   39|       |    // TODO(iphydf): How do we know the packed size?
   40|     11|    CONSUME1_OR_RETURN(const uint16_t, packed_size, input);
  ------------------
  |  |  105|     11|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 1, False: 10]
  |  |  ------------------
  |  |  106|      1|        return;                               \
  |  |  107|      1|    }                                         \
  |  |  108|     11|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   41|       |
   42|     10|    Test_Memory mem;
   43|     10|    Logger *logger = logger_new(mem);
   44|     10|    if (gca_unpack_public_announce(logger, input.data(), input.size(), &public_announce) != -1) {
  ------------------
  |  Branch (44:9): [True: 8, False: 2]
  ------------------
   45|       |        // Always allocate at least something to avoid passing nullptr to functions below.
   46|      8|        std::vector<uint8_t> packed(packed_size + 1);
   47|      8|        gca_pack_public_announce(logger, packed.data(), packed_size, &public_announce);
   48|      8|    }
   49|     10|    logger_kill(logger);
   50|     10|}
group_announce_fuzz_test.cc:_ZN12_GLOBAL__N_19TestDoGcaER9Fuzz_Data:
   53|    240|{
   54|    240|    Test_Memory mem;
   55|    240|    std::unique_ptr<Logger, void (*)(Logger *)> logger(logger_new(mem), logger_kill);
   56|       |
   57|    240|    uint64_t clock = 1;
   58|    240|    std::unique_ptr<Mono_Time, std::function<void(Mono_Time *)>> mono_time(
   59|    240|        mono_time_new(
   60|    240|            mem, [](void *user_data) { return *static_cast<uint64_t *>(user_data); }, &clock),
   61|    240|        [mem](Mono_Time *ptr) { mono_time_free(mem, ptr); });
   62|    240|    assert(mono_time != nullptr);
   63|    240|    std::unique_ptr<GC_Announces_List, void (*)(GC_Announces_List *)> gca(
   64|    240|        new_gca_list(mem), kill_gca);
   65|    240|    assert(gca != nullptr);
   66|       |
   67|  4.42k|    while (!input.empty()) {
  ------------------
  |  Branch (67:12): [True: 4.19k, False: 227]
  ------------------
   68|  4.19k|        CONSUME1_OR_RETURN(const uint8_t, choice, input);
  ------------------
  |  |  105|  4.19k|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 0, False: 4.19k]
  |  |  ------------------
  |  |  106|      0|        return;                               \
  |  |  107|      0|    }                                         \
  |  |  108|  4.19k|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   69|  4.19k|        switch (choice) {
  ------------------
  |  Branch (69:17): [True: 338, False: 3.86k]
  ------------------
   70|  1.89k|        case 0: {
  ------------------
  |  Branch (70:9): [True: 1.89k, False: 2.30k]
  ------------------
   71|       |            // Add an announce.
   72|  1.89k|            CONSUME1_OR_RETURN(const uint16_t, length, input);
  ------------------
  |  |  105|  1.89k|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 1, False: 1.89k]
  |  |  ------------------
  |  |  106|      1|        return;                               \
  |  |  107|      1|    }                                         \
  |  |  108|  1.89k|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   73|  1.89k|            CONSUME_OR_RETURN(const uint8_t *data, input, length);
  ------------------
  |  |  139|  1.89k|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 1, False: 1.89k]
  |  |  ------------------
  |  |  140|      1|        return;                              \
  |  |  141|      1|    }                                        \
  |  |  142|  1.89k|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   74|  1.89k|            GC_Public_Announce public_announce;
   75|  1.89k|            if (gca_unpack_public_announce(logger.get(), data, length, &public_announce) != -1) {
  ------------------
  |  Branch (75:17): [True: 768, False: 1.12k]
  ------------------
   76|    768|                gca_add_announce(mem, mono_time.get(), gca.get(), &public_announce);
   77|    768|            }
   78|  1.89k|            break;
   79|  1.89k|        }
   80|    368|        case 1: {
  ------------------
  |  Branch (80:9): [True: 368, False: 3.83k]
  ------------------
   81|       |            // Advance the time by a number of tox_iteration_intervals.
   82|    368|            CONSUME1_OR_RETURN(const uint8_t, iterations, input);
  ------------------
  |  |  105|    368|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 1, False: 367]
  |  |  ------------------
  |  |  106|      1|        return;                               \
  |  |  107|      1|    }                                         \
  |  |  108|    368|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   83|    367|            clock += iterations * 20;
   84|       |            // Do an iteration.
   85|    367|            do_gca(mono_time.get(), gca.get());
   86|    367|            break;
   87|    368|        }
   88|    959|        case 2: {
  ------------------
  |  Branch (88:9): [True: 959, False: 3.24k]
  ------------------
   89|       |            // Get announces.
   90|    959|            CONSUME1_OR_RETURN(const uint8_t, max_nodes, input);
  ------------------
  |  |  105|    959|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 1, False: 958]
  |  |  ------------------
  |  |  106|      1|        return;                               \
  |  |  107|      1|    }                                         \
  |  |  108|    959|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   91|       |            // Always allocate at least something to avoid passing nullptr to functions below.
   92|    958|            std::vector<GC_Announce> gc_announces(max_nodes + 1);
   93|    958|            CONSUME_OR_RETURN(const uint8_t *chat_id, input, CHAT_ID_SIZE);
  ------------------
  |  |  139|    958|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 7, False: 951]
  |  |  ------------------
  |  |  140|      7|        return;                              \
  |  |  141|      7|    }                                        \
  |  |  142|    958|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   94|    951|            CONSUME_OR_RETURN(const uint8_t *except_public_key, input, ENC_PUBLIC_KEY_SIZE);
  ------------------
  |  |  139|    951|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 1, False: 950]
  |  |  ------------------
  |  |  140|      1|        return;                              \
  |  |  141|      1|    }                                        \
  |  |  142|    951|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   95|    950|            gca_get_announces(
   96|    950|                gca.get(), gc_announces.data(), max_nodes, chat_id, except_public_key);
   97|    950|            break;
   98|    951|        }
   99|    640|        case 3: {
  ------------------
  |  Branch (99:9): [True: 640, False: 3.55k]
  ------------------
  100|       |            // Remove a chat.
  101|    640|            CONSUME_OR_RETURN(const uint8_t *chat_id, input, CHAT_ID_SIZE);
  ------------------
  |  |  139|    640|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 1, False: 639]
  |  |  ------------------
  |  |  140|      1|        return;                              \
  |  |  141|      1|    }                                        \
  |  |  142|    640|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
  102|    639|            cleanup_gca(gca.get(), chat_id);
  103|    639|            break;
  104|    640|        }
  105|  4.19k|        }
  106|  4.19k|    }
  107|    240|}
group_announce_fuzz_test.cc:_ZZN12_GLOBAL__N_19TestDoGcaER9Fuzz_DataENK3$_1clEPv:
   60|    240|            mem, [](void *user_data) { return *static_cast<uint64_t *>(user_data); }, &clock),
group_announce_fuzz_test.cc:_ZZN12_GLOBAL__N_19TestDoGcaER9Fuzz_DataENK3$_0clEP9Mono_Time:
   61|    240|        [mem](Mono_Time *ptr) { mono_time_free(mem, ptr); });

logger_new:
   33|    354|{
   34|    354|    Logger *log = (Logger *)mem_alloc(mem, sizeof(Logger));
   35|       |
   36|    354|    if (log == nullptr) {
  ------------------
  |  |   63|    354|#define nullptr NULL
  ------------------
  |  Branch (36:9): [True: 0, False: 354]
  ------------------
   37|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   38|      0|    }
   39|       |
   40|    354|    log->mem = mem;
   41|       |
   42|    354|    return log;
   43|    354|}
logger_kill:
   46|    354|{
   47|    354|    if (log == nullptr) {
  ------------------
  |  |   63|    354|#define nullptr NULL
  ------------------
  |  Branch (47:9): [True: 0, False: 354]
  ------------------
   48|      0|        return;
   49|      0|    }
   50|       |
   51|    354|    mem_delete(log->mem, log);
   52|    354|}
logger_write:
   64|  1.98k|{
   65|  1.98k|    if (log == nullptr) {
  ------------------
  |  |   63|  1.98k|#define nullptr NULL
  ------------------
  |  Branch (65:9): [True: 0, False: 1.98k]
  ------------------
   66|      0|        return;
   67|      0|    }
   68|       |
   69|  1.98k|    if (log->callback == nullptr) {
  ------------------
  |  |   63|  1.98k|#define nullptr NULL
  ------------------
  |  Branch (69:9): [True: 1.98k, False: 0]
  ------------------
   70|  1.98k|        return;
   71|  1.98k|    }
   72|       |
   73|       |    // Only pass the file name, not the entire file path, for privacy reasons.
   74|       |    // The full path may contain PII of the person compiling toxcore (their
   75|       |    // username and directory layout).
   76|      0|    const char *filename = strrchr(file, '/');
   77|      0|    file = filename != nullptr ? filename + 1 : file;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (77:12): [True: 0, False: 0]
  ------------------
   78|       |#if defined(_WIN32) || defined(__CYGWIN__)
   79|       |    // On Windows, the path separator *may* be a backslash, so we look for that
   80|       |    // one too.
   81|       |    const char *windows_filename = strrchr(file, '\\');
   82|       |    file = windows_filename != nullptr ? windows_filename + 1 : file;
   83|       |#endif /* WIN32 */
   84|       |
   85|       |    // Format message
   86|      0|    char msg[1024];
   87|      0|    va_list args;
   88|      0|    va_start(args, format);
   89|      0|    vsnprintf(msg, sizeof(msg), format, args);
   90|      0|    va_end(args);
   91|       |
   92|      0|    log->callback(log->context, level, file, line, func, msg, log->userdata);
   93|      0|}

os_memory:
   42|    354|{
   43|    354|    return &os_memory_obj;
   44|    354|}
mem_alloc:
   59|  1.54k|{
   60|  1.54k|    void *const ptr = mem->funcs->calloc(mem->obj, 1, size);
   61|  1.54k|    return ptr;
   62|  1.54k|}
mem_delete:
   89|  1.54k|{
   90|  1.54k|    mem->funcs->free(mem->obj, ptr);
   91|  1.54k|}
mem.c:sys_calloc:
   19|  1.54k|{
   20|  1.54k|    return calloc(nmemb, size);
   21|  1.54k|}
mem.c:sys_free:
   29|  1.54k|{
   30|  1.54k|    free(ptr);
   31|  1.54k|}

_ZN12Memory_ClassD2Ev:
   15|    834|Memory_Class::~Memory_Class() = default;
_ZN11Test_Memory6callocEPvjj:
   20|  1.54k|{
   21|  1.54k|    return mem->funcs->calloc(mem->obj, nmemb, size);
   22|  1.54k|}
_ZN11Test_Memory4freeEPvS0_:
   29|  1.54k|void Test_Memory::free(void *obj, void *ptr) { return mem->funcs->free(mem->obj, ptr); }

_ZN12Memory_ClassC2Ev:
   15|    354|        : self{&vtable, this}
   16|    354|    {
   17|    354|    }
_ZNK12Memory_ClasscvPK6MemoryEv:
   11|  1.84k|    operator Memory const *() const { return &self; }
_ZN12Memory_ClassC2ERKS_:
   13|    480|    Memory_Class(Memory_Class const &) = default;

mono_time_new:
  111|    240|{
  112|    240|    Mono_Time *mono_time = (Mono_Time *)mem_alloc(mem, sizeof(Mono_Time));
  113|       |
  114|    240|    if (mono_time == nullptr) {
  ------------------
  |  |   63|    240|#define nullptr NULL
  ------------------
  |  Branch (114:9): [True: 0, False: 240]
  ------------------
  115|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  116|      0|    }
  117|       |
  118|    240|#ifndef ESP_PLATFORM
  119|    240|    pthread_rwlock_t *rwlock = (pthread_rwlock_t *)mem_alloc(mem, sizeof(pthread_rwlock_t));
  120|       |
  121|    240|    if (rwlock == nullptr) {
  ------------------
  |  |   63|    240|#define nullptr NULL
  ------------------
  |  Branch (121:9): [True: 0, False: 240]
  ------------------
  122|      0|        mem_delete(mem, mono_time);
  123|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  124|      0|    }
  125|       |
  126|    240|    if (pthread_rwlock_init(rwlock, nullptr) != 0) {
  ------------------
  |  |   63|    240|#define nullptr NULL
  ------------------
  |  Branch (126:9): [True: 0, False: 240]
  ------------------
  127|      0|        mem_delete(mem, rwlock);
  128|      0|        mem_delete(mem, mono_time);
  129|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  130|      0|    }
  131|       |
  132|    240|    mono_time->time_update_lock = rwlock;
  133|    240|#endif /* ESP_PLATFORM */
  134|       |
  135|    240|    mono_time_set_current_time_callback(mono_time, current_time_callback, user_data);
  136|       |
  137|    240|    mono_time->cur_time = 0;
  138|    240|#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
  139|       |    // Maximum reproducibility. Never return time = 0.
  140|    240|    mono_time->base_time = 1000000000;
  141|       |#else
  142|       |    // Never return time = 0 in case time() returns 0 (e.g. on microcontrollers
  143|       |    // without battery-powered RTC or ones where NTP didn't initialise it yet).
  144|       |    mono_time->base_time = max_u64(1, (uint64_t)time(nullptr)) * UINT64_C(1000) - current_time_monotonic(mono_time);
  145|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  146|       |
  147|    240|    mono_time_update(mono_time);
  148|       |
  149|    240|    return mono_time;
  150|    240|}
mono_time_free:
  153|    240|{
  154|    240|    if (mono_time == nullptr) {
  ------------------
  |  |   63|    240|#define nullptr NULL
  ------------------
  |  Branch (154:9): [True: 0, False: 240]
  ------------------
  155|      0|        return;
  156|      0|    }
  157|    240|#ifndef ESP_PLATFORM
  158|    240|    pthread_rwlock_destroy(mono_time->time_update_lock);
  159|    240|    mem_delete(mem, mono_time->time_update_lock);
  160|    240|#endif /* ESP_PLATFORM */
  161|    240|    mem_delete(mem, mono_time);
  162|    240|}
mono_time_update:
  165|    240|{
  166|    240|    const uint64_t cur_time =
  167|    240|        mono_time->base_time + mono_time->current_time_callback(mono_time->user_data);
  168|       |
  169|    240|#ifndef ESP_PLATFORM
  170|    240|    pthread_rwlock_wrlock(mono_time->time_update_lock);
  171|    240|#endif /* ESP_PLATFORM */
  172|    240|    mono_time->cur_time = cur_time;
  173|    240|#ifndef ESP_PLATFORM
  174|    240|    pthread_rwlock_unlock(mono_time->time_update_lock);
  175|    240|#endif /* ESP_PLATFORM */
  176|    240|}
mono_time_get_ms:
  179|  1.23k|{
  180|       |#if !defined(ESP_PLATFORM) && !defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  181|       |    // Fuzzing is only single thread for now, no locking needed */
  182|       |    pthread_rwlock_rdlock(mono_time->time_update_lock);
  183|       |#endif /* !ESP_PLATFORM */
  184|  1.23k|    const uint64_t cur_time = mono_time->cur_time;
  185|       |#if !defined(ESP_PLATFORM) && !defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  186|       |    pthread_rwlock_unlock(mono_time->time_update_lock);
  187|       |#endif /* !ESP_PLATFORM */
  188|  1.23k|    return cur_time;
  189|  1.23k|}
mono_time_get:
  192|  1.23k|{
  193|  1.23k|    return mono_time_get_ms(mono_time) / UINT64_C(1000);
  194|  1.23k|}
mono_time_is_timeout:
  197|    445|{
  198|    445|    return timestamp + timeout <= mono_time_get(mono_time);
  199|    445|}
mono_time_set_current_time_callback:
  203|    240|{
  204|    240|    if (current_time_callback == nullptr) {
  ------------------
  |  |   63|    240|#define nullptr NULL
  ------------------
  |  Branch (204:9): [True: 0, False: 240]
  ------------------
  205|      0|        mono_time->current_time_callback = current_time_monotonic_default;
  206|      0|        mono_time->user_data = mono_time;
  207|    240|    } else {
  208|    240|        mono_time->current_time_callback = current_time_callback;
  209|    240|        mono_time->user_data = user_data;
  210|    240|    }
  211|    240|}

net_family_ipv4:
  384|    632|{
  385|    632|    return family_ipv4;
  386|    632|}
net_family_ipv6:
  389|    728|{
  390|    728|    return family_ipv6;
  391|    728|}
net_family_tcp_ipv4:
  404|    236|{
  405|    236|    return family_tcp_ipv4;
  406|    236|}
net_family_tcp_ipv6:
  409|    284|{
  410|    284|    return family_tcp_ipv6;
  411|    284|}
net_family_is_ipv4:
  429|  2.92k|{
  430|  2.92k|    return family.value == family_ipv4.value;
  431|  2.92k|}
net_family_is_ipv6:
  434|  1.78k|{
  435|  1.78k|    return family.value == family_ipv6.value;
  436|  1.78k|}
net_family_is_tcp_ipv4:
  449|  2.10k|{
  450|  2.10k|    return family.value == family_tcp_ipv4.value;
  451|  2.10k|}
net_family_is_tcp_ipv6:
  454|    550|{
  455|    550|    return family.value == family_tcp_ipv6.value;
  456|    550|}
ipport_reset:
 1598|  1.88k|{
 1599|  1.88k|    if (ipport == nullptr) {
  ------------------
  |  |   63|  1.88k|#define nullptr NULL
  ------------------
  |  Branch (1599:9): [True: 0, False: 1.88k]
  ------------------
 1600|      0|        return;
 1601|      0|    }
 1602|       |
 1603|  1.88k|    *ipport = empty_ip_port;
 1604|  1.88k|}
bin_pack_ip_port:
 1691|  2.92k|{
 1692|  2.92k|    bool is_ipv4;
 1693|  2.92k|    uint8_t family;
 1694|       |
 1695|  2.92k|    if (net_family_is_ipv4(ip_port->ip.family)) {
  ------------------
  |  Branch (1695:9): [True: 818, False: 2.10k]
  ------------------
 1696|       |        // TODO(irungentoo): use functions to convert endianness
 1697|    818|        is_ipv4 = true;
 1698|    818|        family = TOX_AF_INET;
  ------------------
  |  |  168|    818|#define TOX_AF_INET 2
  ------------------
 1699|  2.10k|    } else if (net_family_is_tcp_ipv4(ip_port->ip.family)) {
  ------------------
  |  Branch (1699:16): [True: 322, False: 1.78k]
  ------------------
 1700|    322|        is_ipv4 = true;
 1701|    322|        family = TOX_TCP_INET;
  ------------------
  |  |  170|    322|#define TOX_TCP_INET 130
  ------------------
 1702|  1.78k|    } else if (net_family_is_ipv6(ip_port->ip.family)) {
  ------------------
  |  Branch (1702:16): [True: 1.23k, False: 550]
  ------------------
 1703|  1.23k|        is_ipv4 = false;
 1704|  1.23k|        family = TOX_AF_INET6;
  ------------------
  |  |  169|  1.23k|#define TOX_AF_INET6 10
  ------------------
 1705|  1.23k|    } else if (net_family_is_tcp_ipv6(ip_port->ip.family)) {
  ------------------
  |  Branch (1705:16): [True: 550, False: 0]
  ------------------
 1706|    550|        is_ipv4 = false;
 1707|    550|        family = TOX_TCP_INET6;
  ------------------
  |  |  171|    550|#define TOX_TCP_INET6 138
  ------------------
 1708|    550|    } else {
 1709|      0|        Ip_Ntoa ip_str;
 1710|       |        // TODO(iphydf): Find out why we're trying to pack invalid IPs, stop
 1711|       |        // doing that, and turn this into an error.
 1712|      0|        LOGGER_TRACE(logger, "cannot pack invalid IP: %s", net_ip_ntoa(&ip_port->ip, &ip_str));
  ------------------
  |  |   76|      0|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   69|      0|    do {                                                                         \
  |  |  |  |   70|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (70:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   71|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   72|      0|        }                                                                        \
  |  |  |  |   73|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1713|      0|        return false;
 1714|      0|    }
 1715|       |
 1716|  2.92k|    return bin_pack_u08_b(bp, family)
  ------------------
  |  Branch (1716:12): [True: 2.92k, False: 0]
  ------------------
 1717|  2.92k|           && bin_pack_ip(bp, &ip_port->ip, is_ipv4)
  ------------------
  |  Branch (1717:15): [True: 2.92k, False: 0]
  ------------------
 1718|  2.92k|           && bin_pack_u16_b(bp, net_ntohs(ip_port->port));
  ------------------
  |  Branch (1718:15): [True: 2.92k, False: 0]
  ------------------
 1719|  2.92k|}
pack_ip_port:
 1728|    690|{
 1729|    690|    const uint32_t size = bin_pack_obj_size(bin_pack_ip_port_handler, ip_port, logger);
 1730|       |
 1731|    690|    if (size > length) {
  ------------------
  |  Branch (1731:9): [True: 0, False: 690]
  ------------------
 1732|      0|        return -1;
 1733|      0|    }
 1734|       |
 1735|    690|    if (!bin_pack_obj(bin_pack_ip_port_handler, ip_port, logger, data, length)) {
  ------------------
  |  Branch (1735:9): [True: 0, False: 690]
  ------------------
 1736|      0|        return -1;
 1737|      0|    }
 1738|       |
 1739|    690|    assert(size < INT_MAX);
 1740|    690|    return (int)size;
 1741|    690|}
unpack_ip_port:
 1744|  2.07k|{
 1745|  2.07k|    if (data == nullptr) {
  ------------------
  |  |   63|  2.07k|#define nullptr NULL
  ------------------
  |  Branch (1745:9): [True: 0, False: 2.07k]
  ------------------
 1746|      0|        return -1;
 1747|      0|    }
 1748|       |
 1749|  2.07k|    bool is_ipv4;
 1750|  2.07k|    Family host_family;
 1751|       |
 1752|  2.07k|    if (data[0] == TOX_AF_INET) {
  ------------------
  |  |  168|  2.07k|#define TOX_AF_INET 2
  ------------------
  |  Branch (1752:9): [True: 632, False: 1.44k]
  ------------------
 1753|    632|        is_ipv4 = true;
 1754|    632|        host_family = net_family_ipv4();
 1755|  1.44k|    } else if (data[0] == TOX_TCP_INET) {
  ------------------
  |  |  170|  1.44k|#define TOX_TCP_INET 130
  ------------------
  |  Branch (1755:16): [True: 302, False: 1.14k]
  ------------------
 1756|    302|        if (!tcp_enabled) {
  ------------------
  |  Branch (1756:13): [True: 66, False: 236]
  ------------------
 1757|     66|            return -1;
 1758|     66|        }
 1759|       |
 1760|    236|        is_ipv4 = true;
 1761|    236|        host_family = net_family_tcp_ipv4();
 1762|  1.14k|    } else if (data[0] == TOX_AF_INET6) {
  ------------------
  |  |  169|  1.14k|#define TOX_AF_INET6 10
  ------------------
  |  Branch (1762:16): [True: 728, False: 417]
  ------------------
 1763|    728|        is_ipv4 = false;
 1764|    728|        host_family = net_family_ipv6();
 1765|    728|    } else if (data[0] == TOX_TCP_INET6) {
  ------------------
  |  |  171|    417|#define TOX_TCP_INET6 138
  ------------------
  |  Branch (1765:16): [True: 350, False: 67]
  ------------------
 1766|    350|        if (!tcp_enabled) {
  ------------------
  |  Branch (1766:13): [True: 66, False: 284]
  ------------------
 1767|     66|            return -1;
 1768|     66|        }
 1769|       |
 1770|    284|        is_ipv4 = false;
 1771|    284|        host_family = net_family_tcp_ipv6();
 1772|    284|    } else {
 1773|     67|        return -1;
 1774|     67|    }
 1775|       |
 1776|  1.88k|    ipport_reset(ip_port);
 1777|       |
 1778|  1.88k|    if (is_ipv4) {
  ------------------
  |  Branch (1778:9): [True: 868, False: 1.01k]
  ------------------
 1779|    868|        const uint32_t size = 1 + SIZE_IP4 + sizeof(uint16_t);
  ------------------
  |  |  185|    868|#define SIZE_IP4 4
  ------------------
 1780|       |
 1781|    868|        if (size > length) {
  ------------------
  |  Branch (1781:13): [True: 72, False: 796]
  ------------------
 1782|     72|            return -1;
 1783|     72|        }
 1784|       |
 1785|    796|        ip_port->ip.family = host_family;
 1786|    796|        memcpy(ip_port->ip.ip.v4.uint8, data + 1, SIZE_IP4);
  ------------------
  |  |  185|    796|#define SIZE_IP4 4
  ------------------
 1787|    796|        memcpy(&ip_port->port, data + 1 + SIZE_IP4, sizeof(uint16_t));
  ------------------
  |  |  185|    796|#define SIZE_IP4 4
  ------------------
 1788|    796|        return size;
 1789|  1.01k|    } else {
 1790|  1.01k|        const uint32_t size = 1 + SIZE_IP6 + sizeof(uint16_t);
  ------------------
  |  |  186|  1.01k|#define SIZE_IP6 16
  ------------------
 1791|       |
 1792|  1.01k|        if (size > length) {
  ------------------
  |  Branch (1792:13): [True: 73, False: 939]
  ------------------
 1793|     73|            return -1;
 1794|     73|        }
 1795|       |
 1796|    939|        ip_port->ip.family = host_family;
 1797|    939|        memcpy(ip_port->ip.ip.v6.uint8, data + 1, SIZE_IP6);
  ------------------
  |  |  186|    939|#define SIZE_IP6 16
  ------------------
 1798|    939|        memcpy(&ip_port->port, data + 1 + SIZE_IP6, sizeof(uint16_t));
  ------------------
  |  |  186|    939|#define SIZE_IP6 16
  ------------------
 1799|    939|        return size;
 1800|  1.01k|    }
 1801|  1.88k|}
net_ntohs:
 2238|  2.92k|{
 2239|  2.92k|    return ntohs(hostshort);
 2240|  2.92k|}
net_unpack_bool:
 2272|  2.85k|{
 2273|  2.85k|    *v = bytes[0] != 0;
 2274|  2.85k|    return 1;
 2275|  2.85k|}
network.c:bin_pack_ip:
 1678|  2.92k|{
 1679|  2.92k|    if (is_ipv4) {
  ------------------
  |  Branch (1679:9): [True: 1.14k, False: 1.78k]
  ------------------
 1680|  1.14k|        return bin_pack_bin_b(bp, ip->ip.v4.uint8, SIZE_IP4);
  ------------------
  |  |  185|  1.14k|#define SIZE_IP4 4
  ------------------
 1681|  1.78k|    } else {
 1682|  1.78k|        return bin_pack_bin_b(bp, ip->ip.v6.uint8, SIZE_IP6);
  ------------------
  |  |  186|  1.78k|#define SIZE_IP6 16
  ------------------
 1683|  1.78k|    }
 1684|  2.92k|}
network.c:bin_pack_ip_port_handler:
 1722|  1.38k|{
 1723|  1.38k|    const IP_Port *ip_port = (const IP_Port *)obj;
 1724|  1.38k|    return bin_pack_ip_port(bp, logger, ip_port);
 1725|  1.38k|}

_Z16require_not_nullIK6MemoryEPT_PKciS3_:
   73|    354|{
   74|    354|    if (ptr == nullptr) {
  ------------------
  |  Branch (74:9): [True: 0, False: 354]
  ------------------
   75|      0|        std::fprintf(stderr, "unexpected null pointer at %s:%d\n", file, line);
   76|      0|        std::exit(7);
   77|      0|    }
   78|    354|    return ptr;
   79|    354|}
_ZN6MethodIFPvS0_jjE12Memory_ClassE6invokeIXadL_ZNS2_6callocES0_jjEEEES0_S0_jj:
   31|  1.54k|    {
   32|  1.54k|        return (static_cast<Class *>(self)->*M)(self, args...);
   33|  1.54k|    }
_ZN6MethodIFvPvS0_E12Memory_ClassE6invokeIXadL_ZNS2_4freeES0_S0_EEEEvS0_S0_:
   31|  1.54k|    {
   32|  1.54k|        return (static_cast<Class *>(self)->*M)(self, args...);
   33|  1.54k|    }

