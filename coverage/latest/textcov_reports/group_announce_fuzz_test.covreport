_ZNK9Fuzz_Data4sizeEv:
   69|  19.8k|    std::size_t size() const { return size_; }
_ZN9Fuzz_Data8consume1EPKc:
   68|  12.9k|    Consumer consume1(const char *func) { return Consumer{func, *this}; }
_ZN9Fuzz_Data8ConsumercvT_IhEEv:
   60|  9.91k|        {
   61|  9.91k|            const uint8_t *bytes = fd.consume(func, sizeof(T));
   62|  9.91k|            T val;
   63|  9.91k|            std::memcpy(&val, bytes, sizeof(T));
   64|  9.91k|            return val;
   65|  9.91k|        }
_ZN9Fuzz_Data7consumeEPKcm:
   75|  19.7k|    {
   76|  19.7k|        const uint8_t *val = data_;
   77|  19.7k|        if (FUZZ_DEBUG) {
  ------------------
  |  Branch (77:13): [Folded - Ignored]
  ------------------
   78|      0|            if (pos() == TRACE_TRAP) {
  ------------------
  |  Branch (78:17): [True: 0, False: 0]
  ------------------
   79|      0|                __asm__("int $3");
   80|      0|            }
   81|      0|            if (count == 1) {
  ------------------
  |  Branch (81:17): [True: 0, False: 0]
  ------------------
   82|      0|                std::printf("consume@%zu(%s): %d (0x%02x)\n", pos(), func, val[0], val[0]);
   83|      0|            } else if (count != 0) {
  ------------------
  |  Branch (83:24): [True: 0, False: 0]
  ------------------
   84|      0|                std::printf("consume@%zu(%s): %02x..%02x[%zu]\n", pos(), func, val[0],
   85|      0|                    val[count - 1], count);
   86|      0|            }
   87|      0|        }
   88|  19.7k|        data_ += count;
   89|  19.7k|        size_ -= count;
   90|  19.7k|        return val;
   91|  19.7k|    }
_ZN9Fuzz_Data8ConsumercvT_ItEEv:
   60|  3.07k|        {
   61|  3.07k|            const uint8_t *bytes = fd.consume(func, sizeof(T));
   62|  3.07k|            T val;
   63|  3.07k|            std::memcpy(&val, bytes, sizeof(T));
   64|  3.07k|            return val;
   65|  3.07k|        }
_ZNK9Fuzz_Data4dataEv:
   71|    111|    const uint8_t *data() const { return data_; }
_ZNK9Fuzz_Data5emptyEv:
   72|  7.76k|    bool empty() const { return size_ == 0; }
group_announce_fuzz_test.cc:_Z18fuzz_select_targetIJXadL_ZN12_GLOBAL__N_123TestUnpackAnnouncesListER9Fuzz_DataEEXadL_ZNS0_24TestUnpackPublicAnnounceES2_EEXadL_ZNS0_9TestDoGcaES2_EEEEvPKhm:
  183|    380|{
  184|    380|    Fuzz_Data input{data, size};
  185|       |
  186|    380|    CONSUME1_OR_RETURN(const uint8_t, selector, input);
  ------------------
  |  |  105|    380|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 0, False: 380]
  |  |  ------------------
  |  |  106|      0|        return;                               \
  |  |  107|      0|    }                                         \
  |  |  108|    380|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
  187|    380|    return Fuzz_Target_Selector<Args...>::select(selector, input);
  188|    380|}
_ZN9Fuzz_DataC2EPKhm:
   32|    380|        : data_(input_data)
   33|    380|        , base_(input_data)
   34|    380|        , size_(input_size)
   35|    380|    {
   36|    380|    }
group_announce_fuzz_test.cc:_ZN20Fuzz_Target_SelectorIJXadL_ZN12_GLOBAL__N_123TestUnpackAnnouncesListER9Fuzz_DataEEXadL_ZNS0_24TestUnpackPublicAnnounceES2_EEXadL_ZNS0_9TestDoGcaES2_EEEE6selectEhS2_:
  164|    380|    {
  165|    380|        if (selector == sizeof...(Args)) {
  ------------------
  |  Branch (165:13): [True: 102, False: 278]
  ------------------
  166|    102|            return Arg(input);
  167|    102|        }
  168|    278|        return Fuzz_Target_Selector<Args...>::select(selector, input);
  169|    380|    }
group_announce_fuzz_test.cc:_ZN20Fuzz_Target_SelectorIJXadL_ZN12_GLOBAL__N_124TestUnpackPublicAnnounceER9Fuzz_DataEEXadL_ZNS0_9TestDoGcaES2_EEEE6selectEhS2_:
  164|    278|    {
  165|    278|        if (selector == sizeof...(Args)) {
  ------------------
  |  Branch (165:13): [True: 12, False: 266]
  ------------------
  166|     12|            return Arg(input);
  167|     12|        }
  168|    266|        return Fuzz_Target_Selector<Args...>::select(selector, input);
  169|    278|    }
group_announce_fuzz_test.cc:_ZN20Fuzz_Target_SelectorIJXadL_ZN12_GLOBAL__N_19TestDoGcaER9Fuzz_DataEEEE6selectEhS2_:
  164|    266|    {
  165|    266|        if (selector == sizeof...(Args)) {
  ------------------
  |  Branch (165:13): [True: 265, False: 1]
  ------------------
  166|    265|            return Arg(input);
  167|    265|        }
  168|      1|        return Fuzz_Target_Selector<Args...>::select(selector, input);
  169|    266|    }
_ZN20Fuzz_Target_SelectorIJEE6selectEhR9Fuzz_Data:
  175|      1|    {
  176|       |        // The selector selected no function, so we do nothing and rely on the
  177|       |        // fuzzer to come up with a better selector.
  178|      1|    }

cmp_init:
  837|  4.03k|                                         cmp_writer *write) {
  838|  4.03k|  ctx->error = CMP_ERROR_NONE;
  839|  4.03k|  ctx->buf = buf;
  840|  4.03k|  ctx->read = read;
  841|  4.03k|  ctx->skip = skip;
  842|  4.03k|  ctx->write = write;
  843|  4.03k|}

pack_nodes:
  416|  1.20k|{
  417|  1.20k|    const uint32_t size = bin_pack_obj_array_b_size(bin_pack_node_handler, nodes, number, logger);
  418|  1.20k|    if (!bin_pack_obj_array_b(bin_pack_node_handler, nodes, number, logger, data, length)) {
  ------------------
  |  Branch (418:9): [True: 0, False: 1.20k]
  ------------------
  419|      0|        return -1;
  420|      0|    }
  421|  1.20k|    return size;
  422|  1.20k|}
unpack_nodes:
  426|  2.80k|{
  427|  2.80k|    uint32_t num = 0;
  428|  2.80k|    uint32_t len_processed = 0;
  429|       |
  430|  3.80k|    while (num < max_num_nodes && len_processed < length) {
  ------------------
  |  Branch (430:12): [True: 1.25k, False: 2.55k]
  |  Branch (430:35): [True: 1.15k, False: 98]
  ------------------
  431|  1.15k|        const int ipp_size = unpack_ip_port(&nodes[num].ip_port, data + len_processed, length - len_processed, tcp_enabled);
  432|       |
  433|  1.15k|        if (ipp_size == -1) {
  ------------------
  |  Branch (433:13): [True: 81, False: 1.07k]
  ------------------
  434|     81|            break;
  435|     81|        }
  436|       |
  437|  1.07k|        len_processed += ipp_size;
  438|       |
  439|  1.07k|        if (len_processed + CRYPTO_PUBLIC_KEY_SIZE > length) {
  ------------------
  |  |   43|  1.07k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  |  Branch (439:13): [True: 71, False: 1.00k]
  ------------------
  440|     71|            return -1;
  441|     71|        }
  442|       |
  443|  1.00k|        memcpy(nodes[num].public_key, data + len_processed, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|  1.00k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  444|  1.00k|        len_processed += CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|  1.00k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  445|  1.00k|        ++num;
  446|       |
  447|  1.00k|#ifndef NDEBUG
  448|  1.00k|        const uint32_t increment = ipp_size + CRYPTO_PUBLIC_KEY_SIZE;
  ------------------
  |  |   43|  1.00k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  449|  1.00k|        assert(increment == PACKED_NODE_SIZE_IP4 || increment == PACKED_NODE_SIZE_IP6);
  450|  1.00k|#endif /* NDEBUG */
  451|  1.00k|    }
  452|       |
  453|  2.73k|    if (num == 0 && max_num_nodes > 0 && length > 0) {
  ------------------
  |  Branch (453:9): [True: 1.73k, False: 1.00k]
  |  Branch (453:21): [True: 179, False: 1.55k]
  |  Branch (453:42): [True: 81, False: 98]
  ------------------
  454|     81|        return -1;
  455|     81|    }
  456|       |
  457|  2.65k|    if (processed_data_len != nullptr) {
  ------------------
  |  |   63|  2.65k|#define nullptr NULL
  ------------------
  |  Branch (457:9): [True: 2.65k, False: 0]
  ------------------
  458|  2.65k|        *processed_data_len = len_processed;
  459|  2.65k|    }
  460|       |
  461|  2.65k|    return num;
  462|  2.73k|}
DHT.c:bin_pack_node_handler:
  409|  1.89k|{
  410|  1.89k|    const Node_format *nodes = (const Node_format *)arr;
  411|  1.89k|    return bin_pack_ip_port(bp, logger, &nodes[index].ip_port)
  ------------------
  |  Branch (411:12): [True: 1.89k, False: 0]
  ------------------
  412|  1.89k|           && bin_pack_bin_b(bp, nodes[index].public_key, CRYPTO_PUBLIC_KEY_SIZE);
  ------------------
  |  |   43|  1.89k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  ------------------
  |  Branch (412:15): [True: 1.89k, False: 0]
  ------------------
  413|  1.89k|}

bin_pack_obj_size:
   68|    810|{
   69|    810|    Bin_Pack bp;
   70|    810|    bin_pack_init(&bp, nullptr, 0);
  ------------------
  |  |   63|    810|#define nullptr NULL
  ------------------
   71|    810|    if (!callback(obj, logger, &bp)) {
  ------------------
  |  Branch (71:9): [True: 0, False: 810]
  ------------------
   72|      0|        return UINT32_MAX;
   73|      0|    }
   74|    810|    return bp.bytes_pos;
   75|    810|}
bin_pack_obj:
   78|    810|{
   79|    810|    Bin_Pack bp;
   80|    810|    bin_pack_init(&bp, buf, buf_size);
   81|    810|    return callback(obj, logger, &bp);
   82|    810|}
bin_pack_obj_array_b_size:
   85|  1.20k|{
   86|  1.20k|    Bin_Pack bp;
   87|  1.20k|    bin_pack_init(&bp, nullptr, 0);
  ------------------
  |  |   63|  1.20k|#define nullptr NULL
  ------------------
   88|  1.20k|    if (arr == nullptr) {
  ------------------
  |  |   63|  1.20k|#define nullptr NULL
  ------------------
  |  Branch (88:9): [True: 0, False: 1.20k]
  ------------------
   89|      0|        assert(arr_size == 0);
   90|      0|    }
   91|  2.15k|    for (uint32_t i = 0; i < arr_size; ++i) {
  ------------------
  |  Branch (91:26): [True: 947, False: 1.20k]
  ------------------
   92|    947|        if (!callback(arr, i, logger, &bp)) {
  ------------------
  |  Branch (92:13): [True: 0, False: 947]
  ------------------
   93|      0|            return UINT32_MAX;
   94|      0|        }
   95|    947|    }
   96|  1.20k|    return bp.bytes_pos;
   97|  1.20k|}
bin_pack_obj_array_b:
  100|  1.20k|{
  101|  1.20k|    Bin_Pack bp;
  102|  1.20k|    bin_pack_init(&bp, buf, buf_size);
  103|  1.20k|    if (arr == nullptr) {
  ------------------
  |  |   63|  1.20k|#define nullptr NULL
  ------------------
  |  Branch (103:9): [True: 0, False: 1.20k]
  ------------------
  104|      0|        assert(arr_size == 0);
  105|      0|    }
  106|  2.15k|    for (uint32_t i = 0; i < arr_size; ++i) {
  ------------------
  |  Branch (106:26): [True: 947, False: 1.20k]
  ------------------
  107|    947|        if (!callback(arr, i, logger, &bp)) {
  ------------------
  |  Branch (107:13): [True: 0, False: 947]
  ------------------
  108|      0|            return false;
  109|      0|        }
  110|    947|    }
  111|  1.20k|    return true;
  112|  1.20k|}
bin_pack_u08_b:
  180|  10.5k|{
  181|  10.5k|    return bp->ctx.write(&bp->ctx, &val, 1) == 1;
  182|  10.5k|}
bin_pack_u16_b:
  185|  3.51k|{
  186|  3.51k|    return bin_pack_u08_b(bp, (val >> 8) & 0xff)
  ------------------
  |  Branch (186:12): [True: 3.51k, False: 0]
  ------------------
  187|  3.51k|           && bin_pack_u08_b(bp, val & 0xff);
  ------------------
  |  Branch (187:15): [True: 3.51k, False: 0]
  ------------------
  188|  3.51k|}
bin_pack_bin_b:
  203|  5.40k|{
  204|  5.40k|    return bp->ctx.write(&bp->ctx, data, length) == length;
  205|  5.40k|}
bin_pack.c:bin_pack_init:
   60|  4.03k|{
   61|  4.03k|    bp->bytes = buf;
   62|  4.03k|    bp->bytes_size = buf_size;
   63|  4.03k|    bp->bytes_pos = 0;
   64|  4.03k|    cmp_init(&bp->ctx, bp, null_reader, null_skipper, buf_writer);
   65|  4.03k|}
bin_pack.c:buf_writer:
   38|  15.9k|{
   39|  15.9k|    const uint8_t *bytes = (const uint8_t *)data;
   40|  15.9k|    Bin_Pack *bp = (Bin_Pack *)ctx->buf;
   41|  15.9k|    assert(bp != nullptr);
   42|  15.9k|    const uint32_t new_pos = bp->bytes_pos + count;
   43|  15.9k|    if (new_pos < bp->bytes_pos) {
  ------------------
  |  Branch (43:9): [True: 0, False: 15.9k]
  ------------------
   44|       |        // 32 bit overflow.
   45|      0|        return 0;
   46|      0|    }
   47|  15.9k|    if (bp->bytes != nullptr) {
  ------------------
  |  |   63|  15.9k|#define nullptr NULL
  ------------------
  |  Branch (47:9): [True: 7.97k, False: 7.97k]
  ------------------
   48|  7.97k|        if (new_pos > bp->bytes_size) {
  ------------------
  |  Branch (48:13): [True: 0, False: 7.97k]
  ------------------
   49|       |            // Buffer too small.
   50|      0|            return 0;
   51|      0|        }
   52|  7.97k|        memcpy(&bp->bytes[bp->bytes_pos], bytes, count);
   53|  7.97k|    }
   54|  15.9k|    bp->bytes_pos += count;
   55|  15.9k|    return count;
   56|  15.9k|}

gca_get_announces:
   64|  1.41k|{
   65|  1.41k|    if (gc_announces == nullptr || gc_announces_list == nullptr || chat_id == nullptr || max_nodes == 0
  ------------------
  |  |   63|  2.82k|#define nullptr NULL
  ------------------
                  if (gc_announces == nullptr || gc_announces_list == nullptr || chat_id == nullptr || max_nodes == 0
  ------------------
  |  |   63|  2.82k|#define nullptr NULL
  ------------------
                  if (gc_announces == nullptr || gc_announces_list == nullptr || chat_id == nullptr || max_nodes == 0
  ------------------
  |  |   63|  2.82k|#define nullptr NULL
  ------------------
  |  Branch (65:9): [True: 0, False: 1.41k]
  |  Branch (65:36): [True: 0, False: 1.41k]
  |  Branch (65:68): [True: 0, False: 1.41k]
  |  Branch (65:90): [True: 99, False: 1.31k]
  ------------------
   66|  1.41k|            || except_public_key == nullptr) {
  ------------------
  |  |   63|  1.31k|#define nullptr NULL
  ------------------
  |  Branch (66:16): [True: 0, False: 1.31k]
  ------------------
   67|     99|        return -1;
   68|     99|    }
   69|       |
   70|  1.31k|    const GC_Announces *announces = get_announces_by_chat_id(gc_announces_list, chat_id);
   71|       |
   72|  1.31k|    if (announces == nullptr) {
  ------------------
  |  |   63|  1.31k|#define nullptr NULL
  ------------------
  |  Branch (72:9): [True: 812, False: 499]
  ------------------
   73|    812|        return 0;
   74|    812|    }
   75|       |
   76|    499|    uint16_t added_count = 0;
   77|       |
   78|  3.47k|    for (size_t i = 0; i < announces->index && i < GCA_MAX_SAVED_ANNOUNCES_PER_GC && added_count < max_nodes; ++i) {
  ------------------
  |  |   28|  6.54k|#define GCA_MAX_SAVED_ANNOUNCES_PER_GC 16
  ------------------
  |  Branch (78:24): [True: 3.06k, False: 417]
  |  Branch (78:48): [True: 2.98k, False: 82]
  |  Branch (78:86): [True: 2.98k, False: 0]
  ------------------
   79|  2.98k|        const size_t index = i % GCA_MAX_SAVED_ANNOUNCES_PER_GC;
  ------------------
  |  |   28|  2.98k|#define GCA_MAX_SAVED_ANNOUNCES_PER_GC 16
  ------------------
   80|       |
   81|  2.98k|        if (memcmp(except_public_key, announces->peer_announces[index].base_announce.peer_public_key,
  ------------------
  |  Branch (81:13): [True: 594, False: 2.38k]
  ------------------
   82|  2.98k|                   ENC_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |  122|  2.98k|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|  2.98k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
   83|    594|            continue;
   84|    594|        }
   85|       |
   86|  2.38k|        bool already_added = false;
   87|       |
   88|  9.82k|        for (size_t j = 0; j < added_count; ++j) {
  ------------------
  |  Branch (88:28): [True: 8.22k, False: 1.59k]
  ------------------
   89|  8.22k|            if (memcmp(gc_announces[j].peer_public_key, announces->peer_announces[index].base_announce.peer_public_key,
  ------------------
  |  Branch (89:17): [True: 795, False: 7.43k]
  ------------------
   90|  8.22k|                       ENC_PUBLIC_KEY_SIZE) == 0) {
  ------------------
  |  |  122|  8.22k|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|  8.22k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
   91|    795|                already_added = true;
   92|    795|                break;
   93|    795|            }
   94|  8.22k|        }
   95|       |
   96|  2.38k|        if (!already_added) {
  ------------------
  |  Branch (96:13): [True: 1.59k, False: 795]
  ------------------
   97|  1.59k|            gc_announces[added_count] = announces->peer_announces[index].base_announce;
   98|  1.59k|            ++added_count;
   99|  1.59k|        }
  100|  2.38k|    }
  101|       |
  102|    499|    return added_count;
  103|  1.31k|}
gca_pack_announce:
  111|  1.27k|{
  112|  1.27k|    if (length < GCA_ANNOUNCE_MAX_SIZE) {
  ------------------
  |  |   37|  1.27k|#define GCA_ANNOUNCE_MAX_SIZE (ENC_PUBLIC_KEY_SIZE + 1 + 1 + (PACKED_NODE_SIZE_IP6 * 2))
  |  |  ------------------
  |  |  |  |  122|  1.27k|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   43|  1.27k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define GCA_ANNOUNCE_MAX_SIZE (ENC_PUBLIC_KEY_SIZE + 1 + 1 + (PACKED_NODE_SIZE_IP6 * 2))
  |  |  ------------------
  |  |  |  |   72|  1.27k|#define PACKED_NODE_SIZE_IP6 (1 + SIZE_IP6 + sizeof(uint16_t) + CRYPTO_PUBLIC_KEY_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  186|  1.27k|#define SIZE_IP6 16
  |  |  |  |  ------------------
  |  |  |  |               #define PACKED_NODE_SIZE_IP6 (1 + SIZE_IP6 + sizeof(uint16_t) + CRYPTO_PUBLIC_KEY_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   43|  1.27k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (112:9): [True: 4, False: 1.27k]
  ------------------
  113|      4|        LOGGER_ERROR(log, "Invalid announce length: %u", length);
  ------------------
  |  |   87|      4|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      4|    do {                                                                         \
  |  |  |  |   77|      4|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      8|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      4|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      4|        }                                                                        \
  |  |  |  |   80|      4|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  114|      4|        return -1;
  115|      4|    }
  116|       |
  117|  1.27k|    if (data == nullptr) {
  ------------------
  |  |   63|  1.27k|#define nullptr NULL
  ------------------
  |  Branch (117:9): [True: 0, False: 1.27k]
  ------------------
  118|      0|        LOGGER_ERROR(log, "data is null");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  119|      0|        return -1;
  120|      0|    }
  121|       |
  122|  1.27k|    if (announce == nullptr) {
  ------------------
  |  |   63|  1.27k|#define nullptr NULL
  ------------------
  |  Branch (122:9): [True: 0, False: 1.27k]
  ------------------
  123|      0|        LOGGER_ERROR(log, "announce is null");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  124|      0|        return -1;
  125|      0|    }
  126|       |
  127|  1.27k|    uint16_t offset = 0;
  128|  1.27k|    memcpy(data + offset, announce->peer_public_key, ENC_PUBLIC_KEY_SIZE);
  ------------------
  |  |  122|  1.27k|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|  1.27k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  129|  1.27k|    offset += ENC_PUBLIC_KEY_SIZE;
  ------------------
  |  |  122|  1.27k|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|  1.27k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  130|       |
  131|  1.27k|    data[offset] = announce->ip_port_is_set ? 1 : 0;
  ------------------
  |  Branch (131:20): [True: 810, False: 462]
  ------------------
  132|  1.27k|    ++offset;
  133|       |
  134|  1.27k|    data[offset] = announce->tcp_relays_count;
  135|  1.27k|    ++offset;
  136|       |
  137|  1.27k|    if (!announce->ip_port_is_set && announce->tcp_relays_count == 0) {
  ------------------
  |  Branch (137:9): [True: 462, False: 810]
  |  Branch (137:38): [True: 63, False: 399]
  ------------------
  138|     63|        LOGGER_ERROR(log, "Failed to pack announce: no valid ip_port or tcp relay");
  ------------------
  |  |   87|     63|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     63|    do {                                                                         \
  |  |  |  |   77|     63|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    126|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|     63|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|     63|        }                                                                        \
  |  |  |  |   80|     63|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  139|     63|        return -1;
  140|     63|    }
  141|       |
  142|  1.20k|    if (announce->ip_port_is_set) {
  ------------------
  |  Branch (142:9): [True: 810, False: 399]
  ------------------
  143|    810|        const int ip_port_length = pack_ip_port(log, data + offset, length - offset, &announce->ip_port);
  144|       |
  145|    810|        if (ip_port_length == -1) {
  ------------------
  |  Branch (145:13): [True: 0, False: 810]
  ------------------
  146|      0|            LOGGER_ERROR(log, "Failed to pack ip_port");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  147|      0|            return -1;
  148|      0|        }
  149|       |
  150|    810|        offset += ip_port_length;
  151|    810|    }
  152|       |
  153|  1.20k|    const int nodes_length = pack_nodes(log, data + offset, length - offset, announce->tcp_relays,
  154|  1.20k|                                        announce->tcp_relays_count);
  155|       |
  156|  1.20k|    if (nodes_length == -1) {
  ------------------
  |  Branch (156:9): [True: 0, False: 1.20k]
  ------------------
  157|      0|        LOGGER_ERROR(log, "Failed to pack TCP nodes");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  158|      0|        return -1;
  159|      0|    }
  160|       |
  161|  1.20k|    return nodes_length + offset;
  162|  1.20k|}
gca_pack_public_announce:
  231|      9|{
  232|      9|    if (public_announce == nullptr || data == nullptr || length < CHAT_ID_SIZE) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
                  if (public_announce == nullptr || data == nullptr || length < CHAT_ID_SIZE) {
  ------------------
  |  |   63|     18|#define nullptr NULL
  ------------------
                  if (public_announce == nullptr || data == nullptr || length < CHAT_ID_SIZE) {
  ------------------
  |  |  142|      9|#define CHAT_ID_SIZE                   SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|      9|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|      9|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (232:9): [True: 0, False: 9]
  |  Branch (232:39): [True: 0, False: 9]
  |  Branch (232:58): [True: 2, False: 7]
  ------------------
  233|      2|        return -1;
  234|      2|    }
  235|       |
  236|      7|    memcpy(data, public_announce->chat_public_key, CHAT_ID_SIZE);
  ------------------
  |  |  142|      7|#define CHAT_ID_SIZE                   SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|      7|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|      7|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  237|       |
  238|      7|    const int packed_size = gca_pack_announce(log, data + CHAT_ID_SIZE, length - CHAT_ID_SIZE,
  ------------------
  |  |  142|      7|#define CHAT_ID_SIZE                   SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|      7|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|      7|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  const int packed_size = gca_pack_announce(log, data + CHAT_ID_SIZE, length - CHAT_ID_SIZE,
  ------------------
  |  |  142|      7|#define CHAT_ID_SIZE                   SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|      7|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|      7|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  239|      7|                            &public_announce->base_announce);
  240|       |
  241|      7|    if (packed_size < 0) {
  ------------------
  |  Branch (241:9): [True: 6, False: 1]
  ------------------
  242|      6|        LOGGER_ERROR(log, "Failed to pack public group announce");
  ------------------
  |  |   87|      6|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      6|    do {                                                                         \
  |  |  |  |   77|      6|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     12|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      6|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      6|        }                                                                        \
  |  |  |  |   80|      6|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  243|      6|        return -1;
  244|      6|    }
  245|       |
  246|      1|    return packed_size + CHAT_ID_SIZE;
  ------------------
  |  |  142|      1|#define CHAT_ID_SIZE                   SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|      1|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|      1|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  247|      7|}
gca_unpack_public_announce:
  251|  2.97k|{
  252|  2.97k|    if (length < CHAT_ID_SIZE) {
  ------------------
  |  |  142|  2.97k|#define CHAT_ID_SIZE                   SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|  2.97k|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|  2.97k|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (252:9): [True: 476, False: 2.49k]
  ------------------
  253|    476|        LOGGER_ERROR(log, "invalid public announce length: %u", length);
  ------------------
  |  |   87|    476|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|    476|    do {                                                                         \
  |  |  |  |   77|    476|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    952|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|    476|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|    476|        }                                                                        \
  |  |  |  |   80|    476|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  254|    476|        return -1;
  255|    476|    }
  256|       |
  257|  2.49k|    if (data == nullptr) {
  ------------------
  |  |   63|  2.49k|#define nullptr NULL
  ------------------
  |  Branch (257:9): [True: 0, False: 2.49k]
  ------------------
  258|      0|        LOGGER_ERROR(log, "data is null");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  259|      0|        return -1;
  260|      0|    }
  261|       |
  262|  2.49k|    if (public_announce == nullptr) {
  ------------------
  |  |   63|  2.49k|#define nullptr NULL
  ------------------
  |  Branch (262:9): [True: 0, False: 2.49k]
  ------------------
  263|      0|        LOGGER_ERROR(log, "public_announce is null");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  264|      0|        return -1;
  265|      0|    }
  266|       |
  267|  2.49k|    memcpy(public_announce->chat_public_key, data, CHAT_ID_SIZE);
  ------------------
  |  |  142|  2.49k|#define CHAT_ID_SIZE                   SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|  2.49k|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|  2.49k|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  268|       |
  269|  2.49k|    const int base_announce_size = gca_unpack_announce(log, data + ENC_PUBLIC_KEY_SIZE, length - ENC_PUBLIC_KEY_SIZE,
  ------------------
  |  |  122|  2.49k|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|  2.49k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
                  const int base_announce_size = gca_unpack_announce(log, data + ENC_PUBLIC_KEY_SIZE, length - ENC_PUBLIC_KEY_SIZE,
  ------------------
  |  |  122|  2.49k|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|  2.49k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  270|  2.49k|                                   &public_announce->base_announce);
  271|       |
  272|  2.49k|    if (base_announce_size == -1) {
  ------------------
  |  Branch (272:9): [True: 1.42k, False: 1.07k]
  ------------------
  273|  1.42k|        LOGGER_ERROR(log, "Failed to unpack group announce");
  ------------------
  |  |   87|  1.42k|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|  1.42k|    do {                                                                         \
  |  |  |  |   77|  1.42k|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  2.85k|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|  1.42k|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|  1.42k|        }                                                                        \
  |  |  |  |   80|  1.42k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  274|  1.42k|        return -1;
  275|  1.42k|    }
  276|       |
  277|  1.07k|    return base_announce_size + CHAT_ID_SIZE;
  ------------------
  |  |  142|  1.07k|#define CHAT_ID_SIZE                   SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|  1.07k|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|  1.07k|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  278|  2.49k|}
gca_pack_announces_list:
  282|     65|{
  283|     65|    if (data == nullptr) {
  ------------------
  |  |   63|     65|#define nullptr NULL
  ------------------
  |  Branch (283:9): [True: 0, False: 65]
  ------------------
  284|      0|        LOGGER_ERROR(log, "data is null");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  285|      0|        return -1;
  286|      0|    }
  287|       |
  288|     65|    if (announces == nullptr) {
  ------------------
  |  |   63|     65|#define nullptr NULL
  ------------------
  |  Branch (288:9): [True: 0, False: 65]
  ------------------
  289|      0|        LOGGER_ERROR(log, "announces is null");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  290|      0|        return -1;
  291|      0|    }
  292|       |
  293|     65|    uint16_t offset = 0;
  294|       |
  295|  1.27k|    for (size_t i = 0; i < announces_count; ++i) {
  ------------------
  |  Branch (295:24): [True: 1.26k, False: 4]
  ------------------
  296|  1.26k|        const int packed_length = gca_pack_announce(log, data + offset, length - offset, &announces[i]);
  297|       |
  298|  1.26k|        if (packed_length < 0) {
  ------------------
  |  Branch (298:13): [True: 61, False: 1.20k]
  ------------------
  299|     61|            LOGGER_ERROR(log, "Failed to pack group announce");
  ------------------
  |  |   87|     61|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     61|    do {                                                                         \
  |  |  |  |   77|     61|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    122|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|     61|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|     61|        }                                                                        \
  |  |  |  |   80|     61|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  300|     61|            return -1;
  301|     61|        }
  302|       |
  303|  1.20k|        offset += packed_length;
  304|  1.20k|    }
  305|       |
  306|      4|    if (processed != nullptr) {
  ------------------
  |  |   63|      4|#define nullptr NULL
  ------------------
  |  Branch (306:9): [True: 4, False: 0]
  ------------------
  307|      4|        *processed = offset;
  308|      4|    }
  309|       |
  310|      4|    return announces_count;
  311|     65|}
gca_unpack_announces_list:
  315|    100|{
  316|    100|    if (data == nullptr) {
  ------------------
  |  |   63|    100|#define nullptr NULL
  ------------------
  |  Branch (316:9): [True: 0, False: 100]
  ------------------
  317|      0|        LOGGER_ERROR(log, "data is null");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  318|      0|        return -1;
  319|      0|    }
  320|       |
  321|    100|    if (announces == nullptr) {
  ------------------
  |  |   63|    100|#define nullptr NULL
  ------------------
  |  Branch (321:9): [True: 0, False: 100]
  ------------------
  322|      0|        LOGGER_ERROR(log, "announces is null");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  323|      0|        return -1;
  324|      0|    }
  325|       |
  326|    100|    uint16_t offset = 0;
  327|    100|    int announces_count = 0;
  328|       |
  329|  1.58k|    for (size_t i = 0; i < max_count && length > offset; ++i) {
  ------------------
  |  Branch (329:24): [True: 1.58k, False: 5]
  |  Branch (329:41): [True: 1.52k, False: 60]
  ------------------
  330|  1.52k|        const int unpacked_length = gca_unpack_announce(log, data + offset, length - offset, &announces[i]);
  331|       |
  332|  1.52k|        if (unpacked_length == -1) {
  ------------------
  |  Branch (332:13): [True: 35, False: 1.48k]
  ------------------
  333|     35|            LOGGER_WARNING(log, "Failed to unpack group announce: %d %d", length, offset);
  ------------------
  |  |   86|     35|#define LOGGER_WARNING(log, ...) LOGGER_WRITE(log, LOGGER_LEVEL_WARNING, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|     35|    do {                                                                         \
  |  |  |  |   77|     35|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     70|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|     35|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|     35|        }                                                                        \
  |  |  |  |   80|     35|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  334|     35|            return -1;
  335|     35|        }
  336|       |
  337|  1.48k|        offset += unpacked_length;
  338|  1.48k|        ++announces_count;
  339|  1.48k|    }
  340|       |
  341|     65|    return announces_count;
  342|    100|}
gca_add_announce:
  372|  1.06k|{
  373|  1.06k|    if (gc_announces_list == nullptr || public_announce == nullptr) {
  ------------------
  |  |   63|  2.12k|#define nullptr NULL
  ------------------
                  if (gc_announces_list == nullptr || public_announce == nullptr) {
  ------------------
  |  |   63|  1.06k|#define nullptr NULL
  ------------------
  |  Branch (373:9): [True: 0, False: 1.06k]
  |  Branch (373:41): [True: 0, False: 1.06k]
  ------------------
  374|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  375|      0|    }
  376|       |
  377|  1.06k|    GC_Announces *announces = get_announces_by_chat_id(gc_announces_list, public_announce->chat_public_key);
  378|       |
  379|       |    // No entry for this chat_id exists so we create one
  380|  1.06k|    if (announces == nullptr) {
  ------------------
  |  |   63|  1.06k|#define nullptr NULL
  ------------------
  |  Branch (380:9): [True: 726, False: 336]
  ------------------
  381|    726|        announces = gca_new_announces(mem, gc_announces_list, public_announce);
  382|       |
  383|    726|        if (announces == nullptr) {
  ------------------
  |  |   63|    726|#define nullptr NULL
  ------------------
  |  Branch (383:13): [True: 0, False: 726]
  ------------------
  384|      0|            return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  385|      0|        }
  386|    726|    }
  387|       |
  388|  1.06k|    const uint64_t cur_time = mono_time_get(mono_time);
  389|       |
  390|  1.06k|    announces->last_announce_received_timestamp = cur_time;
  391|       |
  392|  1.06k|    const uint64_t index = announces->index % GCA_MAX_SAVED_ANNOUNCES_PER_GC;
  ------------------
  |  |   28|  1.06k|#define GCA_MAX_SAVED_ANNOUNCES_PER_GC 16
  ------------------
  393|       |
  394|  1.06k|    GC_Peer_Announce *gc_peer_announce = &announces->peer_announces[index];
  395|       |
  396|  1.06k|    gc_peer_announce->base_announce = public_announce->base_announce;
  397|       |
  398|  1.06k|    gc_peer_announce->timestamp = cur_time;
  399|       |
  400|  1.06k|    ++announces->index;
  401|       |
  402|  1.06k|    return gc_peer_announce;
  403|  1.06k|}
new_gca_list:
  415|    265|{
  416|    265|    GC_Announces_List *announces_list = (GC_Announces_List *)mem_alloc(mem, sizeof(GC_Announces_List));
  417|       |
  418|    265|    if (announces_list == nullptr) {
  ------------------
  |  |   63|    265|#define nullptr NULL
  ------------------
  |  Branch (418:9): [True: 0, False: 265]
  ------------------
  419|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  420|      0|    }
  421|       |
  422|    265|    announces_list->mem = mem;
  423|       |
  424|    265|    return announces_list;
  425|    265|}
kill_gca:
  428|    265|{
  429|    265|    if (announces_list == nullptr) {
  ------------------
  |  |   63|    265|#define nullptr NULL
  ------------------
  |  Branch (429:9): [True: 0, False: 265]
  ------------------
  430|      0|        return;
  431|      0|    }
  432|       |
  433|    265|    GC_Announces *root = announces_list->root_announces;
  434|       |
  435|    520|    while (root != nullptr) {
  ------------------
  |  |   63|    520|#define nullptr NULL
  ------------------
  |  Branch (435:12): [True: 255, False: 265]
  ------------------
  436|    255|        GC_Announces *next = root->next_announce;
  437|    255|        mem_delete(announces_list->mem, root);
  438|    255|        root = next;
  439|    255|    }
  440|       |
  441|    265|    mem_delete(announces_list->mem, announces_list);
  442|    265|}
do_gca:
  451|    477|{
  452|    477|    if (gc_announces_list == nullptr) {
  ------------------
  |  |   63|    477|#define nullptr NULL
  ------------------
  |  Branch (452:9): [True: 0, False: 477]
  ------------------
  453|      0|        return;
  454|      0|    }
  455|       |
  456|    477|    if (!mono_time_is_timeout(mono_time, gc_announces_list->last_timeout_check, GCA_DO_GCA_TIMEOUT)) {
  ------------------
  |  |  448|    477|#define GCA_DO_GCA_TIMEOUT 1
  ------------------
  |  Branch (456:9): [True: 447, False: 30]
  ------------------
  457|    447|        return;
  458|    447|    }
  459|       |
  460|     30|    gc_announces_list->last_timeout_check = mono_time_get(mono_time);
  461|       |
  462|     30|    GC_Announces *announces = gc_announces_list->root_announces;
  463|       |
  464|    108|    while (announces != nullptr) {
  ------------------
  |  |   63|    108|#define nullptr NULL
  ------------------
  |  Branch (464:12): [True: 78, False: 30]
  ------------------
  465|     78|        if (mono_time_is_timeout(mono_time, announces->last_announce_received_timestamp, GCA_ANNOUNCE_SAVE_TIMEOUT)) {
  ------------------
  |  |  445|     78|#define GCA_ANNOUNCE_SAVE_TIMEOUT 30
  ------------------
  |  Branch (465:13): [True: 0, False: 78]
  ------------------
  466|      0|            GC_Announces *to_delete = announces;
  467|      0|            announces = announces->next_announce;
  468|      0|            remove_announces(gc_announces_list, to_delete);
  469|      0|            continue;
  470|      0|        }
  471|       |
  472|     78|        announces = announces->next_announce;
  473|     78|    }
  474|     30|}
cleanup_gca:
  477|    930|{
  478|    930|    if (gc_announces_list == nullptr || chat_id == nullptr) {
  ------------------
  |  |   63|  1.86k|#define nullptr NULL
  ------------------
                  if (gc_announces_list == nullptr || chat_id == nullptr) {
  ------------------
  |  |   63|    930|#define nullptr NULL
  ------------------
  |  Branch (478:9): [True: 0, False: 930]
  |  Branch (478:41): [True: 0, False: 930]
  ------------------
  479|      0|        return;
  480|      0|    }
  481|       |
  482|    930|    GC_Announces *announces = get_announces_by_chat_id(gc_announces_list, chat_id);
  483|       |
  484|    930|    if (announces != nullptr) {
  ------------------
  |  |   63|    930|#define nullptr NULL
  ------------------
  |  Branch (484:9): [True: 471, False: 459]
  ------------------
  485|    471|        remove_announces(gc_announces_list, announces);
  486|    471|    }
  487|    930|}
group_announce.c:get_announces_by_chat_id:
   48|  3.30k|{
   49|  3.30k|    GC_Announces *announces = gc_announces_list->root_announces;
   50|       |
   51|  6.19k|    while (announces != nullptr) {
  ------------------
  |  |   63|  6.19k|#define nullptr NULL
  ------------------
  |  Branch (51:12): [True: 4.20k, False: 1.99k]
  ------------------
   52|  4.20k|        if (memcmp(announces->chat_id, chat_id, CHAT_ID_SIZE) == 0) {
  ------------------
  |  |  142|  4.20k|#define CHAT_ID_SIZE                   SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|  4.20k|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|  4.20k|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (52:13): [True: 1.30k, False: 2.89k]
  ------------------
   53|  1.30k|            return announces;
   54|  1.30k|        }
   55|       |
   56|  2.89k|        announces = announces->next_announce;
   57|  2.89k|    }
   58|       |
   59|  1.99k|    return nullptr;
  ------------------
  |  |   63|  1.99k|#define nullptr NULL
  ------------------
   60|  3.30k|}
group_announce.c:gca_unpack_announce:
  172|  4.01k|{
  173|  4.01k|    if (length < ENC_PUBLIC_KEY_SIZE + 2) {
  ------------------
  |  |  122|  4.01k|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|  4.01k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  |  Branch (173:9): [True: 425, False: 3.59k]
  ------------------
  174|    425|        LOGGER_ERROR(log, "Invalid announce length: %u", length);
  ------------------
  |  |   87|    425|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|    425|    do {                                                                         \
  |  |  |  |   77|    425|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    850|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|    425|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|    425|        }                                                                        \
  |  |  |  |   80|    425|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  175|    425|        return -1;
  176|    425|    }
  177|       |
  178|  3.59k|    if (data == nullptr) {
  ------------------
  |  |   63|  3.59k|#define nullptr NULL
  ------------------
  |  Branch (178:9): [True: 0, False: 3.59k]
  ------------------
  179|      0|        LOGGER_ERROR(log, "data is null");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  180|      0|        return -1;
  181|      0|    }
  182|       |
  183|  3.59k|    if (announce == nullptr) {
  ------------------
  |  |   63|  3.59k|#define nullptr NULL
  ------------------
  |  Branch (183:9): [True: 0, False: 3.59k]
  ------------------
  184|      0|        LOGGER_ERROR(log, "announce is null");
  ------------------
  |  |   87|      0|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  185|      0|        return -1;
  186|      0|    }
  187|       |
  188|  3.59k|    uint16_t offset = 0;
  189|  3.59k|    memcpy(announce->peer_public_key, data + offset, ENC_PUBLIC_KEY_SIZE);
  ------------------
  |  |  122|  3.59k|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|  3.59k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  190|  3.59k|    offset += ENC_PUBLIC_KEY_SIZE;
  ------------------
  |  |  122|  3.59k|#define ENC_PUBLIC_KEY_SIZE            CRYPTO_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |   43|  3.59k|#define CRYPTO_PUBLIC_KEY_SIZE         32
  |  |  ------------------
  ------------------
  191|       |
  192|  3.59k|    net_unpack_bool(&data[offset], &announce->ip_port_is_set);
  193|  3.59k|    ++offset;
  194|       |
  195|  3.59k|    announce->tcp_relays_count = data[offset];
  196|  3.59k|    ++offset;
  197|       |
  198|  3.59k|    if (announce->tcp_relays_count > GCA_MAX_ANNOUNCED_TCP_RELAYS) {
  ------------------
  |  |   31|  3.59k|#define GCA_MAX_ANNOUNCED_TCP_RELAYS 1
  ------------------
  |  Branch (198:9): [True: 66, False: 3.52k]
  ------------------
  199|     66|        return -1;
  200|     66|    }
  201|       |
  202|  3.52k|    if (announce->ip_port_is_set) {
  ------------------
  |  Branch (202:9): [True: 1.67k, False: 1.85k]
  ------------------
  203|  1.67k|        if (length - offset == 0) {
  ------------------
  |  Branch (203:13): [True: 450, False: 1.22k]
  ------------------
  204|    450|            return -1;
  205|    450|        }
  206|       |
  207|  1.22k|        const int ip_port_length = unpack_ip_port(&announce->ip_port, data + offset, length - offset, false);
  208|       |
  209|  1.22k|        if (ip_port_length == -1) {
  ------------------
  |  Branch (209:13): [True: 271, False: 953]
  ------------------
  210|    271|            LOGGER_ERROR(log, "Failed to unpack ip_port");
  ------------------
  |  |   87|    271|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|    271|    do {                                                                         \
  |  |  |  |   77|    271|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    542|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|    271|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|    271|        }                                                                        \
  |  |  |  |   80|    271|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  211|    271|            return -1;
  212|    271|        }
  213|       |
  214|    953|        offset += ip_port_length;
  215|    953|    }
  216|       |
  217|  2.80k|    uint16_t nodes_length;
  218|  2.80k|    const int nodes_count = unpack_nodes(announce->tcp_relays, announce->tcp_relays_count, &nodes_length,
  219|  2.80k|                                         data + offset, length - offset, true);
  220|       |
  221|  2.80k|    if (nodes_count != announce->tcp_relays_count) {
  ------------------
  |  Branch (221:9): [True: 250, False: 2.55k]
  ------------------
  222|    250|        LOGGER_ERROR(log, "Failed to unpack TCP nodes");
  ------------------
  |  |   87|    250|#define LOGGER_ERROR(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_ERROR, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|    250|    do {                                                                         \
  |  |  |  |   77|    250|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    500|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|    250|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|    250|        }                                                                        \
  |  |  |  |   80|    250|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  223|    250|        return -1;
  224|    250|    }
  225|       |
  226|  2.55k|    return offset + nodes_length;
  227|  2.80k|}
group_announce.c:gca_new_announces:
  349|    726|{
  350|    726|    GC_Announces *announces = (GC_Announces *)mem_alloc(mem, sizeof(GC_Announces));
  351|       |
  352|    726|    if (announces == nullptr) {
  ------------------
  |  |   63|    726|#define nullptr NULL
  ------------------
  |  Branch (352:9): [True: 0, False: 726]
  ------------------
  353|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  354|      0|    }
  355|       |
  356|    726|    announces->index = 0;
  357|    726|    announces->prev_announce = nullptr;
  ------------------
  |  |   63|    726|#define nullptr NULL
  ------------------
  358|       |
  359|    726|    if (gc_announces_list->root_announces != nullptr) {
  ------------------
  |  |   63|    726|#define nullptr NULL
  ------------------
  |  Branch (359:9): [True: 444, False: 282]
  ------------------
  360|    444|        gc_announces_list->root_announces->prev_announce = announces;
  361|    444|    }
  362|       |
  363|    726|    announces->next_announce = gc_announces_list->root_announces;
  364|    726|    gc_announces_list->root_announces = announces;
  365|    726|    memcpy(announces->chat_id, public_announce->chat_public_key, CHAT_ID_SIZE);
  ------------------
  |  |  142|    726|#define CHAT_ID_SIZE                   SIG_PUBLIC_KEY_SIZE
  |  |  ------------------
  |  |  |  |  132|    726|#define SIG_PUBLIC_KEY_SIZE            CRYPTO_SIGN_PUBLIC_KEY_SIZE
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|    726|#define CRYPTO_SIGN_PUBLIC_KEY_SIZE    32
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  366|       |
  367|    726|    return announces;
  368|    726|}
group_announce.c:remove_announces:
   24|    471|{
   25|    471|    if (announces == nullptr || gc_announces_list == nullptr) {
  ------------------
  |  |   63|    942|#define nullptr NULL
  ------------------
                  if (announces == nullptr || gc_announces_list == nullptr) {
  ------------------
  |  |   63|    471|#define nullptr NULL
  ------------------
  |  Branch (25:9): [True: 0, False: 471]
  |  Branch (25:33): [True: 0, False: 471]
  ------------------
   26|      0|        return;
   27|      0|    }
   28|       |
   29|    471|    if (announces->prev_announce != nullptr) {
  ------------------
  |  |   63|    471|#define nullptr NULL
  ------------------
  |  Branch (29:9): [True: 150, False: 321]
  ------------------
   30|    150|        announces->prev_announce->next_announce = announces->next_announce;
   31|    321|    } else {
   32|    321|        gc_announces_list->root_announces = announces->next_announce;
   33|    321|    }
   34|       |
   35|    471|    if (announces->next_announce != nullptr) {
  ------------------
  |  |   63|    471|#define nullptr NULL
  ------------------
  |  Branch (35:9): [True: 270, False: 201]
  ------------------
   36|    270|        announces->next_announce->prev_announce = announces->prev_announce;
   37|    270|    }
   38|       |
   39|    471|    mem_delete(gc_announces_list->mem, announces);
   40|    471|}

LLVMFuzzerTestOneInput:
  113|    380|{
  114|    380|    fuzz_select_target<TestUnpackAnnouncesList, TestUnpackPublicAnnounce, TestDoGca>(data, size);
  115|    380|    return 0;
  116|    380|}
group_announce_fuzz_test.cc:_ZN12_GLOBAL__N_123TestUnpackAnnouncesListER9Fuzz_Data:
   14|    102|{
   15|    102|    CONSUME1_OR_RETURN(const uint8_t, max_count, input);
  ------------------
  |  |  105|    102|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 1, False: 101]
  |  |  ------------------
  |  |  106|      1|        return;                               \
  |  |  107|      1|    }                                         \
  |  |  108|    102|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   16|       |    // Always allocate at least something to avoid passing nullptr to functions below.
   17|    101|    std::vector<GC_Announce> announces(max_count + 1);
   18|       |
   19|       |    // TODO(iphydf): How do we know the packed size?
   20|    101|    CONSUME1_OR_RETURN(const uint16_t, packed_size, input);
  ------------------
  |  |  105|    101|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 1, False: 100]
  |  |  ------------------
  |  |  106|      1|        return;                               \
  |  |  107|      1|    }                                         \
  |  |  108|    101|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   21|       |
   22|    100|    Test_Memory mem;
   23|    100|    Logger *logger = logger_new(mem);
   24|    100|    if (gca_unpack_announces_list(logger, input.data(), input.size(), announces.data(), max_count)
  ------------------
  |  Branch (24:9): [True: 65, False: 35]
  ------------------
   25|    100|        != -1) {
   26|       |        // Always allocate at least something to avoid passing nullptr to functions below.
   27|     65|        std::vector<uint8_t> packed(packed_size + 1);
   28|     65|        size_t processed;
   29|     65|        gca_pack_announces_list(
   30|     65|            logger, packed.data(), packed_size, announces.data(), max_count, &processed);
   31|     65|    }
   32|    100|    logger_kill(logger);
   33|    100|}
group_announce_fuzz_test.cc:_ZN12_GLOBAL__N_124TestUnpackPublicAnnounceER9Fuzz_Data:
   36|     12|{
   37|     12|    GC_Public_Announce public_announce;
   38|       |
   39|       |    // TODO(iphydf): How do we know the packed size?
   40|     12|    CONSUME1_OR_RETURN(const uint16_t, packed_size, input);
  ------------------
  |  |  105|     12|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 1, False: 11]
  |  |  ------------------
  |  |  106|      1|        return;                               \
  |  |  107|      1|    }                                         \
  |  |  108|     12|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   41|       |
   42|     11|    Test_Memory mem;
   43|     11|    Logger *logger = logger_new(mem);
   44|     11|    if (gca_unpack_public_announce(logger, input.data(), input.size(), &public_announce) != -1) {
  ------------------
  |  Branch (44:9): [True: 9, False: 2]
  ------------------
   45|       |        // Always allocate at least something to avoid passing nullptr to functions below.
   46|      9|        std::vector<uint8_t> packed(packed_size + 1);
   47|      9|        gca_pack_public_announce(logger, packed.data(), packed_size, &public_announce);
   48|      9|    }
   49|     11|    logger_kill(logger);
   50|     11|}
group_announce_fuzz_test.cc:_ZN12_GLOBAL__N_19TestDoGcaER9Fuzz_Data:
   53|    265|{
   54|    265|    Test_Memory mem;
   55|    265|    std::unique_ptr<Logger, void (*)(Logger *)> logger(logger_new(mem), logger_kill);
   56|       |
   57|    265|    uint64_t clock = 1;
   58|    265|    std::unique_ptr<Mono_Time, std::function<void(Mono_Time *)>> mono_time(
   59|    265|        mono_time_new(
   60|    265|            mem, [](void *user_data) { return *static_cast<uint64_t *>(user_data); }, &clock),
   61|    265|        [mem](Mono_Time *ptr) { mono_time_free(mem, ptr); });
   62|    265|    assert(mono_time != nullptr);
   63|    265|    std::unique_ptr<GC_Announces_List, void (*)(GC_Announces_List *)> gca(
   64|    265|        new_gca_list(mem), kill_gca);
   65|    265|    assert(gca != nullptr);
   66|       |
   67|  7.76k|    while (!input.empty()) {
  ------------------
  |  Branch (67:12): [True: 7.53k, False: 229]
  ------------------
   68|  7.53k|        CONSUME1_OR_RETURN(const uint8_t, choice, input);
  ------------------
  |  |  105|  7.53k|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 0, False: 7.53k]
  |  |  ------------------
  |  |  106|      0|        return;                               \
  |  |  107|      0|    }                                         \
  |  |  108|  7.53k|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   69|  7.53k|        switch (choice) {
  ------------------
  |  Branch (69:17): [True: 1.72k, False: 5.81k]
  ------------------
   70|  2.98k|        case 0: {
  ------------------
  |  Branch (70:9): [True: 2.98k, False: 4.55k]
  ------------------
   71|       |            // Add an announce.
   72|  2.98k|            CONSUME1_OR_RETURN(const uint16_t, length, input);
  ------------------
  |  |  105|  2.98k|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 14, False: 2.96k]
  |  |  ------------------
  |  |  106|     14|        return;                               \
  |  |  107|     14|    }                                         \
  |  |  108|  2.98k|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   73|  2.96k|            CONSUME_OR_RETURN(const uint8_t *data, input, length);
  ------------------
  |  |  139|  2.96k|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 3, False: 2.96k]
  |  |  ------------------
  |  |  140|      3|        return;                              \
  |  |  141|      3|    }                                        \
  |  |  142|  2.96k|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   74|  2.96k|            GC_Public_Announce public_announce;
   75|  2.96k|            if (gca_unpack_public_announce(logger.get(), data, length, &public_announce) != -1) {
  ------------------
  |  Branch (75:17): [True: 1.06k, False: 1.90k]
  ------------------
   76|  1.06k|                gca_add_announce(mem, mono_time.get(), gca.get(), &public_announce);
   77|  1.06k|            }
   78|  2.96k|            break;
   79|  2.96k|        }
   80|    478|        case 1: {
  ------------------
  |  Branch (80:9): [True: 478, False: 7.06k]
  ------------------
   81|       |            // Advance the time by a number of tox_iteration_intervals.
   82|    478|            CONSUME1_OR_RETURN(const uint8_t, iterations, input);
  ------------------
  |  |  105|    478|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 1, False: 477]
  |  |  ------------------
  |  |  106|      1|        return;                               \
  |  |  107|      1|    }                                         \
  |  |  108|    478|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   83|    477|            clock += iterations * 20;
   84|       |            // Do an iteration.
   85|    477|            do_gca(mono_time.get(), gca.get());
   86|    477|            break;
   87|    478|        }
   88|  1.42k|        case 2: {
  ------------------
  |  Branch (88:9): [True: 1.42k, False: 6.11k]
  ------------------
   89|       |            // Get announces.
   90|  1.42k|            CONSUME1_OR_RETURN(const uint8_t, max_nodes, input);
  ------------------
  |  |  105|  1.42k|    if (INPUT.size() < sizeof(TYPE)) {        \
  |  |  ------------------
  |  |  |  Branch (105:9): [True: 2, False: 1.41k]
  |  |  ------------------
  |  |  106|      2|        return;                               \
  |  |  107|      2|    }                                         \
  |  |  108|  1.42k|    TYPE NAME = INPUT.consume1(__func__)
  ------------------
   91|       |            // Always allocate at least something to avoid passing nullptr to functions below.
   92|  1.41k|            std::vector<GC_Announce> gc_announces(max_nodes + 1);
   93|  1.41k|            CONSUME_OR_RETURN(const uint8_t *chat_id, input, CHAT_ID_SIZE);
  ------------------
  |  |  139|  1.41k|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 7, False: 1.41k]
  |  |  ------------------
  |  |  140|      7|        return;                              \
  |  |  141|      7|    }                                        \
  |  |  142|  1.41k|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   94|  1.41k|            CONSUME_OR_RETURN(const uint8_t *except_public_key, input, ENC_PUBLIC_KEY_SIZE);
  ------------------
  |  |  139|  1.41k|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 1, False: 1.41k]
  |  |  ------------------
  |  |  140|      1|        return;                              \
  |  |  141|      1|    }                                        \
  |  |  142|  1.41k|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
   95|  1.41k|            gca_get_announces(
   96|  1.41k|                gca.get(), gc_announces.data(), max_nodes, chat_id, except_public_key);
   97|  1.41k|            break;
   98|  1.41k|        }
   99|    938|        case 3: {
  ------------------
  |  Branch (99:9): [True: 938, False: 6.60k]
  ------------------
  100|       |            // Remove a chat.
  101|    938|            CONSUME_OR_RETURN(const uint8_t *chat_id, input, CHAT_ID_SIZE);
  ------------------
  |  |  139|    938|    if (INPUT.size() < SIZE) {               \
  |  |  ------------------
  |  |  |  Branch (139:9): [True: 8, False: 930]
  |  |  ------------------
  |  |  140|      8|        return;                              \
  |  |  141|      8|    }                                        \
  |  |  142|    938|    DECL = INPUT.consume(__func__, SIZE)
  ------------------
  102|    930|            cleanup_gca(gca.get(), chat_id);
  103|    930|            break;
  104|    938|        }
  105|  7.53k|        }
  106|  7.53k|    }
  107|    265|}
group_announce_fuzz_test.cc:_ZZN12_GLOBAL__N_19TestDoGcaER9Fuzz_DataENK3$_1clEPv:
   60|    265|            mem, [](void *user_data) { return *static_cast<uint64_t *>(user_data); }, &clock),
group_announce_fuzz_test.cc:_ZZN12_GLOBAL__N_19TestDoGcaER9Fuzz_DataENK3$_0clEP9Mono_Time:
   61|    265|        [mem](Mono_Time *ptr) { mono_time_free(mem, ptr); });

logger_new:
   33|    376|{
   34|    376|    Logger *log = (Logger *)mem_alloc(mem, sizeof(Logger));
   35|       |
   36|    376|    if (log == nullptr) {
  ------------------
  |  |   63|    376|#define nullptr NULL
  ------------------
  |  Branch (36:9): [True: 0, False: 376]
  ------------------
   37|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
   38|      0|    }
   39|       |
   40|    376|    log->mem = mem;
   41|       |
   42|    376|    return log;
   43|    376|}
logger_kill:
   46|    376|{
   47|    376|    if (log == nullptr) {
  ------------------
  |  |   63|    376|#define nullptr NULL
  ------------------
  |  Branch (47:9): [True: 0, False: 376]
  ------------------
   48|      0|        return;
   49|      0|    }
   50|       |
   51|    376|    mem_delete(log->mem, log);
   52|    376|}
logger_write:
   64|  3.01k|{
   65|  3.01k|    if (log == nullptr) {
  ------------------
  |  |   63|  3.01k|#define nullptr NULL
  ------------------
  |  Branch (65:9): [True: 0, False: 3.01k]
  ------------------
   66|      0|        return;
   67|      0|    }
   68|       |
   69|  3.01k|    if (log->callback == nullptr) {
  ------------------
  |  |   63|  3.01k|#define nullptr NULL
  ------------------
  |  Branch (69:9): [True: 3.01k, False: 0]
  ------------------
   70|  3.01k|        return;
   71|  3.01k|    }
   72|       |
   73|       |    // Only pass the file name, not the entire file path, for privacy reasons.
   74|       |    // The full path may contain PII of the person compiling toxcore (their
   75|       |    // username and directory layout).
   76|      0|    const char *filename = strrchr(file, '/');
   77|      0|    file = filename != nullptr ? filename + 1 : file;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  |  Branch (77:12): [True: 0, False: 0]
  ------------------
   78|       |#if defined(_WIN32) || defined(__CYGWIN__)
   79|       |    // On Windows, the path separator *may* be a backslash, so we look for that
   80|       |    // one too.
   81|       |    const char *windows_filename = strrchr(file, '\\');
   82|       |    file = windows_filename != nullptr ? windows_filename + 1 : file;
   83|       |#endif /* WIN32 */
   84|       |
   85|       |    // Format message
   86|      0|    char msg[1024];
   87|      0|    va_list args;
   88|      0|    va_start(args, format);
   89|      0|    vsnprintf(msg, sizeof(msg), format, args);
   90|      0|    va_end(args);
   91|       |
   92|      0|    log->callback(log->context, level, file, line, func, msg, log->userdata);
   93|      0|}

os_memory:
   46|    376|{
   47|    376|    return &os_memory_obj;
   48|    376|}
mem_alloc:
   63|  1.89k|{
   64|  1.89k|    void *const ptr = mem->funcs->calloc(mem->obj, 1, size);
   65|  1.89k|    return ptr;
   66|  1.89k|}
mem_delete:
   93|  1.89k|{
   94|  1.89k|    mem->funcs->free(mem->obj, ptr);
   95|  1.89k|}
mem.c:sys_calloc:
   21|  1.89k|{
   22|  1.89k|    return calloc(nmemb, size);
   23|  1.89k|}
mem.c:sys_free:
   33|  1.89k|{
   34|  1.89k|    free(ptr);
   35|  1.89k|}

_ZN12Memory_ClassD2Ev:
   15|    906|Memory_Class::~Memory_Class() = default;
_ZN11Test_Memory6callocEPvjj:
   20|  1.89k|{
   21|  1.89k|    return mem->funcs->calloc(mem->obj, nmemb, size);
   22|  1.89k|}
_ZN11Test_Memory4freeEPvS0_:
   29|  1.89k|void Test_Memory::free(void *obj, void *ptr) { return mem->funcs->free(mem->obj, ptr); }

_ZN12Memory_ClassC2Ev:
   15|    376|        : self{&vtable, this}
   16|    376|    {
   17|    376|    }
_ZNK12Memory_ClasscvPK6MemoryEv:
   11|  2.23k|    operator Memory const *() const { return &self; }
_ZN12Memory_ClassC2ERKS_:
   13|    530|    Memory_Class(Memory_Class const &) = default;

mono_time_new:
  114|    265|{
  115|    265|    Mono_Time *mono_time = (Mono_Time *)mem_alloc(mem, sizeof(Mono_Time));
  116|       |
  117|    265|    if (mono_time == nullptr) {
  ------------------
  |  |   63|    265|#define nullptr NULL
  ------------------
  |  Branch (117:9): [True: 0, False: 265]
  ------------------
  118|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  119|      0|    }
  120|       |
  121|    265|#ifndef ESP_PLATFORM
  122|    265|    pthread_rwlock_t *rwlock = (pthread_rwlock_t *)mem_alloc(mem, sizeof(pthread_rwlock_t));
  123|       |
  124|    265|    if (rwlock == nullptr) {
  ------------------
  |  |   63|    265|#define nullptr NULL
  ------------------
  |  Branch (124:9): [True: 0, False: 265]
  ------------------
  125|      0|        mem_delete(mem, mono_time);
  126|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  127|      0|    }
  128|       |
  129|    265|    if (pthread_rwlock_init(rwlock, nullptr) != 0) {
  ------------------
  |  |   63|    265|#define nullptr NULL
  ------------------
  |  Branch (129:9): [True: 0, False: 265]
  ------------------
  130|      0|        mem_delete(mem, rwlock);
  131|      0|        mem_delete(mem, mono_time);
  132|      0|        return nullptr;
  ------------------
  |  |   63|      0|#define nullptr NULL
  ------------------
  133|      0|    }
  134|       |
  135|    265|    mono_time->time_update_lock = rwlock;
  136|    265|#endif /* ESP_PLATFORM */
  137|       |
  138|    265|    mono_time_set_current_time_callback(mono_time, current_time_callback, user_data);
  139|       |
  140|    265|    mono_time->cur_time = 0;
  141|    265|#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
  142|       |    // Maximum reproducibility. Never return time = 0.
  143|    265|    mono_time->base_time = 1000000000;
  144|       |#else
  145|       |    // Never return time = 0 in case time() returns 0 (e.g. on microcontrollers
  146|       |    // without battery-powered RTC or ones where NTP didn't initialise it yet).
  147|       |    mono_time->base_time = max_u64(1, (uint64_t)time(nullptr)) * UINT64_C(1000) - current_time_monotonic(mono_time);
  148|       |#endif /* FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION */
  149|       |
  150|    265|    mono_time_update(mono_time);
  151|       |
  152|    265|    return mono_time;
  153|    265|}
mono_time_free:
  156|    265|{
  157|    265|    if (mono_time == nullptr) {
  ------------------
  |  |   63|    265|#define nullptr NULL
  ------------------
  |  Branch (157:9): [True: 0, False: 265]
  ------------------
  158|      0|        return;
  159|      0|    }
  160|    265|#ifndef ESP_PLATFORM
  161|    265|    pthread_rwlock_destroy(mono_time->time_update_lock);
  162|    265|    mem_delete(mem, mono_time->time_update_lock);
  163|    265|#endif /* ESP_PLATFORM */
  164|    265|    mem_delete(mem, mono_time);
  165|    265|}
mono_time_update:
  168|    265|{
  169|    265|    const uint64_t cur_time =
  170|    265|        mono_time->base_time + mono_time->current_time_callback(mono_time->user_data);
  171|       |
  172|    265|#ifndef ESP_PLATFORM
  173|    265|    pthread_rwlock_wrlock(mono_time->time_update_lock);
  174|    265|#endif /* ESP_PLATFORM */
  175|    265|    mono_time->cur_time = cur_time;
  176|    265|#ifndef ESP_PLATFORM
  177|    265|    pthread_rwlock_unlock(mono_time->time_update_lock);
  178|    265|#endif /* ESP_PLATFORM */
  179|    265|}
mono_time_get_ms:
  182|  1.64k|{
  183|       |#if !defined(ESP_PLATFORM) && !defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  184|       |    // Fuzzing is only single thread for now, no locking needed */
  185|       |    pthread_rwlock_rdlock(mono_time->time_update_lock);
  186|       |#endif /* !ESP_PLATFORM */
  187|  1.64k|    const uint64_t cur_time = mono_time->cur_time;
  188|       |#if !defined(ESP_PLATFORM) && !defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
  189|       |    pthread_rwlock_unlock(mono_time->time_update_lock);
  190|       |#endif /* !ESP_PLATFORM */
  191|  1.64k|    return cur_time;
  192|  1.64k|}
mono_time_get:
  195|  1.64k|{
  196|  1.64k|    return mono_time_get_ms(mono_time) / UINT64_C(1000);
  197|  1.64k|}
mono_time_is_timeout:
  200|    555|{
  201|    555|    return timestamp + timeout <= mono_time_get(mono_time);
  202|    555|}
mono_time_set_current_time_callback:
  206|    265|{
  207|    265|    if (current_time_callback == nullptr) {
  ------------------
  |  |   63|    265|#define nullptr NULL
  ------------------
  |  Branch (207:9): [True: 0, False: 265]
  ------------------
  208|      0|        mono_time->current_time_callback = current_time_monotonic_default;
  209|      0|        mono_time->user_data = mono_time;
  210|    265|    } else {
  211|    265|        mono_time->current_time_callback = current_time_callback;
  212|    265|        mono_time->user_data = user_data;
  213|    265|    }
  214|    265|}

net_family_ipv4:
  396|    638|{
  397|    638|    return family_ipv4;
  398|    638|}
net_family_ipv6:
  401|    883|{
  402|    883|    return family_ipv6;
  403|    883|}
net_family_tcp_ipv4:
  416|    322|{
  417|    322|    return family_tcp_ipv4;
  418|    322|}
net_family_tcp_ipv6:
  421|    327|{
  422|    327|    return family_tcp_ipv6;
  423|    327|}
net_family_is_ipv4:
  441|  3.51k|{
  442|  3.51k|    return family.value == family_ipv4.value;
  443|  3.51k|}
net_family_is_ipv6:
  446|  2.11k|{
  447|  2.11k|    return family.value == family_ipv6.value;
  448|  2.11k|}
net_family_is_tcp_ipv4:
  461|  2.59k|{
  462|  2.59k|    return family.value == family_tcp_ipv4.value;
  463|  2.59k|}
net_family_is_tcp_ipv6:
  466|    622|{
  467|    622|    return family.value == family_tcp_ipv6.value;
  468|    622|}
ipport_reset:
 1642|  2.17k|{
 1643|  2.17k|    if (ipport == nullptr) {
  ------------------
  |  |   63|  2.17k|#define nullptr NULL
  ------------------
  |  Branch (1643:9): [True: 0, False: 2.17k]
  ------------------
 1644|      0|        return;
 1645|      0|    }
 1646|       |
 1647|  2.17k|    *ipport = empty_ip_port;
 1648|  2.17k|}
bin_pack_ip_port:
 1736|  3.51k|{
 1737|  3.51k|    bool is_ipv4;
 1738|  3.51k|    uint8_t family;
 1739|       |
 1740|  3.51k|    if (net_family_is_ipv4(ip_port->ip.family)) {
  ------------------
  |  Branch (1740:9): [True: 916, False: 2.59k]
  ------------------
 1741|       |        // TODO(irungentoo): use functions to convert endianness
 1742|    916|        is_ipv4 = true;
 1743|    916|        family = TOX_AF_INET;
  ------------------
  |  |  168|    916|#define TOX_AF_INET 2
  ------------------
 1744|  2.59k|    } else if (net_family_is_tcp_ipv4(ip_port->ip.family)) {
  ------------------
  |  Branch (1744:16): [True: 488, False: 2.11k]
  ------------------
 1745|    488|        is_ipv4 = true;
 1746|    488|        family = TOX_TCP_INET;
  ------------------
  |  |  170|    488|#define TOX_TCP_INET 130
  ------------------
 1747|  2.11k|    } else if (net_family_is_ipv6(ip_port->ip.family)) {
  ------------------
  |  Branch (1747:16): [True: 1.48k, False: 622]
  ------------------
 1748|  1.48k|        is_ipv4 = false;
 1749|  1.48k|        family = TOX_AF_INET6;
  ------------------
  |  |  169|  1.48k|#define TOX_AF_INET6 10
  ------------------
 1750|  1.48k|    } else if (net_family_is_tcp_ipv6(ip_port->ip.family)) {
  ------------------
  |  Branch (1750:16): [True: 622, False: 0]
  ------------------
 1751|    622|        is_ipv4 = false;
 1752|    622|        family = TOX_TCP_INET6;
  ------------------
  |  |  171|    622|#define TOX_TCP_INET6 138
  ------------------
 1753|    622|    } else {
 1754|      0|        Ip_Ntoa ip_str;
 1755|       |        // TODO(iphydf): Find out why we're trying to pack invalid IPs, stop
 1756|       |        // doing that, and turn this into an error.
 1757|      0|        LOGGER_TRACE(logger, "cannot pack invalid IP: %s", net_ip_ntoa(&ip_port->ip, &ip_str));
  ------------------
  |  |   83|      0|#define LOGGER_TRACE(log, ...)   LOGGER_WRITE(log, LOGGER_LEVEL_TRACE, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   76|      0|    do {                                                                         \
  |  |  |  |   77|      0|        if (level >= MIN_LOGGER_LEVEL) {                                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define MIN_LOGGER_LEVEL LOGGER_LEVEL_INFO
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:13): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   78|      0|            logger_write(log, level, __FILE__, __LINE__, __func__, __VA_ARGS__); \
  |  |  |  |   79|      0|        }                                                                        \
  |  |  |  |   80|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:14): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1758|      0|        return false;
 1759|      0|    }
 1760|       |
 1761|  3.51k|    return bin_pack_u08_b(bp, family)
  ------------------
  |  Branch (1761:12): [True: 3.51k, False: 0]
  ------------------
 1762|  3.51k|           && bin_pack_ip(bp, &ip_port->ip, is_ipv4)
  ------------------
  |  Branch (1762:15): [True: 3.51k, False: 0]
  ------------------
 1763|  3.51k|           && bin_pack_u16_b(bp, net_ntohs(ip_port->port));
  ------------------
  |  Branch (1763:15): [True: 3.51k, False: 0]
  ------------------
 1764|  3.51k|}
pack_ip_port:
 1774|    810|{
 1775|    810|    const uint32_t size = bin_pack_obj_size(bin_pack_ip_port_handler, ip_port, logger);
 1776|       |
 1777|    810|    if (size > length) {
  ------------------
  |  Branch (1777:9): [True: 0, False: 810]
  ------------------
 1778|      0|        return -1;
 1779|      0|    }
 1780|       |
 1781|    810|    if (!bin_pack_obj(bin_pack_ip_port_handler, ip_port, logger, data, length)) {
  ------------------
  |  Branch (1781:9): [True: 0, False: 810]
  ------------------
 1782|      0|        return -1;
 1783|      0|    }
 1784|       |
 1785|    810|    assert(size < INT_MAX);
 1786|    810|    return (int)size;
 1787|    810|}
unpack_ip_port:
 1790|  2.37k|{
 1791|  2.37k|    if (data == nullptr) {
  ------------------
  |  |   63|  2.37k|#define nullptr NULL
  ------------------
  |  Branch (1791:9): [True: 0, False: 2.37k]
  ------------------
 1792|      0|        return -1;
 1793|      0|    }
 1794|       |
 1795|  2.37k|    bool is_ipv4;
 1796|  2.37k|    Family host_family;
 1797|       |
 1798|  2.37k|    if (data[0] == TOX_AF_INET) {
  ------------------
  |  |  168|  2.37k|#define TOX_AF_INET 2
  ------------------
  |  Branch (1798:9): [True: 638, False: 1.73k]
  ------------------
 1799|    638|        is_ipv4 = true;
 1800|    638|        host_family = net_family_ipv4();
 1801|  1.73k|    } else if (data[0] == TOX_TCP_INET) {
  ------------------
  |  |  170|  1.73k|#define TOX_TCP_INET 130
  ------------------
  |  Branch (1801:16): [True: 388, False: 1.35k]
  ------------------
 1802|    388|        if (!tcp_enabled) {
  ------------------
  |  Branch (1802:13): [True: 66, False: 322]
  ------------------
 1803|     66|            return -1;
 1804|     66|        }
 1805|       |
 1806|    322|        is_ipv4 = true;
 1807|    322|        host_family = net_family_tcp_ipv4();
 1808|  1.35k|    } else if (data[0] == TOX_AF_INET6) {
  ------------------
  |  |  169|  1.35k|#define TOX_AF_INET6 10
  ------------------
  |  Branch (1808:16): [True: 883, False: 468]
  ------------------
 1809|    883|        is_ipv4 = false;
 1810|    883|        host_family = net_family_ipv6();
 1811|    883|    } else if (data[0] == TOX_TCP_INET6) {
  ------------------
  |  |  171|    468|#define TOX_TCP_INET6 138
  ------------------
  |  Branch (1811:16): [True: 393, False: 75]
  ------------------
 1812|    393|        if (!tcp_enabled) {
  ------------------
  |  Branch (1812:13): [True: 66, False: 327]
  ------------------
 1813|     66|            return -1;
 1814|     66|        }
 1815|       |
 1816|    327|        is_ipv4 = false;
 1817|    327|        host_family = net_family_tcp_ipv6();
 1818|    327|    } else {
 1819|     75|        return -1;
 1820|     75|    }
 1821|       |
 1822|  2.17k|    ipport_reset(ip_port);
 1823|       |
 1824|  2.17k|    if (is_ipv4) {
  ------------------
  |  Branch (1824:9): [True: 960, False: 1.21k]
  ------------------
 1825|    960|        const uint32_t size = 1 + SIZE_IP4 + sizeof(uint16_t);
  ------------------
  |  |  185|    960|#define SIZE_IP4 4
  ------------------
 1826|       |
 1827|    960|        if (size > length) {
  ------------------
  |  Branch (1827:13): [True: 72, False: 888]
  ------------------
 1828|     72|            return -1;
 1829|     72|        }
 1830|       |
 1831|    888|        ip_port->ip.family = host_family;
 1832|    888|        memcpy(ip_port->ip.ip.v4.uint8, data + 1, SIZE_IP4);
  ------------------
  |  |  185|    888|#define SIZE_IP4 4
  ------------------
 1833|    888|        memcpy(&ip_port->port, data + 1 + SIZE_IP4, sizeof(uint16_t));
  ------------------
  |  |  185|    888|#define SIZE_IP4 4
  ------------------
 1834|    888|        return size;
 1835|  1.21k|    } else {
 1836|  1.21k|        const uint32_t size = 1 + SIZE_IP6 + sizeof(uint16_t);
  ------------------
  |  |  186|  1.21k|#define SIZE_IP6 16
  ------------------
 1837|       |
 1838|  1.21k|        if (size > length) {
  ------------------
  |  Branch (1838:13): [True: 73, False: 1.13k]
  ------------------
 1839|     73|            return -1;
 1840|     73|        }
 1841|       |
 1842|  1.13k|        ip_port->ip.family = host_family;
 1843|  1.13k|        memcpy(ip_port->ip.ip.v6.uint8, data + 1, SIZE_IP6);
  ------------------
  |  |  186|  1.13k|#define SIZE_IP6 16
  ------------------
 1844|  1.13k|        memcpy(&ip_port->port, data + 1 + SIZE_IP6, sizeof(uint16_t));
  ------------------
  |  |  186|  1.13k|#define SIZE_IP6 16
  ------------------
 1845|  1.13k|        return size;
 1846|  1.21k|    }
 1847|  2.17k|}
net_ntohs:
 2285|  3.51k|{
 2286|  3.51k|    return ntohs(hostshort);
 2287|  3.51k|}
net_unpack_bool:
 2319|  3.59k|{
 2320|  3.59k|    *v = bytes[0] != 0;
 2321|  3.59k|    return 1;
 2322|  3.59k|}
network.c:bin_pack_ip:
 1723|  3.51k|{
 1724|  3.51k|    if (is_ipv4) {
  ------------------
  |  Branch (1724:9): [True: 1.40k, False: 2.11k]
  ------------------
 1725|  1.40k|        return bin_pack_bin_b(bp, ip->ip.v4.uint8, SIZE_IP4);
  ------------------
  |  |  185|  1.40k|#define SIZE_IP4 4
  ------------------
 1726|  2.11k|    } else {
 1727|  2.11k|        return bin_pack_bin_b(bp, ip->ip.v6.uint8, SIZE_IP6);
  ------------------
  |  |  186|  2.11k|#define SIZE_IP6 16
  ------------------
 1728|  2.11k|    }
 1729|  3.51k|}
network.c:bin_pack_ip_port_handler:
 1768|  1.62k|{
 1769|  1.62k|    const IP_Port *ip_port = (const IP_Port *)obj;
 1770|  1.62k|    return bin_pack_ip_port(bp, logger, ip_port);
 1771|  1.62k|}

_Z16require_not_nullIK6MemoryEPT_PKciS3_:
   73|    376|{
   74|    376|    if (ptr == nullptr) {
  ------------------
  |  Branch (74:9): [True: 0, False: 376]
  ------------------
   75|      0|        std::fprintf(stderr, "unexpected null pointer at %s:%d\n", file, line);
   76|      0|        std::exit(7);
   77|      0|    }
   78|    376|    return ptr;
   79|    376|}
_ZN6MethodIFPvS0_jjE12Memory_ClassE6invokeIXadL_ZNS2_6callocES0_jjEEEES0_S0_jj:
   31|  1.89k|    {
   32|  1.89k|        return (static_cast<Class *>(self)->*M)(self, args...);
   33|  1.89k|    }
_ZN6MethodIFvPvS0_E12Memory_ClassE6invokeIXadL_ZNS2_4freeES0_S0_EEEEvS0_S0_:
   31|  1.89k|    {
   32|  1.89k|        return (static_cast<Class *>(self)->*M)(self, args...);
   33|  1.89k|    }

